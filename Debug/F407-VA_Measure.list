
F407-VA_Measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dc4  08009d20  08009d20  00019d20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eae4  0800eae4  000210e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eae4  0800eae4  0001eae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eaec  0800eaec  000210e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eaec  0800eaec  0001eaec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010e8  20000000  0800eaf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000210e8  2**0
                  CONTENTS
 10 .bss          000004a8  20001100  20001100  00021100  2**5
                  ALLOC
 11 ._user_heap_stack 00001800  200015a8  200015a8  00021100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000210e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193af  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8c  00000000  00000000  0003a4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00012285  00000000  00000000  0003e153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb0  00000000  00000000  000503d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001978  00000000  00000000  00051088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002591f  00000000  00000000  00052a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ccb9  00000000  00000000  0007831f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3fc4  00000000  00000000  00094fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00178f9c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003e40  00000000  00000000  00178fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  0017ce2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  0017cef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001100 	.word	0x20001100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d08 	.word	0x08009d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001104 	.word	0x20001104
 80001cc:	08009d08 	.word	0x08009d08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eb0:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	481d      	ldr	r0, [pc, #116]	; (8000f28 <MX_ADC1_Init+0x78>)
 8000eb4:	491d      	ldr	r1, [pc, #116]	; (8000f2c <MX_ADC1_Init+0x7c>)
 8000eb6:	6001      	str	r1, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb8:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	2300      	movs	r3, #0
{
 8000ebc:	b085      	sub	sp, #20
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec2:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000ec4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ec6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	6142      	str	r2, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_ADC1_Init+0x80>)
  hadc1.Init.ScanConvMode = DISABLE;
 8000ece:	6103      	str	r3, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed0:	e9cd 3300 	strd	r3, r3, [sp]
 8000ed4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed8:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee8:	f000 fc82 	bl	80017f0 <HAL_ADC_Init>
 8000eec:	b968      	cbnz	r0, 8000f0a <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000f20 <MX_ADC1_Init+0x70>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ef2:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ef6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8000efa:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efe:	f000 fd25 	bl	800194c <HAL_ADC_ConfigChannel>
 8000f02:	b928      	cbnz	r0, 8000f10 <MX_ADC1_Init+0x60>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f04:	b005      	add	sp, #20
 8000f06:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f0a:	f000 faa1 	bl	8001450 <Error_Handler>
 8000f0e:	e7ee      	b.n	8000eee <MX_ADC1_Init+0x3e>
    Error_Handler();
 8000f10:	f000 fa9e 	bl	8001450 <Error_Handler>
}
 8000f14:	b005      	add	sp, #20
 8000f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000002 	.word	0x00000002
 8000f24:	00000001 	.word	0x00000001
 8000f28:	20001120 	.word	0x20001120
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f34:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_ADC_MspInit+0x94>)
 8000f38:	6802      	ldr	r2, [r0, #0]
{
 8000f3a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000f3e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f44:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f48:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f4c:	b008      	add	sp, #32
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f50:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000f54:	9400      	str	r4, [sp, #0]
 8000f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000f58:	4e1c      	ldr	r6, [pc, #112]	; (8000fcc <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f62:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f66:	9200      	str	r2, [sp, #0]
 8000f68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	9401      	str	r4, [sp, #4]
 8000f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	2303      	movs	r3, #3
 8000f80:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	a902      	add	r1, sp, #8
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f000 ffa0 	bl	8001ed0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f92:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f98:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fac:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fb0:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb4:	f000 fe04 	bl	8001bc0 <HAL_DMA_Init>
 8000fb8:	b918      	cbnz	r0, 8000fc2 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fba:	63ae      	str	r6, [r5, #56]	; 0x38
 8000fbc:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8000fbe:	b008      	add	sp, #32
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000fc2:	f000 fa45 	bl	8001450 <Error_Handler>
 8000fc6:	e7f8      	b.n	8000fba <HAL_ADC_MspInit+0x86>
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	20001168 	.word	0x20001168
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40026410 	.word	0x40026410

08000fd8 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_CRC_Init+0x18>)
{
 8000fda:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_CRC_Init+0x1c>)
 8000fde:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe0:	f000 fdda 	bl	8001b98 <HAL_CRC_Init>
 8000fe4:	b900      	cbnz	r0, 8000fe8 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fe6:	bd08      	pop	{r3, pc}
 8000fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fec:	f000 ba30 	b.w	8001450 <Error_Handler>
 8000ff0:	200011c8 	.word	0x200011c8
 8000ff4:	40023000 	.word	0x40023000

08000ff8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_CRC_MspInit+0x30>)
 8000ffa:	6802      	ldr	r2, [r0, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d000      	beq.n	8001002 <HAL_CRC_MspInit+0xa>
 8001000:	4770      	bx	lr
{
 8001002:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001004:	2200      	movs	r2, #0
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800100c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001010:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8001014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001022:	b002      	add	sp, #8
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023000 	.word	0x40023000

0800102c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800102c:	b500      	push	{lr}
 800102e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001030:	2200      	movs	r2, #0
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_DMA_Init+0x30>)
 8001034:	9201      	str	r2, [sp, #4]
 8001036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001038:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800103c:	6319      	str	r1, [r3, #48]	; 0x30
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001044:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001046:	2038      	movs	r0, #56	; 0x38
 8001048:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 800104a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800104c:	f000 fd3e 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001050:	2038      	movs	r0, #56	; 0x38

}
 8001052:	b003      	add	sp, #12
 8001054:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001058:	f000 bd76 	b.w	8001b48 <HAL_NVIC_EnableIRQ>
 800105c:	40023800 	.word	0x40023800

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	2400      	movs	r4, #0
{
 8001064:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800106a:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_GPIO_Init+0x84>)
 8001070:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001076:	4d1c      	ldr	r5, [pc, #112]	; (80010e8 <MX_GPIO_Init+0x88>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001078:	4e1c      	ldr	r6, [pc, #112]	; (80010ec <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
 8001080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001082:	f002 0201 	and.w	r2, r2, #1
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	9401      	str	r4, [sp, #4]
 800108c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108e:	f042 0204 	orr.w	r2, r2, #4
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800109c:	4622      	mov	r2, r4
 800109e:	4628      	mov	r0, r5
 80010a0:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80010a4:	f001 f834 	bl	8002110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010a8:	4622      	mov	r2, r4
 80010aa:	4630      	mov	r0, r6
 80010ac:	2120      	movs	r1, #32
 80010ae:	f001 f82f 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80010b2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80010b4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED0_Pin;
 80010b6:	2202      	movs	r2, #2
 80010b8:	2301      	movs	r3, #1
 80010ba:	2500      	movs	r5, #0
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80010bc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = LED0_Pin;
 80010be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010c2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f000 ff03 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010ca:	2220      	movs	r2, #32
 80010cc:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	a902      	add	r1, sp, #8
 80010d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_Pin;
 80010d2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80010d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f000 fef9 	bl	8001ed0 <HAL_GPIO_Init>

}
 80010de:	b008      	add	sp, #32
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020800 	.word	0x40020800

080010f0 <aiInit>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*
 * Bootstrap
 */
int aiInit(void) {
 80010f0:	b510      	push	{r4, lr}
 80010f2:	b082      	sub	sp, #8
    ai_error err;

    /* Create and initialize the c-model */
    const ai_handle acts[] = { activations };
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <aiInit+0x44>)
    err = ai_network_create_and_init(&network, acts, NULL);
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <aiInit+0x48>)
    const ai_handle acts[] = { activations };
 80010f8:	9301      	str	r3, [sp, #4]
    err = ai_network_create_and_init(&network, acts, NULL);
 80010fa:	2200      	movs	r2, #0
 80010fc:	a901      	add	r1, sp, #4
 80010fe:	f001 ff7d 	bl	8002ffc <ai_network_create_and_init>
    if (err.type != AI_ERROR_NONE) {
 8001102:	b2c0      	uxtb	r0, r0
 8001104:	b988      	cbnz	r0, 800112a <aiInit+0x3a>
        printf("Error INIT AI Network!\r\n");
    };

    /* Reteive pointers to the model's input/output tensors */
    ai_input = ai_network_inputs_get(network, NULL);
 8001106:	4c0c      	ldr	r4, [pc, #48]	; (8001138 <aiInit+0x48>)
 8001108:	2100      	movs	r1, #0
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	f001 feb4 	bl	8002e78 <ai_network_inputs_get>
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <aiInit+0x4c>)
 8001112:	4602      	mov	r2, r0
    ai_output = ai_network_outputs_get(network, NULL);
 8001114:	2100      	movs	r1, #0
 8001116:	6820      	ldr	r0, [r4, #0]
    ai_input = ai_network_inputs_get(network, NULL);
 8001118:	601a      	str	r2, [r3, #0]
    ai_output = ai_network_outputs_get(network, NULL);
 800111a:	f001 feb9 	bl	8002e90 <ai_network_outputs_get>
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <aiInit+0x50>)
 8001120:	4602      	mov	r2, r0

    return 0;
}
 8001122:	2000      	movs	r0, #0
    ai_output = ai_network_outputs_get(network, NULL);
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	b002      	add	sp, #8
 8001128:	bd10      	pop	{r4, pc}
        printf("Error INIT AI Network!\r\n");
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <aiInit+0x54>)
 800112c:	f004 fade 	bl	80056ec <puts>
 8001130:	e7e9      	b.n	8001106 <aiInit+0x16>
 8001132:	bf00      	nop
 8001134:	200011e0 	.word	0x200011e0
 8001138:	20001408 	.word	0x20001408
 800113c:	200013e0 	.word	0x200013e0
 8001140:	200013e4 	.word	0x200013e4
 8001144:	08009d30 	.word	0x08009d30

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	2300      	movs	r3, #0
{
 800114c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001152:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001156:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800115a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4926      	ldr	r1, [pc, #152]	; (80011f8 <SystemClock_Config+0xb0>)
 8001160:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800116e:	6408      	str	r0, [r1, #64]	; 0x40
 8001170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001172:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001176:	9100      	str	r1, [sp, #0]
 8001178:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118a:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2002      	movs	r0, #2
 8001194:	2100      	movs	r1, #0
 8001196:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800119a:	2008      	movs	r0, #8
 800119c:	21a8      	movs	r1, #168	; 0xa8
 800119e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80011a2:	2002      	movs	r0, #2
 80011a4:	2107      	movs	r1, #7
 80011a6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011aa:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f000 ffba 	bl	800212c <HAL_RCC_OscConfig>
 80011b8:	b108      	cbz	r0, 80011be <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80011bc:	e7fe      	b.n	80011bc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80011f0 <SystemClock_Config+0xa8>
 80011c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c6:	2200      	movs	r2, #0
 80011c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011cc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011da:	f001 f9bf 	bl	800255c <HAL_RCC_ClockConfig>
 80011de:	b108      	cbz	r0, 80011e4 <SystemClock_Config+0x9c>
 80011e0:	b672      	cpsid	i
    while (1) {
 80011e2:	e7fe      	b.n	80011e2 <SystemClock_Config+0x9a>
}
 80011e4:	b015      	add	sp, #84	; 0x54
 80011e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	0000000f 	.word	0x0000000f
 80011f4:	00000002 	.word	0x00000002
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <main>:
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001204:	ed2d 8b04 	vpush	{d8-d9}
 8001208:	b0cb      	sub	sp, #300	; 0x12c
  HAL_Init();
 800120a:	f000 fab3 	bl	8001774 <HAL_Init>
  SystemClock_Config();
 800120e:	f7ff ff9b 	bl	8001148 <SystemClock_Config>
  MX_GPIO_Init();
 8001212:	f7ff ff25 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f7ff ff09 	bl	800102c <MX_DMA_Init>
  MX_ADC1_Init();
 800121a:	f7ff fe49 	bl	8000eb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800121e:	f000 fa03 	bl	8001628 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001222:	f000 f9a5 	bl	8001570 <MX_TIM3_Init>
  MX_RNG_Init();
 8001226:	f000 f915 	bl	8001454 <MX_RNG_Init>
  MX_CRC_Init();
 800122a:	f7ff fed5 	bl	8000fd8 <MX_CRC_Init>
  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 800122e:	2102      	movs	r1, #2
 8001230:	4873      	ldr	r0, [pc, #460]	; (8001400 <main+0x200>)
    return min + (randomNumber / (float)UINT32_MAX) * (max - min);
 8001232:	ed9f 8a74 	vldr	s16, [pc, #464]	; 8001404 <main+0x204>
 8001236:	eddf 9a74 	vldr	s19, [pc, #464]	; 8001408 <main+0x208>
 800123a:	ed9f 9a74 	vldr	s18, [pc, #464]	; 800140c <main+0x20c>
 800123e:	eddf 8a74 	vldr	s17, [pc, #464]	; 8001410 <main+0x210>
 8001242:	4e74      	ldr	r6, [pc, #464]	; (8001414 <main+0x214>)
 8001244:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8001440 <main+0x240>
 8001248:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8001444 <main+0x244>
 800124c:	4d72      	ldr	r5, [pc, #456]	; (8001418 <main+0x218>)
 800124e:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8001448 <main+0x248>
 8001252:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800144c <main+0x24c>
    HAL_RNG_GenerateRandomNumber(&hrng,&randomNumber);
 8001256:	4f71      	ldr	r7, [pc, #452]	; (800141c <main+0x21c>)
  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8001258:	f000 ff5e 	bl	8002118 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 800125c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001260:	f000 fab4 	bl	80017cc <HAL_Delay>
  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8001264:	2102      	movs	r1, #2
 8001266:	4866      	ldr	r0, [pc, #408]	; (8001400 <main+0x200>)
 8001268:	f000 ff56 	bl	8002118 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f000 faac 	bl	80017cc <HAL_Delay>
  sprintf(buffer,"Hello World\r\n");
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <main+0x220>)
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	ac0a      	add	r4, sp, #40	; 0x28
 800127a:	c407      	stmia	r4!, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer), HAL_MAX_DELAY);
 800127c:	a80a      	add	r0, sp, #40	; 0x28
  sprintf(buffer,"Hello World\r\n");
 800127e:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer), HAL_MAX_DELAY);
 8001280:	f7fe ffa6 	bl	80001d0 <strlen>
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001288:	b282      	uxth	r2, r0
 800128a:	a90a      	add	r1, sp, #40	; 0x28
 800128c:	4865      	ldr	r0, [pc, #404]	; (8001424 <main+0x224>)
 800128e:	f001 fd43 	bl	8002d18 <HAL_UART_Transmit>
  aiInit();
 8001292:	ac06      	add	r4, sp, #24
 8001294:	f7ff ff2c 	bl	80010f0 <aiInit>
 8001298:	e039      	b.n	800130e <main+0x10e>
	    if (input_data[i] > maxValue) {
 800129a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	f100 8093 	bmi.w	80013cc <main+0x1cc>
 80012a6:	edd5 7a04 	vldr	s15, [r5, #16]
 80012aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	f300 8086 	bgt.w	80013c2 <main+0x1c2>
    	sprintf(namaGangguan,"Undervoltage");
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <main+0x228>)
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	46a4      	mov	ip, r4
 80012bc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80012c0:	f88c 3000 	strb.w	r3, [ip]
    sprintf(buffer,"Invoked (%.2f,%.2f) = %s\r\n",in_data[0],in_data[1],namaGangguan);
 80012c4:	6830      	ldr	r0, [r6, #0]
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	6870      	ldr	r0, [r6, #4]
 80012d0:	9402      	str	r4, [sp, #8]
 80012d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012d6:	f7ff f937 	bl	8000548 <__aeabi_f2d>
 80012da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80012de:	e9cd 0100 	strd	r0, r1, [sp]
 80012e2:	4952      	ldr	r1, [pc, #328]	; (800142c <main+0x22c>)
 80012e4:	a80a      	add	r0, sp, #40	; 0x28
 80012e6:	f004 fbbd 	bl	8005a64 <sprintf>
    HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 80012ea:	2102      	movs	r1, #2
 80012ec:	4844      	ldr	r0, [pc, #272]	; (8001400 <main+0x200>)
 80012ee:	f000 ff13 	bl	8002118 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)&buffer, strlen(buffer), HAL_MAX_DELAY);
 80012f2:	a80a      	add	r0, sp, #40	; 0x28
 80012f4:	f7fe ff6c 	bl	80001d0 <strlen>
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fc:	b282      	uxth	r2, r0
 80012fe:	a90a      	add	r1, sp, #40	; 0x28
 8001300:	4848      	ldr	r0, [pc, #288]	; (8001424 <main+0x224>)
 8001302:	f001 fd09 	bl	8002d18 <HAL_UART_Transmit>
    HAL_Delay(500);
 8001306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130a:	f000 fa5f 	bl	80017cc <HAL_Delay>
    HAL_RNG_GenerateRandomNumber(&hrng,&randomNumber);
 800130e:	4621      	mov	r1, r4
 8001310:	4638      	mov	r0, r7
 8001312:	f001 f9fb 	bl	800270c <HAL_RNG_GenerateRandomNumber>
    return min + (randomNumber / (float)UINT32_MAX) * (max - min);
 8001316:	edd4 7a00 	vldr	s15, [r4]
 800131a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131e:	eeb0 7a49 	vmov.f32	s14, s18
 8001322:	ee67 7a88 	vmul.f32	s15, s15, s16
    HAL_RNG_GenerateRandomNumber(&hrng,&randomNumber);
 8001326:	4621      	mov	r1, r4
    return min + (randomNumber / (float)UINT32_MAX) * (max - min);
 8001328:	eea7 7aa9 	vfma.f32	s14, s15, s19
    HAL_RNG_GenerateRandomNumber(&hrng,&randomNumber);
 800132c:	4638      	mov	r0, r7
    in_data[0] = RandomNumber(0,120);
 800132e:	ed86 7a00 	vstr	s14, [r6]
    HAL_RNG_GenerateRandomNumber(&hrng,&randomNumber);
 8001332:	f001 f9eb 	bl	800270c <HAL_RNG_GenerateRandomNumber>
    return min + (randomNumber / (float)UINT32_MAX) * (max - min);
 8001336:	edd4 7a00 	vldr	s15, [r4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800133a:	f8db 1000 	ldr.w	r1, [fp]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800133e:	f8da 2000 	ldr.w	r2, [sl]
    n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001342:	f8d9 0000 	ldr.w	r0, [r9]
    return min + (randomNumber / (float)UINT32_MAX) * (max - min);
 8001346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800134e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001352:	eea7 7aa8 	vfma.f32	s14, s15, s17
    in_data[1] = RandomNumber(22,418);
 8001356:	ed86 7a01 	vstr	s14, [r6, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800135a:	604e      	str	r6, [r1, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800135c:	6055      	str	r5, [r2, #4]
    n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800135e:	f001 fea5 	bl	80030ac <ai_network_run>
    if (n_batch != 1) {
 8001362:	2801      	cmp	r0, #1
 8001364:	d140      	bne.n	80013e8 <main+0x1e8>
	ai_float maxValue = input_data[0];
 8001366:	edd5 7a00 	vldr	s15, [r5]
	    if (input_data[i] > maxValue) {
 800136a:	ed95 7a01 	vldr	s14, [r5, #4]
 800136e:	edd5 6a03 	vldr	s13, [r5, #12]
 8001372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	bf48      	it	mi
 800137c:	eef0 7a47 	vmovmi.f32	s15, s14
 8001380:	ed95 7a02 	vldr	s14, [r5, #8]
 8001384:	eef4 7ac7 	vcmpe.f32	s15, s14
	for (int i = 1; i < len; i++) {
 8001388:	bf4c      	ite	mi
 800138a:	2301      	movmi	r3, #1
	int maxIndex = 0;
 800138c:	2300      	movpl	r3, #0
	    if (input_data[i] > maxValue) {
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d482      	bmi.n	800129a <main+0x9a>
 8001394:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	d416      	bmi.n	80013cc <main+0x1cc>
 800139e:	ed95 7a04 	vldr	s14, [r5, #16]
 80013a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d40a      	bmi.n	80013c2 <main+0x1c2>
    switch(gangguan){
 80013ac:	bb23      	cbnz	r3, 80013f8 <main+0x1f8>
    	sprintf(namaGangguan,"Normal");
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <main+0x230>)
 80013b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013b4:	6020      	str	r0, [r4, #0]
 80013b6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80013ba:	0c09      	lsrs	r1, r1, #16
 80013bc:	f88d 101e 	strb.w	r1, [sp, #30]
    	break;
 80013c0:	e780      	b.n	80012c4 <main+0xc4>
    	sprintf(namaGangguan,"Overvoltage");
 80013c2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80013c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	break;
 80013ca:	e77b      	b.n	80012c4 <main+0xc4>
	    if (input_data[i] > maxValue) {
 80013cc:	edd5 7a04 	vldr	s15, [r5, #16]
 80013d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dcf3      	bgt.n	80013c2 <main+0x1c2>
    	sprintf(namaGangguan,"Swell");
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <main+0x234>)
 80013dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013e0:	6020      	str	r0, [r4, #0]
 80013e2:	f8ad 101c 	strh.w	r1, [sp, #28]
    	break;
 80013e6:	e76d      	b.n	80012c4 <main+0xc4>
        err = ai_network_get_error(network);
 80013e8:	f8d9 0000 	ldr.w	r0, [r9]
 80013ec:	f001 fd42 	bl	8002e74 <ai_network_get_error>
        printf("Error Invoking Network!!\r\n");
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <main+0x238>)
 80013f2:	f004 f97b 	bl	80056ec <puts>
        return 1;
 80013f6:	e7b6      	b.n	8001366 <main+0x166>
    	sprintf(namaGangguan,"Sag");
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <main+0x23c>)
 80013fa:	6023      	str	r3, [r4, #0]
    	break;
 80013fc:	e762      	b.n	80012c4 <main+0xc4>
 80013fe:	bf00      	nop
 8001400:	40020000 	.word	0x40020000
 8001404:	2f800000 	.word	0x2f800000
 8001408:	42f00000 	.word	0x42f00000
 800140c:	00000000 	.word	0x00000000
 8001410:	43c60000 	.word	0x43c60000
 8001414:	20001400 	.word	0x20001400
 8001418:	20001420 	.word	0x20001420
 800141c:	20001434 	.word	0x20001434
 8001420:	08009d64 	.word	0x08009d64
 8001424:	20001490 	.word	0x20001490
 8001428:	08009d90 	.word	0x08009d90
 800142c:	08009da0 	.word	0x08009da0
 8001430:	08009d88 	.word	0x08009d88
 8001434:	08009d74 	.word	0x08009d74
 8001438:	08009d48 	.word	0x08009d48
 800143c:	00676153 	.word	0x00676153
 8001440:	200013e0 	.word	0x200013e0
 8001444:	200013e4 	.word	0x200013e4
 8001448:	20001408 	.word	0x20001408
 800144c:	08009d7c 	.word	0x08009d7c

08001450 <Error_Handler>:
 8001450:	b672      	cpsid	i
    while (1) {
 8001452:	e7fe      	b.n	8001452 <Error_Handler+0x2>

08001454 <MX_RNG_Init>:
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_RNG_Init+0x18>)
{
 8001456:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <MX_RNG_Init+0x1c>)
 800145a:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800145c:	f001 f93c 	bl	80026d8 <HAL_RNG_Init>
 8001460:	b900      	cbnz	r0, 8001464 <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001462:	bd08      	pop	{r3, pc}
 8001464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001468:	f7ff bff2 	b.w	8001450 <Error_Handler>
 800146c:	20001434 	.word	0x20001434
 8001470:	50060800 	.word	0x50060800

08001474 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RNG_MspInit+0x28>)
 8001476:	6802      	ldr	r2, [r0, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d000      	beq.n	800147e <HAL_RNG_MspInit+0xa>
 800147c:	4770      	bx	lr
{
 800147e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_RNG_MspInit+0x2c>)
 8001482:	2200      	movs	r2, #0
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
 800148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001498:	b002      	add	sp, #8
 800149a:	4770      	bx	lr
 800149c:	50060800 	.word	0x50060800
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x34>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	9100      	str	r1, [sp, #0]
 80014ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
 80014b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	9101      	str	r1, [sp, #4]
 80014c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	b002      	add	sp, #8
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler>
 80014de:	bf00      	nop

080014e0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <HardFault_Handler>
 80014e2:	bf00      	nop

080014e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler>
 80014e6:	bf00      	nop

080014e8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <BusFault_Handler>
 80014ea:	bf00      	nop

080014ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler>
 80014ee:	bf00      	nop

080014f0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <DebugMon_Handler>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <PendSV_Handler>:
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 b954 	b.w	80017a8 <HAL_IncTick>

08001500 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <TIM3_IRQHandler+0x8>)
 8001502:	f001 ba81 	b.w	8002a08 <HAL_TIM_IRQHandler>
 8001506:	bf00      	nop
 8001508:	20001448 	.word	0x20001448

0800150c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <DMA2_Stream0_IRQHandler+0x8>)
 800150e:	f000 bbef 	b.w	8001cf0 <HAL_DMA_IRQHandler>
 8001512:	bf00      	nop
 8001514:	20001168 	.word	0x20001168

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151a:	4c0c      	ldr	r4, [pc, #48]	; (800154c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <_sbrk+0x38>)
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001520:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001522:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001524:	b12a      	cbz	r2, 8001532 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001526:	4410      	add	r0, r2
 8001528:	4288      	cmp	r0, r1
 800152a:	d807      	bhi.n	800153c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800152c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800152e:	4610      	mov	r0, r2
 8001530:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <_sbrk+0x40>)
 8001534:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4410      	add	r0, r2
 8001538:	4288      	cmp	r0, r1
 800153a:	d9f7      	bls.n	800152c <_sbrk+0x14>
    errno = ENOMEM;
 800153c:	f003 fe08 	bl	8005150 <__errno>
 8001540:	230c      	movs	r3, #12
    return (void *)-1;
 8001542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001546:	6003      	str	r3, [r0, #0]
}
 8001548:	4610      	mov	r0, r2
 800154a:	bd10      	pop	{r4, pc}
 800154c:	20001444 	.word	0x20001444
 8001550:	2001c000 	.word	0x2001c000
 8001554:	00001000 	.word	0x00001000
 8001558:	200015a8 	.word	0x200015a8

0800155c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <SystemInit+0x10>)
 800155e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001566:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001570:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001572:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_TIM3_Init+0x70>)
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <MX_TIM3_Init+0x74>)
 8001576:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 167;
 8001578:	22a7      	movs	r2, #167	; 0xa7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 167;
 800157c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 399;
 800157e:	f240 128f 	movw	r2, #399	; 0x18f
{
 8001582:	b087      	sub	sp, #28
  htim3.Init.Period = 399;
 8001584:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001588:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800158e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001598:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800159a:	f001 f8ed 	bl	8002778 <HAL_TIM_Base_Init>
 800159e:	b998      	cbnz	r0, 80015c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a8:	a902      	add	r1, sp, #8
 80015aa:	f001 f973 	bl	8002894 <HAL_TIM_ConfigClockSource>
 80015ae:	b998      	cbnz	r0, 80015d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015b0:	2220      	movs	r2, #32
 80015b2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <MX_TIM3_Init+0x70>)
 80015b6:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015bc:	f001 face 	bl	8002b5c <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	b928      	cbnz	r0, 80015ce <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c2:	b007      	add	sp, #28
 80015c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015c8:	f7ff ff42 	bl	8001450 <Error_Handler>
 80015cc:	e7e8      	b.n	80015a0 <MX_TIM3_Init+0x30>
    Error_Handler();
 80015ce:	f7ff ff3f 	bl	8001450 <Error_Handler>
}
 80015d2:	b007      	add	sp, #28
 80015d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015d8:	f7ff ff3a 	bl	8001450 <Error_Handler>
 80015dc:	e7e8      	b.n	80015b0 <MX_TIM3_Init+0x40>
 80015de:	bf00      	nop
 80015e0:	20001448 	.word	0x20001448
 80015e4:	40000400 	.word	0x40000400

080015e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_TIM_Base_MspInit+0x3c>)
 80015ea:	6802      	ldr	r2, [r0, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d000      	beq.n	80015f2 <HAL_TIM_Base_MspInit+0xa>
 80015f0:	4770      	bx	lr
{
 80015f2:	b500      	push	{lr}
 80015f4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f6:	2200      	movs	r2, #0
 80015f8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001600:	f041 0102 	orr.w	r1, r1, #2
 8001604:	6419      	str	r1, [r3, #64]	; 0x40
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800160e:	201d      	movs	r0, #29
 8001610:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001612:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001614:	f000 fa5a 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001618:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800161a:	b003      	add	sp, #12
 800161c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001620:	f000 ba92 	b.w	8001b48 <HAL_NVIC_EnableIRQ>
 8001624:	40000400 	.word	0x40000400

08001628 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001628:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_USART1_UART_Init+0x30>)
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 230400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 230400;
 8001630:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 230400;
 8001636:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001642:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001646:	f001 facd 	bl	8002be4 <HAL_UART_Init>
 800164a:	b900      	cbnz	r0, 800164e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164c:	bd10      	pop	{r4, pc}
 800164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001652:	f7ff befd 	b.w	8001450 <Error_Handler>
 8001656:	bf00      	nop
 8001658:	20001490 	.word	0x20001490
 800165c:	40011000 	.word	0x40011000

08001660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001660:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_UART_MspInit+0x70>)
 8001664:	6801      	ldr	r1, [r0, #0]
{
 8001666:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART1)
 800166a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001670:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001674:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001678:	b008      	add	sp, #32
 800167a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800167c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001684:	f040 0010 	orr.w	r0, r0, #16
 8001688:	6450      	str	r0, [r2, #68]	; 0x44
 800168a:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800168c:	f000 0010 	and.w	r0, r0, #16
 8001690:	9000      	str	r0, [sp, #0]
 8001692:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016a2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80016c8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ae:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f000 fc08 	bl	8001ed0 <HAL_GPIO_Init>
}
 80016c0:	b008      	add	sp, #32
 80016c2:	bd10      	pop	{r4, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	00000600 	.word	0x00000600
 80016cc:	00000002 	.word	0x00000002
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40020000 	.word	0x40020000

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001702:	f7ff ff2b 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 fd29 	bl	800515c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fd79 	bl	8001200 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	200010e8 	.word	0x200010e8
  ldr r2, =_sidata
 800171c:	0800eaf8 	.word	0x0800eaf8
  ldr r2, =_sbss
 8001720:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8001724:	200015a8 	.word	0x200015a8

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_InitTick+0x3c>)
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_InitTick+0x40>)
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
{
 8001736:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001740:	fbb3 f0f0 	udiv	r0, r3, r0
 8001744:	f000 fa0e 	bl	8001b64 <HAL_SYSTICK_Config>
 8001748:	b908      	cbnz	r0, 800174e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	2d0f      	cmp	r5, #15
 800174c:	d901      	bls.n	8001752 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	4602      	mov	r2, r0
 8001756:	4629      	mov	r1, r5
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	f000 f9b6 	bl	8001acc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_InitTick+0x44>)
 8001762:	4620      	mov	r0, r4
 8001764:	601d      	str	r5, [r3, #0]
}
 8001766:	bd38      	pop	{r3, r4, r5, pc}
 8001768:	20000004 	.word	0x20000004
 800176c:	20000000 	.word	0x20000000
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_Init>:
{
 8001774:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x30>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001786:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800178e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f989 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f7ff ffc8 	bl	800172c <HAL_InitTick>
  HAL_MspInit();
 800179c:	f7ff fe82 	bl	80014a4 <HAL_MspInit>
}
 80017a0:	2000      	movs	r0, #0
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <HAL_IncTick+0x10>)
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_IncTick+0x14>)
 80017ac:	6811      	ldr	r1, [r2, #0]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	440b      	add	r3, r1
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200014d4 	.word	0x200014d4
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <HAL_GetTick+0x8>)
 80017c2:	6818      	ldr	r0, [r3, #0]
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200014d4 	.word	0x200014d4

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fff6 	bl	80017c0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80017d6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80017d8:	d002      	beq.n	80017e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_Delay+0x20>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	1b43      	subs	r3, r0, r5
 80017e6:	42a3      	cmp	r3, r4
 80017e8:	d3fa      	bcc.n	80017e0 <HAL_Delay+0x14>
  {
  }
}
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	f000 809f 	beq.w	8001934 <HAL_ADC_Init+0x144>
{
 80017f6:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017f8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80017fa:	4604      	mov	r4, r0
 80017fc:	b13d      	cbz	r5, 800180e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001800:	06db      	lsls	r3, r3, #27
 8001802:	d50c      	bpl.n	800181e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001804:	2300      	movs	r3, #0
 8001806:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 800180a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 800180c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800180e:	f7ff fb91 	bl	8000f34 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001812:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001814:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001816:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181a:	06db      	lsls	r3, r3, #27
 800181c:	d4f2      	bmi.n	8001804 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001820:	4a48      	ldr	r2, [pc, #288]	; (8001944 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001826:	f023 0302 	bic.w	r3, r3, #2
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001830:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001832:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001834:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001838:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800183a:	6851      	ldr	r1, [r2, #4]
 800183c:	6860      	ldr	r0, [r4, #4]
 800183e:	4301      	orrs	r1, r0
 8001840:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001842:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001844:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001846:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800184c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8001854:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 800185c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4302      	orrs	r2, r0
 8001862:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001864:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001866:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001868:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800186c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800186e:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001870:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001872:	4302      	orrs	r2, r0
 8001874:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_ADC_Init+0x158>)
 8001878:	4291      	cmp	r1, r2
 800187a:	d052      	beq.n	8001922 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187c:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8001884:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4311      	orrs	r1, r2
 800188a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001892:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	432a      	orrs	r2, r5
 8001898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	f022 0202 	bic.w	r2, r2, #2
 80018a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	7e21      	ldrb	r1, [r4, #24]
 80018a6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80018aa:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ac:	f894 2020 	ldrb.w	r2, [r4, #32]
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d041      	beq.n	8001938 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018b4:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018b8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80018bc:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018be:	6858      	ldr	r0, [r3, #4]
 80018c0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80018c4:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018c6:	1e51      	subs	r1, r2, #1
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018ce:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018d2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d4:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	3901      	subs	r1, #1
 80018e0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80018ec:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80018f4:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80018f8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001900:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001902:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001906:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800190a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800190c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001910:	f023 0303 	bic.w	r3, r3, #3
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800191a:	2300      	movs	r3, #0
 800191c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	e7b2      	b.n	800189a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	e7c6      	b.n	80018d0 <HAL_ADC_Init+0xe0>
 8001942:	bf00      	nop
 8001944:	40012300 	.word	0x40012300
 8001948:	0f000001 	.word	0x0f000001

0800194c <HAL_ADC_ConfigChannel>:
{
 800194c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800194e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001952:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001954:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001956:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001958:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800195a:	f000 809c 	beq.w	8001a96 <HAL_ADC_ConfigChannel+0x14a>
 800195e:	2301      	movs	r3, #1
 8001960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001964:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001966:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001968:	2c09      	cmp	r4, #9
 800196a:	d82d      	bhi.n	80019c8 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800196c:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800196e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001970:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8001974:	f04f 0c07 	mov.w	ip, #7
 8001978:	fa0c fc0e 	lsl.w	ip, ip, lr
 800197c:	ea25 050c 	bic.w	r5, r5, ip
 8001980:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001982:	691d      	ldr	r5, [r3, #16]
 8001984:	fa02 f20e 	lsl.w	r2, r2, lr
 8001988:	432a      	orrs	r2, r5
 800198a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800198c:	684a      	ldr	r2, [r1, #4]
 800198e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001990:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8001992:	d82f      	bhi.n	80019f4 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001994:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199a:	3a05      	subs	r2, #5
 800199c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019a0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019a4:	fa0e f202 	lsl.w	r2, lr, r2
 80019a8:	ea21 0202 	bic.w	r2, r1, r2
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b0:	ea4c 0202 	orr.w	r2, ip, r2
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019b6:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_ADC_ConfigChannel+0x150>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d030      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80019bc:	2300      	movs	r3, #0
 80019be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80019c2:	4618      	mov	r0, r3
}
 80019c4:	b003      	add	sp, #12
 80019c6:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c8:	fa1f fc84 	uxth.w	ip, r4
 80019cc:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80019d0:	68dd      	ldr	r5, [r3, #12]
 80019d2:	f1a2 0e1e 	sub.w	lr, r2, #30
 80019d6:	2207      	movs	r2, #7
 80019d8:	fa02 f20e 	lsl.w	r2, r2, lr
 80019dc:	ea25 0202 	bic.w	r2, r5, r2
 80019e0:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019e2:	688a      	ldr	r2, [r1, #8]
 80019e4:	68dd      	ldr	r5, [r3, #12]
 80019e6:	fa02 f20e 	lsl.w	r2, r2, lr
 80019ea:	432a      	orrs	r2, r5
 80019ec:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80019ee:	684a      	ldr	r2, [r1, #4]
 80019f0:	2a06      	cmp	r2, #6
 80019f2:	d9cf      	bls.n	8001994 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 80019f4:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 80019fa:	d836      	bhi.n	8001a6a <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019fe:	3a23      	subs	r2, #35	; 0x23
 8001a00:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a02:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a06:	fa05 f202 	lsl.w	r2, r5, r2
 8001a0a:	ea21 0202 	bic.w	r2, r1, r2
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a12:	ea4c 0202 	orr.w	r2, ip, r2
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a18:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <HAL_ADC_ConfigChannel+0x150>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d1ce      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x70>
 8001a1e:	2c12      	cmp	r4, #18
 8001a20:	d032      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a22:	f1a4 0310 	sub.w	r3, r4, #16
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d8c8      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_ADC_ConfigChannel+0x154>)
 8001a2c:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2e:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a34:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a36:	d1c1      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_ADC_ConfigChannel+0x158>)
 8001a3a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001a44:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0af      	beq.n	80019bc <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001a62:	9b01      	ldr	r3, [sp, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x110>
 8001a68:	e7a8      	b.n	80019bc <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6c:	3a41      	subs	r2, #65	; 0x41
 8001a6e:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a70:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a74:	fa05 f202 	lsl.w	r2, r5, r2
 8001a78:	ea21 0202 	bic.w	r2, r1, r2
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	ea4c 0202 	orr.w	r2, ip, r2
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a86:	e796      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a88:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a94:	e792      	b.n	80019bc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001a96:	2002      	movs	r0, #2
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aaa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ac2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_NVIC_SetPriority+0x74>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad6:	f1c3 0e07 	rsb	lr, r3, #7
 8001ada:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae2:	bf28      	it	cs
 8001ae4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae8:	f1bc 0f06 	cmp.w	ip, #6
 8001aec:	d91b      	bls.n	8001b26 <HAL_NVIC_SetPriority+0x5a>
 8001aee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001af4:	fa0c fc03 	lsl.w	ip, ip, r3
 8001af8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001b00:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001b04:	ea21 010c 	bic.w	r1, r1, ip
 8001b08:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001b10:	db0c      	blt.n	8001b2c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b16:	0109      	lsls	r1, r1, #4
 8001b18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b1c:	b2c9      	uxtb	r1, r1
 8001b1e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b26:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b28:	4613      	mov	r3, r2
 8001b2a:	e7e7      	b.n	8001afc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_NVIC_SetPriority+0x78>)
 8001b2e:	f000 000f 	and.w	r0, r0, #15
 8001b32:	0109      	lsls	r1, r1, #4
 8001b34:	4403      	add	r3, r0
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	7619      	strb	r1, [r3, #24]
 8001b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	e000ecfc 	.word	0xe000ecfc

08001b48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	db08      	blt.n	8001b5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4c:	0941      	lsrs	r1, r0, #5
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_NVIC_EnableIRQ+0x18>)
 8001b50:	f000 001f 	and.w	r0, r0, #31
 8001b54:	2301      	movs	r3, #1
 8001b56:	fa03 f000 	lsl.w	r0, r3, r0
 8001b5a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	3801      	subs	r0, #1
 8001b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b6a:	d210      	bcs.n	8001b8e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	4c08      	ldr	r4, [pc, #32]	; (8001b94 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001b7a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b80:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b82:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001b86:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	6119      	str	r1, [r3, #16]
 8001b8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2001      	movs	r0, #1
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b98:	b180      	cbz	r0, 8001bbc <HAL_CRC_Init+0x24>
{
 8001b9a:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b9c:	7943      	ldrb	r3, [r0, #5]
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ba4:	b11b      	cbz	r3, 8001bae <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001baa:	2000      	movs	r0, #0
}
 8001bac:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001bae:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001bb0:	f7ff fa22 	bl	8000ff8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
}
 8001bba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff fdfc 	bl	80017c0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bc8:	2c00      	cmp	r4, #0
 8001bca:	d052      	beq.n	8001c72 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bcc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001bce:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001bd6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	4605      	mov	r5, r0
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fdeb 	bl	80017c0 <HAL_GetTick>
 8001bea:	1b43      	subs	r3, r0, r5
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d839      	bhi.n	8001c64 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	07d1      	lsls	r1, r2, #31
 8001bf6:	d4f6      	bmi.n	8001be6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001bfc:	68e1      	ldr	r1, [r4, #12]
 8001bfe:	4302      	orrs	r2, r0
 8001c00:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c06:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	432a      	orrs	r2, r5
 8001c0a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8001c0e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c10:	4302      	orrs	r2, r0
 8001c12:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c14:	4933      	ldr	r1, [pc, #204]	; (8001ce4 <HAL_DMA_Init+0x124>)
 8001c16:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c18:	6a25      	ldr	r5, [r4, #32]
 8001c1a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c20:	2904      	cmp	r1, #4
 8001c22:	d028      	beq.n	8001c76 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c24:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c26:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c28:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c2c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c2e:	b2d8      	uxtb	r0, r3
 8001c30:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8001c32:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c34:	3810      	subs	r0, #16
 8001c36:	fba2 5200 	umull	r5, r2, r2, r0
 8001c3a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c3c:	492b      	ldr	r1, [pc, #172]	; (8001cec <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c42:	5c89      	ldrb	r1, [r1, r2]
 8001c44:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c46:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8001c4a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c4c:	bf88      	it	hi
 8001c4e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	408a      	lsls	r2, r1
 8001c54:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c56:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c58:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001c62:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c66:	2220      	movs	r2, #32
 8001c68:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001c6e:	4618      	mov	r0, r3
}
 8001c70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
}
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c76:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8001c7a:	4329      	orrs	r1, r5
 8001c7c:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8001c7e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001c80:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c84:	f021 0107 	bic.w	r1, r1, #7
 8001c88:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001c8a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d0cd      	beq.n	8001c2e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c92:	b178      	cbz	r0, 8001cb4 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c94:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001c98:	d016      	beq.n	8001cc8 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c9a:	2a02      	cmp	r2, #2
 8001c9c:	d903      	bls.n	8001ca6 <HAL_DMA_Init+0xe6>
 8001c9e:	2a03      	cmp	r2, #3
 8001ca0:	d1c5      	bne.n	8001c2e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca2:	01ea      	lsls	r2, r5, #7
 8001ca4:	d5c3      	bpl.n	8001c2e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001cac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001cb0:	4618      	mov	r0, r3
}
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001cb4:	2a01      	cmp	r2, #1
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_Init+0x100>
 8001cb8:	f032 0202 	bics.w	r2, r2, #2
 8001cbc:	d1b7      	bne.n	8001c2e <HAL_DMA_Init+0x6e>
 8001cbe:	e7f0      	b.n	8001ca2 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cc0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001cc4:	d1b3      	bne.n	8001c2e <HAL_DMA_Init+0x6e>
 8001cc6:	e7ee      	b.n	8001ca6 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8001cc8:	2a03      	cmp	r2, #3
 8001cca:	d8b0      	bhi.n	8001c2e <HAL_DMA_Init+0x6e>
 8001ccc:	a001      	add	r0, pc, #4	; (adr r0, 8001cd4 <HAL_DMA_Init+0x114>)
 8001cce:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001ca7 	.word	0x08001ca7
 8001cd8:	08001ca3 	.word	0x08001ca3
 8001cdc:	08001ca7 	.word	0x08001ca7
 8001ce0:	08001cc1 	.word	0x08001cc1
 8001ce4:	f010803f 	.word	0xf010803f
 8001ce8:	aaaaaaab 	.word	0xaaaaaaab
 8001cec:	08009dd4 	.word	0x08009dd4

08001cf0 <HAL_DMA_IRQHandler>:
{
 8001cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf4:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf6:	4a74      	ldr	r2, [pc, #464]	; (8001ec8 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cfa:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001d02:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	2208      	movs	r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	4222      	tst	r2, r4
{
 8001d0a:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	d004      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0e:	6801      	ldr	r1, [r0, #0]
 8001d10:	680f      	ldr	r7, [r1, #0]
 8001d12:	0778      	lsls	r0, r7, #29
 8001d14:	f100 808a 	bmi.w	8001e2c <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	4222      	tst	r2, r4
 8001d1e:	d004      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d20:	f8d8 1000 	ldr.w	r1, [r8]
 8001d24:	6949      	ldr	r1, [r1, #20]
 8001d26:	0609      	lsls	r1, r1, #24
 8001d28:	d478      	bmi.n	8001e1c <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	4222      	tst	r2, r4
 8001d30:	d004      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d32:	f8d8 1000 	ldr.w	r1, [r8]
 8001d36:	6809      	ldr	r1, [r1, #0]
 8001d38:	078f      	lsls	r7, r1, #30
 8001d3a:	d467      	bmi.n	8001e0c <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	4222      	tst	r2, r4
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d44:	f8d8 1000 	ldr.w	r1, [r8]
 8001d48:	680f      	ldr	r7, [r1, #0]
 8001d4a:	0738      	lsls	r0, r7, #28
 8001d4c:	d449      	bmi.n	8001de2 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	2220      	movs	r2, #32
 8001d50:	409a      	lsls	r2, r3
 8001d52:	4222      	tst	r2, r4
 8001d54:	d017      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d56:	f8d8 1000 	ldr.w	r1, [r8]
 8001d5a:	680c      	ldr	r4, [r1, #0]
 8001d5c:	06e0      	lsls	r0, r4, #27
 8001d5e:	d512      	bpl.n	8001d86 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d60:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d62:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8001d66:	2a05      	cmp	r2, #5
 8001d68:	d073      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6a:	680b      	ldr	r3, [r1, #0]
 8001d6c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d70:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d72:	f000 8090 	beq.w	8001e96 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d76:	0319      	lsls	r1, r3, #12
 8001d78:	f140 809b 	bpl.w	8001eb2 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8001d7c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001d80:	b10b      	cbz	r3, 8001d86 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8001d82:	4640      	mov	r0, r8
 8001d84:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d86:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001d8a:	b33b      	cbz	r3, 8001ddc <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d8c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001d90:	07da      	lsls	r2, r3, #31
 8001d92:	d51b      	bpl.n	8001dcc <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8001d94:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d98:	494c      	ldr	r1, [pc, #304]	; (8001ecc <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001da0:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da2:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8001da6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001daa:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e002      	b.n	8001db6 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001db0:	6813      	ldr	r3, [r2, #0]
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	d504      	bpl.n	8001dc0 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8001db6:	9b01      	ldr	r3, [sp, #4]
 8001db8:	3301      	adds	r3, #1
 8001dba:	42ab      	cmp	r3, r5
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	d9f7      	bls.n	8001db0 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001dc2:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001dc8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001dcc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001dd0:	b123      	cbz	r3, 8001ddc <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8001dd2:	4640      	mov	r0, r8
}
 8001dd4:	b002      	add	sp, #8
 8001dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001dda:	4718      	bx	r3
}
 8001ddc:	b002      	add	sp, #8
 8001dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de2:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de4:	680a      	ldr	r2, [r1, #0]
 8001de6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dea:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dec:	d12a      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dee:	05d7      	lsls	r7, r2, #23
 8001df0:	d403      	bmi.n	8001dfa <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	680a      	ldr	r2, [r1, #0]
 8001df4:	f022 0208 	bic.w	r2, r2, #8
 8001df8:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfa:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d0a5      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001e02:	4640      	mov	r0, r8
 8001e04:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8001e0a:	e7a0      	b.n	8001d4e <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e0c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e0e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001e12:	f042 0204 	orr.w	r2, r2, #4
 8001e16:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001e1a:	e78f      	b.n	8001d3c <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001e22:	f042 0202 	orr.w	r2, r2, #2
 8001e26:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001e2a:	e77e      	b.n	8001d2a <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e2c:	680f      	ldr	r7, [r1, #0]
 8001e2e:	f027 0704 	bic.w	r7, r7, #4
 8001e32:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e34:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e36:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001e42:	e769      	b.n	8001d18 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	0312      	lsls	r2, r2, #12
 8001e46:	d5d8      	bpl.n	8001dfa <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e48:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d1d8      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x112>
 8001e50:	e77d      	b.n	8001d4e <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e52:	680a      	ldr	r2, [r1, #0]
 8001e54:	f022 0216 	bic.w	r2, r2, #22
 8001e58:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5a:	694a      	ldr	r2, [r1, #20]
 8001e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e60:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e62:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001e66:	b352      	cbz	r2, 8001ebe <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e68:	680a      	ldr	r2, [r1, #0]
 8001e6a:	f022 0208 	bic.w	r2, r2, #8
 8001e6e:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	223f      	movs	r2, #63	; 0x3f
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001e76:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001e7e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001e80:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001e84:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001e88:	2900      	cmp	r1, #0
 8001e8a:	d0a7      	beq.n	8001ddc <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8001e8c:	4640      	mov	r0, r8
}
 8001e8e:	b002      	add	sp, #8
 8001e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8001e94:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e96:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001e9a:	f47f af6f 	bne.w	8001d7c <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9e:	680a      	ldr	r2, [r1, #0]
 8001ea0:	f022 0210 	bic.w	r2, r2, #16
 8001ea4:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001eac:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001eb0:	e764      	b.n	8001d7c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8001eb2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f af63 	bne.w	8001d82 <HAL_DMA_IRQHandler+0x92>
 8001ebc:	e763      	b.n	8001d86 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebe:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d1d0      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x178>
 8001ec6:	e7d3      	b.n	8001e70 <HAL_DMA_IRQHandler+0x180>
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	1b4e81b5 	.word	0x1b4e81b5

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002108 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001edc:	4e83      	ldr	r6, [pc, #524]	; (80020ec <HAL_GPIO_Init+0x21c>)
{
 8001ede:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee0:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	4689      	mov	r9, r1
 8001ee4:	e005      	b.n	8001ef2 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	f102 0202 	add.w	r2, r2, #2
 8001eee:	f000 8089 	beq.w	8002004 <HAL_GPIO_Init+0x134>
    ioposition = 0x01U << position;
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001efa:	43a1      	bics	r1, r4
 8001efc:	d1f3      	bne.n	8001ee6 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001f02:	f00c 0103 	and.w	r1, ip, #3
 8001f06:	1e4d      	subs	r5, r1, #1
 8001f08:	2d01      	cmp	r5, #1
 8001f0a:	d97e      	bls.n	800200a <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	2903      	cmp	r1, #3
 8001f0e:	f040 80be 	bne.w	800208e <HAL_GPIO_Init+0x1be>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f12:	4091      	lsls	r1, r2
 8001f14:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001f16:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f18:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1a:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1c:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001f20:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f22:	d0e0      	beq.n	8001ee6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f24:	2100      	movs	r1, #0
 8001f26:	9103      	str	r1, [sp, #12]
 8001f28:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001f2c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001f30:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001f34:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001f38:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001f3c:	9103      	str	r1, [sp, #12]
 8001f3e:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f40:	f023 0103 	bic.w	r1, r3, #3
 8001f44:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001f48:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f50:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	00bf      	lsls	r7, r7, #2
 8001f56:	250f      	movs	r5, #15
 8001f58:	40bd      	lsls	r5, r7
 8001f5a:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	4d64      	ldr	r5, [pc, #400]	; (80020f0 <HAL_GPIO_Init+0x220>)
 8001f60:	42a8      	cmp	r0, r5
 8001f62:	d024      	beq.n	8001fae <HAL_GPIO_Init+0xde>
 8001f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	f000 8094 	beq.w	8002096 <HAL_GPIO_Init+0x1c6>
 8001f6e:	4d61      	ldr	r5, [pc, #388]	; (80020f4 <HAL_GPIO_Init+0x224>)
 8001f70:	42a8      	cmp	r0, r5
 8001f72:	f000 8097 	beq.w	80020a4 <HAL_GPIO_Init+0x1d4>
 8001f76:	4d60      	ldr	r5, [pc, #384]	; (80020f8 <HAL_GPIO_Init+0x228>)
 8001f78:	42a8      	cmp	r0, r5
 8001f7a:	f000 809a 	beq.w	80020b2 <HAL_GPIO_Init+0x1e2>
 8001f7e:	4d5f      	ldr	r5, [pc, #380]	; (80020fc <HAL_GPIO_Init+0x22c>)
 8001f80:	42a8      	cmp	r0, r5
 8001f82:	f000 809d 	beq.w	80020c0 <HAL_GPIO_Init+0x1f0>
 8001f86:	4d5e      	ldr	r5, [pc, #376]	; (8002100 <HAL_GPIO_Init+0x230>)
 8001f88:	42a8      	cmp	r0, r5
 8001f8a:	f000 80a0 	beq.w	80020ce <HAL_GPIO_Init+0x1fe>
 8001f8e:	4d5d      	ldr	r5, [pc, #372]	; (8002104 <HAL_GPIO_Init+0x234>)
 8001f90:	42a8      	cmp	r0, r5
 8001f92:	f000 80a3 	beq.w	80020dc <HAL_GPIO_Init+0x20c>
 8001f96:	f8df e174 	ldr.w	lr, [pc, #372]	; 800210c <HAL_GPIO_Init+0x23c>
 8001f9a:	4570      	cmp	r0, lr
 8001f9c:	bf0c      	ite	eq
 8001f9e:	f04f 0e07 	moveq.w	lr, #7
 8001fa2:	f04f 0e08 	movne.w	lr, #8
 8001fa6:	fa0e f707 	lsl.w	r7, lr, r7
 8001faa:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fae:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001fb2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	bf0c      	ite	eq
 8001fbe:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001fc0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001fc4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001fc6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	bf0c      	ite	eq
 8001fce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001fd0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001fd4:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001fd6:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	bf0c      	ite	eq
 8001fde:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001fe0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001fe4:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fec:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	bf0c      	ite	eq
 8001ff2:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001ff4:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff8:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001ffa:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffc:	f102 0202 	add.w	r2, r2, #2
 8002000:	f47f af77 	bne.w	8001ef2 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8002004:	b005      	add	sp, #20
 8002006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200a:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800200e:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002010:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	2503      	movs	r5, #3
 8002016:	fa05 fe02 	lsl.w	lr, r5, r2
 800201a:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201e:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002022:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002024:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002026:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202a:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202e:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8002032:	409f      	lsls	r7, r3
 8002034:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002038:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800203a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002044:	4097      	lsls	r7, r2
 8002046:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800204c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	fa01 f102 	lsl.w	r1, r1, r2
 8002052:	f47f af60 	bne.w	8001f16 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8002056:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800205a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205e:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002062:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002066:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206c:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002070:	fa07 f708 	lsl.w	r7, r7, r8
 8002074:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	270f      	movs	r7, #15
 8002078:	fa07 f808 	lsl.w	r8, r7, r8
 800207c:	9f00      	ldr	r7, [sp, #0]
 800207e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002082:	9f01      	ldr	r7, [sp, #4]
 8002084:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8002088:	f8ce 7020 	str.w	r7, [lr, #32]
 800208c:	e743      	b.n	8001f16 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208e:	2503      	movs	r5, #3
 8002090:	4095      	lsls	r5, r2
 8002092:	43ed      	mvns	r5, r5
 8002094:	e7d1      	b.n	800203a <HAL_GPIO_Init+0x16a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	f04f 0e01 	mov.w	lr, #1
 800209a:	fa0e f707 	lsl.w	r7, lr, r7
 800209e:	ea48 0807 	orr.w	r8, r8, r7
 80020a2:	e784      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020a4:	f04f 0e02 	mov.w	lr, #2
 80020a8:	fa0e f707 	lsl.w	r7, lr, r7
 80020ac:	ea48 0807 	orr.w	r8, r8, r7
 80020b0:	e77d      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020b2:	f04f 0e03 	mov.w	lr, #3
 80020b6:	fa0e f707 	lsl.w	r7, lr, r7
 80020ba:	ea48 0807 	orr.w	r8, r8, r7
 80020be:	e776      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020c0:	f04f 0e04 	mov.w	lr, #4
 80020c4:	fa0e f707 	lsl.w	r7, lr, r7
 80020c8:	ea48 0807 	orr.w	r8, r8, r7
 80020cc:	e76f      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020ce:	f04f 0e05 	mov.w	lr, #5
 80020d2:	fa0e f707 	lsl.w	r7, lr, r7
 80020d6:	ea48 0807 	orr.w	r8, r8, r7
 80020da:	e768      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020dc:	f04f 0e06 	mov.w	lr, #6
 80020e0:	fa0e f707 	lsl.w	r7, lr, r7
 80020e4:	ea48 0807 	orr.w	r8, r8, r7
 80020e8:	e761      	b.n	8001fae <HAL_GPIO_Init+0xde>
 80020ea:	bf00      	nop
 80020ec:	40013c00 	.word	0x40013c00
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	40021400 	.word	0x40021400
 8002104:	40021800 	.word	0x40021800
 8002108:	40023800 	.word	0x40023800
 800210c:	40021c00 	.word	0x40021c00

08002110 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	b902      	cbnz	r2, 8002114 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002112:	0409      	lsls	r1, r1, #16
 8002114:	6181      	str	r1, [r0, #24]
  }
}
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002118:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211a:	ea01 0203 	and.w	r2, r1, r3
 800211e:	ea21 0103 	bic.w	r1, r1, r3
 8002122:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002126:	6181      	str	r1, [r0, #24]
}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800212c:	2800      	cmp	r0, #0
 800212e:	f000 81a2 	beq.w	8002476 <HAL_RCC_OscConfig+0x34a>
{
 8002132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	07dd      	lsls	r5, r3, #31
{
 800213a:	b082      	sub	sp, #8
 800213c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	d52f      	bpl.n	80021a0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002140:	499e      	ldr	r1, [pc, #632]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 8002142:	688a      	ldr	r2, [r1, #8]
 8002144:	f002 020c 	and.w	r2, r2, #12
 8002148:	2a04      	cmp	r2, #4
 800214a:	f000 80ed 	beq.w	8002328 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	688a      	ldr	r2, [r1, #8]
 8002150:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002154:	2a08      	cmp	r2, #8
 8002156:	f000 80e3 	beq.w	8002320 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	f000 80ec 	beq.w	800233c <HAL_RCC_OscConfig+0x210>
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	f000 8175 	beq.w	8002456 <HAL_RCC_OscConfig+0x32a>
 800216c:	4d93      	ldr	r5, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 800216e:	682a      	ldr	r2, [r5, #0]
 8002170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002174:	602a      	str	r2, [r5, #0]
 8002176:	682a      	ldr	r2, [r5, #0]
 8002178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800217c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80e1 	bne.w	8002346 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fb1c 	bl	80017c0 <HAL_GetTick>
 8002188:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e005      	b.n	8002198 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fb18 	bl	80017c0 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	2864      	cmp	r0, #100	; 0x64
 8002194:	f200 8101 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	039b      	lsls	r3, r3, #14
 800219c:	d4f6      	bmi.n	800218c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	079f      	lsls	r7, r3, #30
 80021a2:	d528      	bpl.n	80021f6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a4:	4a85      	ldr	r2, [pc, #532]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 80021a6:	6891      	ldr	r1, [r2, #8]
 80021a8:	f011 0f0c 	tst.w	r1, #12
 80021ac:	f000 8090 	beq.w	80022d0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b0:	6891      	ldr	r1, [r2, #8]
 80021b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2908      	cmp	r1, #8
 80021b8:	f000 8086 	beq.w	80022c8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021bc:	68e3      	ldr	r3, [r4, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 810e 	beq.w	80023e0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4e7d      	ldr	r6, [pc, #500]	; (80023bc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021cc:	f7ff faf8 	bl	80017c0 <HAL_GetTick>
 80021d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	e005      	b.n	80021e0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff faf4 	bl	80017c0 <HAL_GetTick>
 80021d8:	1b40      	subs	r0, r0, r5
 80021da:	2802      	cmp	r0, #2
 80021dc:	f200 80dd 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	6833      	ldr	r3, [r6, #0]
 80021e2:	0798      	lsls	r0, r3, #30
 80021e4:	d5f6      	bpl.n	80021d4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	6833      	ldr	r3, [r6, #0]
 80021e8:	6922      	ldr	r2, [r4, #16]
 80021ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021f2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	071a      	lsls	r2, r3, #28
 80021f8:	d451      	bmi.n	800229e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	0758      	lsls	r0, r3, #29
 80021fc:	d52f      	bpl.n	800225e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 8002200:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002202:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002206:	d07f      	beq.n	8002308 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002208:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4e6e      	ldr	r6, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x298>)
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	05d9      	lsls	r1, r3, #23
 8002210:	f140 80b3 	bpl.w	800237a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	68a3      	ldr	r3, [r4, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f000 80c3 	beq.w	80023a2 <HAL_RCC_OscConfig+0x276>
 800221c:	2b05      	cmp	r3, #5
 800221e:	f000 812c 	beq.w	800247a <HAL_RCC_OscConfig+0x34e>
 8002222:	4e66      	ldr	r6, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 8002224:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	6732      	str	r2, [r6, #112]	; 0x70
 800222c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 80b9 	bne.w	80023ac <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff fac1 	bl	80017c0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002242:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e005      	b.n	8002252 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7ff fabb 	bl	80017c0 <HAL_GetTick>
 800224a:	1bc0      	subs	r0, r0, r7
 800224c:	4540      	cmp	r0, r8
 800224e:	f200 80a4 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002254:	0798      	lsls	r0, r3, #30
 8002256:	d4f6      	bmi.n	8002246 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	2d00      	cmp	r5, #0
 800225a:	f040 8106 	bne.w	800246a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	69a0      	ldr	r0, [r4, #24]
 8002260:	b1c8      	cbz	r0, 8002296 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002262:	4d56      	ldr	r5, [pc, #344]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 8002264:	68ab      	ldr	r3, [r5, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	f000 80c9 	beq.w	8002402 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x294>)
 8002272:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002276:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	f000 8109 	beq.w	800248e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff faa0 	bl	80017c0 <HAL_GetTick>
 8002280:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e005      	b.n	8002290 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff fa9c 	bl	80017c0 <HAL_GetTick>
 8002288:	1b00      	subs	r0, r0, r4
 800228a:	2802      	cmp	r0, #2
 800228c:	f200 8085 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	019b      	lsls	r3, r3, #6
 8002294:	d4f6      	bmi.n	8002284 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2000      	movs	r0, #0
}
 8002298:	b002      	add	sp, #8
 800229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800229e:	6963      	ldr	r3, [r4, #20]
 80022a0:	b30b      	cbz	r3, 80022e6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	4e45      	ldr	r6, [pc, #276]	; (80023bc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80022a6:	2201      	movs	r2, #1
 80022a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022ac:	f7ff fa88 	bl	80017c0 <HAL_GetTick>
 80022b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e004      	b.n	80022be <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fa84 	bl	80017c0 <HAL_GetTick>
 80022b8:	1b40      	subs	r0, r0, r5
 80022ba:	2802      	cmp	r0, #2
 80022bc:	d86d      	bhi.n	800239a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022c0:	079b      	lsls	r3, r3, #30
 80022c2:	d5f7      	bpl.n	80022b4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	e798      	b.n	80021fa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c8:	6852      	ldr	r2, [r2, #4]
 80022ca:	0256      	lsls	r6, r2, #9
 80022cc:	f53f af76 	bmi.w	80021bc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d0:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	0795      	lsls	r5, r2, #30
 80022d6:	d544      	bpl.n	8002362 <HAL_RCC_OscConfig+0x236>
 80022d8:	68e2      	ldr	r2, [r4, #12]
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d041      	beq.n	8002362 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80022de:	2001      	movs	r0, #1
}
 80022e0:	b002      	add	sp, #8
 80022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4e34      	ldr	r6, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80022ea:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022ee:	f7ff fa67 	bl	80017c0 <HAL_GetTick>
 80022f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	e004      	b.n	8002300 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff fa63 	bl	80017c0 <HAL_GetTick>
 80022fa:	1b40      	subs	r0, r0, r5
 80022fc:	2802      	cmp	r0, #2
 80022fe:	d84c      	bhi.n	800239a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002302:	079f      	lsls	r7, r3, #30
 8002304:	d4f7      	bmi.n	80022f6 <HAL_RCC_OscConfig+0x1ca>
 8002306:	e7dd      	b.n	80022c4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800231c:	2501      	movs	r5, #1
 800231e:	e774      	b.n	800220a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002320:	684a      	ldr	r2, [r1, #4]
 8002322:	0250      	lsls	r0, r2, #9
 8002324:	f57f af19 	bpl.w	800215a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	0391      	lsls	r1, r2, #14
 800232e:	f57f af37 	bpl.w	80021a0 <HAL_RCC_OscConfig+0x74>
 8002332:	6862      	ldr	r2, [r4, #4]
 8002334:	2a00      	cmp	r2, #0
 8002336:	f47f af33 	bne.w	80021a0 <HAL_RCC_OscConfig+0x74>
 800233a:	e7d0      	b.n	80022de <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002346:	f7ff fa3b 	bl	80017c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4e1c      	ldr	r6, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800234c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e004      	b.n	800235a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fa36 	bl	80017c0 <HAL_GetTick>
 8002354:	1b40      	subs	r0, r0, r5
 8002356:	2864      	cmp	r0, #100	; 0x64
 8002358:	d81f      	bhi.n	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	6833      	ldr	r3, [r6, #0]
 800235c:	039a      	lsls	r2, r3, #14
 800235e:	d5f7      	bpl.n	8002350 <HAL_RCC_OscConfig+0x224>
 8002360:	e71d      	b.n	800219e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 8002364:	6920      	ldr	r0, [r4, #16]
 8002366:	680a      	ldr	r2, [r1, #0]
 8002368:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800236c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002370:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	071a      	lsls	r2, r3, #28
 8002374:	f57f af41 	bpl.w	80021fa <HAL_RCC_OscConfig+0xce>
 8002378:	e791      	b.n	800229e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	6833      	ldr	r3, [r6, #0]
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002382:	f7ff fa1d 	bl	80017c0 <HAL_GetTick>
 8002386:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	6833      	ldr	r3, [r6, #0]
 800238a:	05da      	lsls	r2, r3, #23
 800238c:	f53f af42 	bmi.w	8002214 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7ff fa16 	bl	80017c0 <HAL_GetTick>
 8002394:	1bc0      	subs	r0, r0, r7
 8002396:	2802      	cmp	r0, #2
 8002398:	d9f6      	bls.n	8002388 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800239a:	2003      	movs	r0, #3
}
 800239c:	b002      	add	sp, #8
 800239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	4a06      	ldr	r2, [pc, #24]	; (80023bc <HAL_RCC_OscConfig+0x290>)
 80023a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80023ac:	f7ff fa08 	bl	80017c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	4f02      	ldr	r7, [pc, #8]	; (80023bc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80023b2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x2a6>
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff f9fa 	bl	80017c0 <HAL_GetTick>
 80023cc:	1b80      	subs	r0, r0, r6
 80023ce:	4540      	cmp	r0, r8
 80023d0:	d8e3      	bhi.n	800239a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d4:	079b      	lsls	r3, r3, #30
 80023d6:	d5f7      	bpl.n	80023c8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80023d8:	2d00      	cmp	r5, #0
 80023da:	f43f af40 	beq.w	800225e <HAL_RCC_OscConfig+0x132>
 80023de:	e044      	b.n	800246a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80023e0:	4a42      	ldr	r2, [pc, #264]	; (80024ec <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4e43      	ldr	r6, [pc, #268]	; (80024f0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80023e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023e6:	f7ff f9eb 	bl	80017c0 <HAL_GetTick>
 80023ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ec:	e004      	b.n	80023f8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff f9e7 	bl	80017c0 <HAL_GetTick>
 80023f2:	1b40      	subs	r0, r0, r5
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d8d0      	bhi.n	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f8:	6833      	ldr	r3, [r6, #0]
 80023fa:	0799      	lsls	r1, r3, #30
 80023fc:	d4f7      	bmi.n	80023ee <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	e6f9      	b.n	80021f6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002402:	2801      	cmp	r0, #1
 8002404:	f43f af48 	beq.w	8002298 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002408:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002410:	4291      	cmp	r1, r2
 8002412:	f47f af64 	bne.w	80022de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	4291      	cmp	r1, r2
 800241e:	f47f af5e 	bne.w	80022de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002424:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002428:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800242e:	f47f af56 	bne.w	80022de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002432:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002434:	0852      	lsrs	r2, r2, #1
 8002436:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800243a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002440:	f47f af4d 	bne.w	80022de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002444:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002446:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800244e:	bf14      	ite	ne
 8002450:	2001      	movne	r0, #1
 8002452:	2000      	moveq	r0, #0
 8002454:	e720      	b.n	8002298 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x3c4>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002466:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002468:	e76d      	b.n	8002346 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_RCC_OscConfig+0x3c4>)
 800246c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
 8002474:	e6f3      	b.n	800225e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002476:	2001      	movs	r0, #1
}
 8002478:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x3c4>)
 800247c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	671a      	str	r2, [r3, #112]	; 0x70
 8002484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248c:	e78e      	b.n	80023ac <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800248e:	f7ff f997 	bl	80017c0 <HAL_GetTick>
 8002492:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002494:	e005      	b.n	80024a2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff f993 	bl	80017c0 <HAL_GetTick>
 800249a:	1b80      	subs	r0, r0, r6
 800249c:	2802      	cmp	r0, #2
 800249e:	f63f af7c 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	0199      	lsls	r1, r3, #6
 80024a6:	d4f6      	bmi.n	8002496 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80024ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ae:	430b      	orrs	r3, r1
 80024b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024b4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80024b8:	0852      	lsrs	r2, r2, #1
 80024ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80024be:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80024c0:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80024c6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80024ca:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024cc:	f7ff f978 	bl	80017c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d0:	4d07      	ldr	r5, [pc, #28]	; (80024f0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80024d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	e005      	b.n	80024e2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff f973 	bl	80017c0 <HAL_GetTick>
 80024da:	1b00      	subs	r0, r0, r4
 80024dc:	2802      	cmp	r0, #2
 80024de:	f63f af5c 	bhi.w	800239a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	019a      	lsls	r2, r3, #6
 80024e6:	d5f6      	bpl.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
 80024e8:	e6d5      	b.n	8002296 <HAL_RCC_OscConfig+0x16a>
 80024ea:	bf00      	nop
 80024ec:	42470000 	.word	0x42470000
 80024f0:	40023800 	.word	0x40023800

080024f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f4:	4916      	ldr	r1, [pc, #88]	; (8002550 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80024f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f8:	688b      	ldr	r3, [r1, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d01b      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x46>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d117      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002506:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002508:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002514:	d113      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002516:	480f      	ldr	r0, [pc, #60]	; (8002554 <HAL_RCC_GetSysClockFreq+0x60>)
 8002518:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800251c:	fba1 0100 	umull	r0, r1, r1, r0
 8002520:	f7fe fb42 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002530:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002534:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002538:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800253c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <HAL_RCC_GetSysClockFreq+0x64>)
 8002540:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002544:	2300      	movs	r3, #0
 8002546:	fba1 0100 	umull	r0, r1, r1, r0
 800254a:	f7fe fb2d 	bl	8000ba8 <__aeabi_uldivmod>
 800254e:	e7e9      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	017d7840 	.word	0x017d7840

0800255c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800255c:	2800      	cmp	r0, #0
 800255e:	f000 8087 	beq.w	8002670 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002562:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_RCC_ClockConfig+0x128>)
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	428b      	cmp	r3, r1
{
 800256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002570:	460d      	mov	r5, r1
 8002572:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	d209      	bcs.n	800258a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	b2cb      	uxtb	r3, r1
 8002578:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	428b      	cmp	r3, r1
 8002582:	d002      	beq.n	800258a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
}
 8002586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	0798      	lsls	r0, r3, #30
 800258e:	d514      	bpl.n	80025ba <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	0759      	lsls	r1, r3, #29
 8002592:	d504      	bpl.n	800259e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	493c      	ldr	r1, [pc, #240]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 8002596:	688a      	ldr	r2, [r1, #8]
 8002598:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800259c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	071a      	lsls	r2, r3, #28
 80025a0:	d504      	bpl.n	80025ac <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a2:	4939      	ldr	r1, [pc, #228]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80025aa:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4936      	ldr	r1, [pc, #216]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 80025ae:	68a0      	ldr	r0, [r4, #8]
 80025b0:	688a      	ldr	r2, [r1, #8]
 80025b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025b6:	4302      	orrs	r2, r0
 80025b8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	07df      	lsls	r7, r3, #31
 80025bc:	d521      	bpl.n	8002602 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	2a01      	cmp	r2, #1
 80025c2:	d057      	beq.n	8002674 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c4:	1e93      	subs	r3, r2, #2
 80025c6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025cc:	d94d      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	0799      	lsls	r1, r3, #30
 80025d0:	d5d8      	bpl.n	8002584 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4e2d      	ldr	r6, [pc, #180]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 80025d4:	68b3      	ldr	r3, [r6, #8]
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	4313      	orrs	r3, r2
 80025dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80025de:	f7ff f8ef 	bl	80017c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80025e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e8:	e004      	b.n	80025f4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7ff f8e9 	bl	80017c0 <HAL_GetTick>
 80025ee:	1bc0      	subs	r0, r0, r7
 80025f0:	4540      	cmp	r0, r8
 80025f2:	d844      	bhi.n	800267e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	68b3      	ldr	r3, [r6, #8]
 80025f6:	6862      	ldr	r2, [r4, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002600:	d1f3      	bne.n	80025ea <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002602:	4a20      	ldr	r2, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x128>)
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	42ab      	cmp	r3, r5
 800260c:	d906      	bls.n	800261c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	b2eb      	uxtb	r3, r5
 8002610:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	42ab      	cmp	r3, r5
 800261a:	d1b3      	bne.n	8002584 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	075a      	lsls	r2, r3, #29
 8002620:	d506      	bpl.n	8002630 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002622:	4919      	ldr	r1, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 8002624:	68e0      	ldr	r0, [r4, #12]
 8002626:	688a      	ldr	r2, [r1, #8]
 8002628:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800262c:	4302      	orrs	r2, r0
 800262e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	d507      	bpl.n	8002644 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 8002636:	6921      	ldr	r1, [r4, #16]
 8002638:	6893      	ldr	r3, [r2, #8]
 800263a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800263e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002642:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002644:	f7ff ff56 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 800264a:	4c10      	ldr	r4, [pc, #64]	; (800268c <HAL_RCC_ClockConfig+0x130>)
 800264c:	6892      	ldr	r2, [r2, #8]
 800264e:	4910      	ldr	r1, [pc, #64]	; (8002690 <HAL_RCC_ClockConfig+0x134>)
 8002650:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002654:	4603      	mov	r3, r0
 8002656:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800265c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002660:	f7ff f864 	bl	800172c <HAL_InitTick>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	0198      	lsls	r0, r3, #6
 800266c:	d4b1      	bmi.n	80025d2 <HAL_RCC_ClockConfig+0x76>
 800266e:	e789      	b.n	8002584 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002670:	2001      	movs	r0, #1
}
 8002672:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_ClockConfig+0x12c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	039e      	lsls	r6, r3, #14
 800267a:	d4aa      	bmi.n	80025d2 <HAL_RCC_ClockConfig+0x76>
 800267c:	e782      	b.n	8002584 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800267e:	2003      	movs	r0, #3
 8002680:	e781      	b.n	8002586 <HAL_RCC_ClockConfig+0x2a>
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00
 8002688:	40023800 	.word	0x40023800
 800268c:	08009dbc 	.word	0x08009dbc
 8002690:	20000000 	.word	0x20000000
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800269a:	4905      	ldr	r1, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026a0:	6808      	ldr	r0, [r1, #0]
 80026a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80026a8:	40d8      	lsrs	r0, r3
 80026aa:	4770      	bx	lr
 80026ac:	40023800 	.word	0x40023800
 80026b0:	20000000 	.word	0x20000000
 80026b4:	08009dcc 	.word	0x08009dcc

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80026ba:	4905      	ldr	r1, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026c0:	6808      	ldr	r0, [r1, #0]
 80026c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80026c8:	40d8      	lsrs	r0, r3
 80026ca:	4770      	bx	lr
 80026cc:	40023800 	.word	0x40023800
 80026d0:	20000000 	.word	0x20000000
 80026d4:	08009dcc 	.word	0x08009dcc

080026d8 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80026d8:	b1b0      	cbz	r0, 8002708 <HAL_RNG_Init+0x30>
{
 80026da:	b510      	push	{r4, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80026dc:	7943      	ldrb	r3, [r0, #5]
 80026de:	4604      	mov	r4, r0
 80026e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026e4:	b163      	cbz	r3, 8002700 <HAL_RNG_Init+0x28>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80026e6:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80026e8:	2302      	movs	r3, #2
 80026ea:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80026ec:	680b      	ldr	r3, [r1, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80026ee:	2001      	movs	r0, #1
  __HAL_RNG_ENABLE(hrng);
 80026f0:	f043 0304 	orr.w	r3, r3, #4

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80026f4:	2200      	movs	r2, #0
  __HAL_RNG_ENABLE(hrng);
 80026f6:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 80026f8:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80026fa:	4610      	mov	r0, r2
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80026fc:	60a2      	str	r2, [r4, #8]
}
 80026fe:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8002700:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002702:	f7fe feb7 	bl	8001474 <HAL_RNG_MspInit>
 8002706:	e7ee      	b.n	80026e6 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8002708:	2001      	movs	r0, #1
}
 800270a:	4770      	bx	lr

0800270c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800270e:	7903      	ldrb	r3, [r0, #4]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d027      	beq.n	8002764 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002714:	7943      	ldrb	r3, [r0, #5]
  __HAL_LOCK(hrng);
 8002716:	2201      	movs	r2, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002718:	4293      	cmp	r3, r2
 800271a:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 800271c:	7102      	strb	r2, [r0, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 800271e:	b2de      	uxtb	r6, r3
 8002720:	d006      	beq.n	8002730 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002722:	2304      	movs	r3, #4
 8002724:	6083      	str	r3, [r0, #8]
    status = HAL_ERROR;
 8002726:	4616      	mov	r6, r2
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002728:	2300      	movs	r3, #0
 800272a:	7123      	strb	r3, [r4, #4]

  return status;
}
 800272c:	4630      	mov	r0, r6
 800272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8002730:	2302      	movs	r3, #2
 8002732:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 8002734:	460d      	mov	r5, r1
 8002736:	f7ff f843 	bl	80017c0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800273a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800273c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	07d2      	lsls	r2, r2, #31
 8002742:	d412      	bmi.n	800276a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002744:	f7ff f83c 	bl	80017c0 <HAL_GetTick>
 8002748:	1bc0      	subs	r0, r0, r7
 800274a:	2802      	cmp	r0, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800274c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800274e:	d9f6      	bls.n	800273e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	f012 0201 	ands.w	r2, r2, #1
 8002756:	d1f2      	bne.n	800273e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 8002758:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800275a:	2302      	movs	r3, #2
          hrng->State = HAL_RNG_STATE_READY;
 800275c:	7161      	strb	r1, [r4, #5]
          __HAL_UNLOCK(hrng);
 800275e:	7122      	strb	r2, [r4, #4]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002760:	60a3      	str	r3, [r4, #8]
          return HAL_ERROR;
 8002762:	e7e3      	b.n	800272c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8002764:	2602      	movs	r6, #2
}
 8002766:	4630      	mov	r0, r6
 8002768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60e3      	str	r3, [r4, #12]
    hrng->State = HAL_RNG_STATE_READY;
 800276e:	2201      	movs	r2, #1
    *random32bit = hrng->RandomNumber;
 8002770:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2600      	movs	r6, #0
    hrng->State = HAL_RNG_STATE_READY;
 8002774:	7162      	strb	r2, [r4, #5]
 8002776:	e7d7      	b.n	8002728 <HAL_RNG_GenerateRandomNumber+0x1c>

08002778 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002778:	2800      	cmp	r0, #0
 800277a:	f000 8087 	beq.w	800288c <HAL_TIM_Base_Init+0x114>
{
 800277e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002780:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002784:	4604      	mov	r4, r0
 8002786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278a:	2b00      	cmp	r3, #0
 800278c:	d079      	beq.n	8002882 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	493f      	ldr	r1, [pc, #252]	; (8002890 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800279a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800279c:	d05d      	beq.n	800285a <HAL_TIM_Base_Init+0xe2>
 800279e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80027a2:	d031      	beq.n	8002808 <HAL_TIM_Base_Init+0x90>
 80027a4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80027a8:	428a      	cmp	r2, r1
 80027aa:	d02d      	beq.n	8002808 <HAL_TIM_Base_Init+0x90>
 80027ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027b0:	428a      	cmp	r2, r1
 80027b2:	d029      	beq.n	8002808 <HAL_TIM_Base_Init+0x90>
 80027b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027b8:	428a      	cmp	r2, r1
 80027ba:	d025      	beq.n	8002808 <HAL_TIM_Base_Init+0x90>
 80027bc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80027c0:	428a      	cmp	r2, r1
 80027c2:	d04a      	beq.n	800285a <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80027c8:	428a      	cmp	r2, r1
 80027ca:	d021      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
 80027cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027d0:	428a      	cmp	r2, r1
 80027d2:	d01d      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
 80027d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027d8:	428a      	cmp	r2, r1
 80027da:	d019      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
 80027dc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80027e0:	428a      	cmp	r2, r1
 80027e2:	d015      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
 80027e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027e8:	428a      	cmp	r2, r1
 80027ea:	d011      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
 80027ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80027f0:	428a      	cmp	r2, r1
 80027f2:	d00d      	beq.n	8002810 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f4:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80027fe:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002800:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002802:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002804:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002806:	e010      	b.n	800282a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8002808:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800280e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002810:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002812:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002818:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800281e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002822:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002824:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002826:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002828:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282a:	2301      	movs	r3, #1
 800282c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002832:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002836:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800283a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800283e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800284a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800284e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002852:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002856:	2000      	movs	r0, #0
}
 8002858:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800285a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002862:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002868:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286a:	69a1      	ldr	r1, [r4, #24]
 800286c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002870:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002872:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002874:	68e3      	ldr	r3, [r4, #12]
 8002876:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	6963      	ldr	r3, [r4, #20]
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	e7d3      	b.n	800282a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8002882:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002886:	f7fe feaf 	bl	80015e8 <HAL_TIM_Base_MspInit>
 800288a:	e780      	b.n	800278e <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 800288c:	2001      	movs	r0, #1
}
 800288e:	4770      	bx	lr
 8002890:	40010000 	.word	0x40010000

08002894 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002894:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d075      	beq.n	8002988 <HAL_TIM_ConfigClockSource+0xf4>
 800289c:	4602      	mov	r2, r0
{
 800289e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80028a2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80028ae:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80028b8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80028ba:	680b      	ldr	r3, [r1, #0]
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d065      	beq.n	800298c <HAL_TIM_ConfigClockSource+0xf8>
 80028c0:	d824      	bhi.n	800290c <HAL_TIM_ConfigClockSource+0x78>
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d07c      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0x12c>
 80028c6:	d94b      	bls.n	8002960 <HAL_TIM_ConfigClockSource+0xcc>
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d117      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028cc:	6848      	ldr	r0, [r1, #4]
 80028ce:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	6a23      	ldr	r3, [r4, #32]
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028da:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028dc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80028e4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80028ec:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ee:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028f4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fa:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80028fe:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002900:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002904:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002908:	bc30      	pop	{r4, r5}
 800290a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d038      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0xf0>
 8002912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002916:	d110      	bne.n	800293a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002918:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800291c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800291e:	432b      	orrs	r3, r5
 8002920:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002922:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002926:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800292a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292e:	68a3      	ldr	r3, [r4, #8]
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002936:	60a3      	str	r3, [r4, #8]
      break;
 8002938:	e7e0      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800293a:	2b70      	cmp	r3, #112	; 0x70
 800293c:	d1de      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800293e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002942:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002944:	432b      	orrs	r3, r5
 8002946:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002948:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800294c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002950:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002952:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002954:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002956:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 800295c:	60a3      	str	r3, [r4, #8]
      break;
 800295e:	e7cd      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002960:	2b20      	cmp	r3, #32
 8002962:	d002      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xd6>
 8002964:	d90a      	bls.n	800297c <HAL_TIM_ConfigClockSource+0xe8>
 8002966:	2b30      	cmp	r3, #48	; 0x30
 8002968:	d1c8      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800296a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800296c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002970:	430b      	orrs	r3, r1
 8002972:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002978:	60a3      	str	r3, [r4, #8]
}
 800297a:	e7bf      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800297c:	f033 0110 	bics.w	r1, r3, #16
 8002980:	d1bc      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
 8002982:	e7f2      	b.n	800296a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002984:	2000      	movs	r0, #0
 8002986:	e7b9      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002988:	2002      	movs	r0, #2
}
 800298a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298c:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298e:	68cb      	ldr	r3, [r1, #12]
 8002990:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002992:	f020 0010 	bic.w	r0, r0, #16
 8002996:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002998:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800299e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80029a2:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80029a4:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80029ae:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80029b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029b6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80029bc:	60a3      	str	r3, [r4, #8]
}
 80029be:	e79d      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c0:	6848      	ldr	r0, [r1, #4]
 80029c2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80029c4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	6a23      	ldr	r3, [r4, #32]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80029d8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029da:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80029de:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80029e0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80029e2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80029ee:	60a3      	str	r3, [r4, #8]
}
 80029f0:	e784      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x68>
 80029f2:	bf00      	nop

080029f4 <HAL_TIM_PeriodElapsedCallback>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop

080029fc <HAL_TIM_IC_CaptureCallback>:
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <HAL_TIM_TriggerCallback>:
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	0791      	lsls	r1, r2, #30
{
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a12:	d502      	bpl.n	8002a1a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	0792      	lsls	r2, r2, #30
 8002a18:	d45f      	bmi.n	8002ada <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	0750      	lsls	r0, r2, #29
 8002a1e:	d502      	bpl.n	8002a26 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	0751      	lsls	r1, r2, #29
 8002a24:	d446      	bmi.n	8002ab4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	0712      	lsls	r2, r2, #28
 8002a2a:	d502      	bpl.n	8002a32 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	0710      	lsls	r0, r2, #28
 8002a30:	d42e      	bmi.n	8002a90 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	06d2      	lsls	r2, r2, #27
 8002a36:	d502      	bpl.n	8002a3e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	06d0      	lsls	r0, r2, #27
 8002a3c:	d418      	bmi.n	8002a70 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	07d1      	lsls	r1, r2, #31
 8002a42:	d502      	bpl.n	8002a4a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	07d2      	lsls	r2, r2, #31
 8002a48:	d45d      	bmi.n	8002b06 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	0610      	lsls	r0, r2, #24
 8002a4e:	d502      	bpl.n	8002a56 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	0611      	lsls	r1, r2, #24
 8002a54:	d45f      	bmi.n	8002b16 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	0652      	lsls	r2, r2, #25
 8002a5a:	d502      	bpl.n	8002a62 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	0650      	lsls	r0, r2, #25
 8002a60:	d461      	bmi.n	8002b26 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	0691      	lsls	r1, r2, #26
 8002a66:	d502      	bpl.n	8002a6e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	0692      	lsls	r2, r2, #26
 8002a6c:	d443      	bmi.n	8002af6 <HAL_TIM_IRQHandler+0xee>
}
 8002a6e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a70:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a74:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a76:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a82:	d064      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a84:	f7ff ffba 	bl	80029fc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a8a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8c:	7722      	strb	r2, [r4, #28]
 8002a8e:	e7d6      	b.n	8002a3e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a90:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a94:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a96:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa0:	d152      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	f7ff ffa9 	bl	80029f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ffaa 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aac:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aae:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	7722      	strb	r2, [r4, #28]
 8002ab2:	e7be      	b.n	8002a32 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab4:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab8:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac6:	d13c      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac8:	f7ff ff96 	bl	80029f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ff97 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	7722      	strb	r2, [r4, #28]
 8002ad8:	e7a5      	b.n	8002a26 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ada:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ade:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	079b      	lsls	r3, r3, #30
 8002ae8:	d025      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	f7ff ff87 	bl	80029fc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	7722      	strb	r2, [r4, #28]
 8002af4:	e791      	b.n	8002a1a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002afa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afc:	611a      	str	r2, [r3, #16]
}
 8002afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002b02:	f000 b86b 	b.w	8002bdc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b06:	f06f 0201 	mvn.w	r2, #1
 8002b0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ff71 	bl	80029f4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	e799      	b.n	8002a4a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f000 f85f 	bl	8002be0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	e797      	b.n	8002a56 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff ff69 	bl	8002a04 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	e795      	b.n	8002a62 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	f7ff ff5f 	bl	80029f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7ff ff60 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b40:	e7d5      	b.n	8002aee <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	f7ff ff5b 	bl	80029fc <HAL_TIM_IC_CaptureCallback>
 8002b46:	e7c4      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b48:	f7ff ff58 	bl	80029fc <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e7ae      	b.n	8002aac <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	f7ff ff53 	bl	80029f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff ff54 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b58:	e796      	b.n	8002a88 <HAL_TIM_IRQHandler+0x80>
 8002b5a:	bf00      	nop

08002b5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d037      	beq.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b66:	2202      	movs	r2, #2
{
 8002b68:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002b6e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002b72:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b78:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01a      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d017      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002b88:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00f      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002ba0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002ba8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002bb0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb8:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bba:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002bc2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002bca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002bce:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002bd0:	4618      	mov	r0, r3
}
 8002bd2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002bd4:	2002      	movs	r0, #2
}
 8002bd6:	4770      	bx	lr
 8002bd8:	40010000 	.word	0x40010000

08002bdc <HAL_TIMEx_CommutCallback>:
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <HAL_TIMEx_BreakCallback>:
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop

08002be4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f000 808f 	beq.w	8002d08 <HAL_UART_Init+0x124>
{
 8002bea:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8081 	beq.w	8002cfe <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfc:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfe:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	2224      	movs	r2, #36	; 0x24
 8002c02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c10:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c12:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002c16:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c18:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1a:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1c:	4302      	orrs	r2, r0
 8002c1e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002c20:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c22:	4302      	orrs	r2, r0
 8002c24:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002c26:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002c2a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c38:	4934      	ldr	r1, [pc, #208]	; (8002d0c <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c3e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c40:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c42:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c44:	d035      	beq.n	8002cb2 <HAL_UART_Init+0xce>
 8002c46:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_UART_Init+0x12c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d032      	beq.n	8002cb2 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f7ff fd24 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c50:	69e3      	ldr	r3, [r4, #28]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	d032      	beq.n	8002cbe <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	fba0 0101 	umull	r0, r1, r0, r1
 8002c62:	0f9b      	lsrs	r3, r3, #30
 8002c64:	f7fd ffa0 	bl	8000ba8 <__aeabi_uldivmod>
 8002c68:	492a      	ldr	r1, [pc, #168]	; (8002d14 <HAL_UART_Init+0x130>)
 8002c6a:	fba1 3200 	umull	r3, r2, r1, r0
 8002c6e:	0952      	lsrs	r2, r2, #5
 8002c70:	2564      	movs	r5, #100	; 0x64
 8002c72:	fb05 0012 	mls	r0, r5, r2, r0
 8002c76:	0100      	lsls	r0, r0, #4
 8002c78:	3032      	adds	r0, #50	; 0x32
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	fba1 1000 	umull	r1, r0, r1, r0
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8002c86:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c96:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c98:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ca6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002caa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002cae:	4628      	mov	r0, r5
}
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb2:	f7ff fd01 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	69e3      	ldr	r3, [r4, #28]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d1cc      	bne.n	8002c58 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	2119      	movs	r1, #25
 8002cc2:	1892      	adds	r2, r2, r2
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	415b      	adcs	r3, r3
 8002cca:	fba0 0101 	umull	r0, r1, r0, r1
 8002cce:	f7fd ff6b 	bl	8000ba8 <__aeabi_uldivmod>
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_UART_Init+0x130>)
 8002cd4:	fba3 2100 	umull	r2, r1, r3, r0
 8002cd8:	094d      	lsrs	r5, r1, #5
 8002cda:	2264      	movs	r2, #100	; 0x64
 8002cdc:	fb02 0215 	mls	r2, r2, r5, r0
 8002ce0:	00d2      	lsls	r2, r2, #3
 8002ce2:	3232      	adds	r2, #50	; 0x32
 8002ce4:	fba3 3202 	umull	r3, r2, r3, r2
 8002ce8:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8002cec:	0912      	lsrs	r2, r2, #4
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002cf4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002cf8:	440a      	add	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e7c4      	b.n	8002c88 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002d02:	f7fe fcad 	bl	8001660 <HAL_UART_MspInit>
 8002d06:	e779      	b.n	8002bfc <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8002d08:	2001      	movs	r0, #1
}
 8002d0a:	4770      	bx	lr
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <HAL_UART_Transmit>:
{
 8002d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d1c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8002d22:	2820      	cmp	r0, #32
 8002d24:	d177      	bne.n	8002e16 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8002d26:	4689      	mov	r9, r1
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	d040      	beq.n	8002dae <HAL_UART_Transmit+0x96>
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	2a00      	cmp	r2, #0
 8002d30:	d03d      	beq.n	8002dae <HAL_UART_Transmit+0x96>
 8002d32:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8002d34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d06c      	beq.n	8002e16 <HAL_UART_Transmit+0xfe>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d46:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d48:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002d50:	f7fe fd36 	bl	80017c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8002d56:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002d5c:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8002d5e:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d60:	d05c      	beq.n	8002e1c <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8002d62:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002d64:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8002d66:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002d68:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d07e      	beq.n	8002e6e <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d70:	682c      	ldr	r4, [r5, #0]
 8002d72:	1c72      	adds	r2, r6, #1
 8002d74:	d11e      	bne.n	8002db4 <HAL_UART_Transmit+0x9c>
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	0613      	lsls	r3, r2, #24
 8002d7a:	d5fc      	bpl.n	8002d76 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8002d7c:	f1b9 0f00 	cmp.w	r9, #0
 8002d80:	d044      	beq.n	8002e0c <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	f819 3b01 	ldrb.w	r3, [r9], #1
 8002d86:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8002d88:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ec      	bne.n	8002d72 <HAL_UART_Transmit+0x5a>
 8002d98:	1c71      	adds	r1, r6, #1
 8002d9a:	d145      	bne.n	8002e28 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	065a      	lsls	r2, r3, #25
 8002da0:	d5fc      	bpl.n	8002d9c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002da2:	2320      	movs	r3, #32
 8002da4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8002da8:	2000      	movs	r0, #0
}
 8002daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002dae:	2001      	movs	r0, #1
}
 8002db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	0618      	lsls	r0, r3, #24
 8002db8:	d4e0      	bmi.n	8002d7c <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dba:	b12e      	cbz	r6, 8002dc8 <HAL_UART_Transmit+0xb0>
 8002dbc:	f7fe fd00 	bl	80017c0 <HAL_GetTick>
 8002dc0:	1bc0      	subs	r0, r0, r7
 8002dc2:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc4:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dc6:	d2d4      	bcs.n	8002d72 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	f104 030c 	add.w	r3, r4, #12
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	f104 010c 	add.w	r1, r4, #12
 8002dd8:	e841 3200 	strex	r2, r3, [r1]
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d1f3      	bne.n	8002dc8 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	f104 0314 	add.w	r3, r4, #20
 8002de4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	f104 0114 	add.w	r1, r4, #20
 8002df0:	e841 3200 	strex	r2, r3, [r1]
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d1f3      	bne.n	8002de0 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002dfe:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
}
 8002e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e14:	e7b7      	b.n	8002d86 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8002e16:	2002      	movs	r0, #2
}
 8002e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	692b      	ldr	r3, [r5, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d19f      	bne.n	8002d62 <HAL_UART_Transmit+0x4a>
 8002e22:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8002e24:	4699      	mov	r9, r3
 8002e26:	e79c      	b.n	8002d62 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	065b      	lsls	r3, r3, #25
 8002e2c:	d4b9      	bmi.n	8002da2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e2e:	b12e      	cbz	r6, 8002e3c <HAL_UART_Transmit+0x124>
 8002e30:	f7fe fcc6 	bl	80017c0 <HAL_GetTick>
 8002e34:	1bc0      	subs	r0, r0, r7
 8002e36:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e38:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3a:	d2ad      	bcs.n	8002d98 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	f104 030c 	add.w	r3, r4, #12
 8002e40:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	f104 010c 	add.w	r1, r4, #12
 8002e4c:	e841 3200 	strex	r2, r3, [r1]
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d1f3      	bne.n	8002e3c <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f104 0314 	add.w	r3, r4, #20
 8002e58:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	f104 0114 	add.w	r1, r4, #20
 8002e64:	e841 3200 	strex	r2, r3, [r1]
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	d1f3      	bne.n	8002e54 <HAL_UART_Transmit+0x13c>
 8002e6c:	e7c4      	b.n	8002df8 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6e:	682c      	ldr	r4, [r5, #0]
 8002e70:	e792      	b.n	8002d98 <HAL_UART_Transmit+0x80>
 8002e72:	bf00      	nop

08002e74 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8002e74:	f000 ba52 	b.w	800331c <ai_platform_network_get_error>

08002e78 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8002e78:	b108      	cbz	r0, 8002e7e <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002e7a:	f000 bac3 	b.w	8003404 <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e7e:	4802      	ldr	r0, [pc, #8]	; (8002e88 <ai_network_inputs_get+0x10>)
 8002e80:	4b02      	ldr	r3, [pc, #8]	; (8002e8c <ai_network_inputs_get+0x14>)
 8002e82:	6003      	str	r3, [r0, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8002e84:	f000 babe 	b.w	8003404 <ai_platform_inputs_get>
 8002e88:	20000584 	.word	0x20000584
 8002e8c:	a1c00100 	.word	0xa1c00100

08002e90 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8002e90:	b108      	cbz	r0, 8002e96 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002e92:	f000 bb8d 	b.w	80035b0 <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e96:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <ai_network_outputs_get+0x10>)
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <ai_network_outputs_get+0x14>)
 8002e9a:	6003      	str	r3, [r0, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8002e9c:	f000 bb88 	b.w	80035b0 <ai_platform_outputs_get>
 8002ea0:	20000584 	.word	0x20000584
 8002ea4:	a1c00100 	.word	0xa1c00100

08002ea8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	4606      	mov	r6, r0
 8002eae:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002eb0:	f000 fd24 	bl	80038fc <ai_platform_network_init>
  if (!net_ctx) return false;
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d073      	beq.n	8002fa2 <ai_network_init+0xfa>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8002eba:	4f41      	ldr	r7, [pc, #260]	; (8002fc0 <ai_network_init+0x118>)
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	f000 f961 	bl	8003188 <ai_platform_get_weights_map>
 8002ec6:	4680      	mov	r8, r0
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d06c      	beq.n	8002fa6 <ai_network_init+0xfe>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ecc:	f8df e120 	ldr.w	lr, [pc, #288]	; 8002ff0 <ai_network_init+0x148>
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002ed0:	683b      	ldr	r3, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ed2:	f8de 2000 	ldr.w	r2, [lr]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ed6:	4f3b      	ldr	r7, [pc, #236]	; (8002fc4 <ai_network_init+0x11c>)
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ed8:	483b      	ldr	r0, [pc, #236]	; (8002fc8 <ai_network_init+0x120>)
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002eda:	493c      	ldr	r1, [pc, #240]	; (8002fcc <ai_network_init+0x124>)
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002edc:	f8df a114 	ldr.w	sl, [pc, #276]	; 8002ff4 <ai_network_init+0x14c>
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ee0:	f8df c114 	ldr.w	ip, [pc, #276]	; 8002ff8 <ai_network_init+0x150>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ee4:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ee8:	683a      	ldr	r2, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002eea:	f8ce 9000 	str.w	r9, [lr]
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8002eee:	e9ce 3302 	strd	r3, r3, [lr, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ef2:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002ef6:	6802      	ldr	r2, [r0, #0]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ef8:	f8c7 e000 	str.w	lr, [r7]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002efc:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f00:	680a      	ldr	r2, [r1, #0]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f02:	f8c0 e000 	str.w	lr, [r0]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f06:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f0a:	f8da 2000 	ldr.w	r2, [sl]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f0e:	f8c1 e000 	str.w	lr, [r1]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f12:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f16:	f8dc 2000 	ldr.w	r2, [ip]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f1a:	f8ca e000 	str.w	lr, [sl]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002f1e:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
 8002f22:	f8cc e000 	str.w	lr, [ip]
    dense_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 256);
 8002f26:	f503 7e80 	add.w	lr, r3, #256	; 0x100
    dense_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 8002f2a:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    dense_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1536);
 8002f2e:	f503 67c0 	add.w	r7, r3, #1536	; 0x600
    dense_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1536);
 8002f32:	e9c0 7702 	strd	r7, r7, [r0, #8]
    dense_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 1556);
 8002f36:	f203 6014 	addw	r0, r3, #1556	; 0x614
    dense_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1556);
 8002f3a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2068);
 8002f3e:	f603 0114 	addw	r1, r3, #2068	; 0x814
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2324);
 8002f42:	f603 1314 	addw	r3, r3, #2324	; 0x914
    dense_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2068);
 8002f46:	e9ca 1102 	strd	r1, r1, [sl, #8]
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2324);
 8002f4a:	e9cc 3302 	strd	r3, r3, [ip, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8002f4e:	4f20      	ldr	r7, [pc, #128]	; (8002fd0 <ai_network_init+0x128>)
 8002f50:	462a      	mov	r2, r5
 8002f52:	2101      	movs	r1, #1
 8002f54:	4638      	mov	r0, r7
 8002f56:	f000 f96b 	bl	8003230 <ai_platform_get_activations_map>
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	b348      	cbz	r0, 8002fb2 <ai_network_init+0x10a>
    serving_default_dense_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 248);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <ai_network_init+0x12c>)
 8002f62:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 8002f66:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8002f6a:	491b      	ldr	r1, [pc, #108]	; (8002fd8 <ai_network_init+0x130>)
 8002f6c:	f503 7280 	add.w	r2, r3, #256	; 0x100
    dense_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8002f70:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8002f74:	4919      	ldr	r1, [pc, #100]	; (8002fdc <ai_network_init+0x134>)
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8002f76:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002f7a:	4919      	ldr	r1, [pc, #100]	; (8002fe0 <ai_network_init+0x138>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002f7c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8002f80:	4918      	ldr	r1, [pc, #96]	; (8002fe4 <ai_network_init+0x13c>)
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8002f82:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <ai_network_init+0x140>)
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002f88:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <ai_network_init+0x144>)
 8002f8e:	3314      	adds	r3, #20
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8002f90:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 fd9f 	bl	8003ad8 <ai_platform_network_post_init>
 8002f9a:	4028      	ands	r0, r5
 8002f9c:	ea08 0000 	and.w	r0, r8, r0
 8002fa0:	b2c0      	uxtb	r0, r0

  return ok;
}
 8002fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002fa6:	2212      	movs	r2, #18
 8002fa8:	2130      	movs	r1, #48	; 0x30
 8002faa:	4620      	mov	r0, r4
 8002fac:	f000 fa24 	bl	80033f8 <ai_platform_network_set_error>
  return false;
 8002fb0:	e7cd      	b.n	8002f4e <ai_network_init+0xa6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002fb2:	2213      	movs	r2, #19
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	2130      	movs	r1, #48	; 0x30
 8002fb8:	f000 fa1e 	bl	80033f8 <ai_platform_network_set_error>
  return false;
 8002fbc:	e7ea      	b.n	8002f94 <ai_network_init+0xec>
 8002fbe:	bf00      	nop
 8002fc0:	20001568 	.word	0x20001568
 8002fc4:	20000574 	.word	0x20000574
 8002fc8:	20000500 	.word	0x20000500
 8002fcc:	20000434 	.word	0x20000434
 8002fd0:	20001564 	.word	0x20001564
 8002fd4:	200006d0 	.word	0x200006d0
 8002fd8:	20000408 	.word	0x20000408
 8002fdc:	2000060c 	.word	0x2000060c
 8002fe0:	200004a8 	.word	0x200004a8
 8002fe4:	20000658 	.word	0x20000658
 8002fe8:	20000548 	.word	0x20000548
 8002fec:	200006a4 	.word	0x200006a4
 8002ff0:	20000460 	.word	0x20000460
 8002ff4:	200003c0 	.word	0x200003c0
 8002ff8:	200004d4 	.word	0x200004d4

08002ffc <ai_network_create_and_init>:
{
 8002ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003000:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 8003002:	2300      	movs	r3, #0
 8003004:	2405      	movs	r4, #5
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	9400      	str	r4, [sp, #0]
{
 800300a:	4689      	mov	r9, r1
 800300c:	4615      	mov	r5, r2
  return ai_platform_network_create(
 800300e:	4619      	mov	r1, r3
 8003010:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <ai_network_create_and_init+0xac>)
 8003012:	2301      	movs	r3, #1
{
 8003014:	4606      	mov	r6, r0
  return ai_platform_network_create(
 8003016:	f000 fb9b 	bl	8003750 <ai_platform_network_create>
    if (err.type != AI_ERROR_NONE)
 800301a:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 800301e:	d002      	beq.n	8003026 <ai_network_create_and_init+0x2a>
}
 8003020:	b011      	add	sp, #68	; 0x44
 8003022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_network_data_params_get(&params) != true) {
 8003026:	4607      	mov	r7, r0
 8003028:	a802      	add	r0, sp, #8
 800302a:	f000 f841 	bl	80030b0 <ai_network_data_params_get>
 800302e:	b3b0      	cbz	r0, 800309e <ai_network_create_and_init+0xa2>
    if (activations) {
 8003030:	f1b9 0f00 	cmp.w	r9, #0
 8003034:	d010      	beq.n	8003058 <ai_network_create_and_init+0x5c>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003036:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800303a:	b16b      	cbz	r3, 8003058 <ai_network_create_and_init+0x5c>
 800303c:	f1a9 0904 	sub.w	r9, r9, #4
 8003040:	4644      	mov	r4, r8
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003042:	4621      	mov	r1, r4
 8003044:	f859 2f04 	ldr.w	r2, [r9, #4]!
 8003048:	a805      	add	r0, sp, #20
 800304a:	f000 f889 	bl	8003160 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800304e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003052:	3401      	adds	r4, #1
 8003054:	42a3      	cmp	r3, r4
 8003056:	dcf4      	bgt.n	8003042 <ai_network_create_and_init+0x46>
    if (weights) {
 8003058:	b17d      	cbz	r5, 800307a <ai_network_create_and_init+0x7e>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800305a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800305e:	b163      	cbz	r3, 800307a <ai_network_create_and_init+0x7e>
 8003060:	3d04      	subs	r5, #4
 8003062:	2400      	movs	r4, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003064:	4621      	mov	r1, r4
 8003066:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800306a:	a803      	add	r0, sp, #12
 800306c:	f000 f878 	bl	8003160 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003070:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003074:	3401      	adds	r4, #1
 8003076:	42a3      	cmp	r3, r4
 8003078:	dcf4      	bgt.n	8003064 <ai_network_create_and_init+0x68>
    if (ai_network_init(*network, &params) != true) {
 800307a:	6830      	ldr	r0, [r6, #0]
 800307c:	a902      	add	r1, sp, #8
 800307e:	f7ff ff13 	bl	8002ea8 <ai_network_init>
 8003082:	b128      	cbz	r0, 8003090 <ai_network_create_and_init+0x94>
    return err;
 8003084:	f368 0707 	bfi	r7, r8, #0, #8
 8003088:	4638      	mov	r0, r7
}
 800308a:	b011      	add	sp, #68	; 0x44
 800308c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8003090:	6830      	ldr	r0, [r6, #0]
 8003092:	f000 f943 	bl	800331c <ai_platform_network_get_error>
 8003096:	fa5f f880 	uxtb.w	r8, r0
 800309a:	4607      	mov	r7, r0
 800309c:	e7f2      	b.n	8003084 <ai_network_create_and_init+0x88>
 800309e:	6830      	ldr	r0, [r6, #0]
 80030a0:	f000 f93c 	bl	800331c <ai_platform_network_get_error>
        return err;
 80030a4:	e7bc      	b.n	8003020 <ai_network_create_and_init+0x24>
 80030a6:	bf00      	nop
 80030a8:	20000584 	.word	0x20000584

080030ac <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80030ac:	f000 bd9c 	b.w	8003be8 <ai_platform_network_process>

080030b0 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 80030b0:	4603      	mov	r3, r0
 80030b2:	b198      	cbz	r0, 80030dc <ai_network_data_params_get+0x2c>
{
 80030b4:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 80030b6:	4c0a      	ldr	r4, [pc, #40]	; (80030e0 <ai_network_data_params_get+0x30>)
 80030b8:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 80030bc:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 80030be:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80030c0:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 80030c2:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80030c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ca:	ac02      	add	r4, sp, #8
 80030cc:	e884 0003 	stmia.w	r4, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80030d0:	4621      	mov	r1, r4
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f900 	bl	80032d8 <ai_platform_bind_network_params>
}
 80030d8:	b004      	add	sp, #16
 80030da:	bd10      	pop	{r4, pc}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	08009d20 	.word	0x08009d20

080030e4 <ai_buffer_get_size>:
 80030e4:	b378      	cbz	r0, 8003146 <ai_buffer_get_size+0x62>
 80030e6:	b410      	push	{r4}
 80030e8:	6803      	ldr	r3, [r0, #0]
 80030ea:	4a17      	ldr	r2, [pc, #92]	; (8003148 <ai_buffer_get_size+0x64>)
 80030ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01e      	beq.n	8003136 <ai_buffer_get_size+0x52>
 80030f8:	6984      	ldr	r4, [r0, #24]
 80030fa:	6862      	ldr	r2, [r4, #4]
 80030fc:	7d03      	ldrb	r3, [r0, #20]
 80030fe:	6941      	ldr	r1, [r0, #20]
 8003100:	f1a3 0301 	sub.w	r3, r3, #1
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800310e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003112:	da0b      	bge.n	800312c <ai_buffer_get_size+0x48>
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <ai_buffer_get_size+0x3a>
 8003118:	2802      	cmp	r0, #2
 800311a:	d007      	beq.n	800312c <ai_buffer_get_size+0x48>
 800311c:	2302      	movs	r3, #2
 800311e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003122:	3301      	adds	r3, #1
 8003124:	4298      	cmp	r0, r3
 8003126:	fb01 f202 	mul.w	r2, r1, r2
 800312a:	d1f3      	bne.n	8003114 <ai_buffer_get_size+0x30>
 800312c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	2900      	cmp	r1, #0
 8003138:	d0de      	beq.n	80030f8 <ai_buffer_get_size+0x14>
 800313a:	6984      	ldr	r4, [r0, #24]
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	331f      	adds	r3, #31
 8003140:	f023 021f 	bic.w	r2, r3, #31
 8003144:	e7da      	b.n	80030fc <ai_buffer_get_size+0x18>
 8003146:	4770      	bx	lr
 8003148:	000400c0 	.word	0x000400c0

0800314c <ai_buffer_array_sane>:
 800314c:	b138      	cbz	r0, 800315e <ai_buffer_array_sane+0x12>
 800314e:	6843      	ldr	r3, [r0, #4]
 8003150:	b123      	cbz	r3, 800315c <ai_buffer_array_sane+0x10>
 8003152:	8840      	ldrh	r0, [r0, #2]
 8003154:	3800      	subs	r0, #0
 8003156:	bf18      	it	ne
 8003158:	2001      	movne	r0, #1
 800315a:	4770      	bx	lr
 800315c:	4618      	mov	r0, r3
 800315e:	4770      	bx	lr

08003160 <ai_buffer_array_item_set_address>:
 8003160:	b150      	cbz	r0, 8003178 <ai_buffer_array_item_set_address+0x18>
 8003162:	6843      	ldr	r3, [r0, #4]
 8003164:	b14b      	cbz	r3, 800317a <ai_buffer_array_item_set_address+0x1a>
 8003166:	8840      	ldrh	r0, [r0, #2]
 8003168:	b900      	cbnz	r0, 800316c <ai_buffer_array_item_set_address+0xc>
 800316a:	4770      	bx	lr
 800316c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003170:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003174:	2001      	movs	r0, #1
 8003176:	604a      	str	r2, [r1, #4]
 8003178:	4770      	bx	lr
 800317a:	4618      	mov	r0, r3
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <_ai_platform_acquire_crc>:
 8003180:	2001      	movs	r0, #1
 8003182:	4770      	bx	lr

08003184 <_ai_platform_release_crc>:
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <ai_platform_get_weights_map>:
 8003188:	2a00      	cmp	r2, #0
 800318a:	d037      	beq.n	80031fc <ai_platform_get_weights_map+0x74>
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	4604      	mov	r4, r0
 8003190:	b1a0      	cbz	r0, 80031bc <ai_platform_get_weights_map+0x34>
 8003192:	460f      	mov	r7, r1
 8003194:	b191      	cbz	r1, 80031bc <ai_platform_get_weights_map+0x34>
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <ai_platform_get_weights_map+0xa4>)
 8003198:	6810      	ldr	r0, [r2, #0]
 800319a:	4298      	cmp	r0, r3
 800319c:	4615      	mov	r5, r2
 800319e:	d00f      	beq.n	80031c0 <ai_platform_get_weights_map+0x38>
 80031a0:	6855      	ldr	r5, [r2, #4]
 80031a2:	b15d      	cbz	r5, 80031bc <ai_platform_get_weights_map+0x34>
 80031a4:	682e      	ldr	r6, [r5, #0]
 80031a6:	429e      	cmp	r6, r3
 80031a8:	d02a      	beq.n	8003200 <ai_platform_get_weights_map+0x78>
 80031aa:	f1a1 0001 	sub.w	r0, r1, #1
 80031ae:	6025      	str	r5, [r4, #0]
 80031b0:	fab0 f080 	clz	r0, r0
 80031b4:	0940      	lsrs	r0, r0, #5
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031b8:	42a7      	cmp	r7, r4
 80031ba:	d034      	beq.n	8003226 <ai_platform_get_weights_map+0x9e>
 80031bc:	2000      	movs	r0, #0
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c0:	1d10      	adds	r0, r2, #4
 80031c2:	f7ff ffc3 	bl	800314c <ai_buffer_array_sane>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d0f8      	beq.n	80031bc <ai_platform_get_weights_map+0x34>
 80031ca:	88eb      	ldrh	r3, [r5, #6]
 80031cc:	429f      	cmp	r7, r3
 80031ce:	d1f5      	bne.n	80031bc <ai_platform_get_weights_map+0x34>
 80031d0:	f04f 0e00 	mov.w	lr, #0
 80031d4:	1f23      	subs	r3, r4, #4
 80031d6:	4670      	mov	r0, lr
 80031d8:	68aa      	ldr	r2, [r5, #8]
 80031da:	eb02 0c0e 	add.w	ip, r2, lr
 80031de:	f10e 0e1c 	add.w	lr, lr, #28
 80031e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80031e6:	b124      	cbz	r4, 80031f2 <ai_platform_get_weights_map+0x6a>
 80031e8:	3001      	adds	r0, #1
 80031ea:	4287      	cmp	r7, r0
 80031ec:	f843 4f04 	str.w	r4, [r3, #4]!
 80031f0:	d1f2      	bne.n	80031d8 <ai_platform_get_weights_map+0x50>
 80031f2:	1a38      	subs	r0, r7, r0
 80031f4:	fab0 f080 	clz	r0, r0
 80031f8:	0940      	lsrs	r0, r0, #5
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fc:	2000      	movs	r0, #0
 80031fe:	4770      	bx	lr
 8003200:	1f23      	subs	r3, r4, #4
 8003202:	4628      	mov	r0, r5
 8003204:	2400      	movs	r4, #0
 8003206:	e000      	b.n	800320a <ai_platform_get_weights_map+0x82>
 8003208:	4614      	mov	r4, r2
 800320a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800320e:	42b2      	cmp	r2, r6
 8003210:	d0d2      	beq.n	80031b8 <ai_platform_get_weights_map+0x30>
 8003212:	f843 2f04 	str.w	r2, [r3, #4]!
 8003216:	1c62      	adds	r2, r4, #1
 8003218:	4297      	cmp	r7, r2
 800321a:	d1f5      	bne.n	8003208 <ai_platform_get_weights_map+0x80>
 800321c:	3402      	adds	r4, #2
 800321e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003222:	42b3      	cmp	r3, r6
 8003224:	d1ca      	bne.n	80031bc <ai_platform_get_weights_map+0x34>
 8003226:	2001      	movs	r0, #1
 8003228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322a:	bf00      	nop
 800322c:	a1facade 	.word	0xa1facade

08003230 <ai_platform_get_activations_map>:
 8003230:	2a00      	cmp	r2, #0
 8003232:	d038      	beq.n	80032a6 <ai_platform_get_activations_map+0x76>
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	4604      	mov	r4, r0
 8003238:	b1a0      	cbz	r0, 8003264 <ai_platform_get_activations_map+0x34>
 800323a:	460f      	mov	r7, r1
 800323c:	b191      	cbz	r1, 8003264 <ai_platform_get_activations_map+0x34>
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <ai_platform_get_activations_map+0xa4>)
 8003240:	6810      	ldr	r0, [r2, #0]
 8003242:	4298      	cmp	r0, r3
 8003244:	4615      	mov	r5, r2
 8003246:	d00f      	beq.n	8003268 <ai_platform_get_activations_map+0x38>
 8003248:	6a15      	ldr	r5, [r2, #32]
 800324a:	b15d      	cbz	r5, 8003264 <ai_platform_get_activations_map+0x34>
 800324c:	682e      	ldr	r6, [r5, #0]
 800324e:	429e      	cmp	r6, r3
 8003250:	d02b      	beq.n	80032aa <ai_platform_get_activations_map+0x7a>
 8003252:	f1a1 0001 	sub.w	r0, r1, #1
 8003256:	6025      	str	r5, [r4, #0]
 8003258:	fab0 f080 	clz	r0, r0
 800325c:	0940      	lsrs	r0, r0, #5
 800325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003260:	42a7      	cmp	r7, r4
 8003262:	d035      	beq.n	80032d0 <ai_platform_get_activations_map+0xa0>
 8003264:	2000      	movs	r0, #0
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	f102 000c 	add.w	r0, r2, #12
 800326c:	f7ff ff6e 	bl	800314c <ai_buffer_array_sane>
 8003270:	2800      	cmp	r0, #0
 8003272:	d0f7      	beq.n	8003264 <ai_platform_get_activations_map+0x34>
 8003274:	89eb      	ldrh	r3, [r5, #14]
 8003276:	429f      	cmp	r7, r3
 8003278:	d1f4      	bne.n	8003264 <ai_platform_get_activations_map+0x34>
 800327a:	f04f 0e00 	mov.w	lr, #0
 800327e:	1f23      	subs	r3, r4, #4
 8003280:	4670      	mov	r0, lr
 8003282:	692a      	ldr	r2, [r5, #16]
 8003284:	eb02 0c0e 	add.w	ip, r2, lr
 8003288:	f10e 0e1c 	add.w	lr, lr, #28
 800328c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003290:	b124      	cbz	r4, 800329c <ai_platform_get_activations_map+0x6c>
 8003292:	3001      	adds	r0, #1
 8003294:	4287      	cmp	r7, r0
 8003296:	f843 4f04 	str.w	r4, [r3, #4]!
 800329a:	d1f2      	bne.n	8003282 <ai_platform_get_activations_map+0x52>
 800329c:	1a38      	subs	r0, r7, r0
 800329e:	fab0 f080 	clz	r0, r0
 80032a2:	0940      	lsrs	r0, r0, #5
 80032a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a6:	2000      	movs	r0, #0
 80032a8:	4770      	bx	lr
 80032aa:	1f23      	subs	r3, r4, #4
 80032ac:	4628      	mov	r0, r5
 80032ae:	2400      	movs	r4, #0
 80032b0:	e000      	b.n	80032b4 <ai_platform_get_activations_map+0x84>
 80032b2:	4614      	mov	r4, r2
 80032b4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80032b8:	42b2      	cmp	r2, r6
 80032ba:	d0d1      	beq.n	8003260 <ai_platform_get_activations_map+0x30>
 80032bc:	f843 2f04 	str.w	r2, [r3, #4]!
 80032c0:	1c62      	adds	r2, r4, #1
 80032c2:	4297      	cmp	r7, r2
 80032c4:	d1f5      	bne.n	80032b2 <ai_platform_get_activations_map+0x82>
 80032c6:	3402      	adds	r4, #2
 80032c8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80032cc:	42b3      	cmp	r3, r6
 80032ce:	d1c9      	bne.n	8003264 <ai_platform_get_activations_map+0x34>
 80032d0:	2001      	movs	r0, #1
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d4:	a1facade 	.word	0xa1facade

080032d8 <ai_platform_bind_network_params>:
 80032d8:	b1a0      	cbz	r0, 8003304 <ai_platform_bind_network_params+0x2c>
 80032da:	b1b1      	cbz	r1, 800330a <ai_platform_bind_network_params+0x32>
 80032dc:	b1c2      	cbz	r2, 8003310 <ai_platform_bind_network_params+0x38>
 80032de:	b410      	push	{r4}
 80032e0:	4603      	mov	r3, r0
 80032e2:	4c0d      	ldr	r4, [pc, #52]	; (8003318 <ai_platform_bind_network_params+0x40>)
 80032e4:	f843 4b04 	str.w	r4, [r3], #4
 80032e8:	f100 0c0c 	add.w	ip, r0, #12
 80032ec:	c903      	ldmia	r1, {r0, r1}
 80032ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80032f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80032fa:	2301      	movs	r3, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	4603      	mov	r3, r0
 8003306:	4618      	mov	r0, r3
 8003308:	4770      	bx	lr
 800330a:	460b      	mov	r3, r1
 800330c:	4618      	mov	r0, r3
 800330e:	4770      	bx	lr
 8003310:	4613      	mov	r3, r2
 8003312:	4618      	mov	r0, r3
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	a1facade 	.word	0xa1facade

0800331c <ai_platform_network_get_error>:
 800331c:	b510      	push	{r4, lr}
 800331e:	b1f0      	cbz	r0, 800335e <ai_platform_network_get_error+0x42>
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <ai_platform_network_get_error+0xc4>)
 8003322:	6802      	ldr	r2, [r0, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	4604      	mov	r4, r0
 8003328:	d119      	bne.n	800335e <ai_platform_network_get_error+0x42>
 800332a:	f7ff ff29 	bl	8003180 <_ai_platform_acquire_crc>
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <ai_platform_network_get_error+0xc8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d03c      	beq.n	80033b6 <ai_platform_network_get_error+0x9a>
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <ai_platform_network_get_error+0xcc>)
 800333e:	2301      	movs	r3, #1
 8003340:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003344:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1fb      	bne.n	8003344 <ai_platform_network_get_error+0x28>
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <ai_platform_network_get_error+0xd0>)
 800334e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003352:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003356:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <ai_platform_network_get_error+0xd4>)
 8003358:	429a      	cmp	r2, r3
 800335a:	d038      	beq.n	80033ce <ai_platform_network_get_error+0xb2>
 800335c:	e7fe      	b.n	800335c <ai_platform_network_get_error+0x40>
 800335e:	f7ff ff0f 	bl	8003180 <_ai_platform_acquire_crc>
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <ai_platform_network_get_error+0xc8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d010      	beq.n	8003392 <ai_platform_network_get_error+0x76>
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <ai_platform_network_get_error+0xcc>)
 8003372:	2301      	movs	r3, #1
 8003374:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003378:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1fb      	bne.n	8003378 <ai_platform_network_get_error+0x5c>
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <ai_platform_network_get_error+0xd0>)
 8003382:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003386:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <ai_platform_network_get_error+0xd4>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d00d      	beq.n	80033ac <ai_platform_network_get_error+0x90>
 8003390:	e7fe      	b.n	8003390 <ai_platform_network_get_error+0x74>
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <ai_platform_network_get_error+0xd8>)
 8003394:	2301      	movs	r3, #1
 8003396:	6093      	str	r3, [r2, #8]
 8003398:	6893      	ldr	r3, [r2, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1fc      	bne.n	8003398 <ai_platform_network_get_error+0x7c>
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <ai_platform_network_get_error+0xd0>)
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <ai_platform_network_get_error+0xd4>)
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d000      	beq.n	80033ac <ai_platform_network_get_error+0x90>
 80033aa:	e7fe      	b.n	80033aa <ai_platform_network_get_error+0x8e>
 80033ac:	f7ff feea 	bl	8003184 <_ai_platform_release_crc>
 80033b0:	f241 0010 	movw	r0, #4112	; 0x1010
 80033b4:	bd10      	pop	{r4, pc}
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <ai_platform_network_get_error+0xd8>)
 80033b8:	2301      	movs	r3, #1
 80033ba:	6093      	str	r3, [r2, #8]
 80033bc:	6893      	ldr	r3, [r2, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1fc      	bne.n	80033bc <ai_platform_network_get_error+0xa0>
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <ai_platform_network_get_error+0xd0>)
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <ai_platform_network_get_error+0xd4>)
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d107      	bne.n	80033de <ai_platform_network_get_error+0xc2>
 80033ce:	f7ff fed9 	bl	8003184 <_ai_platform_release_crc>
 80033d2:	f104 0010 	add.w	r0, r4, #16
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033da:	f000 be8d 	b.w	80040f8 <core_get_error>
 80033de:	e7fe      	b.n	80033de <ai_platform_network_get_error+0xc2>
 80033e0:	a1c00100 	.word	0xa1c00100
 80033e4:	e0042000 	.word	0xe0042000
 80033e8:	58024000 	.word	0x58024000
 80033ec:	f407a5c2 	.word	0xf407a5c2
 80033f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80033f4:	40023000 	.word	0x40023000

080033f8 <ai_platform_network_set_error>:
 80033f8:	b110      	cbz	r0, 8003400 <ai_platform_network_set_error+0x8>
 80033fa:	3010      	adds	r0, #16
 80033fc:	f000 be82 	b.w	8004104 <core_set_error>
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <ai_platform_inputs_get>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	b085      	sub	sp, #20
 800340a:	9102      	str	r1, [sp, #8]
 800340c:	b1f0      	cbz	r0, 800344c <ai_platform_inputs_get+0x48>
 800340e:	4b62      	ldr	r3, [pc, #392]	; (8003598 <ai_platform_inputs_get+0x194>)
 8003410:	6802      	ldr	r2, [r0, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	4607      	mov	r7, r0
 8003416:	d119      	bne.n	800344c <ai_platform_inputs_get+0x48>
 8003418:	f7ff feb2 	bl	8003180 <_ai_platform_acquire_crc>
 800341c:	4b5f      	ldr	r3, [pc, #380]	; (800359c <ai_platform_inputs_get+0x198>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d03d      	beq.n	80034a6 <ai_platform_inputs_get+0xa2>
 800342a:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <ai_platform_inputs_get+0x19c>)
 800342c:	2301      	movs	r3, #1
 800342e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003432:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1fb      	bne.n	8003432 <ai_platform_inputs_get+0x2e>
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <ai_platform_inputs_get+0x1a0>)
 800343c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003440:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <ai_platform_inputs_get+0x1a4>)
 8003446:	429a      	cmp	r2, r3
 8003448:	d039      	beq.n	80034be <ai_platform_inputs_get+0xba>
 800344a:	e7fe      	b.n	800344a <ai_platform_inputs_get+0x46>
 800344c:	f7ff fe98 	bl	8003180 <_ai_platform_acquire_crc>
 8003450:	4b52      	ldr	r3, [pc, #328]	; (800359c <ai_platform_inputs_get+0x198>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d010      	beq.n	8003480 <ai_platform_inputs_get+0x7c>
 800345e:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <ai_platform_inputs_get+0x19c>)
 8003460:	2301      	movs	r3, #1
 8003462:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003466:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1fb      	bne.n	8003466 <ai_platform_inputs_get+0x62>
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <ai_platform_inputs_get+0x1a0>)
 8003470:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003474:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003478:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <ai_platform_inputs_get+0x1a4>)
 800347a:	429a      	cmp	r2, r3
 800347c:	d00d      	beq.n	800349a <ai_platform_inputs_get+0x96>
 800347e:	e7fe      	b.n	800347e <ai_platform_inputs_get+0x7a>
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <ai_platform_inputs_get+0x1a8>)
 8003482:	2301      	movs	r3, #1
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	6893      	ldr	r3, [r2, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1fc      	bne.n	8003486 <ai_platform_inputs_get+0x82>
 800348c:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <ai_platform_inputs_get+0x1a0>)
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <ai_platform_inputs_get+0x1a4>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d000      	beq.n	800349a <ai_platform_inputs_get+0x96>
 8003498:	e7fe      	b.n	8003498 <ai_platform_inputs_get+0x94>
 800349a:	f7ff fe73 	bl	8003184 <_ai_platform_release_crc>
 800349e:	2000      	movs	r0, #0
 80034a0:	b005      	add	sp, #20
 80034a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <ai_platform_inputs_get+0x1a8>)
 80034a8:	2301      	movs	r3, #1
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	6893      	ldr	r3, [r2, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1fc      	bne.n	80034ac <ai_platform_inputs_get+0xa8>
 80034b2:	4b3c      	ldr	r3, [pc, #240]	; (80035a4 <ai_platform_inputs_get+0x1a0>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <ai_platform_inputs_get+0x1a4>)
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d155      	bne.n	800356a <ai_platform_inputs_get+0x166>
 80034be:	f7ff fe61 	bl	8003184 <_ai_platform_release_crc>
 80034c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d051      	beq.n	800356c <ai_platform_inputs_get+0x168>
 80034c8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80034cc:	f1ba 0f00 	cmp.w	sl, #0
 80034d0:	d04c      	beq.n	800356c <ai_platform_inputs_get+0x168>
 80034d2:	f04f 0b00 	mov.w	fp, #0
 80034d6:	465d      	mov	r5, fp
 80034d8:	9703      	str	r7, [sp, #12]
 80034da:	e016      	b.n	800350a <ai_platform_inputs_get+0x106>
 80034dc:	9901      	ldr	r1, [sp, #4]
 80034de:	2301      	movs	r3, #1
 80034e0:	507b      	str	r3, [r7, r1]
 80034e2:	69b1      	ldr	r1, [r6, #24]
 80034e4:	6849      	ldr	r1, [r1, #4]
 80034e6:	6121      	str	r1, [r4, #16]
 80034e8:	f04f 0301 	mov.w	r3, #1
 80034ec:	7523      	strb	r3, [r4, #20]
 80034ee:	e9c4 c200 	strd	ip, r2, [r4]
 80034f2:	6962      	ldr	r2, [r4, #20]
 80034f4:	60a0      	str	r0, [r4, #8]
 80034f6:	2300      	movs	r3, #0
 80034f8:	f369 221f 	bfi	r2, r9, #8, #24
 80034fc:	f8c4 8018 	str.w	r8, [r4, #24]
 8003500:	60e3      	str	r3, [r4, #12]
 8003502:	3501      	adds	r5, #1
 8003504:	f10b 0b1c 	add.w	fp, fp, #28
 8003508:	6162      	str	r2, [r4, #20]
 800350a:	f8ba 3000 	ldrh.w	r3, [sl]
 800350e:	42ab      	cmp	r3, r5
 8003510:	b2aa      	uxth	r2, r5
 8003512:	d93a      	bls.n	800358a <ai_platform_inputs_get+0x186>
 8003514:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003518:	00e9      	lsls	r1, r5, #3
 800351a:	9101      	str	r1, [sp, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d034      	beq.n	800358a <ai_platform_inputs_get+0x186>
 8003520:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003524:	2e00      	cmp	r6, #0
 8003526:	d030      	beq.n	800358a <ai_platform_inputs_get+0x186>
 8003528:	f8da 3008 	ldr.w	r3, [sl, #8]
 800352c:	69b2      	ldr	r2, [r6, #24]
 800352e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003532:	6810      	ldr	r0, [r2, #0]
 8003534:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003538:	68b3      	ldr	r3, [r6, #8]
 800353a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800353e:	f001 fc2d 	bl	8004d9c <ai_array_to_buffer_fmt>
 8003542:	69b1      	ldr	r1, [r6, #24]
 8003544:	4684      	mov	ip, r0
 8003546:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800354a:	688a      	ldr	r2, [r1, #8]
 800354c:	445c      	add	r4, fp
 800354e:	2800      	cmp	r0, #0
 8003550:	d0c8      	beq.n	80034e4 <ai_platform_inputs_get+0xe0>
 8003552:	2100      	movs	r1, #0
 8003554:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003558:	6831      	ldr	r1, [r6, #0]
 800355a:	6041      	str	r1, [r0, #4]
 800355c:	b111      	cbz	r1, 8003564 <ai_platform_inputs_get+0x160>
 800355e:	8849      	ldrh	r1, [r1, #2]
 8003560:	2900      	cmp	r1, #0
 8003562:	d1bb      	bne.n	80034dc <ai_platform_inputs_get+0xd8>
 8003564:	69b1      	ldr	r1, [r6, #24]
 8003566:	2000      	movs	r0, #0
 8003568:	e7bc      	b.n	80034e4 <ai_platform_inputs_get+0xe0>
 800356a:	e7fe      	b.n	800356a <ai_platform_inputs_get+0x166>
 800356c:	2218      	movs	r2, #24
 800356e:	2111      	movs	r1, #17
 8003570:	f107 0010 	add.w	r0, r7, #16
 8003574:	f000 fdc6 	bl	8004104 <core_set_error>
 8003578:	2200      	movs	r2, #0
 800357a:	4610      	mov	r0, r2
 800357c:	9b02      	ldr	r3, [sp, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d08e      	beq.n	80034a0 <ai_platform_inputs_get+0x9c>
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	b005      	add	sp, #20
 8003586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358a:	9f03      	ldr	r7, [sp, #12]
 800358c:	2a00      	cmp	r2, #0
 800358e:	d0ed      	beq.n	800356c <ai_platform_inputs_get+0x168>
 8003590:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003594:	6858      	ldr	r0, [r3, #4]
 8003596:	e7f1      	b.n	800357c <ai_platform_inputs_get+0x178>
 8003598:	a1c00100 	.word	0xa1c00100
 800359c:	e0042000 	.word	0xe0042000
 80035a0:	58024000 	.word	0x58024000
 80035a4:	f407a5c2 	.word	0xf407a5c2
 80035a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80035ac:	40023000 	.word	0x40023000

080035b0 <ai_platform_outputs_get>:
 80035b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	b085      	sub	sp, #20
 80035b6:	9102      	str	r1, [sp, #8]
 80035b8:	b1f0      	cbz	r0, 80035f8 <ai_platform_outputs_get+0x48>
 80035ba:	4b5f      	ldr	r3, [pc, #380]	; (8003738 <ai_platform_outputs_get+0x188>)
 80035bc:	6802      	ldr	r2, [r0, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	4607      	mov	r7, r0
 80035c2:	d119      	bne.n	80035f8 <ai_platform_outputs_get+0x48>
 80035c4:	f7ff fddc 	bl	8003180 <_ai_platform_acquire_crc>
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <ai_platform_outputs_get+0x18c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d03d      	beq.n	8003652 <ai_platform_outputs_get+0xa2>
 80035d6:	4a5a      	ldr	r2, [pc, #360]	; (8003740 <ai_platform_outputs_get+0x190>)
 80035d8:	2301      	movs	r3, #1
 80035da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1fb      	bne.n	80035de <ai_platform_outputs_get+0x2e>
 80035e6:	4b57      	ldr	r3, [pc, #348]	; (8003744 <ai_platform_outputs_get+0x194>)
 80035e8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035f0:	4b55      	ldr	r3, [pc, #340]	; (8003748 <ai_platform_outputs_get+0x198>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d039      	beq.n	800366a <ai_platform_outputs_get+0xba>
 80035f6:	e7fe      	b.n	80035f6 <ai_platform_outputs_get+0x46>
 80035f8:	f7ff fdc2 	bl	8003180 <_ai_platform_acquire_crc>
 80035fc:	4b4f      	ldr	r3, [pc, #316]	; (800373c <ai_platform_outputs_get+0x18c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d010      	beq.n	800362c <ai_platform_outputs_get+0x7c>
 800360a:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <ai_platform_outputs_get+0x190>)
 800360c:	2301      	movs	r3, #1
 800360e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003612:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1fb      	bne.n	8003612 <ai_platform_outputs_get+0x62>
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <ai_platform_outputs_get+0x194>)
 800361c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003620:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003624:	4b48      	ldr	r3, [pc, #288]	; (8003748 <ai_platform_outputs_get+0x198>)
 8003626:	429a      	cmp	r2, r3
 8003628:	d00d      	beq.n	8003646 <ai_platform_outputs_get+0x96>
 800362a:	e7fe      	b.n	800362a <ai_platform_outputs_get+0x7a>
 800362c:	4a47      	ldr	r2, [pc, #284]	; (800374c <ai_platform_outputs_get+0x19c>)
 800362e:	2301      	movs	r3, #1
 8003630:	6093      	str	r3, [r2, #8]
 8003632:	6893      	ldr	r3, [r2, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1fc      	bne.n	8003632 <ai_platform_outputs_get+0x82>
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <ai_platform_outputs_get+0x194>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <ai_platform_outputs_get+0x198>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d000      	beq.n	8003646 <ai_platform_outputs_get+0x96>
 8003644:	e7fe      	b.n	8003644 <ai_platform_outputs_get+0x94>
 8003646:	f7ff fd9d 	bl	8003184 <_ai_platform_release_crc>
 800364a:	2000      	movs	r0, #0
 800364c:	b005      	add	sp, #20
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003652:	4a3e      	ldr	r2, [pc, #248]	; (800374c <ai_platform_outputs_get+0x19c>)
 8003654:	2301      	movs	r3, #1
 8003656:	6093      	str	r3, [r2, #8]
 8003658:	6893      	ldr	r3, [r2, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1fc      	bne.n	8003658 <ai_platform_outputs_get+0xa8>
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <ai_platform_outputs_get+0x194>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <ai_platform_outputs_get+0x198>)
 8003666:	429a      	cmp	r2, r3
 8003668:	d150      	bne.n	800370c <ai_platform_outputs_get+0x15c>
 800366a:	f7ff fd8b 	bl	8003184 <_ai_platform_release_crc>
 800366e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d958      	bls.n	8003726 <ai_platform_outputs_get+0x176>
 8003674:	f04f 0b00 	mov.w	fp, #0
 8003678:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800367c:	9703      	str	r7, [sp, #12]
 800367e:	465d      	mov	r5, fp
 8003680:	e016      	b.n	80036b0 <ai_platform_outputs_get+0x100>
 8003682:	9901      	ldr	r1, [sp, #4]
 8003684:	2301      	movs	r3, #1
 8003686:	507b      	str	r3, [r7, r1]
 8003688:	69b1      	ldr	r1, [r6, #24]
 800368a:	6849      	ldr	r1, [r1, #4]
 800368c:	6121      	str	r1, [r4, #16]
 800368e:	f04f 0301 	mov.w	r3, #1
 8003692:	7523      	strb	r3, [r4, #20]
 8003694:	e9c4 c200 	strd	ip, r2, [r4]
 8003698:	6962      	ldr	r2, [r4, #20]
 800369a:	60a0      	str	r0, [r4, #8]
 800369c:	2300      	movs	r3, #0
 800369e:	f369 221f 	bfi	r2, r9, #8, #24
 80036a2:	f8c4 8018 	str.w	r8, [r4, #24]
 80036a6:	60e3      	str	r3, [r4, #12]
 80036a8:	3501      	adds	r5, #1
 80036aa:	f10b 0b1c 	add.w	fp, fp, #28
 80036ae:	6162      	str	r2, [r4, #20]
 80036b0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80036b4:	42ab      	cmp	r3, r5
 80036b6:	b2aa      	uxth	r2, r5
 80036b8:	d929      	bls.n	800370e <ai_platform_outputs_get+0x15e>
 80036ba:	f8da 3010 	ldr.w	r3, [sl, #16]
 80036be:	00e9      	lsls	r1, r5, #3
 80036c0:	9101      	str	r1, [sp, #4]
 80036c2:	b323      	cbz	r3, 800370e <ai_platform_outputs_get+0x15e>
 80036c4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80036c8:	b30e      	cbz	r6, 800370e <ai_platform_outputs_get+0x15e>
 80036ca:	f8da 3014 	ldr.w	r3, [sl, #20]
 80036ce:	69b2      	ldr	r2, [r6, #24]
 80036d0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80036d4:	6810      	ldr	r0, [r2, #0]
 80036d6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80036da:	68b3      	ldr	r3, [r6, #8]
 80036dc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80036e0:	f001 fb5c 	bl	8004d9c <ai_array_to_buffer_fmt>
 80036e4:	69b1      	ldr	r1, [r6, #24]
 80036e6:	4684      	mov	ip, r0
 80036e8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	445c      	add	r4, fp
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d0ca      	beq.n	800368a <ai_platform_outputs_get+0xda>
 80036f4:	2100      	movs	r1, #0
 80036f6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80036fa:	6831      	ldr	r1, [r6, #0]
 80036fc:	6041      	str	r1, [r0, #4]
 80036fe:	b111      	cbz	r1, 8003706 <ai_platform_outputs_get+0x156>
 8003700:	8849      	ldrh	r1, [r1, #2]
 8003702:	2900      	cmp	r1, #0
 8003704:	d1bd      	bne.n	8003682 <ai_platform_outputs_get+0xd2>
 8003706:	69b1      	ldr	r1, [r6, #24]
 8003708:	2000      	movs	r0, #0
 800370a:	e7be      	b.n	800368a <ai_platform_outputs_get+0xda>
 800370c:	e7fe      	b.n	800370c <ai_platform_outputs_get+0x15c>
 800370e:	9f03      	ldr	r7, [sp, #12]
 8003710:	b14a      	cbz	r2, 8003726 <ai_platform_outputs_get+0x176>
 8003712:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003716:	6858      	ldr	r0, [r3, #4]
 8003718:	9b02      	ldr	r3, [sp, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d096      	beq.n	800364c <ai_platform_outputs_get+0x9c>
 800371e:	801a      	strh	r2, [r3, #0]
 8003720:	b005      	add	sp, #20
 8003722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003726:	2218      	movs	r2, #24
 8003728:	2111      	movs	r1, #17
 800372a:	f107 0010 	add.w	r0, r7, #16
 800372e:	f000 fce9 	bl	8004104 <core_set_error>
 8003732:	2200      	movs	r2, #0
 8003734:	4610      	mov	r0, r2
 8003736:	e7ef      	b.n	8003718 <ai_platform_outputs_get+0x168>
 8003738:	a1c00100 	.word	0xa1c00100
 800373c:	e0042000 	.word	0xe0042000
 8003740:	58024000 	.word	0x58024000
 8003744:	f407a5c2 	.word	0xf407a5c2
 8003748:	b5e8b5cd 	.word	0xb5e8b5cd
 800374c:	40023000 	.word	0x40023000

08003750 <ai_platform_network_create>:
 8003750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003754:	b083      	sub	sp, #12
 8003756:	4606      	mov	r6, r0
 8003758:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800375c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003760:	4615      	mov	r5, r2
 8003762:	461f      	mov	r7, r3
 8003764:	f7ff fd0c 	bl	8003180 <_ai_platform_acquire_crc>
 8003768:	b188      	cbz	r0, 800378e <ai_platform_network_create+0x3e>
 800376a:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <ai_platform_network_create+0x190>)
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003772:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003776:	4603      	mov	r3, r0
 8003778:	d00e      	beq.n	8003798 <ai_platform_network_create+0x48>
 800377a:	4a5a      	ldr	r2, [pc, #360]	; (80038e4 <ai_platform_network_create+0x194>)
 800377c:	2118      	movs	r1, #24
 800377e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003782:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003786:	2918      	cmp	r1, #24
 8003788:	d018      	beq.n	80037bc <ai_platform_network_create+0x6c>
 800378a:	f7ff fcfb 	bl	8003184 <_ai_platform_release_crc>
 800378e:	f244 1033 	movw	r0, #16691	; 0x4133
 8003792:	b003      	add	sp, #12
 8003794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003798:	4a53      	ldr	r2, [pc, #332]	; (80038e8 <ai_platform_network_create+0x198>)
 800379a:	2101      	movs	r1, #1
 800379c:	6091      	str	r1, [r2, #8]
 800379e:	2114      	movs	r1, #20
 80037a0:	e001      	b.n	80037a6 <ai_platform_network_create+0x56>
 80037a2:	3901      	subs	r1, #1
 80037a4:	d002      	beq.n	80037ac <ai_platform_network_create+0x5c>
 80037a6:	6894      	ldr	r4, [r2, #8]
 80037a8:	2c00      	cmp	r4, #0
 80037aa:	d1fa      	bne.n	80037a2 <ai_platform_network_create+0x52>
 80037ac:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <ai_platform_network_create+0x198>)
 80037ae:	6891      	ldr	r1, [r2, #8]
 80037b0:	b911      	cbnz	r1, 80037b8 <ai_platform_network_create+0x68>
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	3201      	adds	r2, #1
 80037b6:	d008      	beq.n	80037ca <ai_platform_network_create+0x7a>
 80037b8:	4618      	mov	r0, r3
 80037ba:	e7e6      	b.n	800378a <ai_platform_network_create+0x3a>
 80037bc:	2101      	movs	r1, #1
 80037be:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80037c2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d1fb      	bne.n	80037c2 <ai_platform_network_create+0x72>
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fcda 	bl	8003184 <_ai_platform_release_crc>
 80037d0:	f7ff fcd6 	bl	8003180 <_ai_platform_acquire_crc>
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <ai_platform_network_create+0x190>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d010      	beq.n	8003804 <ai_platform_network_create+0xb4>
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <ai_platform_network_create+0x194>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80037ea:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d1fb      	bne.n	80037ea <ai_platform_network_create+0x9a>
 80037f2:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <ai_platform_network_create+0x19c>)
 80037f4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80037f8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80037fc:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <ai_platform_network_create+0x1a0>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	d00c      	beq.n	800381c <ai_platform_network_create+0xcc>
 8003802:	e7fe      	b.n	8003802 <ai_platform_network_create+0xb2>
 8003804:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <ai_platform_network_create+0x198>)
 8003806:	2301      	movs	r3, #1
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	6893      	ldr	r3, [r2, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1fc      	bne.n	800380a <ai_platform_network_create+0xba>
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <ai_platform_network_create+0x19c>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <ai_platform_network_create+0x1a0>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d122      	bne.n	8003862 <ai_platform_network_create+0x112>
 800381c:	f7ff fcb2 	bl	8003184 <_ai_platform_release_crc>
 8003820:	b38e      	cbz	r6, 8003886 <ai_platform_network_create+0x136>
 8003822:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <ai_platform_network_create+0x1a4>)
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	6035      	str	r5, [r6, #0]
 8003828:	f000 fc64 	bl	80040f4 <core_init>
 800382c:	b1d0      	cbz	r0, 8003864 <ai_platform_network_create+0x114>
 800382e:	f7ff fca7 	bl	8003180 <_ai_platform_acquire_crc>
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <ai_platform_network_create+0x190>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d025      	beq.n	800388c <ai_platform_network_create+0x13c>
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <ai_platform_network_create+0x194>)
 8003842:	2301      	movs	r3, #1
 8003844:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003848:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1fb      	bne.n	8003848 <ai_platform_network_create+0xf8>
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <ai_platform_network_create+0x19c>)
 8003852:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003856:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <ai_platform_network_create+0x1a0>)
 800385c:	429a      	cmp	r2, r3
 800385e:	d022      	beq.n	80038a6 <ai_platform_network_create+0x156>
 8003860:	e7fe      	b.n	8003860 <ai_platform_network_create+0x110>
 8003862:	e7fe      	b.n	8003862 <ai_platform_network_create+0x112>
 8003864:	2430      	movs	r4, #48	; 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	2610      	movs	r6, #16
 800386c:	464a      	mov	r2, r9
 800386e:	4641      	mov	r1, r8
 8003870:	4638      	mov	r0, r7
 8003872:	f001 fa75 	bl	8004d60 <ai_version_get>
 8003876:	4603      	mov	r3, r0
 8003878:	2000      	movs	r0, #0
 800387a:	f364 0007 	bfi	r0, r4, #0, #8
 800387e:	64ab      	str	r3, [r5, #72]	; 0x48
 8003880:	f366 201f 	bfi	r0, r6, #8, #24
 8003884:	e785      	b.n	8003792 <ai_platform_network_create+0x42>
 8003886:	f241 0010 	movw	r0, #4112	; 0x1010
 800388a:	e782      	b.n	8003792 <ai_platform_network_create+0x42>
 800388c:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <ai_platform_network_create+0x198>)
 800388e:	2301      	movs	r3, #1
 8003890:	6093      	str	r3, [r2, #8]
 8003892:	6893      	ldr	r3, [r2, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1fc      	bne.n	8003892 <ai_platform_network_create+0x142>
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <ai_platform_network_create+0x19c>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <ai_platform_network_create+0x1a0>)
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d000      	beq.n	80038a6 <ai_platform_network_create+0x156>
 80038a4:	e7fe      	b.n	80038a4 <ai_platform_network_create+0x154>
 80038a6:	f7ff fc6d 	bl	8003184 <_ai_platform_release_crc>
 80038aa:	2200      	movs	r2, #0
 80038ac:	4641      	mov	r1, r8
 80038ae:	4638      	mov	r0, r7
 80038b0:	f001 fa56 	bl	8004d60 <ai_version_get>
 80038b4:	2200      	movs	r2, #0
 80038b6:	4604      	mov	r4, r0
 80038b8:	2105      	movs	r1, #5
 80038ba:	2001      	movs	r0, #1
 80038bc:	f001 fa50 	bl	8004d60 <ai_version_get>
 80038c0:	4284      	cmp	r4, r0
 80038c2:	d001      	beq.n	80038c8 <ai_platform_network_create+0x178>
 80038c4:	2401      	movs	r4, #1
 80038c6:	e7ce      	b.n	8003866 <ai_platform_network_create+0x116>
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <ai_platform_network_create+0x1a8>)
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	a801      	add	r0, sp, #4
 80038ce:	f001 f88d 	bl	80049ec <ai_check_custom_types>
 80038d2:	b110      	cbz	r0, 80038da <ai_platform_network_create+0x18a>
 80038d4:	2600      	movs	r6, #0
 80038d6:	4634      	mov	r4, r6
 80038d8:	e7c8      	b.n	800386c <ai_platform_network_create+0x11c>
 80038da:	2402      	movs	r4, #2
 80038dc:	e7c3      	b.n	8003866 <ai_platform_network_create+0x116>
 80038de:	bf00      	nop
 80038e0:	e0042000 	.word	0xe0042000
 80038e4:	58024000 	.word	0x58024000
 80038e8:	40023000 	.word	0x40023000
 80038ec:	f407a5c2 	.word	0xf407a5c2
 80038f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80038f4:	a1c00100 	.word	0xa1c00100
 80038f8:	84048403 	.word	0x84048403

080038fc <ai_platform_network_init>:
 80038fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003900:	b1f8      	cbz	r0, 8003942 <ai_platform_network_init+0x46>
 8003902:	4b6e      	ldr	r3, [pc, #440]	; (8003abc <ai_platform_network_init+0x1c0>)
 8003904:	6802      	ldr	r2, [r0, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	4604      	mov	r4, r0
 800390a:	d11a      	bne.n	8003942 <ai_platform_network_init+0x46>
 800390c:	460e      	mov	r6, r1
 800390e:	f7ff fc37 	bl	8003180 <_ai_platform_acquire_crc>
 8003912:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <ai_platform_network_init+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d03d      	beq.n	800399c <ai_platform_network_init+0xa0>
 8003920:	4a68      	ldr	r2, [pc, #416]	; (8003ac4 <ai_platform_network_init+0x1c8>)
 8003922:	2301      	movs	r3, #1
 8003924:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003928:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1fb      	bne.n	8003928 <ai_platform_network_init+0x2c>
 8003930:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <ai_platform_network_init+0x1cc>)
 8003932:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003936:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800393a:	4b64      	ldr	r3, [pc, #400]	; (8003acc <ai_platform_network_init+0x1d0>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d039      	beq.n	80039b4 <ai_platform_network_init+0xb8>
 8003940:	e7fe      	b.n	8003940 <ai_platform_network_init+0x44>
 8003942:	f7ff fc1d 	bl	8003180 <_ai_platform_acquire_crc>
 8003946:	4b5e      	ldr	r3, [pc, #376]	; (8003ac0 <ai_platform_network_init+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003952:	d010      	beq.n	8003976 <ai_platform_network_init+0x7a>
 8003954:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <ai_platform_network_init+0x1c8>)
 8003956:	2301      	movs	r3, #1
 8003958:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800395c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1fb      	bne.n	800395c <ai_platform_network_init+0x60>
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <ai_platform_network_init+0x1cc>)
 8003966:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800396a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800396e:	4b57      	ldr	r3, [pc, #348]	; (8003acc <ai_platform_network_init+0x1d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d00d      	beq.n	8003990 <ai_platform_network_init+0x94>
 8003974:	e7fe      	b.n	8003974 <ai_platform_network_init+0x78>
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <ai_platform_network_init+0x1d4>)
 8003978:	2301      	movs	r3, #1
 800397a:	6093      	str	r3, [r2, #8]
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1fc      	bne.n	800397c <ai_platform_network_init+0x80>
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <ai_platform_network_init+0x1cc>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <ai_platform_network_init+0x1d0>)
 800398a:	429a      	cmp	r2, r3
 800398c:	d000      	beq.n	8003990 <ai_platform_network_init+0x94>
 800398e:	e7fe      	b.n	800398e <ai_platform_network_init+0x92>
 8003990:	f7ff fbf8 	bl	8003184 <_ai_platform_release_crc>
 8003994:	2600      	movs	r6, #0
 8003996:	4630      	mov	r0, r6
 8003998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800399c:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <ai_platform_network_init+0x1d4>)
 800399e:	2301      	movs	r3, #1
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	6893      	ldr	r3, [r2, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1fc      	bne.n	80039a2 <ai_platform_network_init+0xa6>
 80039a8:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <ai_platform_network_init+0x1cc>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <ai_platform_network_init+0x1d0>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d11c      	bne.n	80039ee <ai_platform_network_init+0xf2>
 80039b4:	f7ff fbe6 	bl	8003184 <_ai_platform_release_crc>
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	d06f      	beq.n	8003a9c <ai_platform_network_init+0x1a0>
 80039bc:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <ai_platform_network_init+0x1d8>)
 80039be:	6832      	ldr	r2, [r6, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d115      	bne.n	80039f0 <ai_platform_network_init+0xf4>
 80039c4:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80039c8:	6933      	ldr	r3, [r6, #16]
 80039ca:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80039ce:	89f7      	ldrh	r7, [r6, #14]
 80039d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039d2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80039d6:	2303      	movs	r3, #3
 80039d8:	84e7      	strh	r7, [r4, #38]	; 0x26
 80039da:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80039de:	60e3      	str	r3, [r4, #12]
 80039e0:	4620      	mov	r0, r4
 80039e2:	4626      	mov	r6, r4
 80039e4:	f001 f82c 	bl	8004a40 <ai_layers_init_all>
 80039e8:	4630      	mov	r0, r6
 80039ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ee:	e7fe      	b.n	80039ee <ai_platform_network_init+0xf2>
 80039f0:	2101      	movs	r1, #1
 80039f2:	4630      	mov	r0, r6
 80039f4:	4635      	mov	r5, r6
 80039f6:	6876      	ldr	r6, [r6, #4]
 80039f8:	f7ff fb74 	bl	80030e4 <ai_buffer_get_size>
 80039fc:	f105 081c 	add.w	r8, r5, #28
 8003a00:	4681      	mov	r9, r0
 8003a02:	2101      	movs	r1, #1
 8003a04:	4640      	mov	r0, r8
 8003a06:	6a2f      	ldr	r7, [r5, #32]
 8003a08:	f7ff fb6c 	bl	80030e4 <ai_buffer_get_size>
 8003a0c:	f1b9 0f00 	cmp.w	r9, #0
 8003a10:	d025      	beq.n	8003a5e <ai_platform_network_init+0x162>
 8003a12:	2201      	movs	r2, #1
 8003a14:	4696      	mov	lr, r2
 8003a16:	bb30      	cbnz	r0, 8003a66 <ai_platform_network_init+0x16a>
 8003a18:	4680      	mov	r8, r0
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	b376      	cbz	r6, 8003a7c <ai_platform_network_init+0x180>
 8003a1e:	8be3      	ldrh	r3, [r4, #30]
 8003a20:	4573      	cmp	r3, lr
 8003a22:	d323      	bcc.n	8003a6c <ai_platform_network_init+0x170>
 8003a24:	b142      	cbz	r2, 8003a38 <ai_platform_network_init+0x13c>
 8003a26:	46ac      	mov	ip, r5
 8003a28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a2c:	6a25      	ldr	r5, [r4, #32]
 8003a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a30:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a3a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003a3e:	2600      	movs	r6, #0
 8003a40:	42bb      	cmp	r3, r7
 8003a42:	83a6      	strh	r6, [r4, #28]
 8003a44:	d323      	bcc.n	8003a8e <ai_platform_network_init+0x192>
 8003a46:	b37f      	cbz	r7, 8003aa8 <ai_platform_network_init+0x1ac>
 8003a48:	46c4      	mov	ip, r8
 8003a4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a52:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a56:	46b6      	mov	lr, r6
 8003a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a5c:	e7bb      	b.n	80039d6 <ai_platform_network_init+0xda>
 8003a5e:	464a      	mov	r2, r9
 8003a60:	46ce      	mov	lr, r9
 8003a62:	464d      	mov	r5, r9
 8003a64:	e7d7      	b.n	8003a16 <ai_platform_network_init+0x11a>
 8003a66:	b30f      	cbz	r7, 8003aac <ai_platform_network_init+0x1b0>
 8003a68:	2701      	movs	r7, #1
 8003a6a:	e7d7      	b.n	8003a1c <ai_platform_network_init+0x120>
 8003a6c:	2212      	movs	r2, #18
 8003a6e:	2116      	movs	r1, #22
 8003a70:	f104 0010 	add.w	r0, r4, #16
 8003a74:	f000 fb46 	bl	8004104 <core_set_error>
 8003a78:	2600      	movs	r6, #0
 8003a7a:	e78c      	b.n	8003996 <ai_platform_network_init+0x9a>
 8003a7c:	f1b9 0f00 	cmp.w	r9, #0
 8003a80:	d0cd      	beq.n	8003a1e <ai_platform_network_init+0x122>
 8003a82:	2110      	movs	r1, #16
 8003a84:	2212      	movs	r2, #18
 8003a86:	1860      	adds	r0, r4, r1
 8003a88:	f000 fb3c 	bl	8004104 <core_set_error>
 8003a8c:	e783      	b.n	8003996 <ai_platform_network_init+0x9a>
 8003a8e:	2213      	movs	r2, #19
 8003a90:	2116      	movs	r1, #22
 8003a92:	f104 0010 	add.w	r0, r4, #16
 8003a96:	f000 fb35 	bl	8004104 <core_set_error>
 8003a9a:	e77c      	b.n	8003996 <ai_platform_network_init+0x9a>
 8003a9c:	2110      	movs	r1, #16
 8003a9e:	2211      	movs	r2, #17
 8003aa0:	1860      	adds	r0, r4, r1
 8003aa2:	f000 fb2f 	bl	8004104 <core_set_error>
 8003aa6:	e776      	b.n	8003996 <ai_platform_network_init+0x9a>
 8003aa8:	46be      	mov	lr, r7
 8003aaa:	e794      	b.n	80039d6 <ai_platform_network_init+0xda>
 8003aac:	2110      	movs	r1, #16
 8003aae:	2213      	movs	r2, #19
 8003ab0:	1860      	adds	r0, r4, r1
 8003ab2:	f000 fb27 	bl	8004104 <core_set_error>
 8003ab6:	463e      	mov	r6, r7
 8003ab8:	e76d      	b.n	8003996 <ai_platform_network_init+0x9a>
 8003aba:	bf00      	nop
 8003abc:	a1c00100 	.word	0xa1c00100
 8003ac0:	e0042000 	.word	0xe0042000
 8003ac4:	58024000 	.word	0x58024000
 8003ac8:	f407a5c2 	.word	0xf407a5c2
 8003acc:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ad0:	40023000 	.word	0x40023000
 8003ad4:	a1facade 	.word	0xa1facade

08003ad8 <ai_platform_network_post_init>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	b1f0      	cbz	r0, 8003b1a <ai_platform_network_post_init+0x42>
 8003adc:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <ai_platform_network_post_init+0xf8>)
 8003ade:	6802      	ldr	r2, [r0, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	d119      	bne.n	8003b1a <ai_platform_network_post_init+0x42>
 8003ae6:	f7ff fb4b 	bl	8003180 <_ai_platform_acquire_crc>
 8003aea:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <ai_platform_network_post_init+0xfc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d03b      	beq.n	8003b70 <ai_platform_network_post_init+0x98>
 8003af8:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <ai_platform_network_post_init+0x100>)
 8003afa:	2301      	movs	r3, #1
 8003afc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b00:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1fb      	bne.n	8003b00 <ai_platform_network_post_init+0x28>
 8003b08:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <ai_platform_network_post_init+0x104>)
 8003b0a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <ai_platform_network_post_init+0x108>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d037      	beq.n	8003b88 <ai_platform_network_post_init+0xb0>
 8003b18:	e7fe      	b.n	8003b18 <ai_platform_network_post_init+0x40>
 8003b1a:	f7ff fb31 	bl	8003180 <_ai_platform_acquire_crc>
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <ai_platform_network_post_init+0xfc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d010      	beq.n	8003b4e <ai_platform_network_post_init+0x76>
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <ai_platform_network_post_init+0x100>)
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1fb      	bne.n	8003b34 <ai_platform_network_post_init+0x5c>
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <ai_platform_network_post_init+0x104>)
 8003b3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b46:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <ai_platform_network_post_init+0x108>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d00d      	beq.n	8003b68 <ai_platform_network_post_init+0x90>
 8003b4c:	e7fe      	b.n	8003b4c <ai_platform_network_post_init+0x74>
 8003b4e:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <ai_platform_network_post_init+0x10c>)
 8003b50:	2301      	movs	r3, #1
 8003b52:	6093      	str	r3, [r2, #8]
 8003b54:	6893      	ldr	r3, [r2, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1fc      	bne.n	8003b54 <ai_platform_network_post_init+0x7c>
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <ai_platform_network_post_init+0x104>)
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <ai_platform_network_post_init+0x108>)
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d000      	beq.n	8003b68 <ai_platform_network_post_init+0x90>
 8003b66:	e7fe      	b.n	8003b66 <ai_platform_network_post_init+0x8e>
 8003b68:	f7ff fb0c 	bl	8003184 <_ai_platform_release_crc>
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <ai_platform_network_post_init+0x10c>)
 8003b72:	2301      	movs	r3, #1
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	6893      	ldr	r3, [r2, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1fc      	bne.n	8003b76 <ai_platform_network_post_init+0x9e>
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <ai_platform_network_post_init+0x104>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <ai_platform_network_post_init+0x108>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d11a      	bne.n	8003bbe <ai_platform_network_post_init+0xe6>
 8003b88:	f7ff fafc 	bl	8003184 <_ai_platform_release_crc>
 8003b8c:	68e3      	ldr	r3, [r4, #12]
 8003b8e:	f013 0502 	ands.w	r5, r3, #2
 8003b92:	d015      	beq.n	8003bc0 <ai_platform_network_post_init+0xe8>
 8003b94:	4620      	mov	r0, r4
 8003b96:	f000 ff61 	bl	8004a5c <ai_layers_post_init_all>
 8003b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b9c:	b16b      	cbz	r3, 8003bba <ai_platform_network_post_init+0xe2>
 8003b9e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003ba0:	e007      	b.n	8003bb2 <ai_platform_network_post_init+0xda>
 8003ba2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003ba6:	4798      	blx	r3
 8003ba8:	692b      	ldr	r3, [r5, #16]
 8003baa:	42ab      	cmp	r3, r5
 8003bac:	d005      	beq.n	8003bba <ai_platform_network_post_init+0xe2>
 8003bae:	b123      	cbz	r3, 8003bba <ai_platform_network_post_init+0xe2>
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d1f3      	bne.n	8003ba2 <ai_platform_network_post_init+0xca>
 8003bba:	2001      	movs	r0, #1
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	e7fe      	b.n	8003bbe <ai_platform_network_post_init+0xe6>
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	2111      	movs	r1, #17
 8003bc4:	18a0      	adds	r0, r4, r2
 8003bc6:	f000 fa9d 	bl	8004104 <core_set_error>
 8003bca:	4628      	mov	r0, r5
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	a1c00100 	.word	0xa1c00100
 8003bd4:	e0042000 	.word	0xe0042000
 8003bd8:	58024000 	.word	0x58024000
 8003bdc:	f407a5c2 	.word	0xf407a5c2
 8003be0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003be4:	40023000 	.word	0x40023000

08003be8 <ai_platform_network_process>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	460e      	mov	r6, r1
 8003bee:	b085      	sub	sp, #20
 8003bf0:	4693      	mov	fp, r2
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	b120      	cbz	r0, 8003c00 <ai_platform_network_process+0x18>
 8003bf6:	4bb8      	ldr	r3, [pc, #736]	; (8003ed8 <ai_platform_network_process+0x2f0>)
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf18      	it	ne
 8003bfe:	2500      	movne	r5, #0
 8003c00:	f7ff fabe 	bl	8003180 <_ai_platform_acquire_crc>
 8003c04:	4bb5      	ldr	r3, [pc, #724]	; (8003edc <ai_platform_network_process+0x2f4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c10:	d010      	beq.n	8003c34 <ai_platform_network_process+0x4c>
 8003c12:	4ab3      	ldr	r2, [pc, #716]	; (8003ee0 <ai_platform_network_process+0x2f8>)
 8003c14:	2301      	movs	r3, #1
 8003c16:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003c1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1fb      	bne.n	8003c1a <ai_platform_network_process+0x32>
 8003c22:	4bb0      	ldr	r3, [pc, #704]	; (8003ee4 <ai_platform_network_process+0x2fc>)
 8003c24:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003c28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003c2c:	4bae      	ldr	r3, [pc, #696]	; (8003ee8 <ai_platform_network_process+0x300>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d00d      	beq.n	8003c4e <ai_platform_network_process+0x66>
 8003c32:	e7fe      	b.n	8003c32 <ai_platform_network_process+0x4a>
 8003c34:	4aad      	ldr	r2, [pc, #692]	; (8003eec <ai_platform_network_process+0x304>)
 8003c36:	2301      	movs	r3, #1
 8003c38:	6093      	str	r3, [r2, #8]
 8003c3a:	6893      	ldr	r3, [r2, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1fc      	bne.n	8003c3a <ai_platform_network_process+0x52>
 8003c40:	4ba8      	ldr	r3, [pc, #672]	; (8003ee4 <ai_platform_network_process+0x2fc>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	4ba8      	ldr	r3, [pc, #672]	; (8003ee8 <ai_platform_network_process+0x300>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	f040 812c 	bne.w	8003ea6 <ai_platform_network_process+0x2be>
 8003c4e:	f7ff fa99 	bl	8003184 <_ai_platform_release_crc>
 8003c52:	2d00      	cmp	r5, #0
 8003c54:	f000 8154 	beq.w	8003f00 <ai_platform_network_process+0x318>
 8003c58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8124 	beq.w	8003ea8 <ai_platform_network_process+0x2c0>
 8003c60:	68eb      	ldr	r3, [r5, #12]
 8003c62:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2700      	movs	r7, #0
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	616f      	str	r7, [r5, #20]
 8003c70:	f040 813e 	bne.w	8003ef0 <ai_platform_network_process+0x308>
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	f000 811d 	beq.w	8003eb4 <ai_platform_network_process+0x2cc>
 8003c7a:	f1ba 0f00 	cmp.w	sl, #0
 8003c7e:	f000 8119 	beq.w	8003eb4 <ai_platform_network_process+0x2cc>
 8003c82:	f8ba 3000 	ldrh.w	r3, [sl]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8114 	beq.w	8003eb4 <ai_platform_network_process+0x2cc>
 8003c8c:	69b3      	ldr	r3, [r6, #24]
 8003c8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003c98:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d072      	beq.n	8003d86 <ai_platform_network_process+0x19e>
 8003ca0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d06e      	beq.n	8003d86 <ai_platform_network_process+0x19e>
 8003ca8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003cac:	f8d3 9000 	ldr.w	r9, [r3]
 8003cb0:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003cb4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003cb8:	f000 81e0 	beq.w	800407c <ai_platform_network_process+0x494>
 8003cbc:	69a3      	ldr	r3, [r4, #24]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	685d      	ldr	r5, [r3, #4]
 8003cc4:	f7ff fa0e 	bl	80030e4 <ai_buffer_get_size>
 8003cc8:	4285      	cmp	r5, r0
 8003cca:	f0c0 811b 	bcc.w	8003f04 <ai_platform_network_process+0x31c>
 8003cce:	68e0      	ldr	r0, [r4, #12]
 8003cd0:	69b1      	ldr	r1, [r6, #24]
 8003cd2:	68c2      	ldr	r2, [r0, #12]
 8003cd4:	68cb      	ldr	r3, [r1, #12]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f040 8114 	bne.w	8003f04 <ai_platform_network_process+0x31c>
 8003cdc:	6882      	ldr	r2, [r0, #8]
 8003cde:	688b      	ldr	r3, [r1, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f040 810f 	bne.w	8003f04 <ai_platform_network_process+0x31c>
 8003ce6:	6842      	ldr	r2, [r0, #4]
 8003ce8:	684b      	ldr	r3, [r1, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	f040 810a 	bne.w	8003f04 <ai_platform_network_process+0x31c>
 8003cf0:	69a3      	ldr	r3, [r4, #24]
 8003cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf6:	f001 f8e5 	bl	8004ec4 <ai_array_get_data_byte_size>
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f001 f835 	bl	8004d6c <get_tensor_byte_size>
 8003d02:	4285      	cmp	r5, r0
 8003d04:	f0c0 80fe 	bcc.w	8003f04 <ai_platform_network_process+0x31c>
 8003d08:	69a3      	ldr	r3, [r4, #24]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	f001 f846 	bl	8004d9c <ai_array_to_buffer_fmt>
 8003d10:	6833      	ldr	r3, [r6, #0]
 8003d12:	4058      	eors	r0, r3
 8003d14:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003d18:	f040 81bb 	bne.w	8004092 <ai_platform_network_process+0x4aa>
 8003d1c:	6873      	ldr	r3, [r6, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 81ae 	beq.w	8004080 <ai_platform_network_process+0x498>
 8003d24:	69b3      	ldr	r3, [r6, #24]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 819e 	beq.w	800406a <ai_platform_network_process+0x482>
 8003d2e:	9a01      	ldr	r2, [sp, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bf38      	it	cc
 8003d34:	461a      	movcc	r2, r3
 8003d36:	4620      	mov	r0, r4
 8003d38:	9201      	str	r2, [sp, #4]
 8003d3a:	f001 f817 	bl	8004d6c <get_tensor_byte_size>
 8003d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d42:	69b3      	ldr	r3, [r6, #24]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	fb00 f303 	mul.w	r3, r0, r3
 8003d4a:	f8c8 300c 	str.w	r3, [r8, #12]
 8003d4e:	6871      	ldr	r1, [r6, #4]
 8003d50:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d54:	440b      	add	r3, r1
 8003d56:	f849 300b 	str.w	r3, [r9, fp]
 8003d5a:	69a0      	ldr	r0, [r4, #24]
 8003d5c:	6803      	ldr	r3, [r0, #0]
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	f107 0701 	add.w	r7, r7, #1
 8003d64:	f106 061c 	add.w	r6, r6, #28
 8003d68:	f100 80af 	bmi.w	8003eca <ai_platform_network_process+0x2e2>
 8003d6c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	4419      	add	r1, r3
 8003d74:	6081      	str	r1, [r0, #8]
 8003d76:	69a3      	ldr	r3, [r4, #24]
 8003d78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d82:	42bb      	cmp	r3, r7
 8003d84:	d888      	bhi.n	8003c98 <ai_platform_network_process+0xb0>
 8003d86:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003d8a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003d8c:	f1bb 0f00 	cmp.w	fp, #0
 8003d90:	f000 8188 	beq.w	80040a4 <ai_platform_network_process+0x4bc>
 8003d94:	2a01      	cmp	r2, #1
 8003d96:	f240 8160 	bls.w	800405a <ai_platform_network_process+0x472>
 8003d9a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003d9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8159 	beq.w	800405a <ai_platform_network_process+0x472>
 8003da8:	465e      	mov	r6, fp
 8003daa:	2700      	movs	r7, #0
 8003dac:	462c      	mov	r4, r5
 8003dae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80b4 	beq.w	8003f20 <ai_platform_network_process+0x338>
 8003db8:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f000 80af 	beq.w	8003f20 <ai_platform_network_process+0x338>
 8003dc2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003dc6:	f8d3 8000 	ldr.w	r8, [r3]
 8003dca:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003dce:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003dd2:	f000 8173 	beq.w	80040bc <ai_platform_network_process+0x4d4>
 8003dd6:	69ab      	ldr	r3, [r5, #24]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	9302      	str	r3, [sp, #8]
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff f980 	bl	80030e4 <ai_buffer_get_size>
 8003de4:	9b02      	ldr	r3, [sp, #8]
 8003de6:	4283      	cmp	r3, r0
 8003de8:	f0c0 8136 	bcc.w	8004058 <ai_platform_network_process+0x470>
 8003dec:	68e8      	ldr	r0, [r5, #12]
 8003dee:	69b1      	ldr	r1, [r6, #24]
 8003df0:	68c2      	ldr	r2, [r0, #12]
 8003df2:	68cb      	ldr	r3, [r1, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	f040 812f 	bne.w	8004058 <ai_platform_network_process+0x470>
 8003dfa:	6882      	ldr	r2, [r0, #8]
 8003dfc:	688b      	ldr	r3, [r1, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	f040 812a 	bne.w	8004058 <ai_platform_network_process+0x470>
 8003e04:	6842      	ldr	r2, [r0, #4]
 8003e06:	684b      	ldr	r3, [r1, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8125 	bne.w	8004058 <ai_platform_network_process+0x470>
 8003e0e:	69ab      	ldr	r3, [r5, #24]
 8003e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e14:	f001 f856 	bl	8004ec4 <ai_array_get_data_byte_size>
 8003e18:	9002      	str	r0, [sp, #8]
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 ffa6 	bl	8004d6c <get_tensor_byte_size>
 8003e20:	9b02      	ldr	r3, [sp, #8]
 8003e22:	4283      	cmp	r3, r0
 8003e24:	f0c0 8118 	bcc.w	8004058 <ai_platform_network_process+0x470>
 8003e28:	69ab      	ldr	r3, [r5, #24]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	f000 ffb6 	bl	8004d9c <ai_array_to_buffer_fmt>
 8003e30:	6833      	ldr	r3, [r6, #0]
 8003e32:	4058      	eors	r0, r3
 8003e34:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003e38:	f040 8138 	bne.w	80040ac <ai_platform_network_process+0x4c4>
 8003e3c:	6873      	ldr	r3, [r6, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 814f 	beq.w	80040e2 <ai_platform_network_process+0x4fa>
 8003e44:	69b3      	ldr	r3, [r6, #24]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8141 	beq.w	80040d0 <ai_platform_network_process+0x4e8>
 8003e4e:	9a01      	ldr	r2, [sp, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	bf38      	it	cc
 8003e54:	461a      	movcc	r2, r3
 8003e56:	4628      	mov	r0, r5
 8003e58:	9201      	str	r2, [sp, #4]
 8003e5a:	f000 ff87 	bl	8004d6c <get_tensor_byte_size>
 8003e5e:	f8ca 0008 	str.w	r0, [sl, #8]
 8003e62:	69b3      	ldr	r3, [r6, #24]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fb00 f303 	mul.w	r3, r0, r3
 8003e6a:	f8ca 300c 	str.w	r3, [sl, #12]
 8003e6e:	6871      	ldr	r1, [r6, #4]
 8003e70:	f8ca 1004 	str.w	r1, [sl, #4]
 8003e74:	440b      	add	r3, r1
 8003e76:	f848 300b 	str.w	r3, [r8, fp]
 8003e7a:	69a8      	ldr	r0, [r5, #24]
 8003e7c:	6803      	ldr	r3, [r0, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	f107 0701 	add.w	r7, r7, #1
 8003e84:	f106 061c 	add.w	r6, r6, #28
 8003e88:	d445      	bmi.n	8003f16 <ai_platform_network_process+0x32e>
 8003e8a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	4419      	add	r1, r3
 8003e92:	6081      	str	r1, [r0, #8]
 8003e94:	69ab      	ldr	r3, [r5, #24]
 8003e96:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003ea0:	429f      	cmp	r7, r3
 8003ea2:	d384      	bcc.n	8003dae <ai_platform_network_process+0x1c6>
 8003ea4:	e03c      	b.n	8003f20 <ai_platform_network_process+0x338>
 8003ea6:	e7fe      	b.n	8003ea6 <ai_platform_network_process+0x2be>
 8003ea8:	68ea      	ldr	r2, [r5, #12]
 8003eaa:	616b      	str	r3, [r5, #20]
 8003eac:	f002 0203 	and.w	r2, r2, #3
 8003eb0:	2a03      	cmp	r2, #3
 8003eb2:	d11d      	bne.n	8003ef0 <ai_platform_network_process+0x308>
 8003eb4:	2217      	movs	r2, #23
 8003eb6:	2112      	movs	r1, #18
 8003eb8:	f105 0010 	add.w	r0, r5, #16
 8003ebc:	f000 f922 	bl	8004104 <core_set_error>
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	b005      	add	sp, #20
 8003ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eca:	f8ba 3000 	ldrh.w	r3, [sl]
 8003ece:	429f      	cmp	r7, r3
 8003ed0:	f4ff aee2 	bcc.w	8003c98 <ai_platform_network_process+0xb0>
 8003ed4:	e757      	b.n	8003d86 <ai_platform_network_process+0x19e>
 8003ed6:	bf00      	nop
 8003ed8:	a1c00100 	.word	0xa1c00100
 8003edc:	e0042000 	.word	0xe0042000
 8003ee0:	58024000 	.word	0x58024000
 8003ee4:	f407a5c2 	.word	0xf407a5c2
 8003ee8:	b5e8b5cd 	.word	0xb5e8b5cd
 8003eec:	40023000 	.word	0x40023000
 8003ef0:	2230      	movs	r2, #48	; 0x30
 8003ef2:	2111      	movs	r1, #17
 8003ef4:	f105 0010 	add.w	r0, r5, #16
 8003ef8:	f000 f904 	bl	8004104 <core_set_error>
 8003efc:	2400      	movs	r4, #0
 8003efe:	e7e0      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 8003f00:	462c      	mov	r4, r5
 8003f02:	e7de      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 8003f04:	9d02      	ldr	r5, [sp, #8]
 8003f06:	2218      	movs	r2, #24
 8003f08:	2112      	movs	r1, #18
 8003f0a:	f105 0010 	add.w	r0, r5, #16
 8003f0e:	f000 f8f9 	bl	8004104 <core_set_error>
 8003f12:	2400      	movs	r4, #0
 8003f14:	e7d5      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 8003f16:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003f1a:	429f      	cmp	r7, r3
 8003f1c:	f4ff af47 	bcc.w	8003dae <ai_platform_network_process+0x1c6>
 8003f20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f24:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003f26:	82a3      	strh	r3, [r4, #20]
 8003f28:	4625      	mov	r5, r4
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	f040 808e 	bne.w	800404c <ai_platform_network_process+0x464>
 8003f30:	4616      	mov	r6, r2
 8003f32:	4617      	mov	r7, r2
 8003f34:	8aec      	ldrh	r4, [r5, #22]
 8003f36:	429c      	cmp	r4, r3
 8003f38:	bf38      	it	cc
 8003f3a:	46ab      	movcc	fp, r5
 8003f3c:	d2c1      	bcs.n	8003ec2 <ai_platform_network_process+0x2da>
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	d030      	beq.n	8003fa4 <ai_platform_network_process+0x3bc>
 8003f42:	f04f 0800 	mov.w	r8, #0
 8003f46:	e014      	b.n	8003f72 <ai_platform_network_process+0x38a>
 8003f48:	6882      	ldr	r2, [r0, #8]
 8003f4a:	68c5      	ldr	r5, [r0, #12]
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	1b52      	subs	r2, r2, r5
 8003f50:	4413      	add	r3, r2
 8003f52:	6083      	str	r3, [r0, #8]
 8003f54:	698b      	ldr	r3, [r1, #24]
 8003f56:	6862      	ldr	r2, [r4, #4]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003f5e:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f62:	440b      	add	r3, r1
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bf24      	itt	cs
 8003f68:	68e3      	ldrcs	r3, [r4, #12]
 8003f6a:	1ad3      	subcs	r3, r2, r3
 8003f6c:	6063      	str	r3, [r4, #4]
 8003f6e:	f108 0801 	add.w	r8, r8, #1
 8003f72:	8833      	ldrh	r3, [r6, #0]
 8003f74:	4543      	cmp	r3, r8
 8003f76:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003f7a:	d913      	bls.n	8003fa4 <ai_platform_network_process+0x3bc>
 8003f7c:	6873      	ldr	r3, [r6, #4]
 8003f7e:	b18b      	cbz	r3, 8003fa4 <ai_platform_network_process+0x3bc>
 8003f80:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003f84:	b171      	cbz	r1, 8003fa4 <ai_platform_network_process+0x3bc>
 8003f86:	6988      	ldr	r0, [r1, #24]
 8003f88:	68b2      	ldr	r2, [r6, #8]
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	f8d2 9000 	ldr.w	r9, [r2]
 8003f90:	009d      	lsls	r5, r3, #2
 8003f92:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003f96:	d5d7      	bpl.n	8003f48 <ai_platform_network_process+0x360>
 8003f98:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003f9c:	6880      	ldr	r0, [r0, #8]
 8003f9e:	f001 fb3d 	bl	800561c <memcpy>
 8003fa2:	e7da      	b.n	8003f5a <ai_platform_network_process+0x372>
 8003fa4:	4658      	mov	r0, fp
 8003fa6:	f000 fd6d 	bl	8004a84 <ai_layers_forward_all>
 8003faa:	2f00      	cmp	r7, #0
 8003fac:	d03f      	beq.n	800402e <ai_platform_network_process+0x446>
 8003fae:	2400      	movs	r4, #0
 8003fb0:	e016      	b.n	8003fe0 <ai_platform_network_process+0x3f8>
 8003fb2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003fb6:	f859 100a 	ldr.w	r1, [r9, sl]
 8003fba:	4413      	add	r3, r2
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	bf24      	itt	cs
 8003fc0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003fc4:	1acb      	subcs	r3, r1, r3
 8003fc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003fca:	6981      	ldr	r1, [r0, #24]
 8003fcc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003fd0:	1b52      	subs	r2, r2, r5
 8003fd2:	4413      	add	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
 8003fd6:	6983      	ldr	r3, [r0, #24]
 8003fd8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	3401      	adds	r4, #1
 8003fe0:	883b      	ldrh	r3, [r7, #0]
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	d923      	bls.n	800402e <ai_platform_network_process+0x446>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	b30b      	cbz	r3, 800402e <ai_platform_network_process+0x446>
 8003fea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fee:	b1f0      	cbz	r0, 800402e <ai_platform_network_process+0x446>
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	6983      	ldr	r3, [r0, #24]
 8003ff4:	f8d2 9000 	ldr.w	r9, [r2]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	0092      	lsls	r2, r2, #2
 8003ffc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004000:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004004:	d5d5      	bpl.n	8003fb2 <ai_platform_network_process+0x3ca>
 8004006:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800400a:	6899      	ldr	r1, [r3, #8]
 800400c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004010:	f001 fb04 	bl	800561c <memcpy>
 8004014:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004018:	f859 200a 	ldr.w	r2, [r9, sl]
 800401c:	440b      	add	r3, r1
 800401e:	4293      	cmp	r3, r2
 8004020:	bf24      	itt	cs
 8004022:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004026:	1ad3      	subcs	r3, r2, r3
 8004028:	f8c8 3004 	str.w	r3, [r8, #4]
 800402c:	e7d7      	b.n	8003fde <ai_platform_network_process+0x3f6>
 800402e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8004032:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004036:	3401      	adds	r4, #1
 8004038:	b2a4      	uxth	r4, r4
 800403a:	42a3      	cmp	r3, r4
 800403c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8004040:	f63f af7d 	bhi.w	8003f3e <ai_platform_network_process+0x356>
 8004044:	4620      	mov	r0, r4
 8004046:	b005      	add	sp, #20
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	2a01      	cmp	r2, #1
 800404e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004050:	d03c      	beq.n	80040cc <ai_platform_network_process+0x4e4>
 8004052:	f106 070c 	add.w	r7, r6, #12
 8004056:	e76d      	b.n	8003f34 <ai_platform_network_process+0x34c>
 8004058:	4625      	mov	r5, r4
 800405a:	2218      	movs	r2, #24
 800405c:	2113      	movs	r1, #19
 800405e:	f105 0010 	add.w	r0, r5, #16
 8004062:	f000 f84f 	bl	8004104 <core_set_error>
 8004066:	2400      	movs	r4, #0
 8004068:	e72b      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 800406a:	9d02      	ldr	r5, [sp, #8]
 800406c:	4604      	mov	r4, r0
 800406e:	2221      	movs	r2, #33	; 0x21
 8004070:	2112      	movs	r1, #18
 8004072:	f105 0010 	add.w	r0, r5, #16
 8004076:	f000 f845 	bl	8004104 <core_set_error>
 800407a:	e722      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 800407c:	9d02      	ldr	r5, [sp, #8]
 800407e:	e719      	b.n	8003eb4 <ai_platform_network_process+0x2cc>
 8004080:	9d02      	ldr	r5, [sp, #8]
 8004082:	4604      	mov	r4, r0
 8004084:	2217      	movs	r2, #23
 8004086:	2112      	movs	r1, #18
 8004088:	f105 0010 	add.w	r0, r5, #16
 800408c:	f000 f83a 	bl	8004104 <core_set_error>
 8004090:	e717      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 8004092:	9d02      	ldr	r5, [sp, #8]
 8004094:	2219      	movs	r2, #25
 8004096:	2112      	movs	r1, #18
 8004098:	f105 0010 	add.w	r0, r5, #16
 800409c:	f000 f832 	bl	8004104 <core_set_error>
 80040a0:	2400      	movs	r4, #0
 80040a2:	e70e      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 80040a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80040a8:	82ab      	strh	r3, [r5, #20]
 80040aa:	e73e      	b.n	8003f2a <ai_platform_network_process+0x342>
 80040ac:	f104 0010 	add.w	r0, r4, #16
 80040b0:	2219      	movs	r2, #25
 80040b2:	2113      	movs	r1, #19
 80040b4:	f000 f826 	bl	8004104 <core_set_error>
 80040b8:	2400      	movs	r4, #0
 80040ba:	e702      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 80040bc:	f104 0010 	add.w	r0, r4, #16
 80040c0:	2217      	movs	r2, #23
 80040c2:	2113      	movs	r1, #19
 80040c4:	f000 f81e 	bl	8004104 <core_set_error>
 80040c8:	4654      	mov	r4, sl
 80040ca:	e6fa      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 80040cc:	2700      	movs	r7, #0
 80040ce:	e731      	b.n	8003f34 <ai_platform_network_process+0x34c>
 80040d0:	4625      	mov	r5, r4
 80040d2:	2221      	movs	r2, #33	; 0x21
 80040d4:	4604      	mov	r4, r0
 80040d6:	2113      	movs	r1, #19
 80040d8:	f105 0010 	add.w	r0, r5, #16
 80040dc:	f000 f812 	bl	8004104 <core_set_error>
 80040e0:	e6ef      	b.n	8003ec2 <ai_platform_network_process+0x2da>
 80040e2:	4625      	mov	r5, r4
 80040e4:	2217      	movs	r2, #23
 80040e6:	4604      	mov	r4, r0
 80040e8:	2113      	movs	r1, #19
 80040ea:	f105 0010 	add.w	r0, r5, #16
 80040ee:	f000 f809 	bl	8004104 <core_set_error>
 80040f2:	e6e6      	b.n	8003ec2 <ai_platform_network_process+0x2da>

080040f4 <core_init>:
 80040f4:	2001      	movs	r0, #1
 80040f6:	4770      	bx	lr

080040f8 <core_get_error>:
 80040f8:	4603      	mov	r3, r0
 80040fa:	2200      	movs	r2, #0
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <core_set_error>:
 8004104:	4603      	mov	r3, r0
 8004106:	7800      	ldrb	r0, [r0, #0]
 8004108:	b108      	cbz	r0, 800410e <core_set_error+0xa>
 800410a:	2000      	movs	r0, #0
 800410c:	4770      	bx	lr
 800410e:	7019      	strb	r1, [r3, #0]
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	f362 211f 	bfi	r1, r2, #8, #24
 8004116:	2001      	movs	r0, #1
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	4770      	bx	lr

0800411c <forward_dense>:
 800411c:	6983      	ldr	r3, [r0, #24]
 800411e:	881a      	ldrh	r2, [r3, #0]
 8004120:	2a00      	cmp	r2, #0
 8004122:	f000 8181 	beq.w	8004428 <forward_dense+0x30c>
 8004126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	ed2d 8b02 	vpush	{d8}
 800412e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004132:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8004136:	b095      	sub	sp, #84	; 0x54
 8004138:	b105      	cbz	r5, 800413c <forward_dense+0x20>
 800413a:	682d      	ldr	r5, [r5, #0]
 800413c:	2a01      	cmp	r2, #1
 800413e:	f000 828f 	beq.w	8004660 <forward_dense+0x544>
 8004142:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8004146:	b106      	cbz	r6, 800414a <forward_dense+0x2e>
 8004148:	6836      	ldr	r6, [r6, #0]
 800414a:	2a02      	cmp	r2, #2
 800414c:	f000 816e 	beq.w	800442c <forward_dense+0x310>
 8004150:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8004154:	930b      	str	r3, [sp, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8274 	beq.w	8004644 <forward_dense+0x528>
 800415c:	4619      	mov	r1, r3
 800415e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8004162:	6809      	ldr	r1, [r1, #0]
 8004164:	910d      	str	r1, [sp, #52]	; 0x34
 8004166:	2b01      	cmp	r3, #1
 8004168:	f240 826e 	bls.w	8004648 <forward_dense+0x52c>
 800416c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	930b      	str	r3, [sp, #44]	; 0x2c
 8004172:	460b      	mov	r3, r1
 8004174:	68e8      	ldr	r0, [r5, #12]
 8004176:	68f7      	ldr	r7, [r6, #12]
 8004178:	6840      	ldr	r0, [r0, #4]
 800417a:	6999      	ldr	r1, [r3, #24]
 800417c:	9013      	str	r0, [sp, #76]	; 0x4c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	680b      	ldr	r3, [r1, #0]
 8004182:	9012      	str	r0, [sp, #72]	; 0x48
 8004184:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004188:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800418c:	fb00 f404 	mul.w	r4, r0, r4
 8004190:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004194:	fa4e f000 	asr.w	r0, lr, r0
 8004198:	2a03      	cmp	r2, #3
 800419a:	9010      	str	r0, [sp, #64]	; 0x40
 800419c:	f000 825d 	beq.w	800465a <forward_dense+0x53e>
 80041a0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80041a4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	f000 8246 	beq.w	800463a <forward_dense+0x51e>
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	2a00      	cmp	r2, #0
 80041b2:	f000 8242 	beq.w	800463a <forward_dense+0x51e>
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80041bc:	f000 822c 	beq.w	8004618 <forward_dense+0x4fc>
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	f000 8229 	beq.w	8004618 <forward_dense+0x4fc>
 80041c6:	f04f 0b00 	mov.w	fp, #0
 80041ca:	69b2      	ldr	r2, [r6, #24]
 80041cc:	69ab      	ldr	r3, [r5, #24]
 80041ce:	6891      	ldr	r1, [r2, #8]
 80041d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	6952      	ldr	r2, [r2, #20]
 80041d6:	9106      	str	r1, [sp, #24]
 80041d8:	fb07 f404 	mul.w	r4, r7, r4
 80041dc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80041e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041e2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80041e6:	4281      	cmp	r1, r0
 80041e8:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80041ec:	900e      	str	r0, [sp, #56]	; 0x38
 80041ee:	940c      	str	r4, [sp, #48]	; 0x30
 80041f0:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80041f4:	f080 8113 	bcs.w	800441e <forward_dense+0x302>
 80041f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80041fa:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8004448 <forward_dense+0x32c>
 80041fe:	f021 0201 	bic.w	r2, r1, #1
 8004202:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004206:	9204      	str	r2, [sp, #16]
 8004208:	f001 0201 	and.w	r2, r1, #1
 800420c:	08c8      	lsrs	r0, r1, #3
 800420e:	9208      	str	r2, [sp, #32]
 8004210:	008a      	lsls	r2, r1, #2
 8004212:	f001 0a07 	and.w	sl, r1, #7
 8004216:	920f      	str	r2, [sp, #60]	; 0x3c
 8004218:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800421c:	3320      	adds	r3, #32
 800421e:	465c      	mov	r4, fp
 8004220:	9007      	str	r0, [sp, #28]
 8004222:	46cb      	mov	fp, r9
 8004224:	9205      	str	r2, [sp, #20]
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	46c1      	mov	r9, r8
 800422a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800422e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	9b02      	ldr	r3, [sp, #8]
 8004236:	3b20      	subs	r3, #32
 8004238:	930a      	str	r3, [sp, #40]	; 0x28
 800423a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800423c:	b10b      	cbz	r3, 8004242 <forward_dense+0x126>
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2c00      	cmp	r4, #0
 8004244:	f000 81da 	beq.w	80045fc <forward_dense+0x4e0>
 8004248:	9910      	ldr	r1, [sp, #64]	; 0x40
 800424a:	2904      	cmp	r1, #4
 800424c:	9906      	ldr	r1, [sp, #24]
 800424e:	f000 80fd 	beq.w	800444c <forward_dense+0x330>
 8004252:	4549      	cmp	r1, r9
 8004254:	f080 80d2 	bcs.w	80043fc <forward_dense+0x2e0>
 8004258:	460f      	mov	r7, r1
 800425a:	9907      	ldr	r1, [sp, #28]
 800425c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004260:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004264:	1c4e      	adds	r6, r1, #1
 8004266:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800426a:	4694      	mov	ip, r2
 800426c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800426e:	468e      	mov	lr, r1
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80de 	beq.w	8004432 <forward_dense+0x316>
 8004276:	ecf3 2a01 	vldmia	r3!, {s5}
 800427a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004448 <forward_dense+0x32c>
 800427e:	f1be 0f00 	cmp.w	lr, #0
 8004282:	f000 80de 	beq.w	8004442 <forward_dense+0x326>
 8004286:	f10c 0108 	add.w	r1, ip, #8
 800428a:	4640      	mov	r0, r8
 800428c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004290:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8004294:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004298:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800429c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80042a0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80042a4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80042a8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80042ac:	ed50 6a01 	vldr	s13, [r0, #-4]
 80042b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042b4:	edd5 7a00 	vldr	s15, [r5]
 80042b8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80042bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042c0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80042c4:	ed95 3a00 	vldr	s6, [r5]
 80042c8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80042cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80042d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042d4:	3108      	adds	r1, #8
 80042d6:	edd5 3a00 	vldr	s7, [r5]
 80042da:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80042de:	eee3 7a84 	vfma.f32	s15, s7, s8
 80042e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042e6:	3020      	adds	r0, #32
 80042e8:	ed95 4a00 	vldr	s8, [r5]
 80042ec:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80042f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80042f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042f8:	edd5 4a00 	vldr	s9, [r5]
 80042fc:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004300:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004304:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004308:	ed95 5a00 	vldr	s10, [r5]
 800430c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8004310:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004314:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004318:	edd5 5a00 	vldr	s11, [r5]
 800431c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004320:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004324:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004328:	428e      	cmp	r6, r1
 800432a:	ed95 6a00 	vldr	s12, [r5]
 800432e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004336:	d1a9      	bne.n	800428c <forward_dense+0x170>
 8004338:	f1a6 0108 	sub.w	r1, r6, #8
 800433c:	4650      	mov	r0, sl
 800433e:	2a00      	cmp	r2, #0
 8004340:	d04a      	beq.n	80043d8 <forward_dense+0x2bc>
 8004342:	780d      	ldrb	r5, [r1, #0]
 8004344:	edd0 6a00 	vldr	s13, [r0]
 8004348:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800434c:	edd5 7a00 	vldr	s15, [r5]
 8004350:	2a01      	cmp	r2, #1
 8004352:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004356:	d03f      	beq.n	80043d8 <forward_dense+0x2bc>
 8004358:	784d      	ldrb	r5, [r1, #1]
 800435a:	edd0 6a01 	vldr	s13, [r0, #4]
 800435e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004362:	edd5 7a00 	vldr	s15, [r5]
 8004366:	2a02      	cmp	r2, #2
 8004368:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800436c:	d034      	beq.n	80043d8 <forward_dense+0x2bc>
 800436e:	788d      	ldrb	r5, [r1, #2]
 8004370:	edd0 6a02 	vldr	s13, [r0, #8]
 8004374:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004378:	edd5 7a00 	vldr	s15, [r5]
 800437c:	2a03      	cmp	r2, #3
 800437e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004382:	d029      	beq.n	80043d8 <forward_dense+0x2bc>
 8004384:	78cd      	ldrb	r5, [r1, #3]
 8004386:	edd0 6a03 	vldr	s13, [r0, #12]
 800438a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800438e:	edd5 7a00 	vldr	s15, [r5]
 8004392:	2a04      	cmp	r2, #4
 8004394:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004398:	d01e      	beq.n	80043d8 <forward_dense+0x2bc>
 800439a:	790d      	ldrb	r5, [r1, #4]
 800439c:	edd0 6a04 	vldr	s13, [r0, #16]
 80043a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043a4:	edd5 7a00 	vldr	s15, [r5]
 80043a8:	2a05      	cmp	r2, #5
 80043aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043ae:	d013      	beq.n	80043d8 <forward_dense+0x2bc>
 80043b0:	794d      	ldrb	r5, [r1, #5]
 80043b2:	edd0 6a05 	vldr	s13, [r0, #20]
 80043b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043ba:	edd5 7a00 	vldr	s15, [r5]
 80043be:	2a06      	cmp	r2, #6
 80043c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043c4:	d008      	beq.n	80043d8 <forward_dense+0x2bc>
 80043c6:	7989      	ldrb	r1, [r1, #6]
 80043c8:	edd0 7a06 	vldr	s15, [r0, #24]
 80043cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80043d0:	edd1 6a00 	vldr	s13, [r1]
 80043d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043d8:	44dc      	add	ip, fp
 80043da:	445e      	add	r6, fp
 80043dc:	ee32 7a87 	vadd.f32	s14, s5, s14
 80043e0:	eca7 7a01 	vstmia	r7!, {s14}
 80043e4:	454f      	cmp	r7, r9
 80043e6:	f4ff af43 	bcc.w	8004270 <forward_dense+0x154>
 80043ea:	9a06      	ldr	r2, [sp, #24]
 80043ec:	eba9 0302 	sub.w	r3, r9, r2
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	3304      	adds	r3, #4
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	9306      	str	r3, [sp, #24]
 80043fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043fe:	9a05      	ldr	r2, [sp, #20]
 8004400:	4499      	add	r9, r3
 8004402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004404:	441a      	add	r2, r3
 8004406:	9205      	str	r2, [sp, #20]
 8004408:	9a02      	ldr	r2, [sp, #8]
 800440a:	441a      	add	r2, r3
 800440c:	9202      	str	r2, [sp, #8]
 800440e:	9a04      	ldr	r2, [sp, #16]
 8004410:	441a      	add	r2, r3
 8004412:	9204      	str	r2, [sp, #16]
 8004414:	9b06      	ldr	r3, [sp, #24]
 8004416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004418:	4293      	cmp	r3, r2
 800441a:	f4ff af08 	bcc.w	800422e <forward_dense+0x112>
 800441e:	b015      	add	sp, #84	; 0x54
 8004420:	ecbd 8b02 	vpop	{d8}
 8004424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004428:	6853      	ldr	r3, [r2, #4]
 800442a:	deff      	udf	#255	; 0xff
 800442c:	2300      	movs	r3, #0
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	deff      	udf	#255	; 0xff
 8004432:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004448 <forward_dense+0x32c>
 8004436:	eef0 2a48 	vmov.f32	s5, s16
 800443a:	f1be 0f00 	cmp.w	lr, #0
 800443e:	f47f af22 	bne.w	8004286 <forward_dense+0x16a>
 8004442:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004444:	4661      	mov	r1, ip
 8004446:	e77a      	b.n	800433e <forward_dense+0x222>
 8004448:	00000000 	.word	0x00000000
 800444c:	4549      	cmp	r1, r9
 800444e:	d2d5      	bcs.n	80043fc <forward_dense+0x2e0>
 8004450:	9807      	ldr	r0, [sp, #28]
 8004452:	9103      	str	r1, [sp, #12]
 8004454:	9904      	ldr	r1, [sp, #16]
 8004456:	f100 0c01 	add.w	ip, r0, #1
 800445a:	3901      	subs	r1, #1
 800445c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004460:	9109      	str	r1, [sp, #36]	; 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80b2 	beq.w	80045cc <forward_dense+0x4b0>
 8004468:	9907      	ldr	r1, [sp, #28]
 800446a:	ecf3 2a01 	vldmia	r3!, {s5}
 800446e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8004448 <forward_dense+0x32c>
 8004472:	2900      	cmp	r1, #0
 8004474:	f000 80b2 	beq.w	80045dc <forward_dense+0x4c0>
 8004478:	9902      	ldr	r1, [sp, #8]
 800447a:	1d10      	adds	r0, r2, #4
 800447c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004480:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004484:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004488:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800448c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004490:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004494:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004498:	ed51 5a03 	vldr	s11, [r1, #-12]
 800449c:	ed11 6a02 	vldr	s12, [r1, #-8]
 80044a0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80044a4:	f006 070f 	and.w	r7, r6, #15
 80044a8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80044ac:	edd7 7a00 	vldr	s15, [r7]
 80044b0:	0936      	lsrs	r6, r6, #4
 80044b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044b6:	ed96 3a00 	vldr	s6, [r6]
 80044ba:	ee67 7a82 	vmul.f32	s15, s15, s4
 80044be:	092e      	lsrs	r6, r5, #4
 80044c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80044c4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044c8:	f005 050f 	and.w	r5, r5, #15
 80044cc:	edd6 3a00 	vldr	s7, [r6]
 80044d0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80044d4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80044d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80044dc:	0937      	lsrs	r7, r6, #4
 80044de:	ed95 4a00 	vldr	s8, [r5]
 80044e2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80044e6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80044ea:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80044ee:	f006 060f 	and.w	r6, r6, #15
 80044f2:	edd7 4a00 	vldr	s9, [r7]
 80044f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80044fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044fe:	3004      	adds	r0, #4
 8004500:	ed96 5a00 	vldr	s10, [r6]
 8004504:	092e      	lsrs	r6, r5, #4
 8004506:	eee5 7a25 	vfma.f32	s15, s10, s11
 800450a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800450e:	f005 050f 	and.w	r5, r5, #15
 8004512:	edd6 5a00 	vldr	s11, [r6]
 8004516:	eee5 7a86 	vfma.f32	s15, s11, s12
 800451a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800451e:	4584      	cmp	ip, r0
 8004520:	ed95 6a00 	vldr	s12, [r5]
 8004524:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004528:	f101 0120 	add.w	r1, r1, #32
 800452c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004530:	d1a4      	bne.n	800447c <forward_dense+0x360>
 8004532:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004536:	f1ac 0804 	sub.w	r8, ip, #4
 800453a:	9904      	ldr	r1, [sp, #16]
 800453c:	458e      	cmp	lr, r1
 800453e:	d22a      	bcs.n	8004596 <forward_dense+0x47a>
 8004540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004542:	eba1 070e 	sub.w	r7, r1, lr
 8004546:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800454a:	f10e 0008 	add.w	r0, lr, #8
 800454e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8004552:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8004556:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800455a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800455e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004562:	f001 050f 	and.w	r5, r1, #15
 8004566:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800456a:	edd5 7a00 	vldr	s15, [r5]
 800456e:	0909      	lsrs	r1, r1, #4
 8004570:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004574:	ed91 6a00 	vldr	s12, [r1]
 8004578:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800457c:	42b7      	cmp	r7, r6
 800457e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004582:	f100 0008 	add.w	r0, r0, #8
 8004586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800458a:	d1e4      	bne.n	8004556 <forward_dense+0x43a>
 800458c:	f10a 0a01 	add.w	sl, sl, #1
 8004590:	44d0      	add	r8, sl
 8004592:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004596:	9908      	ldr	r1, [sp, #32]
 8004598:	b321      	cbz	r1, 80045e4 <forward_dense+0x4c8>
 800459a:	f898 1000 	ldrb.w	r1, [r8]
 800459e:	edde 7a00 	vldr	s15, [lr]
 80045a2:	0909      	lsrs	r1, r1, #4
 80045a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80045a8:	edd1 6a00 	vldr	s13, [r1]
 80045ac:	9903      	ldr	r1, [sp, #12]
 80045ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80045b2:	445a      	add	r2, fp
 80045b4:	44dc      	add	ip, fp
 80045b6:	ee72 2a87 	vadd.f32	s5, s5, s14
 80045ba:	ece1 2a01 	vstmia	r1!, {s5}
 80045be:	4589      	cmp	r9, r1
 80045c0:	9103      	str	r1, [sp, #12]
 80045c2:	f67f af12 	bls.w	80043ea <forward_dense+0x2ce>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f47f af4e 	bne.w	8004468 <forward_dense+0x34c>
 80045cc:	9907      	ldr	r1, [sp, #28]
 80045ce:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8004448 <forward_dense+0x32c>
 80045d2:	eef0 2a48 	vmov.f32	s5, s16
 80045d6:	2900      	cmp	r1, #0
 80045d8:	f47f af4e 	bne.w	8004478 <forward_dense+0x35c>
 80045dc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80045e0:	4690      	mov	r8, r2
 80045e2:	e7aa      	b.n	800453a <forward_dense+0x41e>
 80045e4:	9903      	ldr	r1, [sp, #12]
 80045e6:	ee32 7a87 	vadd.f32	s14, s5, s14
 80045ea:	445a      	add	r2, fp
 80045ec:	eca1 7a01 	vstmia	r1!, {s14}
 80045f0:	4549      	cmp	r1, r9
 80045f2:	9103      	str	r1, [sp, #12]
 80045f4:	44dc      	add	ip, fp
 80045f6:	f4ff af34 	bcc.w	8004462 <forward_dense+0x346>
 80045fa:	e6f6      	b.n	80043ea <forward_dense+0x2ce>
 80045fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80045fe:	9d06      	ldr	r5, [sp, #24]
 8004600:	9101      	str	r1, [sp, #4]
 8004602:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004604:	9100      	str	r1, [sp, #0]
 8004606:	4628      	mov	r0, r5
 8004608:	990a      	ldr	r1, [sp, #40]	; 0x28
 800460a:	f000 fa85 	bl	8004b18 <lite_dense_if32of32wf32>
 800460e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004610:	462b      	mov	r3, r5
 8004612:	4413      	add	r3, r2
 8004614:	9306      	str	r3, [sp, #24]
 8004616:	e6f1      	b.n	80043fc <forward_dense+0x2e0>
 8004618:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800461c:	f1b9 0f00 	cmp.w	r9, #0
 8004620:	d016      	beq.n	8004650 <forward_dense+0x534>
 8004622:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004626:	f000 fc25 	bl	8004e74 <ai_array_get_byte_size>
 800462a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800462e:	4602      	mov	r2, r0
 8004630:	4641      	mov	r1, r8
 8004632:	4658      	mov	r0, fp
 8004634:	f000 fff2 	bl	800561c <memcpy>
 8004638:	e5c7      	b.n	80041ca <forward_dense+0xae>
 800463a:	2b04      	cmp	r3, #4
 800463c:	d00a      	beq.n	8004654 <forward_dense+0x538>
 800463e:	f04f 0900 	mov.w	r9, #0
 8004642:	e5bd      	b.n	80041c0 <forward_dense+0xa4>
 8004644:	930d      	str	r3, [sp, #52]	; 0x34
 8004646:	e595      	b.n	8004174 <forward_dense+0x58>
 8004648:	2300      	movs	r3, #0
 800464a:	930b      	str	r3, [sp, #44]	; 0x2c
 800464c:	460b      	mov	r3, r1
 800464e:	e591      	b.n	8004174 <forward_dense+0x58>
 8004650:	46c3      	mov	fp, r8
 8004652:	e5ba      	b.n	80041ca <forward_dense+0xae>
 8004654:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004658:	e5b7      	b.n	80041ca <forward_dense+0xae>
 800465a:	2300      	movs	r3, #0
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	deff      	udf	#255	; 0xff
 8004660:	2300      	movs	r3, #0
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	deff      	udf	#255	; 0xff
 8004666:	bf00      	nop

08004668 <forward_relu>:
 8004668:	6982      	ldr	r2, [r0, #24]
 800466a:	8813      	ldrh	r3, [r2, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d05b      	beq.n	8004728 <forward_relu+0xc0>
 8004670:	6851      	ldr	r1, [r2, #4]
 8004672:	684a      	ldr	r2, [r1, #4]
 8004674:	b102      	cbz	r2, 8004678 <forward_relu+0x10>
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	f000 8123 	beq.w	80048c4 <forward_relu+0x25c>
 800467e:	b470      	push	{r4, r5, r6}
 8004680:	6909      	ldr	r1, [r1, #16]
 8004682:	b101      	cbz	r1, 8004686 <forward_relu+0x1e>
 8004684:	6809      	ldr	r1, [r1, #0]
 8004686:	69c6      	ldr	r6, [r0, #28]
 8004688:	2e00      	cmp	r6, #0
 800468a:	f000 8097 	beq.w	80047bc <forward_relu+0x154>
 800468e:	6873      	ldr	r3, [r6, #4]
 8004690:	6988      	ldr	r0, [r1, #24]
 8004692:	6991      	ldr	r1, [r2, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	f000 80c1 	beq.w	800481c <forward_relu+0x1b4>
 800469a:	6893      	ldr	r3, [r2, #8]
 800469c:	6880      	ldr	r0, [r0, #8]
 800469e:	688c      	ldr	r4, [r1, #8]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f000 80f2 	beq.w	800488a <forward_relu+0x222>
 80046a6:	68d5      	ldr	r5, [r2, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80046ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80046b2:	42ab      	cmp	r3, r5
 80046b4:	fb01 f202 	mul.w	r2, r1, r2
 80046b8:	d1f9      	bne.n	80046ae <forward_relu+0x46>
 80046ba:	68b3      	ldr	r3, [r6, #8]
 80046bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80046c0:	edd3 6a00 	vldr	s13, [r3]
 80046c4:	ed93 6a01 	vldr	s12, [r3, #4]
 80046c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80046cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80046d0:	3a01      	subs	r2, #1
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80046da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80046de:	d425      	bmi.n	800472c <forward_relu+0xc4>
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d81f      	bhi.n	8004724 <forward_relu+0xbc>
 80046e4:	1d1a      	adds	r2, r3, #4
 80046e6:	1d01      	adds	r1, r0, #4
 80046e8:	e00d      	b.n	8004706 <forward_relu+0x9e>
 80046ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80046ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f2:	db03      	blt.n	80046fc <forward_relu+0x94>
 80046f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80046f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046fc:	3b08      	subs	r3, #8
 80046fe:	429c      	cmp	r4, r3
 8004700:	ed61 7a01 	vstmdb	r1!, {s15}
 8004704:	d80e      	bhi.n	8004724 <forward_relu+0xbc>
 8004706:	4613      	mov	r3, r2
 8004708:	ed72 7a01 	vldmdb	r2!, {s15}
 800470c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d9e9      	bls.n	80046ea <forward_relu+0x82>
 8004716:	3b08      	subs	r3, #8
 8004718:	eef0 7a47 	vmov.f32	s15, s14
 800471c:	429c      	cmp	r4, r3
 800471e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004722:	d9f0      	bls.n	8004706 <forward_relu+0x9e>
 8004724:	bc70      	pop	{r4, r5, r6}
 8004726:	4770      	bx	lr
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	deff      	udf	#255	; 0xff
 800472c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	d11f      	bne.n	8004776 <forward_relu+0x10e>
 8004736:	429c      	cmp	r4, r3
 8004738:	d8f4      	bhi.n	8004724 <forward_relu+0xbc>
 800473a:	1b1c      	subs	r4, r3, r4
 800473c:	f024 0403 	bic.w	r4, r4, #3
 8004740:	1d1a      	adds	r2, r3, #4
 8004742:	2500      	movs	r5, #0
 8004744:	1b1b      	subs	r3, r3, r4
 8004746:	1d01      	adds	r1, r0, #4
 8004748:	ed72 7a01 	vldmdb	r2!, {s15}
 800474c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	dc0a      	bgt.n	800476c <forward_relu+0x104>
 8004756:	429a      	cmp	r2, r3
 8004758:	f841 5d04 	str.w	r5, [r1, #-4]!
 800475c:	d0e2      	beq.n	8004724 <forward_relu+0xbc>
 800475e:	ed72 7a01 	vldmdb	r2!, {s15}
 8004762:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476a:	ddf4      	ble.n	8004756 <forward_relu+0xee>
 800476c:	429a      	cmp	r2, r3
 800476e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004772:	d1e9      	bne.n	8004748 <forward_relu+0xe0>
 8004774:	e7d6      	b.n	8004724 <forward_relu+0xbc>
 8004776:	429c      	cmp	r4, r3
 8004778:	d8d4      	bhi.n	8004724 <forward_relu+0xbc>
 800477a:	1b1c      	subs	r4, r3, r4
 800477c:	f024 0403 	bic.w	r4, r4, #3
 8004780:	1d1a      	adds	r2, r3, #4
 8004782:	1d01      	adds	r1, r0, #4
 8004784:	1b1b      	subs	r3, r3, r4
 8004786:	ed72 7a01 	vldmdb	r2!, {s15}
 800478a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	db0e      	blt.n	80047b2 <forward_relu+0x14a>
 8004794:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004798:	4293      	cmp	r3, r2
 800479a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800479e:	ed61 7a01 	vstmdb	r1!, {s15}
 80047a2:	d0bf      	beq.n	8004724 <forward_relu+0xbc>
 80047a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80047a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	daf0      	bge.n	8004794 <forward_relu+0x12c>
 80047b2:	4293      	cmp	r3, r2
 80047b4:	ed61 7a01 	vstmdb	r1!, {s15}
 80047b8:	d1e5      	bne.n	8004786 <forward_relu+0x11e>
 80047ba:	e7b3      	b.n	8004724 <forward_relu+0xbc>
 80047bc:	6893      	ldr	r3, [r2, #8]
 80047be:	6989      	ldr	r1, [r1, #24]
 80047c0:	6990      	ldr	r0, [r2, #24]
 80047c2:	6889      	ldr	r1, [r1, #8]
 80047c4:	6884      	ldr	r4, [r0, #8]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	d075      	beq.n	80048b6 <forward_relu+0x24e>
 80047ca:	68d5      	ldr	r5, [r2, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80047d2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80047d6:	429d      	cmp	r5, r3
 80047d8:	fb00 f202 	mul.w	r2, r0, r2
 80047dc:	d1f9      	bne.n	80047d2 <forward_relu+0x16a>
 80047de:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80047e2:	3b01      	subs	r3, #1
 80047e4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80047e8:	4294      	cmp	r4, r2
 80047ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80047ee:	d899      	bhi.n	8004724 <forward_relu+0xbc>
 80047f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80048cc <forward_relu+0x264>
 80047f4:	3204      	adds	r2, #4
 80047f6:	3104      	adds	r1, #4
 80047f8:	4613      	mov	r3, r2
 80047fa:	ed72 7a01 	vldmdb	r2!, {s15}
 80047fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004806:	f1a3 0308 	sub.w	r3, r3, #8
 800480a:	bfb8      	it	lt
 800480c:	eef0 7a47 	vmovlt.f32	s15, s14
 8004810:	429c      	cmp	r4, r3
 8004812:	ed61 7a01 	vstmdb	r1!, {s15}
 8004816:	d9ef      	bls.n	80047f8 <forward_relu+0x190>
 8004818:	bc70      	pop	{r4, r5, r6}
 800481a:	4770      	bx	lr
 800481c:	688c      	ldr	r4, [r1, #8]
 800481e:	6891      	ldr	r1, [r2, #8]
 8004820:	6880      	ldr	r0, [r0, #8]
 8004822:	0a09      	lsrs	r1, r1, #8
 8004824:	d049      	beq.n	80048ba <forward_relu+0x252>
 8004826:	68d5      	ldr	r5, [r2, #12]
 8004828:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800482c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004830:	42aa      	cmp	r2, r5
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	d1f9      	bne.n	800482c <forward_relu+0x1c4>
 8004838:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800483c:	3a01      	subs	r2, #1
 800483e:	68b1      	ldr	r1, [r6, #8]
 8004840:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004844:	429c      	cmp	r4, r3
 8004846:	ed91 7a00 	vldr	s14, [r1]
 800484a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800484e:	f63f af69 	bhi.w	8004724 <forward_relu+0xbc>
 8004852:	2500      	movs	r5, #0
 8004854:	3304      	adds	r3, #4
 8004856:	1d02      	adds	r2, r0, #4
 8004858:	ed53 7a01 	vldr	s15, [r3, #-4]
 800485c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	f1a3 0104 	sub.w	r1, r3, #4
 8004868:	f1a3 0308 	sub.w	r3, r3, #8
 800486c:	d406      	bmi.n	800487c <forward_relu+0x214>
 800486e:	429c      	cmp	r4, r3
 8004870:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004874:	f63f af56 	bhi.w	8004724 <forward_relu+0xbc>
 8004878:	460b      	mov	r3, r1
 800487a:	e7ed      	b.n	8004858 <forward_relu+0x1f0>
 800487c:	429c      	cmp	r4, r3
 800487e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004882:	f63f af4f 	bhi.w	8004724 <forward_relu+0xbc>
 8004886:	460b      	mov	r3, r1
 8004888:	e7e6      	b.n	8004858 <forward_relu+0x1f0>
 800488a:	68b3      	ldr	r3, [r6, #8]
 800488c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004890:	edd3 6a00 	vldr	s13, [r3]
 8004894:	ed93 6a01 	vldr	s12, [r3, #4]
 8004898:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d401      	bmi.n	80048a6 <forward_relu+0x23e>
 80048a2:	4623      	mov	r3, r4
 80048a4:	e71e      	b.n	80046e4 <forward_relu+0x7c>
 80048a6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	4623      	mov	r3, r4
 80048b0:	f47f af63 	bne.w	800477a <forward_relu+0x112>
 80048b4:	e741      	b.n	800473a <forward_relu+0xd2>
 80048b6:	4622      	mov	r2, r4
 80048b8:	e79a      	b.n	80047f0 <forward_relu+0x188>
 80048ba:	68b2      	ldr	r2, [r6, #8]
 80048bc:	4623      	mov	r3, r4
 80048be:	ed92 7a00 	vldr	s14, [r2]
 80048c2:	e7c6      	b.n	8004852 <forward_relu+0x1ea>
 80048c4:	2300      	movs	r3, #0
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	deff      	udf	#255	; 0xff
 80048ca:	bf00      	nop
 80048cc:	00000000 	.word	0x00000000

080048d0 <forward_sm>:
 80048d0:	6982      	ldr	r2, [r0, #24]
 80048d2:	8813      	ldrh	r3, [r2, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d07c      	beq.n	80049d2 <forward_sm+0x102>
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	ed2d 8b04 	vpush	{d8-d9}
 80048e0:	6852      	ldr	r2, [r2, #4]
 80048e2:	6854      	ldr	r4, [r2, #4]
 80048e4:	b085      	sub	sp, #20
 80048e6:	b104      	cbz	r4, 80048ea <forward_sm+0x1a>
 80048e8:	6824      	ldr	r4, [r4, #0]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d076      	beq.n	80049dc <forward_sm+0x10c>
 80048ee:	6913      	ldr	r3, [r2, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d076      	beq.n	80049e2 <forward_sm+0x112>
 80048f4:	681e      	ldr	r6, [r3, #0]
 80048f6:	68a3      	ldr	r3, [r4, #8]
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	68f2      	ldr	r2, [r6, #12]
 80048fc:	6845      	ldr	r5, [r0, #4]
 80048fe:	6857      	ldr	r7, [r2, #4]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	d068      	beq.n	80049d6 <forward_sm+0x106>
 8004904:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004908:	2201      	movs	r2, #1
 800490a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800490e:	4298      	cmp	r0, r3
 8004910:	fb01 f202 	mul.w	r2, r1, r2
 8004914:	d1f9      	bne.n	800490a <forward_sm+0x3a>
 8004916:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800491a:	69a2      	ldr	r2, [r4, #24]
 800491c:	69b3      	ldr	r3, [r6, #24]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004924:	eb02 0309 	add.w	r3, r2, r9
 8004928:	429a      	cmp	r2, r3
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	d24c      	bcs.n	80049c8 <forward_sm+0xf8>
 800492e:	00bb      	lsls	r3, r7, #2
 8004930:	9303      	str	r3, [sp, #12]
 8004932:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8004936:	00ab      	lsls	r3, r5, #2
 8004938:	2d01      	cmp	r5, #1
 800493a:	ed92 8a00 	vldr	s16, [r2]
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004944:	463e      	mov	r6, r7
 8004946:	d93c      	bls.n	80049c2 <forward_sm+0xf2>
 8004948:	1d13      	adds	r3, r2, #4
 800494a:	ecf3 7a01 	vldmia	r3!, {s15}
 800494e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004956:	bfb8      	it	lt
 8004958:	eeb0 8a67 	vmovlt.f32	s16, s15
 800495c:	429e      	cmp	r6, r3
 800495e:	d1f4      	bne.n	800494a <forward_sm+0x7a>
 8004960:	eddf 8a21 	vldr	s17, [pc, #132]	; 80049e8 <forward_sm+0x118>
 8004964:	4692      	mov	sl, r2
 8004966:	46c3      	mov	fp, r8
 8004968:	46c1      	mov	r9, r8
 800496a:	2400      	movs	r4, #0
 800496c:	ecba 0a01 	vldmia	sl!, {s0}
 8004970:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004974:	f000 fab8 	bl	8004ee8 <expf>
 8004978:	3401      	adds	r4, #1
 800497a:	42a5      	cmp	r5, r4
 800497c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004980:	eca9 0a01 	vstmia	r9!, {s0}
 8004984:	d8f2      	bhi.n	800496c <forward_sm+0x9c>
 8004986:	eef5 8a40 	vcmp.f32	s17, #0.0
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	d00b      	beq.n	80049a8 <forward_sm+0xd8>
 8004990:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004994:	2300      	movs	r3, #0
 8004996:	3301      	adds	r3, #1
 8004998:	429d      	cmp	r5, r3
 800499a:	eddb 7a00 	vldr	s15, [fp]
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	eceb 7a01 	vstmia	fp!, {s15}
 80049a6:	d8f6      	bhi.n	8004996 <forward_sm+0xc6>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	9901      	ldr	r1, [sp, #4]
 80049ac:	4498      	add	r8, r3
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	42b9      	cmp	r1, r7
 80049b2:	463a      	mov	r2, r7
 80049b4:	441e      	add	r6, r3
 80049b6:	d907      	bls.n	80049c8 <forward_sm+0xf8>
 80049b8:	2d01      	cmp	r5, #1
 80049ba:	ed92 8a00 	vldr	s16, [r2]
 80049be:	441f      	add	r7, r3
 80049c0:	d8c2      	bhi.n	8004948 <forward_sm+0x78>
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	d0f0      	beq.n	80049a8 <forward_sm+0xd8>
 80049c6:	e7cb      	b.n	8004960 <forward_sm+0x90>
 80049c8:	b005      	add	sp, #20
 80049ca:	ecbd 8b04 	vpop	{d8-d9}
 80049ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	deff      	udf	#255	; 0xff
 80049d6:	f04f 0904 	mov.w	r9, #4
 80049da:	e79e      	b.n	800491a <forward_sm+0x4a>
 80049dc:	2300      	movs	r3, #0
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	deff      	udf	#255	; 0xff
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	deff      	udf	#255	; 0xff
 80049e6:	bf00      	nop
 80049e8:	00000000 	.word	0x00000000

080049ec <ai_check_custom_types>:
 80049ec:	b082      	sub	sp, #8
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <ai_check_custom_types+0x50>)
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	b118      	cbz	r0, 80049fc <ai_check_custom_types+0x10>
 80049f4:	7803      	ldrb	r3, [r0, #0]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d002      	beq.n	8004a00 <ai_check_custom_types+0x14>
 80049fa:	2000      	movs	r0, #0
 80049fc:	b002      	add	sp, #8
 80049fe:	4770      	bx	lr
 8004a00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <ai_check_custom_types+0x26>
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f080 0001 	eor.w	r0, r0, #1
 8004a0e:	b002      	add	sp, #8
 8004a10:	4770      	bx	lr
 8004a12:	7842      	ldrb	r2, [r0, #1]
 8004a14:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	f100 0001 	add.w	r0, r0, #1
 8004a1e:	d1f3      	bne.n	8004a08 <ai_check_custom_types+0x1c>
 8004a20:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004a24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1ed      	bne.n	8004a08 <ai_check_custom_types+0x1c>
 8004a2c:	7842      	ldrb	r2, [r0, #1]
 8004a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d1e8      	bne.n	8004a08 <ai_check_custom_types+0x1c>
 8004a36:	2000      	movs	r0, #0
 8004a38:	e7e7      	b.n	8004a0a <ai_check_custom_types+0x1e>
 8004a3a:	bf00      	nop
 8004a3c:	84048403 	.word	0x84048403

08004a40 <ai_layers_init_all>:
 8004a40:	4601      	mov	r1, r0
 8004a42:	2000      	movs	r0, #0
 8004a44:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004a46:	b143      	cbz	r3, 8004a5a <ai_layers_init_all+0x1a>
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	60d9      	str	r1, [r3, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f100 0001 	add.w	r0, r0, #1
 8004a52:	d002      	beq.n	8004a5a <ai_layers_init_all+0x1a>
 8004a54:	b10a      	cbz	r2, 8004a5a <ai_layers_init_all+0x1a>
 8004a56:	4613      	mov	r3, r2
 8004a58:	e7f5      	b.n	8004a46 <ai_layers_init_all+0x6>
 8004a5a:	4770      	bx	lr

08004a5c <ai_layers_post_init_all>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004a60:	2500      	movs	r5, #0
 8004a62:	b16c      	cbz	r4, 8004a80 <ai_layers_post_init_all+0x24>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d504      	bpl.n	8004a74 <ai_layers_post_init_all+0x18>
 8004a6a:	6a23      	ldr	r3, [r4, #32]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	b10b      	cbz	r3, 8004a74 <ai_layers_post_init_all+0x18>
 8004a70:	4798      	blx	r3
 8004a72:	3501      	adds	r5, #1
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	d002      	beq.n	8004a80 <ai_layers_post_init_all+0x24>
 8004a7a:	b10b      	cbz	r3, 8004a80 <ai_layers_post_init_all+0x24>
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	e7f0      	b.n	8004a62 <ai_layers_post_init_all+0x6>
 8004a80:	4628      	mov	r0, r5
 8004a82:	bd38      	pop	{r3, r4, r5, pc}

08004a84 <ai_layers_forward_all>:
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	f1b8 0f00 	cmp.w	r8, #0
 8004a92:	d02b      	beq.n	8004aec <ai_layers_forward_all+0x68>
 8004a94:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004a96:	6381      	str	r1, [r0, #56]	; 0x38
 8004a98:	b321      	cbz	r1, 8004ae4 <ai_layers_forward_all+0x60>
 8004a9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	47c0      	blx	r8
 8004aa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004aa2:	b1fe      	cbz	r6, 8004ae4 <ai_layers_forward_all+0x60>
 8004aa4:	2700      	movs	r7, #0
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004aaa:	2002      	movs	r0, #2
 8004aac:	47c0      	blx	r8
 8004aae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	696b      	ldr	r3, [r5, #20]
 8004ab4:	4798      	blx	r3
 8004ab6:	692e      	ldr	r6, [r5, #16]
 8004ab8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004aba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004abc:	42b5      	cmp	r5, r6
 8004abe:	f04f 0003 	mov.w	r0, #3
 8004ac2:	d007      	beq.n	8004ad4 <ai_layers_forward_all+0x50>
 8004ac4:	47c0      	blx	r8
 8004ac6:	3701      	adds	r7, #1
 8004ac8:	63a6      	str	r6, [r4, #56]	; 0x38
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	d1eb      	bne.n	8004aa6 <ai_layers_forward_all+0x22>
 8004ace:	4638      	mov	r0, r7
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	47c0      	blx	r8
 8004ad8:	2300      	movs	r3, #0
 8004ada:	3701      	adds	r7, #1
 8004adc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ade:	4638      	mov	r0, r7
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae4:	2700      	movs	r7, #0
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aec:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004aee:	6385      	str	r5, [r0, #56]	; 0x38
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	d0f7      	beq.n	8004ae4 <ai_layers_forward_all+0x60>
 8004af4:	4647      	mov	r7, r8
 8004af6:	696b      	ldr	r3, [r5, #20]
 8004af8:	4628      	mov	r0, r5
 8004afa:	4798      	blx	r3
 8004afc:	462b      	mov	r3, r5
 8004afe:	692d      	ldr	r5, [r5, #16]
 8004b00:	429d      	cmp	r5, r3
 8004b02:	d004      	beq.n	8004b0e <ai_layers_forward_all+0x8a>
 8004b04:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b06:	3701      	adds	r7, #1
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	d1f4      	bne.n	8004af6 <ai_layers_forward_all+0x72>
 8004b0c:	e7df      	b.n	8004ace <ai_layers_forward_all+0x4a>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b12:	3701      	adds	r7, #1
 8004b14:	e7db      	b.n	8004ace <ai_layers_forward_all+0x4a>
 8004b16:	bf00      	nop

08004b18 <lite_dense_if32of32wf32>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8004b20:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8004b24:	4287      	cmp	r7, r0
 8004b26:	f240 8106 	bls.w	8004d36 <lite_dense_if32of32wf32+0x21e>
 8004b2a:	f1a6 0810 	sub.w	r8, r6, #16
 8004b2e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004b32:	f108 0801 	add.w	r8, r8, #1
 8004b36:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8004b3a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004b3e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8004b42:	4605      	mov	r5, r0
 8004b44:	f006 0a0f 	and.w	sl, r6, #15
 8004b48:	2e0f      	cmp	r6, #15
 8004b4a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004d5c <lite_dense_if32of32wf32+0x244>
 8004b4e:	f240 8101 	bls.w	8004d54 <lite_dense_if32of32wf32+0x23c>
 8004b52:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8004b56:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8004b5a:	46b6      	mov	lr, r6
 8004b5c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8004b60:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8004b64:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8004b68:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8004b6c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8004b70:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8004b74:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8004b78:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8004b7c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8004b80:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8004b84:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8004b88:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8004b8c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8004b90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004b94:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8004b98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b9c:	f1ae 0e10 	sub.w	lr, lr, #16
 8004ba0:	f1be 0f0f 	cmp.w	lr, #15
 8004ba4:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8004ba8:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8004bac:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004bb0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8004bb4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004bb8:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8004bbc:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8004bc0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004bc4:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8004bc8:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8004bcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004bd0:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8004bd4:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8004bd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bdc:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8004be0:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8004be4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004be8:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8004bec:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8004bf0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004bf4:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8004bf8:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8004bfc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004c00:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8004c04:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8004c08:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c0c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8004c10:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8004c14:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004c18:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004c1c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004c20:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004c24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004c28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c30:	d894      	bhi.n	8004b5c <lite_dense_if32of32wf32+0x44>
 8004c32:	eb02 0e0b 	add.w	lr, r2, fp
 8004c36:	4654      	mov	r4, sl
 8004c38:	46c4      	mov	ip, r8
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	d075      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c3e:	eddc 6a00 	vldr	s13, [ip]
 8004c42:	edde 7a00 	vldr	s15, [lr]
 8004c46:	2c01      	cmp	r4, #1
 8004c48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c4c:	d06d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c4e:	eddc 6a01 	vldr	s13, [ip, #4]
 8004c52:	edde 7a01 	vldr	s15, [lr, #4]
 8004c56:	2c02      	cmp	r4, #2
 8004c58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c5c:	d065      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c5e:	eddc 6a02 	vldr	s13, [ip, #8]
 8004c62:	edde 7a02 	vldr	s15, [lr, #8]
 8004c66:	2c03      	cmp	r4, #3
 8004c68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c6c:	d05d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c6e:	eddc 6a03 	vldr	s13, [ip, #12]
 8004c72:	edde 7a03 	vldr	s15, [lr, #12]
 8004c76:	2c04      	cmp	r4, #4
 8004c78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c7c:	d055      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c7e:	eddc 6a04 	vldr	s13, [ip, #16]
 8004c82:	edde 7a04 	vldr	s15, [lr, #16]
 8004c86:	2c05      	cmp	r4, #5
 8004c88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c8c:	d04d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c8e:	eddc 6a05 	vldr	s13, [ip, #20]
 8004c92:	edde 7a05 	vldr	s15, [lr, #20]
 8004c96:	2c06      	cmp	r4, #6
 8004c98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c9c:	d045      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004c9e:	eddc 6a06 	vldr	s13, [ip, #24]
 8004ca2:	edde 7a06 	vldr	s15, [lr, #24]
 8004ca6:	2c07      	cmp	r4, #7
 8004ca8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cac:	d03d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cae:	eddc 6a07 	vldr	s13, [ip, #28]
 8004cb2:	edde 7a07 	vldr	s15, [lr, #28]
 8004cb6:	2c08      	cmp	r4, #8
 8004cb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cbc:	d035      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cbe:	eddc 6a08 	vldr	s13, [ip, #32]
 8004cc2:	edde 7a08 	vldr	s15, [lr, #32]
 8004cc6:	2c09      	cmp	r4, #9
 8004cc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ccc:	d02d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cce:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8004cd2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8004cd6:	2c0a      	cmp	r4, #10
 8004cd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cdc:	d025      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cde:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8004ce2:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8004ce6:	2c0b      	cmp	r4, #11
 8004ce8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cec:	d01d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cee:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8004cf2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8004cf6:	2c0c      	cmp	r4, #12
 8004cf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cfc:	d015      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004cfe:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8004d02:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8004d06:	3c0d      	subs	r4, #13
 8004d08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d0c:	d00d      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004d0e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8004d12:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8004d16:	2c01      	cmp	r4, #1
 8004d18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d1c:	d005      	beq.n	8004d2a <lite_dense_if32of32wf32+0x212>
 8004d1e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8004d22:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8004d26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d2a:	444a      	add	r2, r9
 8004d2c:	eca5 7a01 	vstmia	r5!, {s14}
 8004d30:	42af      	cmp	r7, r5
 8004d32:	f63f af09 	bhi.w	8004b48 <lite_dense_if32of32wf32+0x30>
 8004d36:	b15b      	cbz	r3, 8004d50 <lite_dense_if32of32wf32+0x238>
 8004d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d3a:	b14a      	cbz	r2, 8004d50 <lite_dense_if32of32wf32+0x238>
 8004d3c:	edd0 7a00 	vldr	s15, [r0]
 8004d40:	ecb3 7a01 	vldmia	r3!, {s14}
 8004d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d48:	ece0 7a01 	vstmia	r0!, {s15}
 8004d4c:	4287      	cmp	r7, r0
 8004d4e:	d1f5      	bne.n	8004d3c <lite_dense_if32of32wf32+0x224>
 8004d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d54:	4634      	mov	r4, r6
 8004d56:	4696      	mov	lr, r2
 8004d58:	468c      	mov	ip, r1
 8004d5a:	e76e      	b.n	8004c3a <lite_dense_if32of32wf32+0x122>
 8004d5c:	00000000 	.word	0x00000000

08004d60 <ai_version_get>:
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d66:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004d6a:	4770      	bx	lr

08004d6c <get_tensor_byte_size>:
 8004d6c:	b410      	push	{r4}
 8004d6e:	6983      	ldr	r3, [r0, #24]
 8004d70:	68c4      	ldr	r4, [r0, #12]
 8004d72:	6941      	ldr	r1, [r0, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68e0      	ldr	r0, [r4, #12]
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <get_tensor_byte_size+0x2c>)
 8004d7a:	68c9      	ldr	r1, [r1, #12]
 8004d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004d84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d88:	fb01 f000 	mul.w	r0, r1, r0
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bf04      	itt	eq
 8004d90:	3007      	addeq	r0, #7
 8004d92:	08c0      	lsreq	r0, r0, #3
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	000400c0 	.word	0x000400c0

08004d9c <ai_array_to_buffer_fmt>:
 8004d9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d050      	beq.n	8004e46 <ai_array_to_buffer_fmt+0xaa>
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <ai_array_to_buffer_fmt+0xb4>)
 8004da6:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d00b      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004dae:	dc1c      	bgt.n	8004dea <ai_array_to_buffer_fmt+0x4e>
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <ai_array_to_buffer_fmt+0xb8>)
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d007      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004db6:	dd0b      	ble.n	8004dd0 <ai_array_to_buffer_fmt+0x34>
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <ai_array_to_buffer_fmt+0xbc>)
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d003      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004dbe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d131      	bne.n	8004e2a <ai_array_to_buffer_fmt+0x8e>
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004dcc:	4318      	orrs	r0, r3
 8004dce:	4770      	bx	lr
 8004dd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0f6      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004dd8:	dd2c      	ble.n	8004e34 <ai_array_to_buffer_fmt+0x98>
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <ai_array_to_buffer_fmt+0xc0>)
 8004ddc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bf18      	it	ne
 8004de4:	2340      	movne	r3, #64	; 0x40
 8004de6:	4318      	orrs	r0, r3
 8004de8:	4770      	bx	lr
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <ai_array_to_buffer_fmt+0xc4>)
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d0ea      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004df0:	dd0e      	ble.n	8004e10 <ai_array_to_buffer_fmt+0x74>
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <ai_array_to_buffer_fmt+0xc8>)
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d0e6      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004df8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d0e2      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <ai_array_to_buffer_fmt+0xcc>)
 8004e02:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004e06:	429a      	cmp	r2, r3
 8004e08:	bf18      	it	ne
 8004e0a:	2340      	movne	r3, #64	; 0x40
 8004e0c:	4318      	orrs	r0, r3
 8004e0e:	4770      	bx	lr
 8004e10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d0d6      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004e18:	3307      	adds	r3, #7
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d0d3      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004e1e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf18      	it	ne
 8004e26:	2340      	movne	r3, #64	; 0x40
 8004e28:	e7ce      	b.n	8004dc8 <ai_array_to_buffer_fmt+0x2c>
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <ai_array_to_buffer_fmt+0xd0>)
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bf18      	it	ne
 8004e30:	2340      	movne	r3, #64	; 0x40
 8004e32:	e7c9      	b.n	8004dc8 <ai_array_to_buffer_fmt+0x2c>
 8004e34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0c4      	beq.n	8004dc6 <ai_array_to_buffer_fmt+0x2a>
 8004e3c:	3380      	adds	r3, #128	; 0x80
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf18      	it	ne
 8004e42:	2340      	movne	r3, #64	; 0x40
 8004e44:	e7c0      	b.n	8004dc8 <ai_array_to_buffer_fmt+0x2c>
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <ai_array_to_buffer_fmt+0xd4>)
 8004e48:	4003      	ands	r3, r0
 8004e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e4e:	e7bb      	b.n	8004dc8 <ai_array_to_buffer_fmt+0x2c>
 8004e50:	00840040 	.word	0x00840040
 8004e54:	00040840 	.word	0x00040840
 8004e58:	00041040 	.word	0x00041040
 8004e5c:	00040447 	.word	0x00040447
 8004e60:	00840840 	.word	0x00840840
 8004e64:	00841040 	.word	0x00841040
 8004e68:	0084084f 	.word	0x0084084f
 8004e6c:	0004084f 	.word	0x0004084f
 8004e70:	00803fff 	.word	0x00803fff

08004e74 <ai_array_get_byte_size>:
 8004e74:	b319      	cbz	r1, 8004ebe <ai_array_get_byte_size+0x4a>
 8004e76:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004e7a:	fb03 f101 	mul.w	r1, r3, r1
 8004e7e:	3107      	adds	r1, #7
 8004e80:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8004e84:	f021 0307 	bic.w	r3, r1, #7
 8004e88:	2a04      	cmp	r2, #4
 8004e8a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8004e8e:	fa23 f101 	lsr.w	r1, r3, r1
 8004e92:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8004e96:	d00b      	beq.n	8004eb0 <ai_array_get_byte_size+0x3c>
 8004e98:	2a08      	cmp	r2, #8
 8004e9a:	d002      	beq.n	8004ea2 <ai_array_get_byte_size+0x2e>
 8004e9c:	3107      	adds	r1, #7
 8004e9e:	08c8      	lsrs	r0, r1, #3
 8004ea0:	4770      	bx	lr
 8004ea2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004ea6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004eaa:	3107      	adds	r1, #7
 8004eac:	08c8      	lsrs	r0, r1, #3
 8004eae:	4770      	bx	lr
 8004eb0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004eb4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8004eb8:	3107      	adds	r1, #7
 8004eba:	08c8      	lsrs	r0, r1, #3
 8004ebc:	4770      	bx	lr
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <ai_array_get_data_byte_size>:
 8004ec4:	b169      	cbz	r1, 8004ee2 <ai_array_get_data_byte_size+0x1e>
 8004ec6:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8004eca:	fb02 f101 	mul.w	r1, r2, r1
 8004ece:	1dcb      	adds	r3, r1, #7
 8004ed0:	f023 0307 	bic.w	r3, r3, #7
 8004ed4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8004ed8:	fa23 f000 	lsr.w	r0, r3, r0
 8004edc:	3007      	adds	r0, #7
 8004ede:	08c0      	lsrs	r0, r0, #3
 8004ee0:	4770      	bx	lr
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <expf>:
 8004ee8:	b508      	push	{r3, lr}
 8004eea:	ed2d 8b02 	vpush	{d8}
 8004eee:	eef0 8a40 	vmov.f32	s17, s0
 8004ef2:	f000 f82f 	bl	8004f54 <__ieee754_expf>
 8004ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8004efa:	eeb0 0a68 	vmov.f32	s0, s17
 8004efe:	f000 f919 	bl	8005134 <finitef>
 8004f02:	b160      	cbz	r0, 8004f1e <expf+0x36>
 8004f04:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004f44 <expf+0x5c>
 8004f08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	dd0a      	ble.n	8004f28 <expf+0x40>
 8004f12:	f000 f91d 	bl	8005150 <__errno>
 8004f16:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8004f48 <expf+0x60>
 8004f1a:	2322      	movs	r3, #34	; 0x22
 8004f1c:	6003      	str	r3, [r0, #0]
 8004f1e:	eeb0 0a48 	vmov.f32	s0, s16
 8004f22:	ecbd 8b02 	vpop	{d8}
 8004f26:	bd08      	pop	{r3, pc}
 8004f28:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004f4c <expf+0x64>
 8004f2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	d5f3      	bpl.n	8004f1e <expf+0x36>
 8004f36:	f000 f90b 	bl	8005150 <__errno>
 8004f3a:	2322      	movs	r3, #34	; 0x22
 8004f3c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004f50 <expf+0x68>
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	e7ec      	b.n	8004f1e <expf+0x36>
 8004f44:	42b17180 	.word	0x42b17180
 8004f48:	7f800000 	.word	0x7f800000
 8004f4c:	c2cff1b5 	.word	0xc2cff1b5
 8004f50:	00000000 	.word	0x00000000

08004f54 <__ieee754_expf>:
 8004f54:	ee10 2a10 	vmov	r2, s0
 8004f58:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004f5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004f60:	d902      	bls.n	8004f68 <__ieee754_expf+0x14>
 8004f62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f66:	4770      	bx	lr
 8004f68:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8004f6c:	d106      	bne.n	8004f7c <__ieee754_expf+0x28>
 8004f6e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80050a8 <__ieee754_expf+0x154>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf18      	it	ne
 8004f76:	eeb0 0a67 	vmovne.f32	s0, s15
 8004f7a:	4770      	bx	lr
 8004f7c:	484b      	ldr	r0, [pc, #300]	; (80050ac <__ieee754_expf+0x158>)
 8004f7e:	4282      	cmp	r2, r0
 8004f80:	dd02      	ble.n	8004f88 <__ieee754_expf+0x34>
 8004f82:	2000      	movs	r0, #0
 8004f84:	f000 b8d0 	b.w	8005128 <__math_oflowf>
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	da05      	bge.n	8004f98 <__ieee754_expf+0x44>
 8004f8c:	4a48      	ldr	r2, [pc, #288]	; (80050b0 <__ieee754_expf+0x15c>)
 8004f8e:	4291      	cmp	r1, r2
 8004f90:	d902      	bls.n	8004f98 <__ieee754_expf+0x44>
 8004f92:	2000      	movs	r0, #0
 8004f94:	f000 b8c2 	b.w	800511c <__math_uflowf>
 8004f98:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <__ieee754_expf+0x160>)
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004fa0:	d952      	bls.n	8005048 <__ieee754_expf+0xf4>
 8004fa2:	4a45      	ldr	r2, [pc, #276]	; (80050b8 <__ieee754_expf+0x164>)
 8004fa4:	4291      	cmp	r1, r2
 8004fa6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004faa:	d834      	bhi.n	8005016 <__ieee754_expf+0xc2>
 8004fac:	4943      	ldr	r1, [pc, #268]	; (80050bc <__ieee754_expf+0x168>)
 8004fae:	4411      	add	r1, r2
 8004fb0:	ed91 7a00 	vldr	s14, [r1]
 8004fb4:	4942      	ldr	r1, [pc, #264]	; (80050c0 <__ieee754_expf+0x16c>)
 8004fb6:	440a      	add	r2, r1
 8004fb8:	edd2 7a00 	vldr	s15, [r2]
 8004fbc:	ee30 7a47 	vsub.f32	s14, s0, s14
 8004fc0:	f1c3 0201 	rsb	r2, r3, #1
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8004fca:	ee20 6a00 	vmul.f32	s12, s0, s0
 8004fce:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80050c4 <__ieee754_expf+0x170>
 8004fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c8 <__ieee754_expf+0x174>
 8004fd6:	eee6 6a05 	vfma.f32	s13, s12, s10
 8004fda:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80050cc <__ieee754_expf+0x178>
 8004fde:	eea6 5a86 	vfma.f32	s10, s13, s12
 8004fe2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80050d0 <__ieee754_expf+0x17c>
 8004fe6:	eee5 6a06 	vfma.f32	s13, s10, s12
 8004fea:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80050d4 <__ieee754_expf+0x180>
 8004fee:	eea6 5a86 	vfma.f32	s10, s13, s12
 8004ff2:	eef0 6a40 	vmov.f32	s13, s0
 8004ff6:	eee5 6a46 	vfms.f32	s13, s10, s12
 8004ffa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004ffe:	ee20 5a26 	vmul.f32	s10, s0, s13
 8005002:	bb92      	cbnz	r2, 800506a <__ieee754_expf+0x116>
 8005004:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005008:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800500c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005010:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8005014:	4770      	bx	lr
 8005016:	4b30      	ldr	r3, [pc, #192]	; (80050d8 <__ieee754_expf+0x184>)
 8005018:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80050dc <__ieee754_expf+0x188>
 800501c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80050e0 <__ieee754_expf+0x18c>
 8005020:	4413      	add	r3, r2
 8005022:	edd3 7a00 	vldr	s15, [r3]
 8005026:	eee0 7a07 	vfma.f32	s15, s0, s14
 800502a:	eeb0 7a40 	vmov.f32	s14, s0
 800502e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005032:	ee17 2a90 	vmov	r2, s15
 8005036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800503e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80050e4 <__ieee754_expf+0x190>
 8005042:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005046:	e7be      	b.n	8004fc6 <__ieee754_expf+0x72>
 8005048:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800504c:	d20b      	bcs.n	8005066 <__ieee754_expf+0x112>
 800504e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050e8 <__ieee754_expf+0x194>
 8005052:	ee70 6a26 	vadd.f32	s13, s0, s13
 8005056:	eef4 6ae5 	vcmpe.f32	s13, s11
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	dd02      	ble.n	8005066 <__ieee754_expf+0x112>
 8005060:	ee30 0a25 	vadd.f32	s0, s0, s11
 8005064:	4770      	bx	lr
 8005066:	2200      	movs	r2, #0
 8005068:	e7af      	b.n	8004fca <__ieee754_expf+0x76>
 800506a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800506e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8005072:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8005076:	bfb8      	it	lt
 8005078:	3264      	addlt	r2, #100	; 0x64
 800507a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800507e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005082:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8005086:	ee17 3a90 	vmov	r3, s15
 800508a:	bfab      	itete	ge
 800508c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8005090:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8005094:	ee00 3a10 	vmovge	s0, r3
 8005098:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80050ec <__ieee754_expf+0x198>
 800509c:	bfbc      	itt	lt
 800509e:	ee00 3a10 	vmovlt	s0, r3
 80050a2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80050a6:	4770      	bx	lr
 80050a8:	00000000 	.word	0x00000000
 80050ac:	42b17217 	.word	0x42b17217
 80050b0:	42cff1b5 	.word	0x42cff1b5
 80050b4:	3eb17218 	.word	0x3eb17218
 80050b8:	3f851591 	.word	0x3f851591
 80050bc:	0800e740 	.word	0x0800e740
 80050c0:	0800e748 	.word	0x0800e748
 80050c4:	3331bb4c 	.word	0x3331bb4c
 80050c8:	b5ddea0e 	.word	0xb5ddea0e
 80050cc:	388ab355 	.word	0x388ab355
 80050d0:	bb360b61 	.word	0xbb360b61
 80050d4:	3e2aaaab 	.word	0x3e2aaaab
 80050d8:	0800e738 	.word	0x0800e738
 80050dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80050e0:	3f317180 	.word	0x3f317180
 80050e4:	3717f7d1 	.word	0x3717f7d1
 80050e8:	7149f2ca 	.word	0x7149f2ca
 80050ec:	0d800000 	.word	0x0d800000

080050f0 <with_errnof>:
 80050f0:	b513      	push	{r0, r1, r4, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80050f8:	f000 f82a 	bl	8005150 <__errno>
 80050fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005100:	6004      	str	r4, [r0, #0]
 8005102:	b002      	add	sp, #8
 8005104:	bd10      	pop	{r4, pc}

08005106 <xflowf>:
 8005106:	b130      	cbz	r0, 8005116 <xflowf+0x10>
 8005108:	eef1 7a40 	vneg.f32	s15, s0
 800510c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005110:	2022      	movs	r0, #34	; 0x22
 8005112:	f7ff bfed 	b.w	80050f0 <with_errnof>
 8005116:	eef0 7a40 	vmov.f32	s15, s0
 800511a:	e7f7      	b.n	800510c <xflowf+0x6>

0800511c <__math_uflowf>:
 800511c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005124 <__math_uflowf+0x8>
 8005120:	f7ff bff1 	b.w	8005106 <xflowf>
 8005124:	10000000 	.word	0x10000000

08005128 <__math_oflowf>:
 8005128:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005130 <__math_oflowf+0x8>
 800512c:	f7ff bfeb 	b.w	8005106 <xflowf>
 8005130:	70000000 	.word	0x70000000

08005134 <finitef>:
 8005134:	b082      	sub	sp, #8
 8005136:	ed8d 0a01 	vstr	s0, [sp, #4]
 800513a:	9801      	ldr	r0, [sp, #4]
 800513c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005140:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005144:	bfac      	ite	ge
 8005146:	2000      	movge	r0, #0
 8005148:	2001      	movlt	r0, #1
 800514a:	b002      	add	sp, #8
 800514c:	4770      	bx	lr
	...

08005150 <__errno>:
 8005150:	4b01      	ldr	r3, [pc, #4]	; (8005158 <__errno+0x8>)
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000738 	.word	0x20000738

0800515c <__libc_init_array>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	4d0d      	ldr	r5, [pc, #52]	; (8005194 <__libc_init_array+0x38>)
 8005160:	4c0d      	ldr	r4, [pc, #52]	; (8005198 <__libc_init_array+0x3c>)
 8005162:	1b64      	subs	r4, r4, r5
 8005164:	10a4      	asrs	r4, r4, #2
 8005166:	2600      	movs	r6, #0
 8005168:	42a6      	cmp	r6, r4
 800516a:	d109      	bne.n	8005180 <__libc_init_array+0x24>
 800516c:	4d0b      	ldr	r5, [pc, #44]	; (800519c <__libc_init_array+0x40>)
 800516e:	4c0c      	ldr	r4, [pc, #48]	; (80051a0 <__libc_init_array+0x44>)
 8005170:	f004 fdca 	bl	8009d08 <_init>
 8005174:	1b64      	subs	r4, r4, r5
 8005176:	10a4      	asrs	r4, r4, #2
 8005178:	2600      	movs	r6, #0
 800517a:	42a6      	cmp	r6, r4
 800517c:	d105      	bne.n	800518a <__libc_init_array+0x2e>
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	f855 3b04 	ldr.w	r3, [r5], #4
 8005184:	4798      	blx	r3
 8005186:	3601      	adds	r6, #1
 8005188:	e7ee      	b.n	8005168 <__libc_init_array+0xc>
 800518a:	f855 3b04 	ldr.w	r3, [r5], #4
 800518e:	4798      	blx	r3
 8005190:	3601      	adds	r6, #1
 8005192:	e7f2      	b.n	800517a <__libc_init_array+0x1e>
 8005194:	0800eaec 	.word	0x0800eaec
 8005198:	0800eaec 	.word	0x0800eaec
 800519c:	0800eaec 	.word	0x0800eaec
 80051a0:	0800eaf4 	.word	0x0800eaf4

080051a4 <_malloc_r>:
 80051a4:	f101 030b 	add.w	r3, r1, #11
 80051a8:	2b16      	cmp	r3, #22
 80051aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ae:	4605      	mov	r5, r0
 80051b0:	d906      	bls.n	80051c0 <_malloc_r+0x1c>
 80051b2:	f033 0707 	bics.w	r7, r3, #7
 80051b6:	d504      	bpl.n	80051c2 <_malloc_r+0x1e>
 80051b8:	230c      	movs	r3, #12
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	2400      	movs	r4, #0
 80051be:	e1a5      	b.n	800550c <_malloc_r+0x368>
 80051c0:	2710      	movs	r7, #16
 80051c2:	42b9      	cmp	r1, r7
 80051c4:	d8f8      	bhi.n	80051b8 <_malloc_r+0x14>
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 fa3e 	bl	8005648 <__malloc_lock>
 80051cc:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80051d0:	4eb0      	ldr	r6, [pc, #704]	; (8005494 <_malloc_r+0x2f0>)
 80051d2:	d237      	bcs.n	8005244 <_malloc_r+0xa0>
 80051d4:	f107 0208 	add.w	r2, r7, #8
 80051d8:	4432      	add	r2, r6
 80051da:	f1a2 0108 	sub.w	r1, r2, #8
 80051de:	6854      	ldr	r4, [r2, #4]
 80051e0:	428c      	cmp	r4, r1
 80051e2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80051e6:	d102      	bne.n	80051ee <_malloc_r+0x4a>
 80051e8:	68d4      	ldr	r4, [r2, #12]
 80051ea:	42a2      	cmp	r2, r4
 80051ec:	d010      	beq.n	8005210 <_malloc_r+0x6c>
 80051ee:	6863      	ldr	r3, [r4, #4]
 80051f0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80051f4:	f023 0303 	bic.w	r3, r3, #3
 80051f8:	60ca      	str	r2, [r1, #12]
 80051fa:	4423      	add	r3, r4
 80051fc:	6091      	str	r1, [r2, #8]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fa24 	bl	8005654 <__malloc_unlock>
 800520c:	3408      	adds	r4, #8
 800520e:	e17d      	b.n	800550c <_malloc_r+0x368>
 8005210:	3302      	adds	r3, #2
 8005212:	6934      	ldr	r4, [r6, #16]
 8005214:	49a0      	ldr	r1, [pc, #640]	; (8005498 <_malloc_r+0x2f4>)
 8005216:	428c      	cmp	r4, r1
 8005218:	d077      	beq.n	800530a <_malloc_r+0x166>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	f022 0c03 	bic.w	ip, r2, #3
 8005220:	ebac 0007 	sub.w	r0, ip, r7
 8005224:	280f      	cmp	r0, #15
 8005226:	dd48      	ble.n	80052ba <_malloc_r+0x116>
 8005228:	19e2      	adds	r2, r4, r7
 800522a:	f040 0301 	orr.w	r3, r0, #1
 800522e:	f047 0701 	orr.w	r7, r7, #1
 8005232:	6067      	str	r7, [r4, #4]
 8005234:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8005238:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800523c:	6053      	str	r3, [r2, #4]
 800523e:	f844 000c 	str.w	r0, [r4, ip]
 8005242:	e7e0      	b.n	8005206 <_malloc_r+0x62>
 8005244:	0a7b      	lsrs	r3, r7, #9
 8005246:	d02a      	beq.n	800529e <_malloc_r+0xfa>
 8005248:	2b04      	cmp	r3, #4
 800524a:	d812      	bhi.n	8005272 <_malloc_r+0xce>
 800524c:	09bb      	lsrs	r3, r7, #6
 800524e:	3338      	adds	r3, #56	; 0x38
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8005256:	f1a2 0c08 	sub.w	ip, r2, #8
 800525a:	6854      	ldr	r4, [r2, #4]
 800525c:	4564      	cmp	r4, ip
 800525e:	d006      	beq.n	800526e <_malloc_r+0xca>
 8005260:	6862      	ldr	r2, [r4, #4]
 8005262:	f022 0203 	bic.w	r2, r2, #3
 8005266:	1bd0      	subs	r0, r2, r7
 8005268:	280f      	cmp	r0, #15
 800526a:	dd1c      	ble.n	80052a6 <_malloc_r+0x102>
 800526c:	3b01      	subs	r3, #1
 800526e:	3301      	adds	r3, #1
 8005270:	e7cf      	b.n	8005212 <_malloc_r+0x6e>
 8005272:	2b14      	cmp	r3, #20
 8005274:	d801      	bhi.n	800527a <_malloc_r+0xd6>
 8005276:	335b      	adds	r3, #91	; 0x5b
 8005278:	e7ea      	b.n	8005250 <_malloc_r+0xac>
 800527a:	2b54      	cmp	r3, #84	; 0x54
 800527c:	d802      	bhi.n	8005284 <_malloc_r+0xe0>
 800527e:	0b3b      	lsrs	r3, r7, #12
 8005280:	336e      	adds	r3, #110	; 0x6e
 8005282:	e7e5      	b.n	8005250 <_malloc_r+0xac>
 8005284:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005288:	d802      	bhi.n	8005290 <_malloc_r+0xec>
 800528a:	0bfb      	lsrs	r3, r7, #15
 800528c:	3377      	adds	r3, #119	; 0x77
 800528e:	e7df      	b.n	8005250 <_malloc_r+0xac>
 8005290:	f240 5254 	movw	r2, #1364	; 0x554
 8005294:	4293      	cmp	r3, r2
 8005296:	d804      	bhi.n	80052a2 <_malloc_r+0xfe>
 8005298:	0cbb      	lsrs	r3, r7, #18
 800529a:	337c      	adds	r3, #124	; 0x7c
 800529c:	e7d8      	b.n	8005250 <_malloc_r+0xac>
 800529e:	233f      	movs	r3, #63	; 0x3f
 80052a0:	e7d6      	b.n	8005250 <_malloc_r+0xac>
 80052a2:	237e      	movs	r3, #126	; 0x7e
 80052a4:	e7d4      	b.n	8005250 <_malloc_r+0xac>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	68e1      	ldr	r1, [r4, #12]
 80052aa:	db04      	blt.n	80052b6 <_malloc_r+0x112>
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	60d9      	str	r1, [r3, #12]
 80052b0:	608b      	str	r3, [r1, #8]
 80052b2:	18a3      	adds	r3, r4, r2
 80052b4:	e7a3      	b.n	80051fe <_malloc_r+0x5a>
 80052b6:	460c      	mov	r4, r1
 80052b8:	e7d0      	b.n	800525c <_malloc_r+0xb8>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80052c0:	db07      	blt.n	80052d2 <_malloc_r+0x12e>
 80052c2:	44a4      	add	ip, r4
 80052c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	f8cc 3004 	str.w	r3, [ip, #4]
 80052d0:	e799      	b.n	8005206 <_malloc_r+0x62>
 80052d2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80052d6:	6870      	ldr	r0, [r6, #4]
 80052d8:	f080 8096 	bcs.w	8005408 <_malloc_r+0x264>
 80052dc:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80052e0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80052e4:	f04f 0c01 	mov.w	ip, #1
 80052e8:	3201      	adds	r2, #1
 80052ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 80052ee:	ea4c 0000 	orr.w	r0, ip, r0
 80052f2:	6070      	str	r0, [r6, #4]
 80052f4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80052f8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80052fc:	3808      	subs	r0, #8
 80052fe:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8005302:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8005306:	f8cc 400c 	str.w	r4, [ip, #12]
 800530a:	2001      	movs	r0, #1
 800530c:	109a      	asrs	r2, r3, #2
 800530e:	fa00 f202 	lsl.w	r2, r0, r2
 8005312:	6870      	ldr	r0, [r6, #4]
 8005314:	4290      	cmp	r0, r2
 8005316:	d326      	bcc.n	8005366 <_malloc_r+0x1c2>
 8005318:	4210      	tst	r0, r2
 800531a:	d106      	bne.n	800532a <_malloc_r+0x186>
 800531c:	f023 0303 	bic.w	r3, r3, #3
 8005320:	0052      	lsls	r2, r2, #1
 8005322:	4210      	tst	r0, r2
 8005324:	f103 0304 	add.w	r3, r3, #4
 8005328:	d0fa      	beq.n	8005320 <_malloc_r+0x17c>
 800532a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800532e:	46c1      	mov	r9, r8
 8005330:	469e      	mov	lr, r3
 8005332:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005336:	454c      	cmp	r4, r9
 8005338:	f040 80ba 	bne.w	80054b0 <_malloc_r+0x30c>
 800533c:	f10e 0e01 	add.w	lr, lr, #1
 8005340:	f01e 0f03 	tst.w	lr, #3
 8005344:	f109 0908 	add.w	r9, r9, #8
 8005348:	d1f3      	bne.n	8005332 <_malloc_r+0x18e>
 800534a:	0798      	lsls	r0, r3, #30
 800534c:	f040 80e4 	bne.w	8005518 <_malloc_r+0x374>
 8005350:	6873      	ldr	r3, [r6, #4]
 8005352:	ea23 0302 	bic.w	r3, r3, r2
 8005356:	6073      	str	r3, [r6, #4]
 8005358:	6870      	ldr	r0, [r6, #4]
 800535a:	0052      	lsls	r2, r2, #1
 800535c:	4290      	cmp	r0, r2
 800535e:	d302      	bcc.n	8005366 <_malloc_r+0x1c2>
 8005360:	2a00      	cmp	r2, #0
 8005362:	f040 80e6 	bne.w	8005532 <_malloc_r+0x38e>
 8005366:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800536a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800536e:	f023 0903 	bic.w	r9, r3, #3
 8005372:	45b9      	cmp	r9, r7
 8005374:	d304      	bcc.n	8005380 <_malloc_r+0x1dc>
 8005376:	eba9 0207 	sub.w	r2, r9, r7
 800537a:	2a0f      	cmp	r2, #15
 800537c:	f300 8142 	bgt.w	8005604 <_malloc_r+0x460>
 8005380:	4b46      	ldr	r3, [pc, #280]	; (800549c <_malloc_r+0x2f8>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	3110      	adds	r1, #16
 8005386:	4439      	add	r1, r7
 8005388:	2008      	movs	r0, #8
 800538a:	9101      	str	r1, [sp, #4]
 800538c:	f001 fd70 	bl	8006e70 <sysconf>
 8005390:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <_malloc_r+0x2fc>)
 8005392:	9901      	ldr	r1, [sp, #4]
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	bf1f      	itttt	ne
 800539a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800539e:	1809      	addne	r1, r1, r0
 80053a0:	4243      	negne	r3, r0
 80053a2:	4019      	andne	r1, r3
 80053a4:	4680      	mov	r8, r0
 80053a6:	4628      	mov	r0, r5
 80053a8:	9101      	str	r1, [sp, #4]
 80053aa:	f000 fb4b 	bl	8005a44 <_sbrk_r>
 80053ae:	1c42      	adds	r2, r0, #1
 80053b0:	eb0a 0b09 	add.w	fp, sl, r9
 80053b4:	4604      	mov	r4, r0
 80053b6:	f000 80f8 	beq.w	80055aa <_malloc_r+0x406>
 80053ba:	4583      	cmp	fp, r0
 80053bc:	9901      	ldr	r1, [sp, #4]
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <_malloc_r+0x2fc>)
 80053c0:	d902      	bls.n	80053c8 <_malloc_r+0x224>
 80053c2:	45b2      	cmp	sl, r6
 80053c4:	f040 80f1 	bne.w	80055aa <_malloc_r+0x406>
 80053c8:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <_malloc_r+0x300>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	45a3      	cmp	fp, r4
 80053ce:	eb00 0e01 	add.w	lr, r0, r1
 80053d2:	f8c3 e000 	str.w	lr, [r3]
 80053d6:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 80053da:	f040 80ac 	bne.w	8005536 <_malloc_r+0x392>
 80053de:	ea1b 0f0c 	tst.w	fp, ip
 80053e2:	f040 80a8 	bne.w	8005536 <_malloc_r+0x392>
 80053e6:	68b2      	ldr	r2, [r6, #8]
 80053e8:	4449      	add	r1, r9
 80053ea:	f041 0101 	orr.w	r1, r1, #1
 80053ee:	6051      	str	r1, [r2, #4]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <_malloc_r+0x304>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	428b      	cmp	r3, r1
 80053f8:	bf88      	it	hi
 80053fa:	6013      	strhi	r3, [r2, #0]
 80053fc:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <_malloc_r+0x308>)
 80053fe:	6811      	ldr	r1, [r2, #0]
 8005400:	428b      	cmp	r3, r1
 8005402:	bf88      	it	hi
 8005404:	6013      	strhi	r3, [r2, #0]
 8005406:	e0d0      	b.n	80055aa <_malloc_r+0x406>
 8005408:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800540c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8005410:	d218      	bcs.n	8005444 <_malloc_r+0x2a0>
 8005412:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8005416:	3238      	adds	r2, #56	; 0x38
 8005418:	f102 0e01 	add.w	lr, r2, #1
 800541c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8005420:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8005424:	45f0      	cmp	r8, lr
 8005426:	d12b      	bne.n	8005480 <_malloc_r+0x2dc>
 8005428:	1092      	asrs	r2, r2, #2
 800542a:	f04f 0c01 	mov.w	ip, #1
 800542e:	fa0c f202 	lsl.w	r2, ip, r2
 8005432:	4310      	orrs	r0, r2
 8005434:	6070      	str	r0, [r6, #4]
 8005436:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800543a:	f8c8 4008 	str.w	r4, [r8, #8]
 800543e:	f8ce 400c 	str.w	r4, [lr, #12]
 8005442:	e762      	b.n	800530a <_malloc_r+0x166>
 8005444:	2a14      	cmp	r2, #20
 8005446:	d801      	bhi.n	800544c <_malloc_r+0x2a8>
 8005448:	325b      	adds	r2, #91	; 0x5b
 800544a:	e7e5      	b.n	8005418 <_malloc_r+0x274>
 800544c:	2a54      	cmp	r2, #84	; 0x54
 800544e:	d803      	bhi.n	8005458 <_malloc_r+0x2b4>
 8005450:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8005454:	326e      	adds	r2, #110	; 0x6e
 8005456:	e7df      	b.n	8005418 <_malloc_r+0x274>
 8005458:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800545c:	d803      	bhi.n	8005466 <_malloc_r+0x2c2>
 800545e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005462:	3277      	adds	r2, #119	; 0x77
 8005464:	e7d8      	b.n	8005418 <_malloc_r+0x274>
 8005466:	f240 5e54 	movw	lr, #1364	; 0x554
 800546a:	4572      	cmp	r2, lr
 800546c:	bf9a      	itte	ls
 800546e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8005472:	327c      	addls	r2, #124	; 0x7c
 8005474:	227e      	movhi	r2, #126	; 0x7e
 8005476:	e7cf      	b.n	8005418 <_malloc_r+0x274>
 8005478:	f8de e008 	ldr.w	lr, [lr, #8]
 800547c:	45f0      	cmp	r8, lr
 800547e:	d005      	beq.n	800548c <_malloc_r+0x2e8>
 8005480:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005484:	f022 0203 	bic.w	r2, r2, #3
 8005488:	4562      	cmp	r2, ip
 800548a:	d8f5      	bhi.n	8005478 <_malloc_r+0x2d4>
 800548c:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005490:	e7d1      	b.n	8005436 <_malloc_r+0x292>
 8005492:	bf00      	nop
 8005494:	20000b68 	.word	0x20000b68
 8005498:	20000b70 	.word	0x20000b70
 800549c:	2000159c 	.word	0x2000159c
 80054a0:	20000f70 	.word	0x20000f70
 80054a4:	2000156c 	.word	0x2000156c
 80054a8:	20001594 	.word	0x20001594
 80054ac:	20001598 	.word	0x20001598
 80054b0:	6860      	ldr	r0, [r4, #4]
 80054b2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80054b6:	f020 0003 	bic.w	r0, r0, #3
 80054ba:	eba0 0a07 	sub.w	sl, r0, r7
 80054be:	f1ba 0f0f 	cmp.w	sl, #15
 80054c2:	dd12      	ble.n	80054ea <_malloc_r+0x346>
 80054c4:	68a3      	ldr	r3, [r4, #8]
 80054c6:	19e2      	adds	r2, r4, r7
 80054c8:	f047 0701 	orr.w	r7, r7, #1
 80054cc:	6067      	str	r7, [r4, #4]
 80054ce:	f8c3 c00c 	str.w	ip, [r3, #12]
 80054d2:	f8cc 3008 	str.w	r3, [ip, #8]
 80054d6:	f04a 0301 	orr.w	r3, sl, #1
 80054da:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80054de:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80054e2:	6053      	str	r3, [r2, #4]
 80054e4:	f844 a000 	str.w	sl, [r4, r0]
 80054e8:	e68d      	b.n	8005206 <_malloc_r+0x62>
 80054ea:	f1ba 0f00 	cmp.w	sl, #0
 80054ee:	db11      	blt.n	8005514 <_malloc_r+0x370>
 80054f0:	4420      	add	r0, r4
 80054f2:	6843      	ldr	r3, [r0, #4]
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6043      	str	r3, [r0, #4]
 80054fa:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80054fe:	4628      	mov	r0, r5
 8005500:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005504:	f8cc 3008 	str.w	r3, [ip, #8]
 8005508:	f000 f8a4 	bl	8005654 <__malloc_unlock>
 800550c:	4620      	mov	r0, r4
 800550e:	b003      	add	sp, #12
 8005510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005514:	4664      	mov	r4, ip
 8005516:	e70e      	b.n	8005336 <_malloc_r+0x192>
 8005518:	f858 0908 	ldr.w	r0, [r8], #-8
 800551c:	4540      	cmp	r0, r8
 800551e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005522:	f43f af12 	beq.w	800534a <_malloc_r+0x1a6>
 8005526:	e717      	b.n	8005358 <_malloc_r+0x1b4>
 8005528:	3304      	adds	r3, #4
 800552a:	0052      	lsls	r2, r2, #1
 800552c:	4210      	tst	r0, r2
 800552e:	d0fb      	beq.n	8005528 <_malloc_r+0x384>
 8005530:	e6fb      	b.n	800532a <_malloc_r+0x186>
 8005532:	4673      	mov	r3, lr
 8005534:	e7fa      	b.n	800552c <_malloc_r+0x388>
 8005536:	6810      	ldr	r0, [r2, #0]
 8005538:	3001      	adds	r0, #1
 800553a:	bf1b      	ittet	ne
 800553c:	eba4 0b0b 	subne.w	fp, r4, fp
 8005540:	eb0b 020e 	addne.w	r2, fp, lr
 8005544:	6014      	streq	r4, [r2, #0]
 8005546:	601a      	strne	r2, [r3, #0]
 8005548:	f014 0b07 	ands.w	fp, r4, #7
 800554c:	bf1a      	itte	ne
 800554e:	f1cb 0008 	rsbne	r0, fp, #8
 8005552:	1824      	addne	r4, r4, r0
 8005554:	4658      	moveq	r0, fp
 8005556:	1862      	adds	r2, r4, r1
 8005558:	ea02 010c 	and.w	r1, r2, ip
 800555c:	4480      	add	r8, r0
 800555e:	eba8 0801 	sub.w	r8, r8, r1
 8005562:	ea08 080c 	and.w	r8, r8, ip
 8005566:	4641      	mov	r1, r8
 8005568:	4628      	mov	r0, r5
 800556a:	9201      	str	r2, [sp, #4]
 800556c:	f000 fa6a 	bl	8005a44 <_sbrk_r>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	9a01      	ldr	r2, [sp, #4]
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <_malloc_r+0x474>)
 8005576:	d107      	bne.n	8005588 <_malloc_r+0x3e4>
 8005578:	f1bb 0f00 	cmp.w	fp, #0
 800557c:	d023      	beq.n	80055c6 <_malloc_r+0x422>
 800557e:	f1ab 0008 	sub.w	r0, fp, #8
 8005582:	4410      	add	r0, r2
 8005584:	f04f 0800 	mov.w	r8, #0
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	60b4      	str	r4, [r6, #8]
 800558c:	1b00      	subs	r0, r0, r4
 800558e:	4440      	add	r0, r8
 8005590:	4442      	add	r2, r8
 8005592:	f040 0001 	orr.w	r0, r0, #1
 8005596:	45b2      	cmp	sl, r6
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	6060      	str	r0, [r4, #4]
 800559c:	f43f af28 	beq.w	80053f0 <_malloc_r+0x24c>
 80055a0:	f1b9 0f0f 	cmp.w	r9, #15
 80055a4:	d812      	bhi.n	80055cc <_malloc_r+0x428>
 80055a6:	2301      	movs	r3, #1
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	68b3      	ldr	r3, [r6, #8]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	42bb      	cmp	r3, r7
 80055b4:	eba3 0207 	sub.w	r2, r3, r7
 80055b8:	d301      	bcc.n	80055be <_malloc_r+0x41a>
 80055ba:	2a0f      	cmp	r2, #15
 80055bc:	dc22      	bgt.n	8005604 <_malloc_r+0x460>
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f848 	bl	8005654 <__malloc_unlock>
 80055c4:	e5fa      	b.n	80051bc <_malloc_r+0x18>
 80055c6:	4610      	mov	r0, r2
 80055c8:	46d8      	mov	r8, fp
 80055ca:	e7dd      	b.n	8005588 <_malloc_r+0x3e4>
 80055cc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80055d0:	f1a9 090c 	sub.w	r9, r9, #12
 80055d4:	f029 0907 	bic.w	r9, r9, #7
 80055d8:	f002 0201 	and.w	r2, r2, #1
 80055dc:	ea42 0209 	orr.w	r2, r2, r9
 80055e0:	f8ca 2004 	str.w	r2, [sl, #4]
 80055e4:	2105      	movs	r1, #5
 80055e6:	eb0a 0209 	add.w	r2, sl, r9
 80055ea:	f1b9 0f0f 	cmp.w	r9, #15
 80055ee:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80055f2:	f67f aefd 	bls.w	80053f0 <_malloc_r+0x24c>
 80055f6:	f10a 0108 	add.w	r1, sl, #8
 80055fa:	4628      	mov	r0, r5
 80055fc:	f002 fb90 	bl	8007d20 <_free_r>
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <_malloc_r+0x474>)
 8005602:	e6f5      	b.n	80053f0 <_malloc_r+0x24c>
 8005604:	68b4      	ldr	r4, [r6, #8]
 8005606:	f047 0301 	orr.w	r3, r7, #1
 800560a:	4427      	add	r7, r4
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	60b7      	str	r7, [r6, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	e5f6      	b.n	8005206 <_malloc_r+0x62>
 8005618:	2000156c 	.word	0x2000156c

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005632:	4291      	cmp	r1, r2
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <memset>:
 8005638:	4402      	add	r2, r0
 800563a:	4603      	mov	r3, r0
 800563c:	4293      	cmp	r3, r2
 800563e:	d100      	bne.n	8005642 <memset+0xa>
 8005640:	4770      	bx	lr
 8005642:	f803 1b01 	strb.w	r1, [r3], #1
 8005646:	e7f9      	b.n	800563c <memset+0x4>

08005648 <__malloc_lock>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__malloc_lock+0x8>)
 800564a:	f002 bd99 	b.w	8008180 <__retarget_lock_acquire_recursive>
 800564e:	bf00      	nop
 8005650:	200015a1 	.word	0x200015a1

08005654 <__malloc_unlock>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__malloc_unlock+0x8>)
 8005656:	f002 bd94 	b.w	8008182 <__retarget_lock_release_recursive>
 800565a:	bf00      	nop
 800565c:	200015a1 	.word	0x200015a1

08005660 <_puts_r>:
 8005660:	b530      	push	{r4, r5, lr}
 8005662:	4605      	mov	r5, r0
 8005664:	b089      	sub	sp, #36	; 0x24
 8005666:	4608      	mov	r0, r1
 8005668:	460c      	mov	r4, r1
 800566a:	f7fa fdb1 	bl	80001d0 <strlen>
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <_puts_r+0x88>)
 8005670:	9306      	str	r3, [sp, #24]
 8005672:	2301      	movs	r3, #1
 8005674:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8005678:	9307      	str	r3, [sp, #28]
 800567a:	4418      	add	r0, r3
 800567c:	ab04      	add	r3, sp, #16
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	2302      	movs	r3, #2
 8005682:	9302      	str	r3, [sp, #8]
 8005684:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	9003      	str	r0, [sp, #12]
 800568a:	b913      	cbnz	r3, 8005692 <_puts_r+0x32>
 800568c:	4628      	mov	r0, r5
 800568e:	f002 fab7 	bl	8007c00 <__sinit>
 8005692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005694:	07db      	lsls	r3, r3, #31
 8005696:	d405      	bmi.n	80056a4 <_puts_r+0x44>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	0598      	lsls	r0, r3, #22
 800569c:	d402      	bmi.n	80056a4 <_puts_r+0x44>
 800569e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a0:	f002 fd6e 	bl	8008180 <__retarget_lock_acquire_recursive>
 80056a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a8:	0499      	lsls	r1, r3, #18
 80056aa:	d406      	bmi.n	80056ba <_puts_r+0x5a>
 80056ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b8:	6663      	str	r3, [r4, #100]	; 0x64
 80056ba:	4628      	mov	r0, r5
 80056bc:	aa01      	add	r2, sp, #4
 80056be:	4621      	mov	r1, r4
 80056c0:	f002 fbee 	bl	8007ea0 <__sfvwrite_r>
 80056c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c6:	2800      	cmp	r0, #0
 80056c8:	bf14      	ite	ne
 80056ca:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80056ce:	250a      	moveq	r5, #10
 80056d0:	07da      	lsls	r2, r3, #31
 80056d2:	d405      	bmi.n	80056e0 <_puts_r+0x80>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	059b      	lsls	r3, r3, #22
 80056d8:	d402      	bmi.n	80056e0 <_puts_r+0x80>
 80056da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056dc:	f002 fd51 	bl	8008182 <__retarget_lock_release_recursive>
 80056e0:	4628      	mov	r0, r5
 80056e2:	b009      	add	sp, #36	; 0x24
 80056e4:	bd30      	pop	{r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	0800e9b6 	.word	0x0800e9b6

080056ec <puts>:
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <puts+0xc>)
 80056ee:	4601      	mov	r1, r0
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	f7ff bfb5 	b.w	8005660 <_puts_r>
 80056f6:	bf00      	nop
 80056f8:	20000738 	.word	0x20000738

080056fc <_realloc_r>:
 80056fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4681      	mov	r9, r0
 8005702:	460c      	mov	r4, r1
 8005704:	b929      	cbnz	r1, 8005712 <_realloc_r+0x16>
 8005706:	4611      	mov	r1, r2
 8005708:	b003      	add	sp, #12
 800570a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570e:	f7ff bd49 	b.w	80051a4 <_malloc_r>
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	f7ff ff98 	bl	8005648 <__malloc_lock>
 8005718:	9a01      	ldr	r2, [sp, #4]
 800571a:	f102 080b 	add.w	r8, r2, #11
 800571e:	f1b8 0f16 	cmp.w	r8, #22
 8005722:	d90b      	bls.n	800573c <_realloc_r+0x40>
 8005724:	f038 0807 	bics.w	r8, r8, #7
 8005728:	d50a      	bpl.n	8005740 <_realloc_r+0x44>
 800572a:	230c      	movs	r3, #12
 800572c:	f8c9 3000 	str.w	r3, [r9]
 8005730:	f04f 0b00 	mov.w	fp, #0
 8005734:	4658      	mov	r0, fp
 8005736:	b003      	add	sp, #12
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	f04f 0810 	mov.w	r8, #16
 8005740:	4590      	cmp	r8, r2
 8005742:	d3f2      	bcc.n	800572a <_realloc_r+0x2e>
 8005744:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005748:	f025 0603 	bic.w	r6, r5, #3
 800574c:	45b0      	cmp	r8, r6
 800574e:	f1a4 0a08 	sub.w	sl, r4, #8
 8005752:	f340 816e 	ble.w	8005a32 <_realloc_r+0x336>
 8005756:	499b      	ldr	r1, [pc, #620]	; (80059c4 <_realloc_r+0x2c8>)
 8005758:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800575c:	eb0a 0306 	add.w	r3, sl, r6
 8005760:	459c      	cmp	ip, r3
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	d005      	beq.n	8005772 <_realloc_r+0x76>
 8005766:	f021 0001 	bic.w	r0, r1, #1
 800576a:	4418      	add	r0, r3
 800576c:	6840      	ldr	r0, [r0, #4]
 800576e:	07c7      	lsls	r7, r0, #31
 8005770:	d427      	bmi.n	80057c2 <_realloc_r+0xc6>
 8005772:	f021 0103 	bic.w	r1, r1, #3
 8005776:	459c      	cmp	ip, r3
 8005778:	eb06 0701 	add.w	r7, r6, r1
 800577c:	d119      	bne.n	80057b2 <_realloc_r+0xb6>
 800577e:	f108 0010 	add.w	r0, r8, #16
 8005782:	42b8      	cmp	r0, r7
 8005784:	dc1f      	bgt.n	80057c6 <_realloc_r+0xca>
 8005786:	eb0a 0308 	add.w	r3, sl, r8
 800578a:	4a8e      	ldr	r2, [pc, #568]	; (80059c4 <_realloc_r+0x2c8>)
 800578c:	eba7 0708 	sub.w	r7, r7, r8
 8005790:	f047 0701 	orr.w	r7, r7, #1
 8005794:	6093      	str	r3, [r2, #8]
 8005796:	605f      	str	r7, [r3, #4]
 8005798:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	ea43 0308 	orr.w	r3, r3, r8
 80057a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80057a8:	4648      	mov	r0, r9
 80057aa:	f7ff ff53 	bl	8005654 <__malloc_unlock>
 80057ae:	46a3      	mov	fp, r4
 80057b0:	e7c0      	b.n	8005734 <_realloc_r+0x38>
 80057b2:	45b8      	cmp	r8, r7
 80057b4:	dc07      	bgt.n	80057c6 <_realloc_r+0xca>
 80057b6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80057ba:	60da      	str	r2, [r3, #12]
 80057bc:	6093      	str	r3, [r2, #8]
 80057be:	4655      	mov	r5, sl
 80057c0:	e07f      	b.n	80058c2 <_realloc_r+0x1c6>
 80057c2:	2100      	movs	r1, #0
 80057c4:	460b      	mov	r3, r1
 80057c6:	07e8      	lsls	r0, r5, #31
 80057c8:	f100 80e5 	bmi.w	8005996 <_realloc_r+0x29a>
 80057cc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80057d0:	ebaa 0505 	sub.w	r5, sl, r5
 80057d4:	6868      	ldr	r0, [r5, #4]
 80057d6:	f020 0003 	bic.w	r0, r0, #3
 80057da:	eb00 0b06 	add.w	fp, r0, r6
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a5 	beq.w	800592e <_realloc_r+0x232>
 80057e4:	459c      	cmp	ip, r3
 80057e6:	eb01 070b 	add.w	r7, r1, fp
 80057ea:	d14a      	bne.n	8005882 <_realloc_r+0x186>
 80057ec:	f108 0310 	add.w	r3, r8, #16
 80057f0:	42bb      	cmp	r3, r7
 80057f2:	f300 809c 	bgt.w	800592e <_realloc_r+0x232>
 80057f6:	46ab      	mov	fp, r5
 80057f8:	68eb      	ldr	r3, [r5, #12]
 80057fa:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80057fe:	60d3      	str	r3, [r2, #12]
 8005800:	609a      	str	r2, [r3, #8]
 8005802:	1f32      	subs	r2, r6, #4
 8005804:	2a24      	cmp	r2, #36	; 0x24
 8005806:	d837      	bhi.n	8005878 <_realloc_r+0x17c>
 8005808:	2a13      	cmp	r2, #19
 800580a:	d933      	bls.n	8005874 <_realloc_r+0x178>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	60ab      	str	r3, [r5, #8]
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	60eb      	str	r3, [r5, #12]
 8005814:	2a1b      	cmp	r2, #27
 8005816:	d81b      	bhi.n	8005850 <_realloc_r+0x154>
 8005818:	3408      	adds	r4, #8
 800581a:	f105 0310 	add.w	r3, r5, #16
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	68a2      	ldr	r2, [r4, #8]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	eb05 0308 	add.w	r3, r5, r8
 800582e:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <_realloc_r+0x2c8>)
 8005830:	eba7 0708 	sub.w	r7, r7, r8
 8005834:	f047 0701 	orr.w	r7, r7, #1
 8005838:	6093      	str	r3, [r2, #8]
 800583a:	605f      	str	r7, [r3, #4]
 800583c:	686b      	ldr	r3, [r5, #4]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	ea43 0308 	orr.w	r3, r3, r8
 8005846:	606b      	str	r3, [r5, #4]
 8005848:	4648      	mov	r0, r9
 800584a:	f7ff ff03 	bl	8005654 <__malloc_unlock>
 800584e:	e771      	b.n	8005734 <_realloc_r+0x38>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	612b      	str	r3, [r5, #16]
 8005854:	68e3      	ldr	r3, [r4, #12]
 8005856:	616b      	str	r3, [r5, #20]
 8005858:	2a24      	cmp	r2, #36	; 0x24
 800585a:	bf01      	itttt	eq
 800585c:	6923      	ldreq	r3, [r4, #16]
 800585e:	61ab      	streq	r3, [r5, #24]
 8005860:	6962      	ldreq	r2, [r4, #20]
 8005862:	61ea      	streq	r2, [r5, #28]
 8005864:	bf19      	ittee	ne
 8005866:	3410      	addne	r4, #16
 8005868:	f105 0318 	addne.w	r3, r5, #24
 800586c:	f105 0320 	addeq.w	r3, r5, #32
 8005870:	3418      	addeq	r4, #24
 8005872:	e7d4      	b.n	800581e <_realloc_r+0x122>
 8005874:	465b      	mov	r3, fp
 8005876:	e7d2      	b.n	800581e <_realloc_r+0x122>
 8005878:	4621      	mov	r1, r4
 800587a:	4658      	mov	r0, fp
 800587c:	f002 fc82 	bl	8008184 <memmove>
 8005880:	e7d3      	b.n	800582a <_realloc_r+0x12e>
 8005882:	45b8      	cmp	r8, r7
 8005884:	dc53      	bgt.n	800592e <_realloc_r+0x232>
 8005886:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800588a:	4628      	mov	r0, r5
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	6093      	str	r3, [r2, #8]
 8005890:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005894:	68eb      	ldr	r3, [r5, #12]
 8005896:	60d3      	str	r3, [r2, #12]
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	1f32      	subs	r2, r6, #4
 800589c:	2a24      	cmp	r2, #36	; 0x24
 800589e:	d842      	bhi.n	8005926 <_realloc_r+0x22a>
 80058a0:	2a13      	cmp	r2, #19
 80058a2:	d908      	bls.n	80058b6 <_realloc_r+0x1ba>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	60ab      	str	r3, [r5, #8]
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	60eb      	str	r3, [r5, #12]
 80058ac:	2a1b      	cmp	r2, #27
 80058ae:	d828      	bhi.n	8005902 <_realloc_r+0x206>
 80058b0:	3408      	adds	r4, #8
 80058b2:	f105 0010 	add.w	r0, r5, #16
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	6003      	str	r3, [r0, #0]
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	6043      	str	r3, [r0, #4]
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	6083      	str	r3, [r0, #8]
 80058c2:	686b      	ldr	r3, [r5, #4]
 80058c4:	eba7 0008 	sub.w	r0, r7, r8
 80058c8:	280f      	cmp	r0, #15
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	eb05 0207 	add.w	r2, r5, r7
 80058d2:	f240 80b0 	bls.w	8005a36 <_realloc_r+0x33a>
 80058d6:	eb05 0108 	add.w	r1, r5, r8
 80058da:	ea48 0303 	orr.w	r3, r8, r3
 80058de:	f040 0001 	orr.w	r0, r0, #1
 80058e2:	606b      	str	r3, [r5, #4]
 80058e4:	6048      	str	r0, [r1, #4]
 80058e6:	6853      	ldr	r3, [r2, #4]
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6053      	str	r3, [r2, #4]
 80058ee:	3108      	adds	r1, #8
 80058f0:	4648      	mov	r0, r9
 80058f2:	f002 fa15 	bl	8007d20 <_free_r>
 80058f6:	4648      	mov	r0, r9
 80058f8:	f7ff feac 	bl	8005654 <__malloc_unlock>
 80058fc:	f105 0b08 	add.w	fp, r5, #8
 8005900:	e718      	b.n	8005734 <_realloc_r+0x38>
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	612b      	str	r3, [r5, #16]
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	616b      	str	r3, [r5, #20]
 800590a:	2a24      	cmp	r2, #36	; 0x24
 800590c:	bf01      	itttt	eq
 800590e:	6923      	ldreq	r3, [r4, #16]
 8005910:	61ab      	streq	r3, [r5, #24]
 8005912:	6963      	ldreq	r3, [r4, #20]
 8005914:	61eb      	streq	r3, [r5, #28]
 8005916:	bf19      	ittee	ne
 8005918:	3410      	addne	r4, #16
 800591a:	f105 0018 	addne.w	r0, r5, #24
 800591e:	f105 0020 	addeq.w	r0, r5, #32
 8005922:	3418      	addeq	r4, #24
 8005924:	e7c7      	b.n	80058b6 <_realloc_r+0x1ba>
 8005926:	4621      	mov	r1, r4
 8005928:	f002 fc2c 	bl	8008184 <memmove>
 800592c:	e7c9      	b.n	80058c2 <_realloc_r+0x1c6>
 800592e:	45d8      	cmp	r8, fp
 8005930:	dc31      	bgt.n	8005996 <_realloc_r+0x29a>
 8005932:	4628      	mov	r0, r5
 8005934:	68eb      	ldr	r3, [r5, #12]
 8005936:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800593a:	60d3      	str	r3, [r2, #12]
 800593c:	609a      	str	r2, [r3, #8]
 800593e:	1f32      	subs	r2, r6, #4
 8005940:	2a24      	cmp	r2, #36	; 0x24
 8005942:	d824      	bhi.n	800598e <_realloc_r+0x292>
 8005944:	2a13      	cmp	r2, #19
 8005946:	d908      	bls.n	800595a <_realloc_r+0x25e>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	60ab      	str	r3, [r5, #8]
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	60eb      	str	r3, [r5, #12]
 8005950:	2a1b      	cmp	r2, #27
 8005952:	d80a      	bhi.n	800596a <_realloc_r+0x26e>
 8005954:	3408      	adds	r4, #8
 8005956:	f105 0010 	add.w	r0, r5, #16
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6003      	str	r3, [r0, #0]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6043      	str	r3, [r0, #4]
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	6083      	str	r3, [r0, #8]
 8005966:	465f      	mov	r7, fp
 8005968:	e7ab      	b.n	80058c2 <_realloc_r+0x1c6>
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	612b      	str	r3, [r5, #16]
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	616b      	str	r3, [r5, #20]
 8005972:	2a24      	cmp	r2, #36	; 0x24
 8005974:	bf01      	itttt	eq
 8005976:	6923      	ldreq	r3, [r4, #16]
 8005978:	61ab      	streq	r3, [r5, #24]
 800597a:	6963      	ldreq	r3, [r4, #20]
 800597c:	61eb      	streq	r3, [r5, #28]
 800597e:	bf19      	ittee	ne
 8005980:	3410      	addne	r4, #16
 8005982:	f105 0018 	addne.w	r0, r5, #24
 8005986:	f105 0020 	addeq.w	r0, r5, #32
 800598a:	3418      	addeq	r4, #24
 800598c:	e7e5      	b.n	800595a <_realloc_r+0x25e>
 800598e:	4621      	mov	r1, r4
 8005990:	f002 fbf8 	bl	8008184 <memmove>
 8005994:	e7e7      	b.n	8005966 <_realloc_r+0x26a>
 8005996:	4611      	mov	r1, r2
 8005998:	4648      	mov	r0, r9
 800599a:	f7ff fc03 	bl	80051a4 <_malloc_r>
 800599e:	4683      	mov	fp, r0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f43f af51 	beq.w	8005848 <_realloc_r+0x14c>
 80059a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	4453      	add	r3, sl
 80059b0:	f1a0 0208 	sub.w	r2, r0, #8
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d107      	bne.n	80059c8 <_realloc_r+0x2cc>
 80059b8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80059bc:	f027 0703 	bic.w	r7, r7, #3
 80059c0:	4437      	add	r7, r6
 80059c2:	e6fc      	b.n	80057be <_realloc_r+0xc2>
 80059c4:	20000b68 	.word	0x20000b68
 80059c8:	1f32      	subs	r2, r6, #4
 80059ca:	2a24      	cmp	r2, #36	; 0x24
 80059cc:	d82d      	bhi.n	8005a2a <_realloc_r+0x32e>
 80059ce:	2a13      	cmp	r2, #19
 80059d0:	d928      	bls.n	8005a24 <_realloc_r+0x328>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	6003      	str	r3, [r0, #0]
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	6043      	str	r3, [r0, #4]
 80059da:	2a1b      	cmp	r2, #27
 80059dc:	d80e      	bhi.n	80059fc <_realloc_r+0x300>
 80059de:	f104 0208 	add.w	r2, r4, #8
 80059e2:	f100 0308 	add.w	r3, r0, #8
 80059e6:	6811      	ldr	r1, [r2, #0]
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	6851      	ldr	r1, [r2, #4]
 80059ec:	6059      	str	r1, [r3, #4]
 80059ee:	6892      	ldr	r2, [r2, #8]
 80059f0:	609a      	str	r2, [r3, #8]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4648      	mov	r0, r9
 80059f6:	f002 f993 	bl	8007d20 <_free_r>
 80059fa:	e725      	b.n	8005848 <_realloc_r+0x14c>
 80059fc:	68a3      	ldr	r3, [r4, #8]
 80059fe:	6083      	str	r3, [r0, #8]
 8005a00:	68e3      	ldr	r3, [r4, #12]
 8005a02:	60c3      	str	r3, [r0, #12]
 8005a04:	2a24      	cmp	r2, #36	; 0x24
 8005a06:	bf01      	itttt	eq
 8005a08:	6923      	ldreq	r3, [r4, #16]
 8005a0a:	6103      	streq	r3, [r0, #16]
 8005a0c:	6961      	ldreq	r1, [r4, #20]
 8005a0e:	6141      	streq	r1, [r0, #20]
 8005a10:	bf19      	ittee	ne
 8005a12:	f104 0210 	addne.w	r2, r4, #16
 8005a16:	f100 0310 	addne.w	r3, r0, #16
 8005a1a:	f104 0218 	addeq.w	r2, r4, #24
 8005a1e:	f100 0318 	addeq.w	r3, r0, #24
 8005a22:	e7e0      	b.n	80059e6 <_realloc_r+0x2ea>
 8005a24:	4603      	mov	r3, r0
 8005a26:	4622      	mov	r2, r4
 8005a28:	e7dd      	b.n	80059e6 <_realloc_r+0x2ea>
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	f002 fbaa 	bl	8008184 <memmove>
 8005a30:	e7df      	b.n	80059f2 <_realloc_r+0x2f6>
 8005a32:	4637      	mov	r7, r6
 8005a34:	e6c3      	b.n	80057be <_realloc_r+0xc2>
 8005a36:	431f      	orrs	r7, r3
 8005a38:	606f      	str	r7, [r5, #4]
 8005a3a:	6853      	ldr	r3, [r2, #4]
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6053      	str	r3, [r2, #4]
 8005a42:	e758      	b.n	80058f6 <_realloc_r+0x1fa>

08005a44 <_sbrk_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d06      	ldr	r5, [pc, #24]	; (8005a60 <_sbrk_r+0x1c>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fb fd62 	bl	8001518 <_sbrk>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_sbrk_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_sbrk_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200015a4 	.word	0x200015a4

08005a64 <sprintf>:
 8005a64:	b40e      	push	{r1, r2, r3}
 8005a66:	b500      	push	{lr}
 8005a68:	b09c      	sub	sp, #112	; 0x70
 8005a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <sprintf+0x38>)
 8005a76:	9107      	str	r1, [sp, #28]
 8005a78:	9104      	str	r1, [sp, #16]
 8005a7a:	4909      	ldr	r1, [pc, #36]	; (8005aa0 <sprintf+0x3c>)
 8005a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a80:	9105      	str	r1, [sp, #20]
 8005a82:	6800      	ldr	r0, [r0, #0]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	a902      	add	r1, sp, #8
 8005a88:	f000 f80e 	bl	8005aa8 <_svfprintf_r>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	b01c      	add	sp, #112	; 0x70
 8005a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a98:	b003      	add	sp, #12
 8005a9a:	4770      	bx	lr
 8005a9c:	20000738 	.word	0x20000738
 8005aa0:	ffff0208 	.word	0xffff0208
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <_svfprintf_r>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	ed2d 8b04 	vpush	{d8-d9}
 8005ab0:	b0cf      	sub	sp, #316	; 0x13c
 8005ab2:	4688      	mov	r8, r1
 8005ab4:	4691      	mov	r9, r2
 8005ab6:	461e      	mov	r6, r3
 8005ab8:	4682      	mov	sl, r0
 8005aba:	f002 fb5b 	bl	8008174 <_localeconv_r>
 8005abe:	6803      	ldr	r3, [r0, #0]
 8005ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fa fb84 	bl	80001d0 <strlen>
 8005ac8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005acc:	900d      	str	r0, [sp, #52]	; 0x34
 8005ace:	0618      	lsls	r0, r3, #24
 8005ad0:	d51a      	bpl.n	8005b08 <_svfprintf_r+0x60>
 8005ad2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005ad6:	b9bb      	cbnz	r3, 8005b08 <_svfprintf_r+0x60>
 8005ad8:	2140      	movs	r1, #64	; 0x40
 8005ada:	4650      	mov	r0, sl
 8005adc:	f7ff fb62 	bl	80051a4 <_malloc_r>
 8005ae0:	f8c8 0000 	str.w	r0, [r8]
 8005ae4:	f8c8 0010 	str.w	r0, [r8, #16]
 8005ae8:	b958      	cbnz	r0, 8005b02 <_svfprintf_r+0x5a>
 8005aea:	230c      	movs	r3, #12
 8005aec:	f8ca 3000 	str.w	r3, [sl]
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af4:	930c      	str	r3, [sp, #48]	; 0x30
 8005af6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005af8:	b04f      	add	sp, #316	; 0x13c
 8005afa:	ecbd 8b04 	vpop	{d8-d9}
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	f8c8 3014 	str.w	r3, [r8, #20]
 8005b08:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8005d58 <_svfprintf_r+0x2b0>
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8005b12:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005b16:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8005b1a:	ac25      	add	r4, sp, #148	; 0x94
 8005b1c:	9422      	str	r4, [sp, #136]	; 0x88
 8005b1e:	9505      	str	r5, [sp, #20]
 8005b20:	950a      	str	r5, [sp, #40]	; 0x28
 8005b22:	9512      	str	r5, [sp, #72]	; 0x48
 8005b24:	9514      	str	r5, [sp, #80]	; 0x50
 8005b26:	950c      	str	r5, [sp, #48]	; 0x30
 8005b28:	464b      	mov	r3, r9
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b30:	b10a      	cbz	r2, 8005b36 <_svfprintf_r+0x8e>
 8005b32:	2a25      	cmp	r2, #37	; 0x25
 8005b34:	d1f9      	bne.n	8005b2a <_svfprintf_r+0x82>
 8005b36:	ebb5 0709 	subs.w	r7, r5, r9
 8005b3a:	d00d      	beq.n	8005b58 <_svfprintf_r+0xb0>
 8005b3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b3e:	443b      	add	r3, r7
 8005b40:	9324      	str	r3, [sp, #144]	; 0x90
 8005b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b44:	3301      	adds	r3, #1
 8005b46:	2b07      	cmp	r3, #7
 8005b48:	e9c4 9700 	strd	r9, r7, [r4]
 8005b4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b4e:	dc79      	bgt.n	8005c44 <_svfprintf_r+0x19c>
 8005b50:	3408      	adds	r4, #8
 8005b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b54:	443b      	add	r3, r7
 8005b56:	930c      	str	r3, [sp, #48]	; 0x30
 8005b58:	782b      	ldrb	r3, [r5, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f001 8148 	beq.w	8006df0 <_svfprintf_r+0x1348>
 8005b60:	2300      	movs	r3, #0
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b66:	9204      	str	r2, [sp, #16]
 8005b68:	3501      	adds	r5, #1
 8005b6a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005b6e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b70:	469b      	mov	fp, r3
 8005b72:	270a      	movs	r7, #10
 8005b74:	222b      	movs	r2, #43	; 0x2b
 8005b76:	462b      	mov	r3, r5
 8005b78:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005b7c:	9106      	str	r1, [sp, #24]
 8005b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b80:	9b06      	ldr	r3, [sp, #24]
 8005b82:	3b20      	subs	r3, #32
 8005b84:	2b5a      	cmp	r3, #90	; 0x5a
 8005b86:	f200 85bf 	bhi.w	8006708 <_svfprintf_r+0xc60>
 8005b8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b8e:	007e      	.short	0x007e
 8005b90:	05bd05bd 	.word	0x05bd05bd
 8005b94:	05bd0086 	.word	0x05bd0086
 8005b98:	05bd05bd 	.word	0x05bd05bd
 8005b9c:	05bd0065 	.word	0x05bd0065
 8005ba0:	008905bd 	.word	0x008905bd
 8005ba4:	05bd0093 	.word	0x05bd0093
 8005ba8:	00960090 	.word	0x00960090
 8005bac:	00b305bd 	.word	0x00b305bd
 8005bb0:	00b600b6 	.word	0x00b600b6
 8005bb4:	00b600b6 	.word	0x00b600b6
 8005bb8:	00b600b6 	.word	0x00b600b6
 8005bbc:	00b600b6 	.word	0x00b600b6
 8005bc0:	05bd00b6 	.word	0x05bd00b6
 8005bc4:	05bd05bd 	.word	0x05bd05bd
 8005bc8:	05bd05bd 	.word	0x05bd05bd
 8005bcc:	05bd05bd 	.word	0x05bd05bd
 8005bd0:	05bd012c 	.word	0x05bd012c
 8005bd4:	00fc00e9 	.word	0x00fc00e9
 8005bd8:	012c012c 	.word	0x012c012c
 8005bdc:	05bd012c 	.word	0x05bd012c
 8005be0:	05bd05bd 	.word	0x05bd05bd
 8005be4:	00c605bd 	.word	0x00c605bd
 8005be8:	05bd05bd 	.word	0x05bd05bd
 8005bec:	05bd0498 	.word	0x05bd0498
 8005bf0:	05bd05bd 	.word	0x05bd05bd
 8005bf4:	05bd04e2 	.word	0x05bd04e2
 8005bf8:	05bd0503 	.word	0x05bd0503
 8005bfc:	052505bd 	.word	0x052505bd
 8005c00:	05bd05bd 	.word	0x05bd05bd
 8005c04:	05bd05bd 	.word	0x05bd05bd
 8005c08:	05bd05bd 	.word	0x05bd05bd
 8005c0c:	05bd05bd 	.word	0x05bd05bd
 8005c10:	05bd012c 	.word	0x05bd012c
 8005c14:	00fe00e9 	.word	0x00fe00e9
 8005c18:	012c012c 	.word	0x012c012c
 8005c1c:	00c9012c 	.word	0x00c9012c
 8005c20:	00dd00fe 	.word	0x00dd00fe
 8005c24:	00d605bd 	.word	0x00d605bd
 8005c28:	047305bd 	.word	0x047305bd
 8005c2c:	04d0049a 	.word	0x04d0049a
 8005c30:	05bd00dd 	.word	0x05bd00dd
 8005c34:	007c04e2 	.word	0x007c04e2
 8005c38:	05bd0505 	.word	0x05bd0505
 8005c3c:	054405bd 	.word	0x054405bd
 8005c40:	007c05bd 	.word	0x007c05bd
 8005c44:	aa22      	add	r2, sp, #136	; 0x88
 8005c46:	4641      	mov	r1, r8
 8005c48:	4650      	mov	r0, sl
 8005c4a:	f002 fe79 	bl	8008940 <__ssprint_r>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f040 8137 	bne.w	8005ec2 <_svfprintf_r+0x41a>
 8005c54:	ac25      	add	r4, sp, #148	; 0x94
 8005c56:	e77c      	b.n	8005b52 <_svfprintf_r+0xaa>
 8005c58:	4650      	mov	r0, sl
 8005c5a:	f002 fa8b 	bl	8008174 <_localeconv_r>
 8005c5e:	6843      	ldr	r3, [r0, #4]
 8005c60:	9314      	str	r3, [sp, #80]	; 0x50
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fa fab4 	bl	80001d0 <strlen>
 8005c68:	9012      	str	r0, [sp, #72]	; 0x48
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	f002 fa82 	bl	8008174 <_localeconv_r>
 8005c70:	6883      	ldr	r3, [r0, #8]
 8005c72:	930a      	str	r3, [sp, #40]	; 0x28
 8005c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c76:	222b      	movs	r2, #43	; 0x2b
 8005c78:	b12b      	cbz	r3, 8005c86 <_svfprintf_r+0x1de>
 8005c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c7c:	b11b      	cbz	r3, 8005c86 <_svfprintf_r+0x1de>
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b10b      	cbz	r3, 8005c86 <_svfprintf_r+0x1de>
 8005c82:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8005c86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005c88:	e775      	b.n	8005b76 <_svfprintf_r+0xce>
 8005c8a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f9      	bne.n	8005c86 <_svfprintf_r+0x1de>
 8005c92:	2320      	movs	r3, #32
 8005c94:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005c98:	e7f5      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005c9a:	f04b 0b01 	orr.w	fp, fp, #1
 8005c9e:	e7f2      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005ca0:	f856 3b04 	ldr.w	r3, [r6], #4
 8005ca4:	9310      	str	r3, [sp, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	daed      	bge.n	8005c86 <_svfprintf_r+0x1de>
 8005caa:	425b      	negs	r3, r3
 8005cac:	9310      	str	r3, [sp, #64]	; 0x40
 8005cae:	f04b 0b04 	orr.w	fp, fp, #4
 8005cb2:	e7e8      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005cb4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8005cb8:	e7e5      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005cba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005cbc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cc0:	9306      	str	r3, [sp, #24]
 8005cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc4:	d113      	bne.n	8005cee <_svfprintf_r+0x246>
 8005cc6:	f856 0b04 	ldr.w	r0, [r6], #4
 8005cca:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ccc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	e7d8      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005cd4:	9904      	ldr	r1, [sp, #16]
 8005cd6:	fb07 3301 	mla	r3, r7, r1, r3
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ce0:	9306      	str	r3, [sp, #24]
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	3b30      	subs	r3, #48	; 0x30
 8005ce6:	2b09      	cmp	r3, #9
 8005ce8:	d9f4      	bls.n	8005cd4 <_svfprintf_r+0x22c>
 8005cea:	950b      	str	r5, [sp, #44]	; 0x2c
 8005cec:	e748      	b.n	8005b80 <_svfprintf_r+0xd8>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	e7f6      	b.n	8005ce2 <_svfprintf_r+0x23a>
 8005cf4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005cf8:	e7c5      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005cfe:	9310      	str	r3, [sp, #64]	; 0x40
 8005d00:	9b06      	ldr	r3, [sp, #24]
 8005d02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d04:	3b30      	subs	r3, #48	; 0x30
 8005d06:	fb07 3301 	mla	r3, r7, r1, r3
 8005d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8005d0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d10:	9306      	str	r3, [sp, #24]
 8005d12:	3b30      	subs	r3, #48	; 0x30
 8005d14:	2b09      	cmp	r3, #9
 8005d16:	d9f3      	bls.n	8005d00 <_svfprintf_r+0x258>
 8005d18:	e7e7      	b.n	8005cea <_svfprintf_r+0x242>
 8005d1a:	f04b 0b08 	orr.w	fp, fp, #8
 8005d1e:	e7b2      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b68      	cmp	r3, #104	; 0x68
 8005d26:	bf01      	itttt	eq
 8005d28:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8005d2a:	3301      	addeq	r3, #1
 8005d2c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8005d2e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8005d32:	bf18      	it	ne
 8005d34:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8005d38:	e7a5      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b6c      	cmp	r3, #108	; 0x6c
 8005d40:	d105      	bne.n	8005d4e <_svfprintf_r+0x2a6>
 8005d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d44:	3301      	adds	r3, #1
 8005d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d48:	f04b 0b20 	orr.w	fp, fp, #32
 8005d4c:	e79b      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005d4e:	f04b 0b10 	orr.w	fp, fp, #16
 8005d52:	e798      	b.n	8005c86 <_svfprintf_r+0x1de>
 8005d54:	f3af 8000 	nop.w
	...
 8005d60:	4632      	mov	r2, r6
 8005d62:	2000      	movs	r0, #0
 8005d64:	f852 3b04 	ldr.w	r3, [r2], #4
 8005d68:	9207      	str	r2, [sp, #28]
 8005d6a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005d6e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8005d72:	2301      	movs	r3, #1
 8005d74:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8005d78:	9003      	str	r0, [sp, #12]
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	4605      	mov	r5, r0
 8005d80:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8005d84:	e1bc      	b.n	8006100 <_svfprintf_r+0x658>
 8005d86:	f04b 0b10 	orr.w	fp, fp, #16
 8005d8a:	f01b 0f20 	tst.w	fp, #32
 8005d8e:	d012      	beq.n	8005db6 <_svfprintf_r+0x30e>
 8005d90:	1df3      	adds	r3, r6, #7
 8005d92:	f023 0307 	bic.w	r3, r3, #7
 8005d96:	461a      	mov	r2, r3
 8005d98:	685d      	ldr	r5, [r3, #4]
 8005d9a:	f852 6b08 	ldr.w	r6, [r2], #8
 8005d9e:	9207      	str	r2, [sp, #28]
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	da06      	bge.n	8005db2 <_svfprintf_r+0x30a>
 8005da4:	4276      	negs	r6, r6
 8005da6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005daa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005dae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005db2:	2301      	movs	r3, #1
 8005db4:	e396      	b.n	80064e4 <_svfprintf_r+0xa3c>
 8005db6:	4633      	mov	r3, r6
 8005db8:	f01b 0f10 	tst.w	fp, #16
 8005dbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dc0:	9307      	str	r3, [sp, #28]
 8005dc2:	d002      	beq.n	8005dca <_svfprintf_r+0x322>
 8005dc4:	462e      	mov	r6, r5
 8005dc6:	17ed      	asrs	r5, r5, #31
 8005dc8:	e7ea      	b.n	8005da0 <_svfprintf_r+0x2f8>
 8005dca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005dce:	d003      	beq.n	8005dd8 <_svfprintf_r+0x330>
 8005dd0:	b22e      	sxth	r6, r5
 8005dd2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8005dd6:	e7e3      	b.n	8005da0 <_svfprintf_r+0x2f8>
 8005dd8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005ddc:	d0f2      	beq.n	8005dc4 <_svfprintf_r+0x31c>
 8005dde:	b26e      	sxtb	r6, r5
 8005de0:	f345 15c0 	sbfx	r5, r5, #7, #1
 8005de4:	e7dc      	b.n	8005da0 <_svfprintf_r+0x2f8>
 8005de6:	3607      	adds	r6, #7
 8005de8:	f026 0307 	bic.w	r3, r6, #7
 8005dec:	ecb3 7b02 	vldmia	r3!, {d7}
 8005df0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005df4:	9307      	str	r3, [sp, #28]
 8005df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df8:	ee09 3a10 	vmov	s18, r3
 8005dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e02:	ee09 3a90 	vmov	s19, r3
 8005e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e0a:	4b3a      	ldr	r3, [pc, #232]	; (8005ef4 <_svfprintf_r+0x44c>)
 8005e0c:	ec51 0b19 	vmov	r0, r1, d9
 8005e10:	f7fa fe8c 	bl	8000b2c <__aeabi_dcmpun>
 8005e14:	bb10      	cbnz	r0, 8005e5c <_svfprintf_r+0x3b4>
 8005e16:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <_svfprintf_r+0x44c>)
 8005e18:	ec51 0b19 	vmov	r0, r1, d9
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e20:	f7fa fe66 	bl	8000af0 <__aeabi_dcmple>
 8005e24:	b9d0      	cbnz	r0, 8005e5c <_svfprintf_r+0x3b4>
 8005e26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f7fa fe55 	bl	8000adc <__aeabi_dcmplt>
 8005e32:	b110      	cbz	r0, 8005e3a <_svfprintf_r+0x392>
 8005e34:	232d      	movs	r3, #45	; 0x2d
 8005e36:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005e3a:	4a2f      	ldr	r2, [pc, #188]	; (8005ef8 <_svfprintf_r+0x450>)
 8005e3c:	482f      	ldr	r0, [pc, #188]	; (8005efc <_svfprintf_r+0x454>)
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	2100      	movs	r1, #0
 8005e42:	2b47      	cmp	r3, #71	; 0x47
 8005e44:	bfd4      	ite	le
 8005e46:	4691      	movle	r9, r2
 8005e48:	4681      	movgt	r9, r0
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8005e50:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8005e54:	2600      	movs	r6, #0
 8005e56:	4633      	mov	r3, r6
 8005e58:	f001 b800 	b.w	8006e5c <_svfprintf_r+0x13b4>
 8005e5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	f7fa fe62 	bl	8000b2c <__aeabi_dcmpun>
 8005e68:	b140      	cbz	r0, 8005e7c <_svfprintf_r+0x3d4>
 8005e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6c:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <_svfprintf_r+0x458>)
 8005e6e:	4825      	ldr	r0, [pc, #148]	; (8005f04 <_svfprintf_r+0x45c>)
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfbc      	itt	lt
 8005e74:	232d      	movlt	r3, #45	; 0x2d
 8005e76:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8005e7a:	e7e0      	b.n	8005e3e <_svfprintf_r+0x396>
 8005e7c:	9b06      	ldr	r3, [sp, #24]
 8005e7e:	f023 0320 	bic.w	r3, r3, #32
 8005e82:	2b41      	cmp	r3, #65	; 0x41
 8005e84:	9308      	str	r3, [sp, #32]
 8005e86:	d125      	bne.n	8005ed4 <_svfprintf_r+0x42c>
 8005e88:	2330      	movs	r3, #48	; 0x30
 8005e8a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005e8e:	9b06      	ldr	r3, [sp, #24]
 8005e90:	2b61      	cmp	r3, #97	; 0x61
 8005e92:	bf0c      	ite	eq
 8005e94:	2378      	moveq	r3, #120	; 0x78
 8005e96:	2358      	movne	r3, #88	; 0x58
 8005e98:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	2b63      	cmp	r3, #99	; 0x63
 8005ea0:	f04b 0b02 	orr.w	fp, fp, #2
 8005ea4:	dd30      	ble.n	8005f08 <_svfprintf_r+0x460>
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	f7ff f97b 	bl	80051a4 <_malloc_r>
 8005eae:	4681      	mov	r9, r0
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 81fd 	bne.w	80062b0 <_svfprintf_r+0x808>
 8005eb6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ebe:	f8a8 300c 	strh.w	r3, [r8, #12]
 8005ec2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005ec6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ecc:	bf18      	it	ne
 8005ece:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005ed2:	e60f      	b.n	8005af4 <_svfprintf_r+0x4c>
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f000 81ec 	beq.w	80062b4 <_svfprintf_r+0x80c>
 8005edc:	9b08      	ldr	r3, [sp, #32]
 8005ede:	2b47      	cmp	r3, #71	; 0x47
 8005ee0:	f040 81eb 	bne.w	80062ba <_svfprintf_r+0x812>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 81e7 	bne.w	80062ba <_svfprintf_r+0x812>
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	e00c      	b.n	8005f0e <_svfprintf_r+0x466>
 8005ef4:	7fefffff 	.word	0x7fefffff
 8005ef8:	0800e754 	.word	0x0800e754
 8005efc:	0800e758 	.word	0x0800e758
 8005f00:	0800e75c 	.word	0x0800e75c
 8005f04:	0800e760 	.word	0x0800e760
 8005f08:	9003      	str	r0, [sp, #12]
 8005f0a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8005f0e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8005f12:	9311      	str	r3, [sp, #68]	; 0x44
 8005f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f280 81d1 	bge.w	80062be <_svfprintf_r+0x816>
 8005f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f1e:	ee08 3a10 	vmov	s16, r3
 8005f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f28:	ee08 3a90 	vmov	s17, r3
 8005f2c:	232d      	movs	r3, #45	; 0x2d
 8005f2e:	9318      	str	r3, [sp, #96]	; 0x60
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	2b41      	cmp	r3, #65	; 0x41
 8005f34:	f040 81e1 	bne.w	80062fa <_svfprintf_r+0x852>
 8005f38:	eeb0 0a48 	vmov.f32	s0, s16
 8005f3c:	eef0 0a68 	vmov.f32	s1, s17
 8005f40:	a81c      	add	r0, sp, #112	; 0x70
 8005f42:	f002 fc6f 	bl	8008824 <frexp>
 8005f46:	2200      	movs	r2, #0
 8005f48:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005f4c:	ec51 0b10 	vmov	r0, r1, d0
 8005f50:	f7fa fb52 	bl	80005f8 <__aeabi_dmul>
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	4606      	mov	r6, r0
 8005f5a:	460f      	mov	r7, r1
 8005f5c:	f7fa fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f60:	b108      	cbz	r0, 8005f66 <_svfprintf_r+0x4be>
 8005f62:	2301      	movs	r3, #1
 8005f64:	931c      	str	r3, [sp, #112]	; 0x70
 8005f66:	4ba7      	ldr	r3, [pc, #668]	; (8006204 <_svfprintf_r+0x75c>)
 8005f68:	4aa7      	ldr	r2, [pc, #668]	; (8006208 <_svfprintf_r+0x760>)
 8005f6a:	9906      	ldr	r1, [sp, #24]
 8005f6c:	2961      	cmp	r1, #97	; 0x61
 8005f6e:	bf18      	it	ne
 8005f70:	461a      	movne	r2, r3
 8005f72:	9b04      	ldr	r3, [sp, #16]
 8005f74:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f76:	3b01      	subs	r3, #1
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	464d      	mov	r5, r9
 8005f7c:	4ba3      	ldr	r3, [pc, #652]	; (800620c <_svfprintf_r+0x764>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	460f      	mov	r7, r1
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	f7fa fde4 	bl	8000b58 <__aeabi_d2iz>
 8005f90:	9019      	str	r0, [sp, #100]	; 0x64
 8005f92:	f7fa fac7 	bl	8000524 <__aeabi_i2d>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa f973 	bl	8000288 <__aeabi_dsub>
 8005fa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005fa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fa6:	5c9b      	ldrb	r3, [r3, r2]
 8005fa8:	f805 3b01 	strb.w	r3, [r5], #1
 8005fac:	9b05      	ldr	r3, [sp, #20]
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	d007      	beq.n	8005fc8 <_svfprintf_r+0x520>
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f7fa fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d0d9      	beq.n	8005f7c <_svfprintf_r+0x4d4>
 8005fc8:	4b91      	ldr	r3, [pc, #580]	; (8006210 <_svfprintf_r+0x768>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fda2 	bl	8000b18 <__aeabi_dcmpgt>
 8005fd4:	b960      	cbnz	r0, 8005ff0 <_svfprintf_r+0x548>
 8005fd6:	4b8e      	ldr	r3, [pc, #568]	; (8006210 <_svfprintf_r+0x768>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	f000 8184 	beq.w	80062f0 <_svfprintf_r+0x848>
 8005fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fea:	07db      	lsls	r3, r3, #31
 8005fec:	f140 8180 	bpl.w	80062f0 <_svfprintf_r+0x848>
 8005ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ff2:	9520      	str	r5, [sp, #128]	; 0x80
 8005ff4:	7bd9      	ldrb	r1, [r3, #15]
 8005ff6:	2030      	movs	r0, #48	; 0x30
 8005ff8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ffa:	1e53      	subs	r3, r2, #1
 8005ffc:	9320      	str	r3, [sp, #128]	; 0x80
 8005ffe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006002:	428b      	cmp	r3, r1
 8006004:	f000 8163 	beq.w	80062ce <_svfprintf_r+0x826>
 8006008:	2b39      	cmp	r3, #57	; 0x39
 800600a:	bf0b      	itete	eq
 800600c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800600e:	3301      	addne	r3, #1
 8006010:	7a9b      	ldrbeq	r3, [r3, #10]
 8006012:	b2db      	uxtbne	r3, r3
 8006014:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006018:	eba5 0309 	sub.w	r3, r5, r9
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	9b08      	ldr	r3, [sp, #32]
 8006020:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006022:	2b47      	cmp	r3, #71	; 0x47
 8006024:	f040 81b1 	bne.w	800638a <_svfprintf_r+0x8e2>
 8006028:	1cef      	adds	r7, r5, #3
 800602a:	db03      	blt.n	8006034 <_svfprintf_r+0x58c>
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	42ab      	cmp	r3, r5
 8006030:	f280 81d6 	bge.w	80063e0 <_svfprintf_r+0x938>
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	3b02      	subs	r3, #2
 8006038:	9306      	str	r3, [sp, #24]
 800603a:	9906      	ldr	r1, [sp, #24]
 800603c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006040:	f021 0120 	bic.w	r1, r1, #32
 8006044:	2941      	cmp	r1, #65	; 0x41
 8006046:	bf08      	it	eq
 8006048:	320f      	addeq	r2, #15
 800604a:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800604e:	bf06      	itte	eq
 8006050:	b2d2      	uxtbeq	r2, r2
 8006052:	2101      	moveq	r1, #1
 8006054:	2100      	movne	r1, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	931c      	str	r3, [sp, #112]	; 0x70
 800605a:	bfb8      	it	lt
 800605c:	f1c5 0301 	rsblt	r3, r5, #1
 8006060:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006064:	bfb4      	ite	lt
 8006066:	222d      	movlt	r2, #45	; 0x2d
 8006068:	222b      	movge	r2, #43	; 0x2b
 800606a:	2b09      	cmp	r3, #9
 800606c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006070:	f340 81a4 	ble.w	80063bc <_svfprintf_r+0x914>
 8006074:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8006078:	260a      	movs	r6, #10
 800607a:	4611      	mov	r1, r2
 800607c:	fb93 f5f6 	sdiv	r5, r3, r6
 8006080:	fb06 3015 	mls	r0, r6, r5, r3
 8006084:	3030      	adds	r0, #48	; 0x30
 8006086:	f801 0c01 	strb.w	r0, [r1, #-1]
 800608a:	4618      	mov	r0, r3
 800608c:	2863      	cmp	r0, #99	; 0x63
 800608e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006092:	462b      	mov	r3, r5
 8006094:	dcf1      	bgt.n	800607a <_svfprintf_r+0x5d2>
 8006096:	3330      	adds	r3, #48	; 0x30
 8006098:	1e88      	subs	r0, r1, #2
 800609a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800609e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80060a2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80060a6:	4603      	mov	r3, r0
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	f0c0 8182 	bcc.w	80063b2 <_svfprintf_r+0x90a>
 80060ae:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80060b2:	1a52      	subs	r2, r2, r1
 80060b4:	42a8      	cmp	r0, r5
 80060b6:	bf88      	it	hi
 80060b8:	2200      	movhi	r2, #0
 80060ba:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80060be:	441a      	add	r2, r3
 80060c0:	ab1e      	add	r3, sp, #120	; 0x78
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	9a05      	ldr	r2, [sp, #20]
 80060c6:	9315      	str	r3, [sp, #84]	; 0x54
 80060c8:	2a01      	cmp	r2, #1
 80060ca:	4413      	add	r3, r2
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	dc02      	bgt.n	80060d6 <_svfprintf_r+0x62e>
 80060d0:	f01b 0f01 	tst.w	fp, #1
 80060d4:	d003      	beq.n	80060de <_svfprintf_r+0x636>
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060da:	4413      	add	r3, r2
 80060dc:	9304      	str	r3, [sp, #16]
 80060de:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80060e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e6:	9311      	str	r3, [sp, #68]	; 0x44
 80060e8:	2300      	movs	r3, #0
 80060ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80060ee:	461d      	mov	r5, r3
 80060f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80060f2:	b113      	cbz	r3, 80060fa <_svfprintf_r+0x652>
 80060f4:	232d      	movs	r3, #45	; 0x2d
 80060f6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80060fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80060fe:	2600      	movs	r6, #0
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	42b3      	cmp	r3, r6
 8006104:	bfb8      	it	lt
 8006106:	4633      	movlt	r3, r6
 8006108:	9311      	str	r3, [sp, #68]	; 0x44
 800610a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800610e:	b113      	cbz	r3, 8006116 <_svfprintf_r+0x66e>
 8006110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006112:	3301      	adds	r3, #1
 8006114:	9311      	str	r3, [sp, #68]	; 0x44
 8006116:	f01b 0302 	ands.w	r3, fp, #2
 800611a:	9317      	str	r3, [sp, #92]	; 0x5c
 800611c:	bf1e      	ittt	ne
 800611e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8006120:	3302      	addne	r3, #2
 8006122:	9311      	strne	r3, [sp, #68]	; 0x44
 8006124:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006128:	9318      	str	r3, [sp, #96]	; 0x60
 800612a:	d11f      	bne.n	800616c <_svfprintf_r+0x6c4>
 800612c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006130:	1a9f      	subs	r7, r3, r2
 8006132:	2f00      	cmp	r7, #0
 8006134:	dd1a      	ble.n	800616c <_svfprintf_r+0x6c4>
 8006136:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800613a:	4836      	ldr	r0, [pc, #216]	; (8006214 <_svfprintf_r+0x76c>)
 800613c:	6020      	str	r0, [r4, #0]
 800613e:	2f10      	cmp	r7, #16
 8006140:	f103 0301 	add.w	r3, r3, #1
 8006144:	f104 0108 	add.w	r1, r4, #8
 8006148:	f300 82ed 	bgt.w	8006726 <_svfprintf_r+0xc7e>
 800614c:	6067      	str	r7, [r4, #4]
 800614e:	2b07      	cmp	r3, #7
 8006150:	4417      	add	r7, r2
 8006152:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006156:	f340 82f9 	ble.w	800674c <_svfprintf_r+0xca4>
 800615a:	aa22      	add	r2, sp, #136	; 0x88
 800615c:	4641      	mov	r1, r8
 800615e:	4650      	mov	r0, sl
 8006160:	f002 fbee 	bl	8008940 <__ssprint_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 8621 	bne.w	8006dac <_svfprintf_r+0x1304>
 800616a:	ac25      	add	r4, sp, #148	; 0x94
 800616c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006170:	b173      	cbz	r3, 8006190 <_svfprintf_r+0x6e8>
 8006172:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	2301      	movs	r3, #1
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800617e:	3301      	adds	r3, #1
 8006180:	9324      	str	r3, [sp, #144]	; 0x90
 8006182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006184:	3301      	adds	r3, #1
 8006186:	2b07      	cmp	r3, #7
 8006188:	9323      	str	r3, [sp, #140]	; 0x8c
 800618a:	f300 82e1 	bgt.w	8006750 <_svfprintf_r+0xca8>
 800618e:	3408      	adds	r4, #8
 8006190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006192:	b16b      	cbz	r3, 80061b0 <_svfprintf_r+0x708>
 8006194:	ab1b      	add	r3, sp, #108	; 0x6c
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	2302      	movs	r3, #2
 800619a:	6063      	str	r3, [r4, #4]
 800619c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800619e:	3302      	adds	r3, #2
 80061a0:	9324      	str	r3, [sp, #144]	; 0x90
 80061a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061a4:	3301      	adds	r3, #1
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80061aa:	f300 82db 	bgt.w	8006764 <_svfprintf_r+0xcbc>
 80061ae:	3408      	adds	r4, #8
 80061b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d11f      	bne.n	80061f6 <_svfprintf_r+0x74e>
 80061b6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80061ba:	1a9f      	subs	r7, r3, r2
 80061bc:	2f00      	cmp	r7, #0
 80061be:	dd1a      	ble.n	80061f6 <_svfprintf_r+0x74e>
 80061c0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80061c4:	4814      	ldr	r0, [pc, #80]	; (8006218 <_svfprintf_r+0x770>)
 80061c6:	6020      	str	r0, [r4, #0]
 80061c8:	2f10      	cmp	r7, #16
 80061ca:	f103 0301 	add.w	r3, r3, #1
 80061ce:	f104 0108 	add.w	r1, r4, #8
 80061d2:	f300 82d1 	bgt.w	8006778 <_svfprintf_r+0xcd0>
 80061d6:	6067      	str	r7, [r4, #4]
 80061d8:	2b07      	cmp	r3, #7
 80061da:	4417      	add	r7, r2
 80061dc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80061e0:	f340 82dd 	ble.w	800679e <_svfprintf_r+0xcf6>
 80061e4:	aa22      	add	r2, sp, #136	; 0x88
 80061e6:	4641      	mov	r1, r8
 80061e8:	4650      	mov	r0, sl
 80061ea:	f002 fba9 	bl	8008940 <__ssprint_r>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 85dc 	bne.w	8006dac <_svfprintf_r+0x1304>
 80061f4:	ac25      	add	r4, sp, #148	; 0x94
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	1af6      	subs	r6, r6, r3
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	dd28      	ble.n	8006250 <_svfprintf_r+0x7a8>
 80061fe:	4f06      	ldr	r7, [pc, #24]	; (8006218 <_svfprintf_r+0x770>)
 8006200:	e00c      	b.n	800621c <_svfprintf_r+0x774>
 8006202:	bf00      	nop
 8006204:	0800e775 	.word	0x0800e775
 8006208:	0800e764 	.word	0x0800e764
 800620c:	40300000 	.word	0x40300000
 8006210:	3fe00000 	.word	0x3fe00000
 8006214:	0800e788 	.word	0x0800e788
 8006218:	0800e798 	.word	0x0800e798
 800621c:	6027      	str	r7, [r4, #0]
 800621e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006222:	2e10      	cmp	r6, #16
 8006224:	f103 0301 	add.w	r3, r3, #1
 8006228:	f104 0108 	add.w	r1, r4, #8
 800622c:	f300 82b9 	bgt.w	80067a2 <_svfprintf_r+0xcfa>
 8006230:	6066      	str	r6, [r4, #4]
 8006232:	2b07      	cmp	r3, #7
 8006234:	4416      	add	r6, r2
 8006236:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800623a:	f340 82c5 	ble.w	80067c8 <_svfprintf_r+0xd20>
 800623e:	aa22      	add	r2, sp, #136	; 0x88
 8006240:	4641      	mov	r1, r8
 8006242:	4650      	mov	r0, sl
 8006244:	f002 fb7c 	bl	8008940 <__ssprint_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	f040 85af 	bne.w	8006dac <_svfprintf_r+0x1304>
 800624e:	ac25      	add	r4, sp, #148	; 0x94
 8006250:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006254:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006256:	f040 82bd 	bne.w	80067d4 <_svfprintf_r+0xd2c>
 800625a:	9b04      	ldr	r3, [sp, #16]
 800625c:	f8c4 9000 	str.w	r9, [r4]
 8006260:	441e      	add	r6, r3
 8006262:	6063      	str	r3, [r4, #4]
 8006264:	9624      	str	r6, [sp, #144]	; 0x90
 8006266:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006268:	3301      	adds	r3, #1
 800626a:	2b07      	cmp	r3, #7
 800626c:	9323      	str	r3, [sp, #140]	; 0x8c
 800626e:	f300 82f6 	bgt.w	800685e <_svfprintf_r+0xdb6>
 8006272:	3408      	adds	r4, #8
 8006274:	f01b 0f04 	tst.w	fp, #4
 8006278:	f040 857a 	bne.w	8006d70 <_svfprintf_r+0x12c8>
 800627c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8006280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006282:	428a      	cmp	r2, r1
 8006284:	bfac      	ite	ge
 8006286:	189b      	addge	r3, r3, r2
 8006288:	185b      	addlt	r3, r3, r1
 800628a:	930c      	str	r3, [sp, #48]	; 0x30
 800628c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800628e:	b13b      	cbz	r3, 80062a0 <_svfprintf_r+0x7f8>
 8006290:	aa22      	add	r2, sp, #136	; 0x88
 8006292:	4641      	mov	r1, r8
 8006294:	4650      	mov	r0, sl
 8006296:	f002 fb53 	bl	8008940 <__ssprint_r>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 8586 	bne.w	8006dac <_svfprintf_r+0x1304>
 80062a0:	2300      	movs	r3, #0
 80062a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 859c 	bne.w	8006de4 <_svfprintf_r+0x133c>
 80062ac:	ac25      	add	r4, sp, #148	; 0x94
 80062ae:	e0ec      	b.n	800648a <_svfprintf_r+0x9e2>
 80062b0:	9003      	str	r0, [sp, #12]
 80062b2:	e62c      	b.n	8005f0e <_svfprintf_r+0x466>
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	2306      	movs	r3, #6
 80062b8:	e61a      	b.n	8005ef0 <_svfprintf_r+0x448>
 80062ba:	9003      	str	r0, [sp, #12]
 80062bc:	e627      	b.n	8005f0e <_svfprintf_r+0x466>
 80062be:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80062c2:	2300      	movs	r3, #0
 80062c4:	eeb0 8a47 	vmov.f32	s16, s14
 80062c8:	eef0 8a67 	vmov.f32	s17, s15
 80062cc:	e62f      	b.n	8005f2e <_svfprintf_r+0x486>
 80062ce:	f802 0c01 	strb.w	r0, [r2, #-1]
 80062d2:	e691      	b.n	8005ff8 <_svfprintf_r+0x550>
 80062d4:	f803 0b01 	strb.w	r0, [r3], #1
 80062d8:	1aca      	subs	r2, r1, r3
 80062da:	2a00      	cmp	r2, #0
 80062dc:	dafa      	bge.n	80062d4 <_svfprintf_r+0x82c>
 80062de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e2:	3201      	adds	r2, #1
 80062e4:	f103 0301 	add.w	r3, r3, #1
 80062e8:	bfb8      	it	lt
 80062ea:	2300      	movlt	r3, #0
 80062ec:	441d      	add	r5, r3
 80062ee:	e693      	b.n	8006018 <_svfprintf_r+0x570>
 80062f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f2:	462b      	mov	r3, r5
 80062f4:	18a9      	adds	r1, r5, r2
 80062f6:	2030      	movs	r0, #48	; 0x30
 80062f8:	e7ee      	b.n	80062d8 <_svfprintf_r+0x830>
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	2b46      	cmp	r3, #70	; 0x46
 80062fe:	d005      	beq.n	800630c <_svfprintf_r+0x864>
 8006300:	2b45      	cmp	r3, #69	; 0x45
 8006302:	d11b      	bne.n	800633c <_svfprintf_r+0x894>
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	1c5d      	adds	r5, r3, #1
 8006308:	2102      	movs	r1, #2
 800630a:	e001      	b.n	8006310 <_svfprintf_r+0x868>
 800630c:	9d04      	ldr	r5, [sp, #16]
 800630e:	2103      	movs	r1, #3
 8006310:	ab20      	add	r3, sp, #128	; 0x80
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab1d      	add	r3, sp, #116	; 0x74
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	462a      	mov	r2, r5
 800631a:	ab1c      	add	r3, sp, #112	; 0x70
 800631c:	4650      	mov	r0, sl
 800631e:	eeb0 0a48 	vmov.f32	s0, s16
 8006322:	eef0 0a68 	vmov.f32	s1, s17
 8006326:	f000 fe4f 	bl	8006fc8 <_dtoa_r>
 800632a:	9b08      	ldr	r3, [sp, #32]
 800632c:	2b47      	cmp	r3, #71	; 0x47
 800632e:	4681      	mov	r9, r0
 8006330:	d106      	bne.n	8006340 <_svfprintf_r+0x898>
 8006332:	f01b 0f01 	tst.w	fp, #1
 8006336:	d103      	bne.n	8006340 <_svfprintf_r+0x898>
 8006338:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800633a:	e66d      	b.n	8006018 <_svfprintf_r+0x570>
 800633c:	9d04      	ldr	r5, [sp, #16]
 800633e:	e7e3      	b.n	8006308 <_svfprintf_r+0x860>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	2b46      	cmp	r3, #70	; 0x46
 8006344:	eb09 0605 	add.w	r6, r9, r5
 8006348:	d10f      	bne.n	800636a <_svfprintf_r+0x8c2>
 800634a:	f899 3000 	ldrb.w	r3, [r9]
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d109      	bne.n	8006366 <_svfprintf_r+0x8be>
 8006352:	ec51 0b18 	vmov	r0, r1, d8
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	f7fa fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800635e:	b910      	cbnz	r0, 8006366 <_svfprintf_r+0x8be>
 8006360:	f1c5 0501 	rsb	r5, r5, #1
 8006364:	951c      	str	r5, [sp, #112]	; 0x70
 8006366:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006368:	441e      	add	r6, r3
 800636a:	ec51 0b18 	vmov	r0, r1, d8
 800636e:	2200      	movs	r2, #0
 8006370:	2300      	movs	r3, #0
 8006372:	f7fa fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006376:	b100      	cbz	r0, 800637a <_svfprintf_r+0x8d2>
 8006378:	9620      	str	r6, [sp, #128]	; 0x80
 800637a:	2230      	movs	r2, #48	; 0x30
 800637c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800637e:	429e      	cmp	r6, r3
 8006380:	d9da      	bls.n	8006338 <_svfprintf_r+0x890>
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	9120      	str	r1, [sp, #128]	; 0x80
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e7f8      	b.n	800637c <_svfprintf_r+0x8d4>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	2b46      	cmp	r3, #70	; 0x46
 800638e:	f47f ae54 	bne.w	800603a <_svfprintf_r+0x592>
 8006392:	9a04      	ldr	r2, [sp, #16]
 8006394:	f00b 0301 	and.w	r3, fp, #1
 8006398:	2d00      	cmp	r5, #0
 800639a:	ea43 0302 	orr.w	r3, r3, r2
 800639e:	dd1a      	ble.n	80063d6 <_svfprintf_r+0x92e>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d034      	beq.n	800640e <_svfprintf_r+0x966>
 80063a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a6:	18eb      	adds	r3, r5, r3
 80063a8:	441a      	add	r2, r3
 80063aa:	9204      	str	r2, [sp, #16]
 80063ac:	2366      	movs	r3, #102	; 0x66
 80063ae:	9306      	str	r3, [sp, #24]
 80063b0:	e033      	b.n	800641a <_svfprintf_r+0x972>
 80063b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063b6:	f802 6b01 	strb.w	r6, [r2], #1
 80063ba:	e675      	b.n	80060a8 <_svfprintf_r+0x600>
 80063bc:	b941      	cbnz	r1, 80063d0 <_svfprintf_r+0x928>
 80063be:	2230      	movs	r2, #48	; 0x30
 80063c0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80063c4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80063c8:	3330      	adds	r3, #48	; 0x30
 80063ca:	f802 3b01 	strb.w	r3, [r2], #1
 80063ce:	e677      	b.n	80060c0 <_svfprintf_r+0x618>
 80063d0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80063d4:	e7f8      	b.n	80063c8 <_svfprintf_r+0x920>
 80063d6:	b1e3      	cbz	r3, 8006412 <_svfprintf_r+0x96a>
 80063d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	3301      	adds	r3, #1
 80063de:	e7e3      	b.n	80063a8 <_svfprintf_r+0x900>
 80063e0:	9b05      	ldr	r3, [sp, #20]
 80063e2:	429d      	cmp	r5, r3
 80063e4:	db07      	blt.n	80063f6 <_svfprintf_r+0x94e>
 80063e6:	f01b 0f01 	tst.w	fp, #1
 80063ea:	d02d      	beq.n	8006448 <_svfprintf_r+0x9a0>
 80063ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ee:	18eb      	adds	r3, r5, r3
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	2367      	movs	r3, #103	; 0x67
 80063f4:	e7db      	b.n	80063ae <_svfprintf_r+0x906>
 80063f6:	9b05      	ldr	r3, [sp, #20]
 80063f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	4413      	add	r3, r2
 80063fe:	9304      	str	r3, [sp, #16]
 8006400:	dcf7      	bgt.n	80063f2 <_svfprintf_r+0x94a>
 8006402:	9a04      	ldr	r2, [sp, #16]
 8006404:	f1c5 0301 	rsb	r3, r5, #1
 8006408:	441a      	add	r2, r3
 800640a:	9204      	str	r2, [sp, #16]
 800640c:	e7f1      	b.n	80063f2 <_svfprintf_r+0x94a>
 800640e:	9504      	str	r5, [sp, #16]
 8006410:	e7cc      	b.n	80063ac <_svfprintf_r+0x904>
 8006412:	2366      	movs	r3, #102	; 0x66
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	2301      	movs	r3, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	d025      	beq.n	800646e <_svfprintf_r+0x9c6>
 8006422:	2300      	movs	r3, #0
 8006424:	2d00      	cmp	r5, #0
 8006426:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800642a:	f77f ae61 	ble.w	80060f0 <_svfprintf_r+0x648>
 800642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d10a      	bne.n	800644c <_svfprintf_r+0x9a4>
 8006436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800643a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800643c:	4413      	add	r3, r2
 800643e:	9a04      	ldr	r2, [sp, #16]
 8006440:	fb01 2303 	mla	r3, r1, r3, r2
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	e653      	b.n	80060f0 <_svfprintf_r+0x648>
 8006448:	9504      	str	r5, [sp, #16]
 800644a:	e7d2      	b.n	80063f2 <_svfprintf_r+0x94a>
 800644c:	42ab      	cmp	r3, r5
 800644e:	daf2      	bge.n	8006436 <_svfprintf_r+0x98e>
 8006450:	1aed      	subs	r5, r5, r3
 8006452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	b133      	cbz	r3, 8006466 <_svfprintf_r+0x9be>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	3301      	adds	r3, #1
 8006462:	930a      	str	r3, [sp, #40]	; 0x28
 8006464:	e7e3      	b.n	800642e <_svfprintf_r+0x986>
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	3301      	adds	r3, #1
 800646a:	9308      	str	r3, [sp, #32]
 800646c:	e7df      	b.n	800642e <_svfprintf_r+0x986>
 800646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	e63d      	b.n	80060f0 <_svfprintf_r+0x648>
 8006474:	1d33      	adds	r3, r6, #4
 8006476:	f01b 0f20 	tst.w	fp, #32
 800647a:	9307      	str	r3, [sp, #28]
 800647c:	d00a      	beq.n	8006494 <_svfprintf_r+0x9ec>
 800647e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006484:	17d2      	asrs	r2, r2, #31
 8006486:	e9c3 1200 	strd	r1, r2, [r3]
 800648a:	9e07      	ldr	r6, [sp, #28]
 800648c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006490:	f7ff bb4a 	b.w	8005b28 <_svfprintf_r+0x80>
 8006494:	f01b 0f10 	tst.w	fp, #16
 8006498:	d003      	beq.n	80064a2 <_svfprintf_r+0x9fa>
 800649a:	6833      	ldr	r3, [r6, #0]
 800649c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e7f3      	b.n	800648a <_svfprintf_r+0x9e2>
 80064a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80064a6:	d003      	beq.n	80064b0 <_svfprintf_r+0xa08>
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e7ec      	b.n	800648a <_svfprintf_r+0x9e2>
 80064b0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80064b4:	d0f1      	beq.n	800649a <_svfprintf_r+0x9f2>
 80064b6:	6833      	ldr	r3, [r6, #0]
 80064b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e7e5      	b.n	800648a <_svfprintf_r+0x9e2>
 80064be:	f04b 0b10 	orr.w	fp, fp, #16
 80064c2:	f01b 0320 	ands.w	r3, fp, #32
 80064c6:	d01f      	beq.n	8006508 <_svfprintf_r+0xa60>
 80064c8:	1df3      	adds	r3, r6, #7
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	461a      	mov	r2, r3
 80064d0:	685d      	ldr	r5, [r3, #4]
 80064d2:	f852 6b08 	ldr.w	r6, [r2], #8
 80064d6:	9207      	str	r2, [sp, #28]
 80064d8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80064dc:	2300      	movs	r3, #0
 80064de:	2200      	movs	r2, #0
 80064e0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80064e4:	9a04      	ldr	r2, [sp, #16]
 80064e6:	3201      	adds	r2, #1
 80064e8:	f000 848d 	beq.w	8006e06 <_svfprintf_r+0x135e>
 80064ec:	ea56 0205 	orrs.w	r2, r6, r5
 80064f0:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80064f4:	f040 848c 	bne.w	8006e10 <_svfprintf_r+0x1368>
 80064f8:	9a04      	ldr	r2, [sp, #16]
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	f000 80f9 	beq.w	80066f2 <_svfprintf_r+0xc4a>
 8006500:	2b01      	cmp	r3, #1
 8006502:	f040 8488 	bne.w	8006e16 <_svfprintf_r+0x136e>
 8006506:	e09f      	b.n	8006648 <_svfprintf_r+0xba0>
 8006508:	4632      	mov	r2, r6
 800650a:	f01b 0510 	ands.w	r5, fp, #16
 800650e:	f852 6b04 	ldr.w	r6, [r2], #4
 8006512:	9207      	str	r2, [sp, #28]
 8006514:	d001      	beq.n	800651a <_svfprintf_r+0xa72>
 8006516:	461d      	mov	r5, r3
 8006518:	e7de      	b.n	80064d8 <_svfprintf_r+0xa30>
 800651a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800651e:	d001      	beq.n	8006524 <_svfprintf_r+0xa7c>
 8006520:	b2b6      	uxth	r6, r6
 8006522:	e7d9      	b.n	80064d8 <_svfprintf_r+0xa30>
 8006524:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8006528:	d0d6      	beq.n	80064d8 <_svfprintf_r+0xa30>
 800652a:	b2f6      	uxtb	r6, r6
 800652c:	e7f3      	b.n	8006516 <_svfprintf_r+0xa6e>
 800652e:	4633      	mov	r3, r6
 8006530:	2278      	movs	r2, #120	; 0x78
 8006532:	f853 6b04 	ldr.w	r6, [r3], #4
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	2330      	movs	r3, #48	; 0x30
 800653a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800653e:	4ba3      	ldr	r3, [pc, #652]	; (80067cc <_svfprintf_r+0xd24>)
 8006540:	9316      	str	r3, [sp, #88]	; 0x58
 8006542:	2500      	movs	r5, #0
 8006544:	f04b 0b02 	orr.w	fp, fp, #2
 8006548:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800654c:	2302      	movs	r3, #2
 800654e:	9206      	str	r2, [sp, #24]
 8006550:	e7c5      	b.n	80064de <_svfprintf_r+0xa36>
 8006552:	4633      	mov	r3, r6
 8006554:	2500      	movs	r5, #0
 8006556:	f853 9b04 	ldr.w	r9, [r3], #4
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8006562:	1c58      	adds	r0, r3, #1
 8006564:	d010      	beq.n	8006588 <_svfprintf_r+0xae0>
 8006566:	461a      	mov	r2, r3
 8006568:	4629      	mov	r1, r5
 800656a:	4648      	mov	r0, r9
 800656c:	f7f9 fe38 	bl	80001e0 <memchr>
 8006570:	9003      	str	r0, [sp, #12]
 8006572:	2800      	cmp	r0, #0
 8006574:	f000 80d4 	beq.w	8006720 <_svfprintf_r+0xc78>
 8006578:	eba0 0309 	sub.w	r3, r0, r9
 800657c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8006580:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8006584:	462e      	mov	r6, r5
 8006586:	e5bb      	b.n	8006100 <_svfprintf_r+0x658>
 8006588:	4648      	mov	r0, r9
 800658a:	f7f9 fe21 	bl	80001d0 <strlen>
 800658e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8006592:	e45f      	b.n	8005e54 <_svfprintf_r+0x3ac>
 8006594:	f04b 0b10 	orr.w	fp, fp, #16
 8006598:	f01b 0320 	ands.w	r3, fp, #32
 800659c:	d009      	beq.n	80065b2 <_svfprintf_r+0xb0a>
 800659e:	1df3      	adds	r3, r6, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	461a      	mov	r2, r3
 80065a6:	685d      	ldr	r5, [r3, #4]
 80065a8:	f852 6b08 	ldr.w	r6, [r2], #8
 80065ac:	9207      	str	r2, [sp, #28]
 80065ae:	2301      	movs	r3, #1
 80065b0:	e795      	b.n	80064de <_svfprintf_r+0xa36>
 80065b2:	4632      	mov	r2, r6
 80065b4:	f01b 0510 	ands.w	r5, fp, #16
 80065b8:	f852 6b04 	ldr.w	r6, [r2], #4
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	d001      	beq.n	80065c4 <_svfprintf_r+0xb1c>
 80065c0:	461d      	mov	r5, r3
 80065c2:	e7f4      	b.n	80065ae <_svfprintf_r+0xb06>
 80065c4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80065c8:	d001      	beq.n	80065ce <_svfprintf_r+0xb26>
 80065ca:	b2b6      	uxth	r6, r6
 80065cc:	e7ef      	b.n	80065ae <_svfprintf_r+0xb06>
 80065ce:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80065d2:	d0ec      	beq.n	80065ae <_svfprintf_r+0xb06>
 80065d4:	b2f6      	uxtb	r6, r6
 80065d6:	e7f3      	b.n	80065c0 <_svfprintf_r+0xb18>
 80065d8:	4b7d      	ldr	r3, [pc, #500]	; (80067d0 <_svfprintf_r+0xd28>)
 80065da:	9316      	str	r3, [sp, #88]	; 0x58
 80065dc:	f01b 0320 	ands.w	r3, fp, #32
 80065e0:	d01b      	beq.n	800661a <_svfprintf_r+0xb72>
 80065e2:	1df3      	adds	r3, r6, #7
 80065e4:	f023 0307 	bic.w	r3, r3, #7
 80065e8:	461a      	mov	r2, r3
 80065ea:	685d      	ldr	r5, [r3, #4]
 80065ec:	f852 6b08 	ldr.w	r6, [r2], #8
 80065f0:	9207      	str	r2, [sp, #28]
 80065f2:	f01b 0f01 	tst.w	fp, #1
 80065f6:	d00a      	beq.n	800660e <_svfprintf_r+0xb66>
 80065f8:	ea56 0305 	orrs.w	r3, r6, r5
 80065fc:	d007      	beq.n	800660e <_svfprintf_r+0xb66>
 80065fe:	2330      	movs	r3, #48	; 0x30
 8006600:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800660a:	f04b 0b02 	orr.w	fp, fp, #2
 800660e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8006612:	2302      	movs	r3, #2
 8006614:	e763      	b.n	80064de <_svfprintf_r+0xa36>
 8006616:	4b6d      	ldr	r3, [pc, #436]	; (80067cc <_svfprintf_r+0xd24>)
 8006618:	e7df      	b.n	80065da <_svfprintf_r+0xb32>
 800661a:	4632      	mov	r2, r6
 800661c:	f01b 0510 	ands.w	r5, fp, #16
 8006620:	f852 6b04 	ldr.w	r6, [r2], #4
 8006624:	9207      	str	r2, [sp, #28]
 8006626:	d001      	beq.n	800662c <_svfprintf_r+0xb84>
 8006628:	461d      	mov	r5, r3
 800662a:	e7e2      	b.n	80065f2 <_svfprintf_r+0xb4a>
 800662c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006630:	d001      	beq.n	8006636 <_svfprintf_r+0xb8e>
 8006632:	b2b6      	uxth	r6, r6
 8006634:	e7dd      	b.n	80065f2 <_svfprintf_r+0xb4a>
 8006636:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800663a:	d0da      	beq.n	80065f2 <_svfprintf_r+0xb4a>
 800663c:	b2f6      	uxtb	r6, r6
 800663e:	e7f3      	b.n	8006628 <_svfprintf_r+0xb80>
 8006640:	2e0a      	cmp	r6, #10
 8006642:	f175 0300 	sbcs.w	r3, r5, #0
 8006646:	d205      	bcs.n	8006654 <_svfprintf_r+0xbac>
 8006648:	3630      	adds	r6, #48	; 0x30
 800664a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800664e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8006652:	e3fb      	b.n	8006e4c <_svfprintf_r+0x13a4>
 8006654:	2300      	movs	r3, #0
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800665c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8006660:	9303      	str	r3, [sp, #12]
 8006662:	220a      	movs	r2, #10
 8006664:	2300      	movs	r3, #0
 8006666:	4630      	mov	r0, r6
 8006668:	4629      	mov	r1, r5
 800666a:	f7fa fa9d 	bl	8000ba8 <__aeabi_uldivmod>
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	3301      	adds	r3, #1
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3230      	adds	r2, #48	; 0x30
 8006678:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 800667c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8006680:	b1d3      	cbz	r3, 80066b8 <_svfprintf_r+0xc10>
 8006682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006684:	9a05      	ldr	r2, [sp, #20]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d115      	bne.n	80066b8 <_svfprintf_r+0xc10>
 800668c:	2aff      	cmp	r2, #255	; 0xff
 800668e:	d013      	beq.n	80066b8 <_svfprintf_r+0xc10>
 8006690:	2e0a      	cmp	r6, #10
 8006692:	f175 0300 	sbcs.w	r3, r5, #0
 8006696:	d30f      	bcc.n	80066b8 <_svfprintf_r+0xc10>
 8006698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800669a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800669c:	eba9 0903 	sub.w	r9, r9, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	4648      	mov	r0, r9
 80066a4:	f002 f939 	bl	800891a <strncpy>
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	b11b      	cbz	r3, 80066b6 <_svfprintf_r+0xc0e>
 80066ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b0:	3301      	adds	r3, #1
 80066b2:	930a      	str	r3, [sp, #40]	; 0x28
 80066b4:	2300      	movs	r3, #0
 80066b6:	9305      	str	r3, [sp, #20]
 80066b8:	2300      	movs	r3, #0
 80066ba:	220a      	movs	r2, #10
 80066bc:	4630      	mov	r0, r6
 80066be:	4629      	mov	r1, r5
 80066c0:	f7fa fa72 	bl	8000ba8 <__aeabi_uldivmod>
 80066c4:	2e0a      	cmp	r6, #10
 80066c6:	f175 0300 	sbcs.w	r3, r5, #0
 80066ca:	f0c0 83bf 	bcc.w	8006e4c <_svfprintf_r+0x13a4>
 80066ce:	4606      	mov	r6, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	46cb      	mov	fp, r9
 80066d4:	e7c5      	b.n	8006662 <_svfprintf_r+0xbba>
 80066d6:	f006 030f 	and.w	r3, r6, #15
 80066da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80066dc:	0936      	lsrs	r6, r6, #4
 80066de:	5cd3      	ldrb	r3, [r2, r3]
 80066e0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80066e4:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80066e8:	092d      	lsrs	r5, r5, #4
 80066ea:	ea56 0305 	orrs.w	r3, r6, r5
 80066ee:	d1f2      	bne.n	80066d6 <_svfprintf_r+0xc2e>
 80066f0:	e3ac      	b.n	8006e4c <_svfprintf_r+0x13a4>
 80066f2:	b933      	cbnz	r3, 8006702 <_svfprintf_r+0xc5a>
 80066f4:	f01b 0f01 	tst.w	fp, #1
 80066f8:	d003      	beq.n	8006702 <_svfprintf_r+0xc5a>
 80066fa:	2330      	movs	r3, #48	; 0x30
 80066fc:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8006700:	e7a5      	b.n	800664e <_svfprintf_r+0xba6>
 8006702:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8006706:	e3a1      	b.n	8006e4c <_svfprintf_r+0x13a4>
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8370 	beq.w	8006df0 <_svfprintf_r+0x1348>
 8006710:	2000      	movs	r0, #0
 8006712:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006716:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800671a:	9607      	str	r6, [sp, #28]
 800671c:	f7ff bb29 	b.w	8005d72 <_svfprintf_r+0x2ca>
 8006720:	9e03      	ldr	r6, [sp, #12]
 8006722:	f7ff bb98 	b.w	8005e56 <_svfprintf_r+0x3ae>
 8006726:	2010      	movs	r0, #16
 8006728:	4402      	add	r2, r0
 800672a:	2b07      	cmp	r3, #7
 800672c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006730:	6060      	str	r0, [r4, #4]
 8006732:	dd08      	ble.n	8006746 <_svfprintf_r+0xc9e>
 8006734:	aa22      	add	r2, sp, #136	; 0x88
 8006736:	4641      	mov	r1, r8
 8006738:	4650      	mov	r0, sl
 800673a:	f002 f901 	bl	8008940 <__ssprint_r>
 800673e:	2800      	cmp	r0, #0
 8006740:	f040 8334 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006744:	a925      	add	r1, sp, #148	; 0x94
 8006746:	3f10      	subs	r7, #16
 8006748:	460c      	mov	r4, r1
 800674a:	e4f4      	b.n	8006136 <_svfprintf_r+0x68e>
 800674c:	460c      	mov	r4, r1
 800674e:	e50d      	b.n	800616c <_svfprintf_r+0x6c4>
 8006750:	aa22      	add	r2, sp, #136	; 0x88
 8006752:	4641      	mov	r1, r8
 8006754:	4650      	mov	r0, sl
 8006756:	f002 f8f3 	bl	8008940 <__ssprint_r>
 800675a:	2800      	cmp	r0, #0
 800675c:	f040 8326 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006760:	ac25      	add	r4, sp, #148	; 0x94
 8006762:	e515      	b.n	8006190 <_svfprintf_r+0x6e8>
 8006764:	aa22      	add	r2, sp, #136	; 0x88
 8006766:	4641      	mov	r1, r8
 8006768:	4650      	mov	r0, sl
 800676a:	f002 f8e9 	bl	8008940 <__ssprint_r>
 800676e:	2800      	cmp	r0, #0
 8006770:	f040 831c 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006774:	ac25      	add	r4, sp, #148	; 0x94
 8006776:	e51b      	b.n	80061b0 <_svfprintf_r+0x708>
 8006778:	2010      	movs	r0, #16
 800677a:	4402      	add	r2, r0
 800677c:	2b07      	cmp	r3, #7
 800677e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006782:	6060      	str	r0, [r4, #4]
 8006784:	dd08      	ble.n	8006798 <_svfprintf_r+0xcf0>
 8006786:	aa22      	add	r2, sp, #136	; 0x88
 8006788:	4641      	mov	r1, r8
 800678a:	4650      	mov	r0, sl
 800678c:	f002 f8d8 	bl	8008940 <__ssprint_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	f040 830b 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006796:	a925      	add	r1, sp, #148	; 0x94
 8006798:	3f10      	subs	r7, #16
 800679a:	460c      	mov	r4, r1
 800679c:	e510      	b.n	80061c0 <_svfprintf_r+0x718>
 800679e:	460c      	mov	r4, r1
 80067a0:	e529      	b.n	80061f6 <_svfprintf_r+0x74e>
 80067a2:	2010      	movs	r0, #16
 80067a4:	4402      	add	r2, r0
 80067a6:	2b07      	cmp	r3, #7
 80067a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80067ac:	6060      	str	r0, [r4, #4]
 80067ae:	dd08      	ble.n	80067c2 <_svfprintf_r+0xd1a>
 80067b0:	aa22      	add	r2, sp, #136	; 0x88
 80067b2:	4641      	mov	r1, r8
 80067b4:	4650      	mov	r0, sl
 80067b6:	f002 f8c3 	bl	8008940 <__ssprint_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f040 82f6 	bne.w	8006dac <_svfprintf_r+0x1304>
 80067c0:	a925      	add	r1, sp, #148	; 0x94
 80067c2:	3e10      	subs	r6, #16
 80067c4:	460c      	mov	r4, r1
 80067c6:	e529      	b.n	800621c <_svfprintf_r+0x774>
 80067c8:	460c      	mov	r4, r1
 80067ca:	e541      	b.n	8006250 <_svfprintf_r+0x7a8>
 80067cc:	0800e764 	.word	0x0800e764
 80067d0:	0800e775 	.word	0x0800e775
 80067d4:	9b06      	ldr	r3, [sp, #24]
 80067d6:	2b65      	cmp	r3, #101	; 0x65
 80067d8:	f340 8230 	ble.w	8006c3c <_svfprintf_r+0x1194>
 80067dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f7fa f970 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d068      	beq.n	80068be <_svfprintf_r+0xe16>
 80067ec:	4b6d      	ldr	r3, [pc, #436]	; (80069a4 <_svfprintf_r+0xefc>)
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	2301      	movs	r3, #1
 80067f2:	441e      	add	r6, r3
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f8:	9624      	str	r6, [sp, #144]	; 0x90
 80067fa:	3301      	adds	r3, #1
 80067fc:	2b07      	cmp	r3, #7
 80067fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8006800:	dc37      	bgt.n	8006872 <_svfprintf_r+0xdca>
 8006802:	3408      	adds	r4, #8
 8006804:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006806:	9a05      	ldr	r2, [sp, #20]
 8006808:	4293      	cmp	r3, r2
 800680a:	db03      	blt.n	8006814 <_svfprintf_r+0xd6c>
 800680c:	f01b 0f01 	tst.w	fp, #1
 8006810:	f43f ad30 	beq.w	8006274 <_svfprintf_r+0x7cc>
 8006814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800681a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006820:	4413      	add	r3, r2
 8006822:	9324      	str	r3, [sp, #144]	; 0x90
 8006824:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006826:	3301      	adds	r3, #1
 8006828:	2b07      	cmp	r3, #7
 800682a:	9323      	str	r3, [sp, #140]	; 0x8c
 800682c:	dc2b      	bgt.n	8006886 <_svfprintf_r+0xdde>
 800682e:	3408      	adds	r4, #8
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	1e5d      	subs	r5, r3, #1
 8006834:	2d00      	cmp	r5, #0
 8006836:	f77f ad1d 	ble.w	8006274 <_svfprintf_r+0x7cc>
 800683a:	4e5b      	ldr	r6, [pc, #364]	; (80069a8 <_svfprintf_r+0xf00>)
 800683c:	2710      	movs	r7, #16
 800683e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006842:	2d10      	cmp	r5, #16
 8006844:	f103 0301 	add.w	r3, r3, #1
 8006848:	f104 0108 	add.w	r1, r4, #8
 800684c:	6026      	str	r6, [r4, #0]
 800684e:	dc24      	bgt.n	800689a <_svfprintf_r+0xdf2>
 8006850:	6065      	str	r5, [r4, #4]
 8006852:	2b07      	cmp	r3, #7
 8006854:	4415      	add	r5, r2
 8006856:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800685a:	f340 8286 	ble.w	8006d6a <_svfprintf_r+0x12c2>
 800685e:	aa22      	add	r2, sp, #136	; 0x88
 8006860:	4641      	mov	r1, r8
 8006862:	4650      	mov	r0, sl
 8006864:	f002 f86c 	bl	8008940 <__ssprint_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	f040 829f 	bne.w	8006dac <_svfprintf_r+0x1304>
 800686e:	ac25      	add	r4, sp, #148	; 0x94
 8006870:	e500      	b.n	8006274 <_svfprintf_r+0x7cc>
 8006872:	aa22      	add	r2, sp, #136	; 0x88
 8006874:	4641      	mov	r1, r8
 8006876:	4650      	mov	r0, sl
 8006878:	f002 f862 	bl	8008940 <__ssprint_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 8295 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006882:	ac25      	add	r4, sp, #148	; 0x94
 8006884:	e7be      	b.n	8006804 <_svfprintf_r+0xd5c>
 8006886:	aa22      	add	r2, sp, #136	; 0x88
 8006888:	4641      	mov	r1, r8
 800688a:	4650      	mov	r0, sl
 800688c:	f002 f858 	bl	8008940 <__ssprint_r>
 8006890:	2800      	cmp	r0, #0
 8006892:	f040 828b 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006896:	ac25      	add	r4, sp, #148	; 0x94
 8006898:	e7ca      	b.n	8006830 <_svfprintf_r+0xd88>
 800689a:	3210      	adds	r2, #16
 800689c:	2b07      	cmp	r3, #7
 800689e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80068a2:	6067      	str	r7, [r4, #4]
 80068a4:	dd08      	ble.n	80068b8 <_svfprintf_r+0xe10>
 80068a6:	aa22      	add	r2, sp, #136	; 0x88
 80068a8:	4641      	mov	r1, r8
 80068aa:	4650      	mov	r0, sl
 80068ac:	f002 f848 	bl	8008940 <__ssprint_r>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	f040 827b 	bne.w	8006dac <_svfprintf_r+0x1304>
 80068b6:	a925      	add	r1, sp, #148	; 0x94
 80068b8:	3d10      	subs	r5, #16
 80068ba:	460c      	mov	r4, r1
 80068bc:	e7bf      	b.n	800683e <_svfprintf_r+0xd96>
 80068be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dc73      	bgt.n	80069ac <_svfprintf_r+0xf04>
 80068c4:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <_svfprintf_r+0xefc>)
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	2301      	movs	r3, #1
 80068ca:	441e      	add	r6, r3
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068d0:	9624      	str	r6, [sp, #144]	; 0x90
 80068d2:	3301      	adds	r3, #1
 80068d4:	2b07      	cmp	r3, #7
 80068d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80068d8:	dc3d      	bgt.n	8006956 <_svfprintf_r+0xeae>
 80068da:	3408      	adds	r4, #8
 80068dc:	9905      	ldr	r1, [sp, #20]
 80068de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068e2:	430a      	orrs	r2, r1
 80068e4:	f00b 0101 	and.w	r1, fp, #1
 80068e8:	430a      	orrs	r2, r1
 80068ea:	f43f acc3 	beq.w	8006274 <_svfprintf_r+0x7cc>
 80068ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068f4:	6062      	str	r2, [r4, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	9324      	str	r3, [sp, #144]	; 0x90
 80068fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068fc:	3301      	adds	r3, #1
 80068fe:	2b07      	cmp	r3, #7
 8006900:	9323      	str	r3, [sp, #140]	; 0x8c
 8006902:	dc32      	bgt.n	800696a <_svfprintf_r+0xec2>
 8006904:	3408      	adds	r4, #8
 8006906:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006908:	2d00      	cmp	r5, #0
 800690a:	da1b      	bge.n	8006944 <_svfprintf_r+0xe9c>
 800690c:	4e26      	ldr	r6, [pc, #152]	; (80069a8 <_svfprintf_r+0xf00>)
 800690e:	426d      	negs	r5, r5
 8006910:	4623      	mov	r3, r4
 8006912:	2710      	movs	r7, #16
 8006914:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8006918:	2d10      	cmp	r5, #16
 800691a:	f102 0201 	add.w	r2, r2, #1
 800691e:	f104 0408 	add.w	r4, r4, #8
 8006922:	601e      	str	r6, [r3, #0]
 8006924:	dc2b      	bgt.n	800697e <_svfprintf_r+0xed6>
 8006926:	605d      	str	r5, [r3, #4]
 8006928:	2a07      	cmp	r2, #7
 800692a:	440d      	add	r5, r1
 800692c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8006930:	dd08      	ble.n	8006944 <_svfprintf_r+0xe9c>
 8006932:	aa22      	add	r2, sp, #136	; 0x88
 8006934:	4641      	mov	r1, r8
 8006936:	4650      	mov	r0, sl
 8006938:	f002 f802 	bl	8008940 <__ssprint_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	f040 8235 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006942:	ac25      	add	r4, sp, #148	; 0x94
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	9a05      	ldr	r2, [sp, #20]
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800694c:	f8c4 9000 	str.w	r9, [r4]
 8006950:	4413      	add	r3, r2
 8006952:	9324      	str	r3, [sp, #144]	; 0x90
 8006954:	e487      	b.n	8006266 <_svfprintf_r+0x7be>
 8006956:	aa22      	add	r2, sp, #136	; 0x88
 8006958:	4641      	mov	r1, r8
 800695a:	4650      	mov	r0, sl
 800695c:	f001 fff0 	bl	8008940 <__ssprint_r>
 8006960:	2800      	cmp	r0, #0
 8006962:	f040 8223 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006966:	ac25      	add	r4, sp, #148	; 0x94
 8006968:	e7b8      	b.n	80068dc <_svfprintf_r+0xe34>
 800696a:	aa22      	add	r2, sp, #136	; 0x88
 800696c:	4641      	mov	r1, r8
 800696e:	4650      	mov	r0, sl
 8006970:	f001 ffe6 	bl	8008940 <__ssprint_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	f040 8219 	bne.w	8006dac <_svfprintf_r+0x1304>
 800697a:	ac25      	add	r4, sp, #148	; 0x94
 800697c:	e7c3      	b.n	8006906 <_svfprintf_r+0xe5e>
 800697e:	3110      	adds	r1, #16
 8006980:	2a07      	cmp	r2, #7
 8006982:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8006986:	605f      	str	r7, [r3, #4]
 8006988:	dd08      	ble.n	800699c <_svfprintf_r+0xef4>
 800698a:	aa22      	add	r2, sp, #136	; 0x88
 800698c:	4641      	mov	r1, r8
 800698e:	4650      	mov	r0, sl
 8006990:	f001 ffd6 	bl	8008940 <__ssprint_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	f040 8209 	bne.w	8006dac <_svfprintf_r+0x1304>
 800699a:	ac25      	add	r4, sp, #148	; 0x94
 800699c:	3d10      	subs	r5, #16
 800699e:	4623      	mov	r3, r4
 80069a0:	e7b8      	b.n	8006914 <_svfprintf_r+0xe6c>
 80069a2:	bf00      	nop
 80069a4:	0800e786 	.word	0x0800e786
 80069a8:	0800e798 	.word	0x0800e798
 80069ac:	9f05      	ldr	r7, [sp, #20]
 80069ae:	42af      	cmp	r7, r5
 80069b0:	bfa8      	it	ge
 80069b2:	462f      	movge	r7, r5
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	dd0a      	ble.n	80069ce <_svfprintf_r+0xf26>
 80069b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ba:	3301      	adds	r3, #1
 80069bc:	443e      	add	r6, r7
 80069be:	2b07      	cmp	r3, #7
 80069c0:	e9c4 9700 	strd	r9, r7, [r4]
 80069c4:	9624      	str	r6, [sp, #144]	; 0x90
 80069c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80069c8:	f300 8085 	bgt.w	8006ad6 <_svfprintf_r+0x102e>
 80069cc:	3408      	adds	r4, #8
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	bfac      	ite	ge
 80069d2:	1bee      	subge	r6, r5, r7
 80069d4:	462e      	movlt	r6, r5
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	dd19      	ble.n	8006a0e <_svfprintf_r+0xf66>
 80069da:	4f97      	ldr	r7, [pc, #604]	; (8006c38 <_svfprintf_r+0x1190>)
 80069dc:	6027      	str	r7, [r4, #0]
 80069de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80069e2:	2e10      	cmp	r6, #16
 80069e4:	f103 0301 	add.w	r3, r3, #1
 80069e8:	f104 0108 	add.w	r1, r4, #8
 80069ec:	dc7d      	bgt.n	8006aea <_svfprintf_r+0x1042>
 80069ee:	6066      	str	r6, [r4, #4]
 80069f0:	2b07      	cmp	r3, #7
 80069f2:	4416      	add	r6, r2
 80069f4:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80069f8:	f340 808a 	ble.w	8006b10 <_svfprintf_r+0x1068>
 80069fc:	aa22      	add	r2, sp, #136	; 0x88
 80069fe:	4641      	mov	r1, r8
 8006a00:	4650      	mov	r0, sl
 8006a02:	f001 ff9d 	bl	8008940 <__ssprint_r>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 81d0 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006a0c:	ac25      	add	r4, sp, #148	; 0x94
 8006a0e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8006a12:	444d      	add	r5, r9
 8006a14:	d00a      	beq.n	8006a2c <_svfprintf_r+0xf84>
 8006a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d17b      	bne.n	8006b14 <_svfprintf_r+0x106c>
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d17b      	bne.n	8006b1a <_svfprintf_r+0x1072>
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	444b      	add	r3, r9
 8006a26:	429d      	cmp	r5, r3
 8006a28:	bf28      	it	cs
 8006a2a:	461d      	movcs	r5, r3
 8006a2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006a2e:	9a05      	ldr	r2, [sp, #20]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	db02      	blt.n	8006a3a <_svfprintf_r+0xf92>
 8006a34:	f01b 0f01 	tst.w	fp, #1
 8006a38:	d00e      	beq.n	8006a58 <_svfprintf_r+0xfb0>
 8006a3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a42:	6063      	str	r3, [r4, #4]
 8006a44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a46:	4413      	add	r3, r2
 8006a48:	9324      	str	r3, [sp, #144]	; 0x90
 8006a4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	2b07      	cmp	r3, #7
 8006a50:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a52:	f300 80dd 	bgt.w	8006c10 <_svfprintf_r+0x1168>
 8006a56:	3408      	adds	r4, #8
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8006a5c:	eb09 0203 	add.w	r2, r9, r3
 8006a60:	1b9e      	subs	r6, r3, r6
 8006a62:	1b52      	subs	r2, r2, r5
 8006a64:	4296      	cmp	r6, r2
 8006a66:	bfa8      	it	ge
 8006a68:	4616      	movge	r6, r2
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	dd0b      	ble.n	8006a86 <_svfprintf_r+0xfde>
 8006a6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a70:	4433      	add	r3, r6
 8006a72:	9324      	str	r3, [sp, #144]	; 0x90
 8006a74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a76:	3301      	adds	r3, #1
 8006a78:	2b07      	cmp	r3, #7
 8006a7a:	e9c4 5600 	strd	r5, r6, [r4]
 8006a7e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a80:	f300 80d0 	bgt.w	8006c24 <_svfprintf_r+0x117c>
 8006a84:	3408      	adds	r4, #8
 8006a86:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	eba3 0505 	sub.w	r5, r3, r5
 8006a90:	bfa8      	it	ge
 8006a92:	1bad      	subge	r5, r5, r6
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	f77f abed 	ble.w	8006274 <_svfprintf_r+0x7cc>
 8006a9a:	4e67      	ldr	r6, [pc, #412]	; (8006c38 <_svfprintf_r+0x1190>)
 8006a9c:	2710      	movs	r7, #16
 8006a9e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006aa2:	2d10      	cmp	r5, #16
 8006aa4:	f103 0301 	add.w	r3, r3, #1
 8006aa8:	f104 0108 	add.w	r1, r4, #8
 8006aac:	6026      	str	r6, [r4, #0]
 8006aae:	f77f aecf 	ble.w	8006850 <_svfprintf_r+0xda8>
 8006ab2:	3210      	adds	r2, #16
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006aba:	6067      	str	r7, [r4, #4]
 8006abc:	dd08      	ble.n	8006ad0 <_svfprintf_r+0x1028>
 8006abe:	aa22      	add	r2, sp, #136	; 0x88
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	f001 ff3c 	bl	8008940 <__ssprint_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f040 816f 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006ace:	a925      	add	r1, sp, #148	; 0x94
 8006ad0:	3d10      	subs	r5, #16
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	e7e3      	b.n	8006a9e <_svfprintf_r+0xff6>
 8006ad6:	aa22      	add	r2, sp, #136	; 0x88
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4650      	mov	r0, sl
 8006adc:	f001 ff30 	bl	8008940 <__ssprint_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	f040 8163 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006ae6:	ac25      	add	r4, sp, #148	; 0x94
 8006ae8:	e771      	b.n	80069ce <_svfprintf_r+0xf26>
 8006aea:	2010      	movs	r0, #16
 8006aec:	4402      	add	r2, r0
 8006aee:	2b07      	cmp	r3, #7
 8006af0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006af4:	6060      	str	r0, [r4, #4]
 8006af6:	dd08      	ble.n	8006b0a <_svfprintf_r+0x1062>
 8006af8:	aa22      	add	r2, sp, #136	; 0x88
 8006afa:	4641      	mov	r1, r8
 8006afc:	4650      	mov	r0, sl
 8006afe:	f001 ff1f 	bl	8008940 <__ssprint_r>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f040 8152 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006b08:	a925      	add	r1, sp, #148	; 0x94
 8006b0a:	3e10      	subs	r6, #16
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	e765      	b.n	80069dc <_svfprintf_r+0xf34>
 8006b10:	460c      	mov	r4, r1
 8006b12:	e77c      	b.n	8006a0e <_svfprintf_r+0xf66>
 8006b14:	9b08      	ldr	r3, [sp, #32]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04a      	beq.n	8006bb0 <_svfprintf_r+0x1108>
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b28:	6063      	str	r3, [r4, #4]
 8006b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b2c:	4413      	add	r3, r2
 8006b2e:	9324      	str	r3, [sp, #144]	; 0x90
 8006b30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b32:	3301      	adds	r3, #1
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b38:	dc41      	bgt.n	8006bbe <_svfprintf_r+0x1116>
 8006b3a:	3408      	adds	r4, #8
 8006b3c:	9b05      	ldr	r3, [sp, #20]
 8006b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b40:	eb09 0703 	add.w	r7, r9, r3
 8006b44:	1b7b      	subs	r3, r7, r5
 8006b46:	7817      	ldrb	r7, [r2, #0]
 8006b48:	429f      	cmp	r7, r3
 8006b4a:	bfa8      	it	ge
 8006b4c:	461f      	movge	r7, r3
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	dd0a      	ble.n	8006b68 <_svfprintf_r+0x10c0>
 8006b52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b54:	443b      	add	r3, r7
 8006b56:	9324      	str	r3, [sp, #144]	; 0x90
 8006b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	2b07      	cmp	r3, #7
 8006b5e:	e9c4 5700 	strd	r5, r7, [r4]
 8006b62:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b64:	dc35      	bgt.n	8006bd2 <_svfprintf_r+0x112a>
 8006b66:	3408      	adds	r4, #8
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	781e      	ldrb	r6, [r3, #0]
 8006b6c:	2f00      	cmp	r7, #0
 8006b6e:	bfa8      	it	ge
 8006b70:	1bf6      	subge	r6, r6, r7
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	dd18      	ble.n	8006ba8 <_svfprintf_r+0x1100>
 8006b76:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006b7a:	482f      	ldr	r0, [pc, #188]	; (8006c38 <_svfprintf_r+0x1190>)
 8006b7c:	6020      	str	r0, [r4, #0]
 8006b7e:	2e10      	cmp	r6, #16
 8006b80:	f103 0301 	add.w	r3, r3, #1
 8006b84:	f104 0108 	add.w	r1, r4, #8
 8006b88:	dc2d      	bgt.n	8006be6 <_svfprintf_r+0x113e>
 8006b8a:	4432      	add	r2, r6
 8006b8c:	2b07      	cmp	r3, #7
 8006b8e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006b92:	6066      	str	r6, [r4, #4]
 8006b94:	dd3a      	ble.n	8006c0c <_svfprintf_r+0x1164>
 8006b96:	aa22      	add	r2, sp, #136	; 0x88
 8006b98:	4641      	mov	r1, r8
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	f001 fed0 	bl	8008940 <__ssprint_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f040 8103 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006ba6:	ac25      	add	r4, sp, #148	; 0x94
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	441d      	add	r5, r3
 8006bae:	e732      	b.n	8006a16 <_svfprintf_r+0xf6e>
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbc:	e7b0      	b.n	8006b20 <_svfprintf_r+0x1078>
 8006bbe:	aa22      	add	r2, sp, #136	; 0x88
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	f001 febc 	bl	8008940 <__ssprint_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f040 80ef 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006bce:	ac25      	add	r4, sp, #148	; 0x94
 8006bd0:	e7b4      	b.n	8006b3c <_svfprintf_r+0x1094>
 8006bd2:	aa22      	add	r2, sp, #136	; 0x88
 8006bd4:	4641      	mov	r1, r8
 8006bd6:	4650      	mov	r0, sl
 8006bd8:	f001 feb2 	bl	8008940 <__ssprint_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f040 80e5 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006be2:	ac25      	add	r4, sp, #148	; 0x94
 8006be4:	e7c0      	b.n	8006b68 <_svfprintf_r+0x10c0>
 8006be6:	2010      	movs	r0, #16
 8006be8:	4402      	add	r2, r0
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006bf0:	6060      	str	r0, [r4, #4]
 8006bf2:	dd08      	ble.n	8006c06 <_svfprintf_r+0x115e>
 8006bf4:	aa22      	add	r2, sp, #136	; 0x88
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	f001 fea1 	bl	8008940 <__ssprint_r>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f040 80d4 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006c04:	a925      	add	r1, sp, #148	; 0x94
 8006c06:	3e10      	subs	r6, #16
 8006c08:	460c      	mov	r4, r1
 8006c0a:	e7b4      	b.n	8006b76 <_svfprintf_r+0x10ce>
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	e7cb      	b.n	8006ba8 <_svfprintf_r+0x1100>
 8006c10:	aa22      	add	r2, sp, #136	; 0x88
 8006c12:	4641      	mov	r1, r8
 8006c14:	4650      	mov	r0, sl
 8006c16:	f001 fe93 	bl	8008940 <__ssprint_r>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f040 80c6 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006c20:	ac25      	add	r4, sp, #148	; 0x94
 8006c22:	e719      	b.n	8006a58 <_svfprintf_r+0xfb0>
 8006c24:	aa22      	add	r2, sp, #136	; 0x88
 8006c26:	4641      	mov	r1, r8
 8006c28:	4650      	mov	r0, sl
 8006c2a:	f001 fe89 	bl	8008940 <__ssprint_r>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f040 80bc 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006c34:	ac25      	add	r4, sp, #148	; 0x94
 8006c36:	e726      	b.n	8006a86 <_svfprintf_r+0xfde>
 8006c38:	0800e798 	.word	0x0800e798
 8006c3c:	9a05      	ldr	r2, [sp, #20]
 8006c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	f106 0601 	add.w	r6, r6, #1
 8006c46:	f103 0301 	add.w	r3, r3, #1
 8006c4a:	f104 0508 	add.w	r5, r4, #8
 8006c4e:	dc02      	bgt.n	8006c56 <_svfprintf_r+0x11ae>
 8006c50:	f01b 0f01 	tst.w	fp, #1
 8006c54:	d07e      	beq.n	8006d54 <_svfprintf_r+0x12ac>
 8006c56:	2201      	movs	r2, #1
 8006c58:	2b07      	cmp	r3, #7
 8006c5a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006c5e:	f8c4 9000 	str.w	r9, [r4]
 8006c62:	6062      	str	r2, [r4, #4]
 8006c64:	dd08      	ble.n	8006c78 <_svfprintf_r+0x11d0>
 8006c66:	aa22      	add	r2, sp, #136	; 0x88
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f001 fe68 	bl	8008940 <__ssprint_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f040 809b 	bne.w	8006dac <_svfprintf_r+0x1304>
 8006c76:	ad25      	add	r5, sp, #148	; 0x94
 8006c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c80:	606b      	str	r3, [r5, #4]
 8006c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c84:	4413      	add	r3, r2
 8006c86:	9324      	str	r3, [sp, #144]	; 0x90
 8006c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006c90:	dc32      	bgt.n	8006cf8 <_svfprintf_r+0x1250>
 8006c92:	3508      	adds	r5, #8
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006c9a:	1e5c      	subs	r4, r3, #1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f7f9 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d130      	bne.n	8006d0a <_svfprintf_r+0x1262>
 8006ca8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cac:	9a05      	ldr	r2, [sp, #20]
 8006cae:	3101      	adds	r1, #1
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	f109 0001 	add.w	r0, r9, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2907      	cmp	r1, #7
 8006cba:	e9c5 0400 	strd	r0, r4, [r5]
 8006cbe:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8006cc2:	dd50      	ble.n	8006d66 <_svfprintf_r+0x12be>
 8006cc4:	aa22      	add	r2, sp, #136	; 0x88
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4650      	mov	r0, sl
 8006cca:	f001 fe39 	bl	8008940 <__ssprint_r>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d16c      	bne.n	8006dac <_svfprintf_r+0x1304>
 8006cd2:	ad25      	add	r5, sp, #148	; 0x94
 8006cd4:	ab1e      	add	r3, sp, #120	; 0x78
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cdc:	606b      	str	r3, [r5, #4]
 8006cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ce0:	4413      	add	r3, r2
 8006ce2:	9324      	str	r3, [sp, #144]	; 0x90
 8006ce4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	9323      	str	r3, [sp, #140]	; 0x8c
 8006cec:	f73f adb7 	bgt.w	800685e <_svfprintf_r+0xdb6>
 8006cf0:	f105 0408 	add.w	r4, r5, #8
 8006cf4:	f7ff babe 	b.w	8006274 <_svfprintf_r+0x7cc>
 8006cf8:	aa22      	add	r2, sp, #136	; 0x88
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f001 fe1f 	bl	8008940 <__ssprint_r>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d152      	bne.n	8006dac <_svfprintf_r+0x1304>
 8006d06:	ad25      	add	r5, sp, #148	; 0x94
 8006d08:	e7c4      	b.n	8006c94 <_svfprintf_r+0x11ec>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	dde2      	ble.n	8006cd4 <_svfprintf_r+0x122c>
 8006d0e:	4e56      	ldr	r6, [pc, #344]	; (8006e68 <_svfprintf_r+0x13c0>)
 8006d10:	2710      	movs	r7, #16
 8006d12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006d16:	2c10      	cmp	r4, #16
 8006d18:	f103 0301 	add.w	r3, r3, #1
 8006d1c:	f105 0108 	add.w	r1, r5, #8
 8006d20:	602e      	str	r6, [r5, #0]
 8006d22:	dc07      	bgt.n	8006d34 <_svfprintf_r+0x128c>
 8006d24:	606c      	str	r4, [r5, #4]
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	4414      	add	r4, r2
 8006d2a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006d2e:	dcc9      	bgt.n	8006cc4 <_svfprintf_r+0x121c>
 8006d30:	460d      	mov	r5, r1
 8006d32:	e7cf      	b.n	8006cd4 <_svfprintf_r+0x122c>
 8006d34:	3210      	adds	r2, #16
 8006d36:	2b07      	cmp	r3, #7
 8006d38:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006d3c:	606f      	str	r7, [r5, #4]
 8006d3e:	dd06      	ble.n	8006d4e <_svfprintf_r+0x12a6>
 8006d40:	aa22      	add	r2, sp, #136	; 0x88
 8006d42:	4641      	mov	r1, r8
 8006d44:	4650      	mov	r0, sl
 8006d46:	f001 fdfb 	bl	8008940 <__ssprint_r>
 8006d4a:	bb78      	cbnz	r0, 8006dac <_svfprintf_r+0x1304>
 8006d4c:	a925      	add	r1, sp, #148	; 0x94
 8006d4e:	3c10      	subs	r4, #16
 8006d50:	460d      	mov	r5, r1
 8006d52:	e7de      	b.n	8006d12 <_svfprintf_r+0x126a>
 8006d54:	2201      	movs	r2, #1
 8006d56:	2b07      	cmp	r3, #7
 8006d58:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006d5c:	f8c4 9000 	str.w	r9, [r4]
 8006d60:	6062      	str	r2, [r4, #4]
 8006d62:	ddb7      	ble.n	8006cd4 <_svfprintf_r+0x122c>
 8006d64:	e7ae      	b.n	8006cc4 <_svfprintf_r+0x121c>
 8006d66:	3508      	adds	r5, #8
 8006d68:	e7b4      	b.n	8006cd4 <_svfprintf_r+0x122c>
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	f7ff ba82 	b.w	8006274 <_svfprintf_r+0x7cc>
 8006d70:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006d74:	1a9d      	subs	r5, r3, r2
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	f77f aa80 	ble.w	800627c <_svfprintf_r+0x7d4>
 8006d7c:	4e3b      	ldr	r6, [pc, #236]	; (8006e6c <_svfprintf_r+0x13c4>)
 8006d7e:	2710      	movs	r7, #16
 8006d80:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006d84:	2d10      	cmp	r5, #16
 8006d86:	f103 0301 	add.w	r3, r3, #1
 8006d8a:	6026      	str	r6, [r4, #0]
 8006d8c:	dc18      	bgt.n	8006dc0 <_svfprintf_r+0x1318>
 8006d8e:	6065      	str	r5, [r4, #4]
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	4415      	add	r5, r2
 8006d94:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006d98:	f77f aa70 	ble.w	800627c <_svfprintf_r+0x7d4>
 8006d9c:	aa22      	add	r2, sp, #136	; 0x88
 8006d9e:	4641      	mov	r1, r8
 8006da0:	4650      	mov	r0, sl
 8006da2:	f001 fdcd 	bl	8008940 <__ssprint_r>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f aa68 	beq.w	800627c <_svfprintf_r+0x7d4>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f43f a887 	beq.w	8005ec2 <_svfprintf_r+0x41a>
 8006db4:	4619      	mov	r1, r3
 8006db6:	4650      	mov	r0, sl
 8006db8:	f000 ffb2 	bl	8007d20 <_free_r>
 8006dbc:	f7ff b881 	b.w	8005ec2 <_svfprintf_r+0x41a>
 8006dc0:	3210      	adds	r2, #16
 8006dc2:	2b07      	cmp	r3, #7
 8006dc4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006dc8:	6067      	str	r7, [r4, #4]
 8006dca:	dc02      	bgt.n	8006dd2 <_svfprintf_r+0x132a>
 8006dcc:	3408      	adds	r4, #8
 8006dce:	3d10      	subs	r5, #16
 8006dd0:	e7d6      	b.n	8006d80 <_svfprintf_r+0x12d8>
 8006dd2:	aa22      	add	r2, sp, #136	; 0x88
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	f001 fdb2 	bl	8008940 <__ssprint_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1e5      	bne.n	8006dac <_svfprintf_r+0x1304>
 8006de0:	ac25      	add	r4, sp, #148	; 0x94
 8006de2:	e7f4      	b.n	8006dce <_svfprintf_r+0x1326>
 8006de4:	9903      	ldr	r1, [sp, #12]
 8006de6:	4650      	mov	r0, sl
 8006de8:	f000 ff9a 	bl	8007d20 <_free_r>
 8006dec:	f7ff ba5e 	b.w	80062ac <_svfprintf_r+0x804>
 8006df0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f43f a865 	beq.w	8005ec2 <_svfprintf_r+0x41a>
 8006df8:	aa22      	add	r2, sp, #136	; 0x88
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f001 fd9f 	bl	8008940 <__ssprint_r>
 8006e02:	f7ff b85e 	b.w	8005ec2 <_svfprintf_r+0x41a>
 8006e06:	ea56 0205 	orrs.w	r2, r6, r5
 8006e0a:	465f      	mov	r7, fp
 8006e0c:	f43f ab78 	beq.w	8006500 <_svfprintf_r+0xa58>
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f43f ac15 	beq.w	8006640 <_svfprintf_r+0xb98>
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8006e1c:	f43f ac5b 	beq.w	80066d6 <_svfprintf_r+0xc2e>
 8006e20:	f006 0307 	and.w	r3, r6, #7
 8006e24:	08f6      	lsrs	r6, r6, #3
 8006e26:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8006e2a:	08ed      	lsrs	r5, r5, #3
 8006e2c:	3330      	adds	r3, #48	; 0x30
 8006e2e:	ea56 0105 	orrs.w	r1, r6, r5
 8006e32:	464a      	mov	r2, r9
 8006e34:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8006e38:	d1f2      	bne.n	8006e20 <_svfprintf_r+0x1378>
 8006e3a:	07f9      	lsls	r1, r7, #31
 8006e3c:	d506      	bpl.n	8006e4c <_svfprintf_r+0x13a4>
 8006e3e:	2b30      	cmp	r3, #48	; 0x30
 8006e40:	d004      	beq.n	8006e4c <_svfprintf_r+0x13a4>
 8006e42:	2330      	movs	r3, #48	; 0x30
 8006e44:	f809 3c01 	strb.w	r3, [r9, #-1]
 8006e48:	f1a2 0902 	sub.w	r9, r2, #2
 8006e4c:	ab4e      	add	r3, sp, #312	; 0x138
 8006e4e:	eba3 0309 	sub.w	r3, r3, r9
 8006e52:	9e04      	ldr	r6, [sp, #16]
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	2300      	movs	r3, #0
 8006e58:	46bb      	mov	fp, r7
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006e60:	461d      	mov	r5, r3
 8006e62:	f7ff b94d 	b.w	8006100 <_svfprintf_r+0x658>
 8006e66:	bf00      	nop
 8006e68:	0800e798 	.word	0x0800e798
 8006e6c:	0800e788 	.word	0x0800e788

08006e70 <sysconf>:
 8006e70:	2808      	cmp	r0, #8
 8006e72:	b508      	push	{r3, lr}
 8006e74:	d006      	beq.n	8006e84 <sysconf+0x14>
 8006e76:	f7fe f96b 	bl	8005150 <__errno>
 8006e7a:	2316      	movs	r3, #22
 8006e7c:	6003      	str	r3, [r0, #0]
 8006e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e82:	bd08      	pop	{r3, pc}
 8006e84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e88:	e7fb      	b.n	8006e82 <sysconf+0x12>
	...

08006e8c <register_fini>:
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <register_fini+0xc>)
 8006e8e:	b113      	cbz	r3, 8006e96 <register_fini+0xa>
 8006e90:	4802      	ldr	r0, [pc, #8]	; (8006e9c <register_fini+0x10>)
 8006e92:	f000 b805 	b.w	8006ea0 <atexit>
 8006e96:	4770      	bx	lr
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	08007c51 	.word	0x08007c51

08006ea0 <atexit>:
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 be30 	b.w	8008b0c <__register_exitproc>

08006eac <quorem>:
 8006eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	6903      	ldr	r3, [r0, #16]
 8006eb2:	690c      	ldr	r4, [r1, #16]
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f2c0 8081 	blt.w	8006fbe <quorem+0x112>
 8006ebc:	3c01      	subs	r4, #1
 8006ebe:	f101 0814 	add.w	r8, r1, #20
 8006ec2:	f100 0514 	add.w	r5, r0, #20
 8006ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ee4:	d331      	bcc.n	8006f4a <quorem+0x9e>
 8006ee6:	f04f 0e00 	mov.w	lr, #0
 8006eea:	4640      	mov	r0, r8
 8006eec:	46ac      	mov	ip, r5
 8006eee:	46f2      	mov	sl, lr
 8006ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ef4:	b293      	uxth	r3, r2
 8006ef6:	fb06 e303 	mla	r3, r6, r3, lr
 8006efa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ebaa 0303 	sub.w	r3, sl, r3
 8006f04:	f8dc a000 	ldr.w	sl, [ip]
 8006f08:	0c12      	lsrs	r2, r2, #16
 8006f0a:	fa13 f38a 	uxtah	r3, r3, sl
 8006f0e:	fb06 e202 	mla	r2, r6, r2, lr
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f24:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f28:	4581      	cmp	r9, r0
 8006f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f36:	d2db      	bcs.n	8006ef0 <quorem+0x44>
 8006f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f3c:	b92b      	cbnz	r3, 8006f4a <quorem+0x9e>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	3b04      	subs	r3, #4
 8006f42:	429d      	cmp	r5, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	d32e      	bcc.n	8006fa6 <quorem+0xfa>
 8006f48:	613c      	str	r4, [r7, #16]
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f001 fb68 	bl	8008620 <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	db24      	blt.n	8006f9e <quorem+0xf2>
 8006f54:	3601      	adds	r6, #1
 8006f56:	4628      	mov	r0, r5
 8006f58:	f04f 0c00 	mov.w	ip, #0
 8006f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f60:	f8d0 e000 	ldr.w	lr, [r0]
 8006f64:	b293      	uxth	r3, r2
 8006f66:	ebac 0303 	sub.w	r3, ip, r3
 8006f6a:	0c12      	lsrs	r2, r2, #16
 8006f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f7e:	45c1      	cmp	r9, r8
 8006f80:	f840 3b04 	str.w	r3, [r0], #4
 8006f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f88:	d2e8      	bcs.n	8006f5c <quorem+0xb0>
 8006f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f92:	b922      	cbnz	r2, 8006f9e <quorem+0xf2>
 8006f94:	3b04      	subs	r3, #4
 8006f96:	429d      	cmp	r5, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	d30a      	bcc.n	8006fb2 <quorem+0x106>
 8006f9c:	613c      	str	r4, [r7, #16]
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	b003      	add	sp, #12
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	d1cc      	bne.n	8006f48 <quorem+0x9c>
 8006fae:	3c01      	subs	r4, #1
 8006fb0:	e7c7      	b.n	8006f42 <quorem+0x96>
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	2a00      	cmp	r2, #0
 8006fb8:	d1f0      	bne.n	8006f9c <quorem+0xf0>
 8006fba:	3c01      	subs	r4, #1
 8006fbc:	e7eb      	b.n	8006f96 <quorem+0xea>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e7ee      	b.n	8006fa0 <quorem+0xf4>
 8006fc2:	0000      	movs	r0, r0
 8006fc4:	0000      	movs	r0, r0
	...

08006fc8 <_dtoa_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	ed2d 8b04 	vpush	{d8-d9}
 8006fd0:	b093      	sub	sp, #76	; 0x4c
 8006fd2:	ec57 6b10 	vmov	r6, r7, d0
 8006fd6:	9106      	str	r1, [sp, #24]
 8006fd8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006fda:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fde:	ee10 aa10 	vmov	sl, s0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe6:	46bb      	mov	fp, r7
 8006fe8:	b141      	cbz	r1, 8006ffc <_dtoa_r+0x34>
 8006fea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fec:	604a      	str	r2, [r1, #4]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4093      	lsls	r3, r2
 8006ff2:	608b      	str	r3, [r1, #8]
 8006ff4:	f001 f905 	bl	8008202 <_Bfree>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6423      	str	r3, [r4, #64]	; 0x40
 8006ffc:	1e3b      	subs	r3, r7, #0
 8006ffe:	bfaa      	itet	ge
 8007000:	2300      	movge	r3, #0
 8007002:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007006:	602b      	strge	r3, [r5, #0]
 8007008:	4ba3      	ldr	r3, [pc, #652]	; (8007298 <_dtoa_r+0x2d0>)
 800700a:	bfbc      	itt	lt
 800700c:	2201      	movlt	r2, #1
 800700e:	602a      	strlt	r2, [r5, #0]
 8007010:	ea33 030b 	bics.w	r3, r3, fp
 8007014:	d11b      	bne.n	800704e <_dtoa_r+0x86>
 8007016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007018:	f242 730f 	movw	r3, #9999	; 0x270f
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007022:	4333      	orrs	r3, r6
 8007024:	f000 8590 	beq.w	8007b48 <_dtoa_r+0xb80>
 8007028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702a:	b90b      	cbnz	r3, 8007030 <_dtoa_r+0x68>
 800702c:	4b9b      	ldr	r3, [pc, #620]	; (800729c <_dtoa_r+0x2d4>)
 800702e:	e022      	b.n	8007076 <_dtoa_r+0xae>
 8007030:	4b9a      	ldr	r3, [pc, #616]	; (800729c <_dtoa_r+0x2d4>)
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	3303      	adds	r3, #3
 8007036:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	9801      	ldr	r0, [sp, #4]
 800703c:	b013      	add	sp, #76	; 0x4c
 800703e:	ecbd 8b04 	vpop	{d8-d9}
 8007042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007046:	4b96      	ldr	r3, [pc, #600]	; (80072a0 <_dtoa_r+0x2d8>)
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	3308      	adds	r3, #8
 800704c:	e7f3      	b.n	8007036 <_dtoa_r+0x6e>
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	4650      	mov	r0, sl
 8007054:	4659      	mov	r1, fp
 8007056:	f7f9 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800705a:	ec4b ab19 	vmov	d9, sl, fp
 800705e:	4680      	mov	r8, r0
 8007060:	b158      	cbz	r0, 800707a <_dtoa_r+0xb2>
 8007062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007064:	2301      	movs	r3, #1
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8569 	beq.w	8007b42 <_dtoa_r+0xb7a>
 8007070:	488c      	ldr	r0, [pc, #560]	; (80072a4 <_dtoa_r+0x2dc>)
 8007072:	6018      	str	r0, [r3, #0]
 8007074:	1e43      	subs	r3, r0, #1
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	e7df      	b.n	800703a <_dtoa_r+0x72>
 800707a:	ec4b ab10 	vmov	d0, sl, fp
 800707e:	aa10      	add	r2, sp, #64	; 0x40
 8007080:	a911      	add	r1, sp, #68	; 0x44
 8007082:	4620      	mov	r0, r4
 8007084:	f001 fb72 	bl	800876c <__d2b>
 8007088:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800708c:	ee08 0a10 	vmov	s16, r0
 8007090:	2d00      	cmp	r5, #0
 8007092:	f000 8082 	beq.w	800719a <_dtoa_r+0x1d2>
 8007096:	ee19 3a90 	vmov	r3, s19
 800709a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070a2:	4656      	mov	r6, sl
 80070a4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070ac:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80070b0:	4b7d      	ldr	r3, [pc, #500]	; (80072a8 <_dtoa_r+0x2e0>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 f8e6 	bl	8000288 <__aeabi_dsub>
 80070bc:	a370      	add	r3, pc, #448	; (adr r3, 8007280 <_dtoa_r+0x2b8>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 fa99 	bl	80005f8 <__aeabi_dmul>
 80070c6:	a370      	add	r3, pc, #448	; (adr r3, 8007288 <_dtoa_r+0x2c0>)
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 f8de 	bl	800028c <__adddf3>
 80070d0:	4606      	mov	r6, r0
 80070d2:	4628      	mov	r0, r5
 80070d4:	460f      	mov	r7, r1
 80070d6:	f7f9 fa25 	bl	8000524 <__aeabi_i2d>
 80070da:	a36d      	add	r3, pc, #436	; (adr r3, 8007290 <_dtoa_r+0x2c8>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 fa8a 	bl	80005f8 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f8ce 	bl	800028c <__adddf3>
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	f7f9 fd30 	bl	8000b58 <__aeabi_d2iz>
 80070f8:	2200      	movs	r2, #0
 80070fa:	9000      	str	r0, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	4630      	mov	r0, r6
 8007100:	4639      	mov	r1, r7
 8007102:	f7f9 fceb 	bl	8000adc <__aeabi_dcmplt>
 8007106:	b150      	cbz	r0, 800711e <_dtoa_r+0x156>
 8007108:	9800      	ldr	r0, [sp, #0]
 800710a:	f7f9 fa0b 	bl	8000524 <__aeabi_i2d>
 800710e:	4632      	mov	r2, r6
 8007110:	463b      	mov	r3, r7
 8007112:	f7f9 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007116:	b910      	cbnz	r0, 800711e <_dtoa_r+0x156>
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	3b01      	subs	r3, #1
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	2b16      	cmp	r3, #22
 8007122:	d858      	bhi.n	80071d6 <_dtoa_r+0x20e>
 8007124:	9a00      	ldr	r2, [sp, #0]
 8007126:	4b61      	ldr	r3, [pc, #388]	; (80072ac <_dtoa_r+0x2e4>)
 8007128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	ec51 0b19 	vmov	r0, r1, d9
 8007134:	f7f9 fcd2 	bl	8000adc <__aeabi_dcmplt>
 8007138:	2800      	cmp	r0, #0
 800713a:	d04e      	beq.n	80071da <_dtoa_r+0x212>
 800713c:	9b00      	ldr	r3, [sp, #0]
 800713e:	3b01      	subs	r3, #1
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	930b      	str	r3, [sp, #44]	; 0x2c
 8007146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007148:	1b5d      	subs	r5, r3, r5
 800714a:	1e6b      	subs	r3, r5, #1
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	bf45      	ittet	mi
 8007150:	f1c5 0301 	rsbmi	r3, r5, #1
 8007154:	9304      	strmi	r3, [sp, #16]
 8007156:	2300      	movpl	r3, #0
 8007158:	2300      	movmi	r3, #0
 800715a:	bf4c      	ite	mi
 800715c:	9305      	strmi	r3, [sp, #20]
 800715e:	9304      	strpl	r3, [sp, #16]
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	db3b      	blt.n	80071de <_dtoa_r+0x216>
 8007166:	9b05      	ldr	r3, [sp, #20]
 8007168:	9a00      	ldr	r2, [sp, #0]
 800716a:	920a      	str	r2, [sp, #40]	; 0x28
 800716c:	4413      	add	r3, r2
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	2300      	movs	r3, #0
 8007172:	9307      	str	r3, [sp, #28]
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	2b09      	cmp	r3, #9
 8007178:	d869      	bhi.n	800724e <_dtoa_r+0x286>
 800717a:	2b05      	cmp	r3, #5
 800717c:	bfc4      	itt	gt
 800717e:	3b04      	subgt	r3, #4
 8007180:	9306      	strgt	r3, [sp, #24]
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	f1a3 0302 	sub.w	r3, r3, #2
 8007188:	bfcc      	ite	gt
 800718a:	2500      	movgt	r5, #0
 800718c:	2501      	movle	r5, #1
 800718e:	2b03      	cmp	r3, #3
 8007190:	d868      	bhi.n	8007264 <_dtoa_r+0x29c>
 8007192:	e8df f003 	tbb	[pc, r3]
 8007196:	3a2d      	.short	0x3a2d
 8007198:	5a38      	.short	0x5a38
 800719a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800719e:	441d      	add	r5, r3
 80071a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	bfc1      	itttt	gt
 80071a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071b0:	fa0b f303 	lslgt.w	r3, fp, r3
 80071b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071b8:	bfda      	itte	le
 80071ba:	f1c3 0320 	rsble	r3, r3, #32
 80071be:	fa06 f003 	lslle.w	r0, r6, r3
 80071c2:	4318      	orrgt	r0, r3
 80071c4:	f7f9 f99e 	bl	8000504 <__aeabi_ui2d>
 80071c8:	2301      	movs	r3, #1
 80071ca:	4606      	mov	r6, r0
 80071cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071d0:	3d01      	subs	r5, #1
 80071d2:	930e      	str	r3, [sp, #56]	; 0x38
 80071d4:	e76c      	b.n	80070b0 <_dtoa_r+0xe8>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e7b4      	b.n	8007144 <_dtoa_r+0x17c>
 80071da:	900b      	str	r0, [sp, #44]	; 0x2c
 80071dc:	e7b3      	b.n	8007146 <_dtoa_r+0x17e>
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	9a00      	ldr	r2, [sp, #0]
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	4253      	negs	r3, r2
 80071e8:	9307      	str	r3, [sp, #28]
 80071ea:	2300      	movs	r3, #0
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
 80071ee:	e7c1      	b.n	8007174 <_dtoa_r+0x1ac>
 80071f0:	2300      	movs	r3, #0
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dc37      	bgt.n	800726a <_dtoa_r+0x2a2>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007200:	461a      	mov	r2, r3
 8007202:	9209      	str	r2, [sp, #36]	; 0x24
 8007204:	e00c      	b.n	8007220 <_dtoa_r+0x258>
 8007206:	2301      	movs	r3, #1
 8007208:	e7f3      	b.n	80071f2 <_dtoa_r+0x22a>
 800720a:	2300      	movs	r3, #0
 800720c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	4413      	add	r3, r2
 8007214:	9302      	str	r3, [sp, #8]
 8007216:	3301      	adds	r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	9303      	str	r3, [sp, #12]
 800721c:	bfb8      	it	lt
 800721e:	2301      	movlt	r3, #1
 8007220:	2200      	movs	r2, #0
 8007222:	6462      	str	r2, [r4, #68]	; 0x44
 8007224:	2204      	movs	r2, #4
 8007226:	f102 0014 	add.w	r0, r2, #20
 800722a:	4298      	cmp	r0, r3
 800722c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800722e:	d920      	bls.n	8007272 <_dtoa_r+0x2aa>
 8007230:	4620      	mov	r0, r4
 8007232:	f000 ffc1 	bl	80081b8 <_Balloc>
 8007236:	9001      	str	r0, [sp, #4]
 8007238:	2800      	cmp	r0, #0
 800723a:	d13d      	bne.n	80072b8 <_dtoa_r+0x2f0>
 800723c:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <_dtoa_r+0x2e8>)
 800723e:	4602      	mov	r2, r0
 8007240:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007244:	481b      	ldr	r0, [pc, #108]	; (80072b4 <_dtoa_r+0x2ec>)
 8007246:	f001 fca3 	bl	8008b90 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	e7de      	b.n	800720c <_dtoa_r+0x244>
 800724e:	2501      	movs	r5, #1
 8007250:	2300      	movs	r3, #0
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	9508      	str	r5, [sp, #32]
 8007256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800725a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	2312      	movs	r3, #18
 8007262:	e7ce      	b.n	8007202 <_dtoa_r+0x23a>
 8007264:	2301      	movs	r3, #1
 8007266:	9308      	str	r3, [sp, #32]
 8007268:	e7f5      	b.n	8007256 <_dtoa_r+0x28e>
 800726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007270:	e7d6      	b.n	8007220 <_dtoa_r+0x258>
 8007272:	3101      	adds	r1, #1
 8007274:	6461      	str	r1, [r4, #68]	; 0x44
 8007276:	0052      	lsls	r2, r2, #1
 8007278:	e7d5      	b.n	8007226 <_dtoa_r+0x25e>
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w
 8007280:	636f4361 	.word	0x636f4361
 8007284:	3fd287a7 	.word	0x3fd287a7
 8007288:	8b60c8b3 	.word	0x8b60c8b3
 800728c:	3fc68a28 	.word	0x3fc68a28
 8007290:	509f79fb 	.word	0x509f79fb
 8007294:	3fd34413 	.word	0x3fd34413
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	0800e7a8 	.word	0x0800e7a8
 80072a0:	0800e7ac 	.word	0x0800e7ac
 80072a4:	0800e787 	.word	0x0800e787
 80072a8:	3ff80000 	.word	0x3ff80000
 80072ac:	0800e8a8 	.word	0x0800e8a8
 80072b0:	0800e7b5 	.word	0x0800e7b5
 80072b4:	0800e7c6 	.word	0x0800e7c6
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	6423      	str	r3, [r4, #64]	; 0x40
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	2b0e      	cmp	r3, #14
 80072c0:	f200 809d 	bhi.w	80073fe <_dtoa_r+0x436>
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	f000 809a 	beq.w	80073fe <_dtoa_r+0x436>
 80072ca:	9b00      	ldr	r3, [sp, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd32      	ble.n	8007336 <_dtoa_r+0x36e>
 80072d0:	4ab7      	ldr	r2, [pc, #732]	; (80075b0 <_dtoa_r+0x5e8>)
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	05d8      	lsls	r0, r3, #23
 80072e2:	ea4f 1723 	mov.w	r7, r3, asr #4
 80072e6:	d516      	bpl.n	8007316 <_dtoa_r+0x34e>
 80072e8:	4bb2      	ldr	r3, [pc, #712]	; (80075b4 <_dtoa_r+0x5ec>)
 80072ea:	ec51 0b19 	vmov	r0, r1, d9
 80072ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072f2:	f7f9 faab 	bl	800084c <__aeabi_ddiv>
 80072f6:	f007 070f 	and.w	r7, r7, #15
 80072fa:	4682      	mov	sl, r0
 80072fc:	468b      	mov	fp, r1
 80072fe:	2503      	movs	r5, #3
 8007300:	4eac      	ldr	r6, [pc, #688]	; (80075b4 <_dtoa_r+0x5ec>)
 8007302:	b957      	cbnz	r7, 800731a <_dtoa_r+0x352>
 8007304:	4642      	mov	r2, r8
 8007306:	464b      	mov	r3, r9
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fa9e 	bl	800084c <__aeabi_ddiv>
 8007310:	4682      	mov	sl, r0
 8007312:	468b      	mov	fp, r1
 8007314:	e028      	b.n	8007368 <_dtoa_r+0x3a0>
 8007316:	2502      	movs	r5, #2
 8007318:	e7f2      	b.n	8007300 <_dtoa_r+0x338>
 800731a:	07f9      	lsls	r1, r7, #31
 800731c:	d508      	bpl.n	8007330 <_dtoa_r+0x368>
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007326:	f7f9 f967 	bl	80005f8 <__aeabi_dmul>
 800732a:	3501      	adds	r5, #1
 800732c:	4680      	mov	r8, r0
 800732e:	4689      	mov	r9, r1
 8007330:	107f      	asrs	r7, r7, #1
 8007332:	3608      	adds	r6, #8
 8007334:	e7e5      	b.n	8007302 <_dtoa_r+0x33a>
 8007336:	f000 809b 	beq.w	8007470 <_dtoa_r+0x4a8>
 800733a:	9b00      	ldr	r3, [sp, #0]
 800733c:	4f9d      	ldr	r7, [pc, #628]	; (80075b4 <_dtoa_r+0x5ec>)
 800733e:	425e      	negs	r6, r3
 8007340:	4b9b      	ldr	r3, [pc, #620]	; (80075b0 <_dtoa_r+0x5e8>)
 8007342:	f006 020f 	and.w	r2, r6, #15
 8007346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	ec51 0b19 	vmov	r0, r1, d9
 8007352:	f7f9 f951 	bl	80005f8 <__aeabi_dmul>
 8007356:	1136      	asrs	r6, r6, #4
 8007358:	4682      	mov	sl, r0
 800735a:	468b      	mov	fp, r1
 800735c:	2300      	movs	r3, #0
 800735e:	2502      	movs	r5, #2
 8007360:	2e00      	cmp	r6, #0
 8007362:	d17a      	bne.n	800745a <_dtoa_r+0x492>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1d3      	bne.n	8007310 <_dtoa_r+0x348>
 8007368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8082 	beq.w	8007474 <_dtoa_r+0x4ac>
 8007370:	4b91      	ldr	r3, [pc, #580]	; (80075b8 <_dtoa_r+0x5f0>)
 8007372:	2200      	movs	r2, #0
 8007374:	4650      	mov	r0, sl
 8007376:	4659      	mov	r1, fp
 8007378:	f7f9 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800737c:	2800      	cmp	r0, #0
 800737e:	d079      	beq.n	8007474 <_dtoa_r+0x4ac>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d076      	beq.n	8007474 <_dtoa_r+0x4ac>
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	dd36      	ble.n	80073fa <_dtoa_r+0x432>
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	4650      	mov	r0, sl
 8007390:	4659      	mov	r1, fp
 8007392:	1e5f      	subs	r7, r3, #1
 8007394:	2200      	movs	r2, #0
 8007396:	4b89      	ldr	r3, [pc, #548]	; (80075bc <_dtoa_r+0x5f4>)
 8007398:	f7f9 f92e 	bl	80005f8 <__aeabi_dmul>
 800739c:	9e02      	ldr	r6, [sp, #8]
 800739e:	4682      	mov	sl, r0
 80073a0:	468b      	mov	fp, r1
 80073a2:	3501      	adds	r5, #1
 80073a4:	4628      	mov	r0, r5
 80073a6:	f7f9 f8bd 	bl	8000524 <__aeabi_i2d>
 80073aa:	4652      	mov	r2, sl
 80073ac:	465b      	mov	r3, fp
 80073ae:	f7f9 f923 	bl	80005f8 <__aeabi_dmul>
 80073b2:	4b83      	ldr	r3, [pc, #524]	; (80075c0 <_dtoa_r+0x5f8>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	f7f8 ff69 	bl	800028c <__adddf3>
 80073ba:	46d0      	mov	r8, sl
 80073bc:	46d9      	mov	r9, fp
 80073be:	4682      	mov	sl, r0
 80073c0:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	d158      	bne.n	800747a <_dtoa_r+0x4b2>
 80073c8:	4b7e      	ldr	r3, [pc, #504]	; (80075c4 <_dtoa_r+0x5fc>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f8 ff5a 	bl	8000288 <__aeabi_dsub>
 80073d4:	4652      	mov	r2, sl
 80073d6:	465b      	mov	r3, fp
 80073d8:	4680      	mov	r8, r0
 80073da:	4689      	mov	r9, r1
 80073dc:	f7f9 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f040 8296 	bne.w	8007912 <_dtoa_r+0x94a>
 80073e6:	4652      	mov	r2, sl
 80073e8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073ec:	4640      	mov	r0, r8
 80073ee:	4649      	mov	r1, r9
 80073f0:	f7f9 fb74 	bl	8000adc <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f040 828a 	bne.w	800790e <_dtoa_r+0x946>
 80073fa:	ec5b ab19 	vmov	sl, fp, d9
 80073fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007400:	2b00      	cmp	r3, #0
 8007402:	f2c0 8149 	blt.w	8007698 <_dtoa_r+0x6d0>
 8007406:	9a00      	ldr	r2, [sp, #0]
 8007408:	2a0e      	cmp	r2, #14
 800740a:	f300 8145 	bgt.w	8007698 <_dtoa_r+0x6d0>
 800740e:	4b68      	ldr	r3, [pc, #416]	; (80075b0 <_dtoa_r+0x5e8>)
 8007410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007414:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	f280 80d6 	bge.w	80075cc <_dtoa_r+0x604>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f300 80d2 	bgt.w	80075cc <_dtoa_r+0x604>
 8007428:	f040 8270 	bne.w	800790c <_dtoa_r+0x944>
 800742c:	4b65      	ldr	r3, [pc, #404]	; (80075c4 <_dtoa_r+0x5fc>)
 800742e:	2200      	movs	r2, #0
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8007438:	4652      	mov	r2, sl
 800743a:	465b      	mov	r3, fp
 800743c:	f7f9 fb62 	bl	8000b04 <__aeabi_dcmpge>
 8007440:	9e03      	ldr	r6, [sp, #12]
 8007442:	4637      	mov	r7, r6
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 8246 	bne.w	80078d6 <_dtoa_r+0x90e>
 800744a:	9d01      	ldr	r5, [sp, #4]
 800744c:	2331      	movs	r3, #49	; 0x31
 800744e:	f805 3b01 	strb.w	r3, [r5], #1
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	e241      	b.n	80078de <_dtoa_r+0x916>
 800745a:	07f2      	lsls	r2, r6, #31
 800745c:	d505      	bpl.n	800746a <_dtoa_r+0x4a2>
 800745e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007462:	f7f9 f8c9 	bl	80005f8 <__aeabi_dmul>
 8007466:	3501      	adds	r5, #1
 8007468:	2301      	movs	r3, #1
 800746a:	1076      	asrs	r6, r6, #1
 800746c:	3708      	adds	r7, #8
 800746e:	e777      	b.n	8007360 <_dtoa_r+0x398>
 8007470:	2502      	movs	r5, #2
 8007472:	e779      	b.n	8007368 <_dtoa_r+0x3a0>
 8007474:	9f00      	ldr	r7, [sp, #0]
 8007476:	9e03      	ldr	r6, [sp, #12]
 8007478:	e794      	b.n	80073a4 <_dtoa_r+0x3dc>
 800747a:	9901      	ldr	r1, [sp, #4]
 800747c:	4b4c      	ldr	r3, [pc, #304]	; (80075b0 <_dtoa_r+0x5e8>)
 800747e:	4431      	add	r1, r6
 8007480:	910d      	str	r1, [sp, #52]	; 0x34
 8007482:	9908      	ldr	r1, [sp, #32]
 8007484:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800748c:	2900      	cmp	r1, #0
 800748e:	d043      	beq.n	8007518 <_dtoa_r+0x550>
 8007490:	494d      	ldr	r1, [pc, #308]	; (80075c8 <_dtoa_r+0x600>)
 8007492:	2000      	movs	r0, #0
 8007494:	f7f9 f9da 	bl	800084c <__aeabi_ddiv>
 8007498:	4652      	mov	r2, sl
 800749a:	465b      	mov	r3, fp
 800749c:	f7f8 fef4 	bl	8000288 <__aeabi_dsub>
 80074a0:	9d01      	ldr	r5, [sp, #4]
 80074a2:	4682      	mov	sl, r0
 80074a4:	468b      	mov	fp, r1
 80074a6:	4649      	mov	r1, r9
 80074a8:	4640      	mov	r0, r8
 80074aa:	f7f9 fb55 	bl	8000b58 <__aeabi_d2iz>
 80074ae:	4606      	mov	r6, r0
 80074b0:	f7f9 f838 	bl	8000524 <__aeabi_i2d>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4640      	mov	r0, r8
 80074ba:	4649      	mov	r1, r9
 80074bc:	f7f8 fee4 	bl	8000288 <__aeabi_dsub>
 80074c0:	3630      	adds	r6, #48	; 0x30
 80074c2:	f805 6b01 	strb.w	r6, [r5], #1
 80074c6:	4652      	mov	r2, sl
 80074c8:	465b      	mov	r3, fp
 80074ca:	4680      	mov	r8, r0
 80074cc:	4689      	mov	r9, r1
 80074ce:	f7f9 fb05 	bl	8000adc <__aeabi_dcmplt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d163      	bne.n	800759e <_dtoa_r+0x5d6>
 80074d6:	4642      	mov	r2, r8
 80074d8:	464b      	mov	r3, r9
 80074da:	4937      	ldr	r1, [pc, #220]	; (80075b8 <_dtoa_r+0x5f0>)
 80074dc:	2000      	movs	r0, #0
 80074de:	f7f8 fed3 	bl	8000288 <__aeabi_dsub>
 80074e2:	4652      	mov	r2, sl
 80074e4:	465b      	mov	r3, fp
 80074e6:	f7f9 faf9 	bl	8000adc <__aeabi_dcmplt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f040 80b6 	bne.w	800765c <_dtoa_r+0x694>
 80074f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f2:	429d      	cmp	r5, r3
 80074f4:	d081      	beq.n	80073fa <_dtoa_r+0x432>
 80074f6:	4b31      	ldr	r3, [pc, #196]	; (80075bc <_dtoa_r+0x5f4>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	4b2e      	ldr	r3, [pc, #184]	; (80075bc <_dtoa_r+0x5f4>)
 8007504:	4682      	mov	sl, r0
 8007506:	468b      	mov	fp, r1
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	2200      	movs	r2, #0
 800750e:	f7f9 f873 	bl	80005f8 <__aeabi_dmul>
 8007512:	4680      	mov	r8, r0
 8007514:	4689      	mov	r9, r1
 8007516:	e7c6      	b.n	80074a6 <_dtoa_r+0x4de>
 8007518:	4650      	mov	r0, sl
 800751a:	4659      	mov	r1, fp
 800751c:	f7f9 f86c 	bl	80005f8 <__aeabi_dmul>
 8007520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007522:	9d01      	ldr	r5, [sp, #4]
 8007524:	930f      	str	r3, [sp, #60]	; 0x3c
 8007526:	4682      	mov	sl, r0
 8007528:	468b      	mov	fp, r1
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	f7f9 fb13 	bl	8000b58 <__aeabi_d2iz>
 8007532:	4606      	mov	r6, r0
 8007534:	f7f8 fff6 	bl	8000524 <__aeabi_i2d>
 8007538:	3630      	adds	r6, #48	; 0x30
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f8 fea1 	bl	8000288 <__aeabi_dsub>
 8007546:	f805 6b01 	strb.w	r6, [r5], #1
 800754a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754c:	429d      	cmp	r5, r3
 800754e:	4680      	mov	r8, r0
 8007550:	4689      	mov	r9, r1
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	d124      	bne.n	80075a2 <_dtoa_r+0x5da>
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <_dtoa_r+0x600>)
 800755a:	4650      	mov	r0, sl
 800755c:	4659      	mov	r1, fp
 800755e:	f7f8 fe95 	bl	800028c <__adddf3>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d174      	bne.n	800765c <_dtoa_r+0x694>
 8007572:	4652      	mov	r2, sl
 8007574:	465b      	mov	r3, fp
 8007576:	4914      	ldr	r1, [pc, #80]	; (80075c8 <_dtoa_r+0x600>)
 8007578:	2000      	movs	r0, #0
 800757a:	f7f8 fe85 	bl	8000288 <__aeabi_dsub>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 faa9 	bl	8000adc <__aeabi_dcmplt>
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f af35 	beq.w	80073fa <_dtoa_r+0x432>
 8007590:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007592:	1e6b      	subs	r3, r5, #1
 8007594:	930f      	str	r3, [sp, #60]	; 0x3c
 8007596:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800759a:	2b30      	cmp	r3, #48	; 0x30
 800759c:	d0f8      	beq.n	8007590 <_dtoa_r+0x5c8>
 800759e:	9700      	str	r7, [sp, #0]
 80075a0:	e04a      	b.n	8007638 <_dtoa_r+0x670>
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <_dtoa_r+0x5f4>)
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	4680      	mov	r8, r0
 80075aa:	4689      	mov	r9, r1
 80075ac:	e7bd      	b.n	800752a <_dtoa_r+0x562>
 80075ae:	bf00      	nop
 80075b0:	0800e8a8 	.word	0x0800e8a8
 80075b4:	0800e880 	.word	0x0800e880
 80075b8:	3ff00000 	.word	0x3ff00000
 80075bc:	40240000 	.word	0x40240000
 80075c0:	401c0000 	.word	0x401c0000
 80075c4:	40140000 	.word	0x40140000
 80075c8:	3fe00000 	.word	0x3fe00000
 80075cc:	9d01      	ldr	r5, [sp, #4]
 80075ce:	4656      	mov	r6, sl
 80075d0:	465f      	mov	r7, fp
 80075d2:	4642      	mov	r2, r8
 80075d4:	464b      	mov	r3, r9
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f9 f937 	bl	800084c <__aeabi_ddiv>
 80075de:	f7f9 fabb 	bl	8000b58 <__aeabi_d2iz>
 80075e2:	4682      	mov	sl, r0
 80075e4:	f7f8 ff9e 	bl	8000524 <__aeabi_i2d>
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	f7f9 f804 	bl	80005f8 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80075fc:	f7f8 fe44 	bl	8000288 <__aeabi_dsub>
 8007600:	f805 6b01 	strb.w	r6, [r5], #1
 8007604:	9e01      	ldr	r6, [sp, #4]
 8007606:	9f03      	ldr	r7, [sp, #12]
 8007608:	1bae      	subs	r6, r5, r6
 800760a:	42b7      	cmp	r7, r6
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	d135      	bne.n	800767e <_dtoa_r+0x6b6>
 8007612:	f7f8 fe3b 	bl	800028c <__adddf3>
 8007616:	4642      	mov	r2, r8
 8007618:	464b      	mov	r3, r9
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	f7f9 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 8007622:	b9d0      	cbnz	r0, 800765a <_dtoa_r+0x692>
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f9 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007630:	b110      	cbz	r0, 8007638 <_dtoa_r+0x670>
 8007632:	f01a 0f01 	tst.w	sl, #1
 8007636:	d110      	bne.n	800765a <_dtoa_r+0x692>
 8007638:	4620      	mov	r0, r4
 800763a:	ee18 1a10 	vmov	r1, s16
 800763e:	f000 fde0 	bl	8008202 <_Bfree>
 8007642:	2300      	movs	r3, #0
 8007644:	9800      	ldr	r0, [sp, #0]
 8007646:	702b      	strb	r3, [r5, #0]
 8007648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800764a:	3001      	adds	r0, #1
 800764c:	6018      	str	r0, [r3, #0]
 800764e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007650:	2b00      	cmp	r3, #0
 8007652:	f43f acf2 	beq.w	800703a <_dtoa_r+0x72>
 8007656:	601d      	str	r5, [r3, #0]
 8007658:	e4ef      	b.n	800703a <_dtoa_r+0x72>
 800765a:	9f00      	ldr	r7, [sp, #0]
 800765c:	462b      	mov	r3, r5
 800765e:	461d      	mov	r5, r3
 8007660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007664:	2a39      	cmp	r2, #57	; 0x39
 8007666:	d106      	bne.n	8007676 <_dtoa_r+0x6ae>
 8007668:	9a01      	ldr	r2, [sp, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d1f7      	bne.n	800765e <_dtoa_r+0x696>
 800766e:	9901      	ldr	r1, [sp, #4]
 8007670:	2230      	movs	r2, #48	; 0x30
 8007672:	3701      	adds	r7, #1
 8007674:	700a      	strb	r2, [r1, #0]
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	3201      	adds	r2, #1
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e78f      	b.n	800759e <_dtoa_r+0x5d6>
 800767e:	4ba6      	ldr	r3, [pc, #664]	; (8007918 <_dtoa_r+0x950>)
 8007680:	2200      	movs	r2, #0
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	2200      	movs	r2, #0
 8007688:	2300      	movs	r3, #0
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	f7f9 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007692:	2800      	cmp	r0, #0
 8007694:	d09d      	beq.n	80075d2 <_dtoa_r+0x60a>
 8007696:	e7cf      	b.n	8007638 <_dtoa_r+0x670>
 8007698:	9a08      	ldr	r2, [sp, #32]
 800769a:	2a00      	cmp	r2, #0
 800769c:	f000 80d7 	beq.w	800784e <_dtoa_r+0x886>
 80076a0:	9a06      	ldr	r2, [sp, #24]
 80076a2:	2a01      	cmp	r2, #1
 80076a4:	f300 80ba 	bgt.w	800781c <_dtoa_r+0x854>
 80076a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	f000 80b2 	beq.w	8007814 <_dtoa_r+0x84c>
 80076b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076b4:	9e07      	ldr	r6, [sp, #28]
 80076b6:	9d04      	ldr	r5, [sp, #16]
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	441a      	add	r2, r3
 80076bc:	9204      	str	r2, [sp, #16]
 80076be:	9a05      	ldr	r2, [sp, #20]
 80076c0:	2101      	movs	r1, #1
 80076c2:	441a      	add	r2, r3
 80076c4:	4620      	mov	r0, r4
 80076c6:	9205      	str	r2, [sp, #20]
 80076c8:	f000 fe3a 	bl	8008340 <__i2b>
 80076cc:	4607      	mov	r7, r0
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	dd0c      	ble.n	80076ec <_dtoa_r+0x724>
 80076d2:	9b05      	ldr	r3, [sp, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd09      	ble.n	80076ec <_dtoa_r+0x724>
 80076d8:	42ab      	cmp	r3, r5
 80076da:	9a04      	ldr	r2, [sp, #16]
 80076dc:	bfa8      	it	ge
 80076de:	462b      	movge	r3, r5
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	9204      	str	r2, [sp, #16]
 80076e4:	9a05      	ldr	r2, [sp, #20]
 80076e6:	1aed      	subs	r5, r5, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	9305      	str	r3, [sp, #20]
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	b31b      	cbz	r3, 8007738 <_dtoa_r+0x770>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80af 	beq.w	8007856 <_dtoa_r+0x88e>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	dd13      	ble.n	8007724 <_dtoa_r+0x75c>
 80076fc:	4639      	mov	r1, r7
 80076fe:	4632      	mov	r2, r6
 8007700:	4620      	mov	r0, r4
 8007702:	f000 fedd 	bl	80084c0 <__pow5mult>
 8007706:	ee18 2a10 	vmov	r2, s16
 800770a:	4601      	mov	r1, r0
 800770c:	4607      	mov	r7, r0
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fe2c 	bl	800836c <__multiply>
 8007714:	ee18 1a10 	vmov	r1, s16
 8007718:	4680      	mov	r8, r0
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fd71 	bl	8008202 <_Bfree>
 8007720:	ee08 8a10 	vmov	s16, r8
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	1b9a      	subs	r2, r3, r6
 8007728:	d006      	beq.n	8007738 <_dtoa_r+0x770>
 800772a:	ee18 1a10 	vmov	r1, s16
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fec6 	bl	80084c0 <__pow5mult>
 8007734:	ee08 0a10 	vmov	s16, r0
 8007738:	2101      	movs	r1, #1
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fe00 	bl	8008340 <__i2b>
 8007740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	4606      	mov	r6, r0
 8007746:	f340 8088 	ble.w	800785a <_dtoa_r+0x892>
 800774a:	461a      	mov	r2, r3
 800774c:	4601      	mov	r1, r0
 800774e:	4620      	mov	r0, r4
 8007750:	f000 feb6 	bl	80084c0 <__pow5mult>
 8007754:	9b06      	ldr	r3, [sp, #24]
 8007756:	2b01      	cmp	r3, #1
 8007758:	4606      	mov	r6, r0
 800775a:	f340 8081 	ble.w	8007860 <_dtoa_r+0x898>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	6933      	ldr	r3, [r6, #16]
 8007764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007768:	6918      	ldr	r0, [r3, #16]
 800776a:	f000 fd99 	bl	80082a0 <__hi0bits>
 800776e:	f1c0 0020 	rsb	r0, r0, #32
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	4418      	add	r0, r3
 8007776:	f010 001f 	ands.w	r0, r0, #31
 800777a:	f000 8092 	beq.w	80078a2 <_dtoa_r+0x8da>
 800777e:	f1c0 0320 	rsb	r3, r0, #32
 8007782:	2b04      	cmp	r3, #4
 8007784:	f340 808a 	ble.w	800789c <_dtoa_r+0x8d4>
 8007788:	f1c0 001c 	rsb	r0, r0, #28
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	4403      	add	r3, r0
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	4403      	add	r3, r0
 8007796:	4405      	add	r5, r0
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd07      	ble.n	80077b0 <_dtoa_r+0x7e8>
 80077a0:	ee18 1a10 	vmov	r1, s16
 80077a4:	461a      	mov	r2, r3
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 feca 	bl	8008540 <__lshift>
 80077ac:	ee08 0a10 	vmov	s16, r0
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	dd05      	ble.n	80077c2 <_dtoa_r+0x7fa>
 80077b6:	4631      	mov	r1, r6
 80077b8:	461a      	mov	r2, r3
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fec0 	bl	8008540 <__lshift>
 80077c0:	4606      	mov	r6, r0
 80077c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d06e      	beq.n	80078a6 <_dtoa_r+0x8de>
 80077c8:	ee18 0a10 	vmov	r0, s16
 80077cc:	4631      	mov	r1, r6
 80077ce:	f000 ff27 	bl	8008620 <__mcmp>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	da67      	bge.n	80078a6 <_dtoa_r+0x8de>
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	3b01      	subs	r3, #1
 80077da:	ee18 1a10 	vmov	r1, s16
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	220a      	movs	r2, #10
 80077e2:	2300      	movs	r3, #0
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fd15 	bl	8008214 <__multadd>
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	ee08 0a10 	vmov	s16, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 81b0 	beq.w	8007b56 <_dtoa_r+0xb8e>
 80077f6:	2300      	movs	r3, #0
 80077f8:	4639      	mov	r1, r7
 80077fa:	220a      	movs	r2, #10
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fd09 	bl	8008214 <__multadd>
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	4607      	mov	r7, r0
 8007808:	f300 808e 	bgt.w	8007928 <_dtoa_r+0x960>
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	2b02      	cmp	r3, #2
 8007810:	dc51      	bgt.n	80078b6 <_dtoa_r+0x8ee>
 8007812:	e089      	b.n	8007928 <_dtoa_r+0x960>
 8007814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800781a:	e74b      	b.n	80076b4 <_dtoa_r+0x6ec>
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	1e5e      	subs	r6, r3, #1
 8007820:	9b07      	ldr	r3, [sp, #28]
 8007822:	42b3      	cmp	r3, r6
 8007824:	bfbf      	itttt	lt
 8007826:	9b07      	ldrlt	r3, [sp, #28]
 8007828:	9607      	strlt	r6, [sp, #28]
 800782a:	1af2      	sublt	r2, r6, r3
 800782c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800782e:	bfb6      	itet	lt
 8007830:	189b      	addlt	r3, r3, r2
 8007832:	1b9e      	subge	r6, r3, r6
 8007834:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	bfb8      	it	lt
 800783a:	2600      	movlt	r6, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfb7      	itett	lt
 8007840:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007844:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007848:	1a9d      	sublt	r5, r3, r2
 800784a:	2300      	movlt	r3, #0
 800784c:	e734      	b.n	80076b8 <_dtoa_r+0x6f0>
 800784e:	9e07      	ldr	r6, [sp, #28]
 8007850:	9d04      	ldr	r5, [sp, #16]
 8007852:	9f08      	ldr	r7, [sp, #32]
 8007854:	e73b      	b.n	80076ce <_dtoa_r+0x706>
 8007856:	9a07      	ldr	r2, [sp, #28]
 8007858:	e767      	b.n	800772a <_dtoa_r+0x762>
 800785a:	9b06      	ldr	r3, [sp, #24]
 800785c:	2b01      	cmp	r3, #1
 800785e:	dc18      	bgt.n	8007892 <_dtoa_r+0x8ca>
 8007860:	f1ba 0f00 	cmp.w	sl, #0
 8007864:	d115      	bne.n	8007892 <_dtoa_r+0x8ca>
 8007866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800786a:	b993      	cbnz	r3, 8007892 <_dtoa_r+0x8ca>
 800786c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007870:	0d1b      	lsrs	r3, r3, #20
 8007872:	051b      	lsls	r3, r3, #20
 8007874:	b183      	cbz	r3, 8007898 <_dtoa_r+0x8d0>
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	3301      	adds	r3, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	3301      	adds	r3, #1
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	f04f 0801 	mov.w	r8, #1
 8007886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007888:	2b00      	cmp	r3, #0
 800788a:	f47f af6a 	bne.w	8007762 <_dtoa_r+0x79a>
 800788e:	2001      	movs	r0, #1
 8007890:	e76f      	b.n	8007772 <_dtoa_r+0x7aa>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	e7f6      	b.n	8007886 <_dtoa_r+0x8be>
 8007898:	4698      	mov	r8, r3
 800789a:	e7f4      	b.n	8007886 <_dtoa_r+0x8be>
 800789c:	f43f af7d 	beq.w	800779a <_dtoa_r+0x7d2>
 80078a0:	4618      	mov	r0, r3
 80078a2:	301c      	adds	r0, #28
 80078a4:	e772      	b.n	800778c <_dtoa_r+0x7c4>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc37      	bgt.n	800791c <_dtoa_r+0x954>
 80078ac:	9b06      	ldr	r3, [sp, #24]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	dd34      	ble.n	800791c <_dtoa_r+0x954>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	9302      	str	r3, [sp, #8]
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	b96b      	cbnz	r3, 80078d6 <_dtoa_r+0x90e>
 80078ba:	4631      	mov	r1, r6
 80078bc:	2205      	movs	r2, #5
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 fca8 	bl	8008214 <__multadd>
 80078c4:	4601      	mov	r1, r0
 80078c6:	4606      	mov	r6, r0
 80078c8:	ee18 0a10 	vmov	r0, s16
 80078cc:	f000 fea8 	bl	8008620 <__mcmp>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f73f adba 	bgt.w	800744a <_dtoa_r+0x482>
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	9d01      	ldr	r5, [sp, #4]
 80078da:	43db      	mvns	r3, r3
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	4631      	mov	r1, r6
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fc8c 	bl	8008202 <_Bfree>
 80078ea:	2f00      	cmp	r7, #0
 80078ec:	f43f aea4 	beq.w	8007638 <_dtoa_r+0x670>
 80078f0:	f1b8 0f00 	cmp.w	r8, #0
 80078f4:	d005      	beq.n	8007902 <_dtoa_r+0x93a>
 80078f6:	45b8      	cmp	r8, r7
 80078f8:	d003      	beq.n	8007902 <_dtoa_r+0x93a>
 80078fa:	4641      	mov	r1, r8
 80078fc:	4620      	mov	r0, r4
 80078fe:	f000 fc80 	bl	8008202 <_Bfree>
 8007902:	4639      	mov	r1, r7
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fc7c 	bl	8008202 <_Bfree>
 800790a:	e695      	b.n	8007638 <_dtoa_r+0x670>
 800790c:	2600      	movs	r6, #0
 800790e:	4637      	mov	r7, r6
 8007910:	e7e1      	b.n	80078d6 <_dtoa_r+0x90e>
 8007912:	9700      	str	r7, [sp, #0]
 8007914:	4637      	mov	r7, r6
 8007916:	e598      	b.n	800744a <_dtoa_r+0x482>
 8007918:	40240000 	.word	0x40240000
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80c9 	beq.w	8007ab6 <_dtoa_r+0xaee>
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	9302      	str	r3, [sp, #8]
 8007928:	2d00      	cmp	r5, #0
 800792a:	dd05      	ble.n	8007938 <_dtoa_r+0x970>
 800792c:	4639      	mov	r1, r7
 800792e:	462a      	mov	r2, r5
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fe05 	bl	8008540 <__lshift>
 8007936:	4607      	mov	r7, r0
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	d05a      	beq.n	80079f4 <_dtoa_r+0xa2c>
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fc39 	bl	80081b8 <_Balloc>
 8007946:	4605      	mov	r5, r0
 8007948:	b920      	cbnz	r0, 8007954 <_dtoa_r+0x98c>
 800794a:	4b87      	ldr	r3, [pc, #540]	; (8007b68 <_dtoa_r+0xba0>)
 800794c:	4602      	mov	r2, r0
 800794e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007952:	e477      	b.n	8007244 <_dtoa_r+0x27c>
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	3202      	adds	r2, #2
 8007958:	0092      	lsls	r2, r2, #2
 800795a:	f107 010c 	add.w	r1, r7, #12
 800795e:	300c      	adds	r0, #12
 8007960:	f7fd fe5c 	bl	800561c <memcpy>
 8007964:	2201      	movs	r2, #1
 8007966:	4629      	mov	r1, r5
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fde9 	bl	8008540 <__lshift>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	f103 0901 	add.w	r9, r3, #1
 8007974:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007978:	4413      	add	r3, r2
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	f00a 0301 	and.w	r3, sl, #1
 8007980:	46b8      	mov	r8, r7
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	4607      	mov	r7, r0
 8007986:	4631      	mov	r1, r6
 8007988:	ee18 0a10 	vmov	r0, s16
 800798c:	f7ff fa8e 	bl	8006eac <quorem>
 8007990:	4641      	mov	r1, r8
 8007992:	9002      	str	r0, [sp, #8]
 8007994:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007998:	ee18 0a10 	vmov	r0, s16
 800799c:	f000 fe40 	bl	8008620 <__mcmp>
 80079a0:	463a      	mov	r2, r7
 80079a2:	9003      	str	r0, [sp, #12]
 80079a4:	4631      	mov	r1, r6
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 fe56 	bl	8008658 <__mdiff>
 80079ac:	68c2      	ldr	r2, [r0, #12]
 80079ae:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80079b2:	4605      	mov	r5, r0
 80079b4:	bb02      	cbnz	r2, 80079f8 <_dtoa_r+0xa30>
 80079b6:	4601      	mov	r1, r0
 80079b8:	ee18 0a10 	vmov	r0, s16
 80079bc:	f000 fe30 	bl	8008620 <__mcmp>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4629      	mov	r1, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	9207      	str	r2, [sp, #28]
 80079c8:	f000 fc1b 	bl	8008202 <_Bfree>
 80079cc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80079d0:	ea43 0102 	orr.w	r1, r3, r2
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	430b      	orrs	r3, r1
 80079d8:	464d      	mov	r5, r9
 80079da:	d10f      	bne.n	80079fc <_dtoa_r+0xa34>
 80079dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079e0:	d02a      	beq.n	8007a38 <_dtoa_r+0xa70>
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd02      	ble.n	80079ee <_dtoa_r+0xa26>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80079ee:	f88b a000 	strb.w	sl, [fp]
 80079f2:	e776      	b.n	80078e2 <_dtoa_r+0x91a>
 80079f4:	4638      	mov	r0, r7
 80079f6:	e7ba      	b.n	800796e <_dtoa_r+0x9a6>
 80079f8:	2201      	movs	r2, #1
 80079fa:	e7e2      	b.n	80079c2 <_dtoa_r+0x9fa>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	db04      	blt.n	8007a0c <_dtoa_r+0xa44>
 8007a02:	9906      	ldr	r1, [sp, #24]
 8007a04:	430b      	orrs	r3, r1
 8007a06:	9904      	ldr	r1, [sp, #16]
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	d122      	bne.n	8007a52 <_dtoa_r+0xa8a>
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	ddee      	ble.n	80079ee <_dtoa_r+0xa26>
 8007a10:	ee18 1a10 	vmov	r1, s16
 8007a14:	2201      	movs	r2, #1
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fd92 	bl	8008540 <__lshift>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	ee08 0a10 	vmov	s16, r0
 8007a22:	f000 fdfd 	bl	8008620 <__mcmp>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	dc03      	bgt.n	8007a32 <_dtoa_r+0xa6a>
 8007a2a:	d1e0      	bne.n	80079ee <_dtoa_r+0xa26>
 8007a2c:	f01a 0f01 	tst.w	sl, #1
 8007a30:	d0dd      	beq.n	80079ee <_dtoa_r+0xa26>
 8007a32:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a36:	d1d7      	bne.n	80079e8 <_dtoa_r+0xa20>
 8007a38:	2339      	movs	r3, #57	; 0x39
 8007a3a:	f88b 3000 	strb.w	r3, [fp]
 8007a3e:	462b      	mov	r3, r5
 8007a40:	461d      	mov	r5, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a48:	2a39      	cmp	r2, #57	; 0x39
 8007a4a:	d071      	beq.n	8007b30 <_dtoa_r+0xb68>
 8007a4c:	3201      	adds	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e747      	b.n	80078e2 <_dtoa_r+0x91a>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	dd07      	ble.n	8007a66 <_dtoa_r+0xa9e>
 8007a56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a5a:	d0ed      	beq.n	8007a38 <_dtoa_r+0xa70>
 8007a5c:	f10a 0301 	add.w	r3, sl, #1
 8007a60:	f88b 3000 	strb.w	r3, [fp]
 8007a64:	e73d      	b.n	80078e2 <_dtoa_r+0x91a>
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a6c:	4599      	cmp	r9, r3
 8007a6e:	d047      	beq.n	8007b00 <_dtoa_r+0xb38>
 8007a70:	ee18 1a10 	vmov	r1, s16
 8007a74:	2300      	movs	r3, #0
 8007a76:	220a      	movs	r2, #10
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 fbcb 	bl	8008214 <__multadd>
 8007a7e:	45b8      	cmp	r8, r7
 8007a80:	ee08 0a10 	vmov	s16, r0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	f04f 020a 	mov.w	r2, #10
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	4620      	mov	r0, r4
 8007a90:	d106      	bne.n	8007aa0 <_dtoa_r+0xad8>
 8007a92:	f000 fbbf 	bl	8008214 <__multadd>
 8007a96:	4680      	mov	r8, r0
 8007a98:	4607      	mov	r7, r0
 8007a9a:	f109 0901 	add.w	r9, r9, #1
 8007a9e:	e772      	b.n	8007986 <_dtoa_r+0x9be>
 8007aa0:	f000 fbb8 	bl	8008214 <__multadd>
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	220a      	movs	r2, #10
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fbb1 	bl	8008214 <__multadd>
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	e7f1      	b.n	8007a9a <_dtoa_r+0xad2>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	9d01      	ldr	r5, [sp, #4]
 8007abc:	ee18 0a10 	vmov	r0, s16
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	f7ff f9f3 	bl	8006eac <quorem>
 8007ac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	f805 ab01 	strb.w	sl, [r5], #1
 8007ad0:	1aea      	subs	r2, r5, r3
 8007ad2:	9b02      	ldr	r3, [sp, #8]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	dd09      	ble.n	8007aec <_dtoa_r+0xb24>
 8007ad8:	ee18 1a10 	vmov	r1, s16
 8007adc:	2300      	movs	r3, #0
 8007ade:	220a      	movs	r2, #10
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fb97 	bl	8008214 <__multadd>
 8007ae6:	ee08 0a10 	vmov	s16, r0
 8007aea:	e7e7      	b.n	8007abc <_dtoa_r+0xaf4>
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfc8      	it	gt
 8007af2:	461d      	movgt	r5, r3
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	bfd8      	it	le
 8007af8:	2501      	movle	r5, #1
 8007afa:	441d      	add	r5, r3
 8007afc:	f04f 0800 	mov.w	r8, #0
 8007b00:	ee18 1a10 	vmov	r1, s16
 8007b04:	2201      	movs	r2, #1
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fd1a 	bl	8008540 <__lshift>
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	ee08 0a10 	vmov	s16, r0
 8007b12:	f000 fd85 	bl	8008620 <__mcmp>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	dc91      	bgt.n	8007a3e <_dtoa_r+0xa76>
 8007b1a:	d102      	bne.n	8007b22 <_dtoa_r+0xb5a>
 8007b1c:	f01a 0f01 	tst.w	sl, #1
 8007b20:	d18d      	bne.n	8007a3e <_dtoa_r+0xa76>
 8007b22:	462b      	mov	r3, r5
 8007b24:	461d      	mov	r5, r3
 8007b26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2a:	2a30      	cmp	r2, #48	; 0x30
 8007b2c:	d0fa      	beq.n	8007b24 <_dtoa_r+0xb5c>
 8007b2e:	e6d8      	b.n	80078e2 <_dtoa_r+0x91a>
 8007b30:	9a01      	ldr	r2, [sp, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d184      	bne.n	8007a40 <_dtoa_r+0xa78>
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2331      	movs	r3, #49	; 0x31
 8007b3e:	7013      	strb	r3, [r2, #0]
 8007b40:	e6cf      	b.n	80078e2 <_dtoa_r+0x91a>
 8007b42:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <_dtoa_r+0xba4>)
 8007b44:	f7ff ba97 	b.w	8007076 <_dtoa_r+0xae>
 8007b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f47f aa7b 	bne.w	8007046 <_dtoa_r+0x7e>
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <_dtoa_r+0xba8>)
 8007b52:	f7ff ba90 	b.w	8007076 <_dtoa_r+0xae>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dcae      	bgt.n	8007aba <_dtoa_r+0xaf2>
 8007b5c:	9b06      	ldr	r3, [sp, #24]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	f73f aea9 	bgt.w	80078b6 <_dtoa_r+0x8ee>
 8007b64:	e7a9      	b.n	8007aba <_dtoa_r+0xaf2>
 8007b66:	bf00      	nop
 8007b68:	0800e7b5 	.word	0x0800e7b5
 8007b6c:	0800e786 	.word	0x0800e786
 8007b70:	0800e7ac 	.word	0x0800e7ac

08007b74 <std>:
 8007b74:	2300      	movs	r3, #0
 8007b76:	b510      	push	{r4, lr}
 8007b78:	4604      	mov	r4, r0
 8007b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b82:	6083      	str	r3, [r0, #8]
 8007b84:	8181      	strh	r1, [r0, #12]
 8007b86:	6643      	str	r3, [r0, #100]	; 0x64
 8007b88:	81c2      	strh	r2, [r0, #14]
 8007b8a:	6183      	str	r3, [r0, #24]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	2208      	movs	r2, #8
 8007b90:	305c      	adds	r0, #92	; 0x5c
 8007b92:	f7fd fd51 	bl	8005638 <memset>
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <std+0x40>)
 8007b98:	6223      	str	r3, [r4, #32]
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <std+0x44>)
 8007b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <std+0x48>)
 8007ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <std+0x4c>)
 8007ba4:	61e4      	str	r4, [r4, #28]
 8007ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ba8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f000 bae4 	b.w	800817c <__retarget_lock_init_recursive>
 8007bb4:	08008895 	.word	0x08008895
 8007bb8:	080088b7 	.word	0x080088b7
 8007bbc:	080088ef 	.word	0x080088ef
 8007bc0:	08008913 	.word	0x08008913

08007bc4 <_cleanup_r>:
 8007bc4:	4901      	ldr	r1, [pc, #4]	; (8007bcc <_cleanup_r+0x8>)
 8007bc6:	f000 bab5 	b.w	8008134 <_fwalk_reent>
 8007bca:	bf00      	nop
 8007bcc:	08008c59 	.word	0x08008c59

08007bd0 <__sfp_lock_acquire>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__sfp_lock_acquire+0x8>)
 8007bd2:	f000 bad5 	b.w	8008180 <__retarget_lock_acquire_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	200015a2 	.word	0x200015a2

08007bdc <__sfp_lock_release>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_release+0x8>)
 8007bde:	f000 bad0 	b.w	8008182 <__retarget_lock_release_recursive>
 8007be2:	bf00      	nop
 8007be4:	200015a2 	.word	0x200015a2

08007be8 <__sinit_lock_acquire>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sinit_lock_acquire+0x8>)
 8007bea:	f000 bac9 	b.w	8008180 <__retarget_lock_acquire_recursive>
 8007bee:	bf00      	nop
 8007bf0:	200015a3 	.word	0x200015a3

08007bf4 <__sinit_lock_release>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_release+0x8>)
 8007bf6:	f000 bac4 	b.w	8008182 <__retarget_lock_release_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	200015a3 	.word	0x200015a3

08007c00 <__sinit>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4604      	mov	r4, r0
 8007c04:	f7ff fff0 	bl	8007be8 <__sinit_lock_acquire>
 8007c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007c0a:	b11a      	cbz	r2, 8007c14 <__sinit+0x14>
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	f7ff bff0 	b.w	8007bf4 <__sinit_lock_release>
 8007c14:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <__sinit+0x4c>)
 8007c16:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007c18:	2303      	movs	r3, #3
 8007c1a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8007c1e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8007c22:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8007c26:	6860      	ldr	r0, [r4, #4]
 8007c28:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8007c2c:	2104      	movs	r1, #4
 8007c2e:	f7ff ffa1 	bl	8007b74 <std>
 8007c32:	68a0      	ldr	r0, [r4, #8]
 8007c34:	2201      	movs	r2, #1
 8007c36:	2109      	movs	r1, #9
 8007c38:	f7ff ff9c 	bl	8007b74 <std>
 8007c3c:	68e0      	ldr	r0, [r4, #12]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	2112      	movs	r1, #18
 8007c42:	f7ff ff97 	bl	8007b74 <std>
 8007c46:	2301      	movs	r3, #1
 8007c48:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c4a:	e7df      	b.n	8007c0c <__sinit+0xc>
 8007c4c:	08007bc5 	.word	0x08007bc5

08007c50 <__libc_fini_array>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <__libc_fini_array+0x20>)
 8007c54:	4c07      	ldr	r4, [pc, #28]	; (8007c74 <__libc_fini_array+0x24>)
 8007c56:	1b64      	subs	r4, r4, r5
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	b91c      	cbnz	r4, 8007c64 <__libc_fini_array+0x14>
 8007c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c60:	f002 b858 	b.w	8009d14 <_fini>
 8007c64:	3c01      	subs	r4, #1
 8007c66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007c6a:	4798      	blx	r3
 8007c6c:	e7f5      	b.n	8007c5a <__libc_fini_array+0xa>
 8007c6e:	bf00      	nop
 8007c70:	0800eaf4 	.word	0x0800eaf4
 8007c74:	0800eaf8 	.word	0x0800eaf8

08007c78 <_malloc_trim_r>:
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	2008      	movs	r0, #8
 8007c80:	460c      	mov	r4, r1
 8007c82:	f7ff f8f5 	bl	8006e70 <sysconf>
 8007c86:	4f23      	ldr	r7, [pc, #140]	; (8007d14 <_malloc_trim_r+0x9c>)
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7fd fcdc 	bl	8005648 <__malloc_lock>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	685d      	ldr	r5, [r3, #4]
 8007c94:	f025 0503 	bic.w	r5, r5, #3
 8007c98:	1b2c      	subs	r4, r5, r4
 8007c9a:	3c11      	subs	r4, #17
 8007c9c:	4444      	add	r4, r8
 8007c9e:	fbb4 f4f8 	udiv	r4, r4, r8
 8007ca2:	3c01      	subs	r4, #1
 8007ca4:	fb08 f404 	mul.w	r4, r8, r4
 8007ca8:	45a0      	cmp	r8, r4
 8007caa:	dd05      	ble.n	8007cb8 <_malloc_trim_r+0x40>
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7fd fcd1 	bl	8005654 <__malloc_unlock>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7fd fec2 	bl	8005a44 <_sbrk_r>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	442b      	add	r3, r5
 8007cc4:	4298      	cmp	r0, r3
 8007cc6:	d1f1      	bne.n	8007cac <_malloc_trim_r+0x34>
 8007cc8:	4261      	negs	r1, r4
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7fd feba 	bl	8005a44 <_sbrk_r>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d110      	bne.n	8007cf6 <_malloc_trim_r+0x7e>
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7fd feb4 	bl	8005a44 <_sbrk_r>
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	1a83      	subs	r3, r0, r2
 8007ce0:	2b0f      	cmp	r3, #15
 8007ce2:	dde3      	ble.n	8007cac <_malloc_trim_r+0x34>
 8007ce4:	490c      	ldr	r1, [pc, #48]	; (8007d18 <_malloc_trim_r+0xa0>)
 8007ce6:	6809      	ldr	r1, [r1, #0]
 8007ce8:	1a40      	subs	r0, r0, r1
 8007cea:	490c      	ldr	r1, [pc, #48]	; (8007d1c <_malloc_trim_r+0xa4>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6008      	str	r0, [r1, #0]
 8007cf2:	6053      	str	r3, [r2, #4]
 8007cf4:	e7da      	b.n	8007cac <_malloc_trim_r+0x34>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4a08      	ldr	r2, [pc, #32]	; (8007d1c <_malloc_trim_r+0xa4>)
 8007cfa:	1b2d      	subs	r5, r5, r4
 8007cfc:	f045 0501 	orr.w	r5, r5, #1
 8007d00:	605d      	str	r5, [r3, #4]
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	4630      	mov	r0, r6
 8007d06:	1b1b      	subs	r3, r3, r4
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	f7fd fca3 	bl	8005654 <__malloc_unlock>
 8007d0e:	2001      	movs	r0, #1
 8007d10:	e7d0      	b.n	8007cb4 <_malloc_trim_r+0x3c>
 8007d12:	bf00      	nop
 8007d14:	20000b68 	.word	0x20000b68
 8007d18:	20000f70 	.word	0x20000f70
 8007d1c:	2000156c 	.word	0x2000156c

08007d20 <_free_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	4605      	mov	r5, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	2900      	cmp	r1, #0
 8007d28:	f000 80b1 	beq.w	8007e8e <_free_r+0x16e>
 8007d2c:	f7fd fc8c 	bl	8005648 <__malloc_lock>
 8007d30:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007d34:	4856      	ldr	r0, [pc, #344]	; (8007e90 <_free_r+0x170>)
 8007d36:	f022 0401 	bic.w	r4, r2, #1
 8007d3a:	f1a7 0308 	sub.w	r3, r7, #8
 8007d3e:	eb03 0c04 	add.w	ip, r3, r4
 8007d42:	6881      	ldr	r1, [r0, #8]
 8007d44:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007d48:	4561      	cmp	r1, ip
 8007d4a:	f026 0603 	bic.w	r6, r6, #3
 8007d4e:	f002 0201 	and.w	r2, r2, #1
 8007d52:	d11b      	bne.n	8007d8c <_free_r+0x6c>
 8007d54:	4434      	add	r4, r6
 8007d56:	b93a      	cbnz	r2, 8007d68 <_free_r+0x48>
 8007d58:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	4414      	add	r4, r2
 8007d60:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007d64:	60ca      	str	r2, [r1, #12]
 8007d66:	6091      	str	r1, [r2, #8]
 8007d68:	f044 0201 	orr.w	r2, r4, #1
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	6083      	str	r3, [r0, #8]
 8007d70:	4b48      	ldr	r3, [pc, #288]	; (8007e94 <_free_r+0x174>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	d804      	bhi.n	8007d82 <_free_r+0x62>
 8007d78:	4b47      	ldr	r3, [pc, #284]	; (8007e98 <_free_r+0x178>)
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	6819      	ldr	r1, [r3, #0]
 8007d7e:	f7ff ff7b 	bl	8007c78 <_malloc_trim_r>
 8007d82:	4628      	mov	r0, r5
 8007d84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d88:	f7fd bc64 	b.w	8005654 <__malloc_unlock>
 8007d8c:	f8cc 6004 	str.w	r6, [ip, #4]
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d138      	bne.n	8007e06 <_free_r+0xe6>
 8007d94:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007d98:	1a5b      	subs	r3, r3, r1
 8007d9a:	440c      	add	r4, r1
 8007d9c:	6899      	ldr	r1, [r3, #8]
 8007d9e:	f100 0708 	add.w	r7, r0, #8
 8007da2:	42b9      	cmp	r1, r7
 8007da4:	d031      	beq.n	8007e0a <_free_r+0xea>
 8007da6:	68df      	ldr	r7, [r3, #12]
 8007da8:	60cf      	str	r7, [r1, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	eb0c 0106 	add.w	r1, ip, r6
 8007db0:	6849      	ldr	r1, [r1, #4]
 8007db2:	07c9      	lsls	r1, r1, #31
 8007db4:	d40b      	bmi.n	8007dce <_free_r+0xae>
 8007db6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007dba:	4434      	add	r4, r6
 8007dbc:	bb3a      	cbnz	r2, 8007e0e <_free_r+0xee>
 8007dbe:	4e37      	ldr	r6, [pc, #220]	; (8007e9c <_free_r+0x17c>)
 8007dc0:	42b1      	cmp	r1, r6
 8007dc2:	d124      	bne.n	8007e0e <_free_r+0xee>
 8007dc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f044 0101 	orr.w	r1, r4, #1
 8007dd2:	6059      	str	r1, [r3, #4]
 8007dd4:	511c      	str	r4, [r3, r4]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	d1d3      	bne.n	8007d82 <_free_r+0x62>
 8007dda:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007dde:	d21b      	bcs.n	8007e18 <_free_r+0xf8>
 8007de0:	0961      	lsrs	r1, r4, #5
 8007de2:	08e2      	lsrs	r2, r4, #3
 8007de4:	2401      	movs	r4, #1
 8007de6:	408c      	lsls	r4, r1
 8007de8:	6841      	ldr	r1, [r0, #4]
 8007dea:	3201      	adds	r2, #1
 8007dec:	430c      	orrs	r4, r1
 8007dee:	6044      	str	r4, [r0, #4]
 8007df0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007df4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007df8:	3908      	subs	r1, #8
 8007dfa:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007dfe:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007e02:	60e3      	str	r3, [r4, #12]
 8007e04:	e7bd      	b.n	8007d82 <_free_r+0x62>
 8007e06:	2200      	movs	r2, #0
 8007e08:	e7d0      	b.n	8007dac <_free_r+0x8c>
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	e7ce      	b.n	8007dac <_free_r+0x8c>
 8007e0e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007e12:	60ce      	str	r6, [r1, #12]
 8007e14:	60b1      	str	r1, [r6, #8]
 8007e16:	e7da      	b.n	8007dce <_free_r+0xae>
 8007e18:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007e1c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007e20:	d214      	bcs.n	8007e4c <_free_r+0x12c>
 8007e22:	09a2      	lsrs	r2, r4, #6
 8007e24:	3238      	adds	r2, #56	; 0x38
 8007e26:	1c51      	adds	r1, r2, #1
 8007e28:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007e2c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007e30:	428e      	cmp	r6, r1
 8007e32:	d125      	bne.n	8007e80 <_free_r+0x160>
 8007e34:	2401      	movs	r4, #1
 8007e36:	1092      	asrs	r2, r2, #2
 8007e38:	fa04 f202 	lsl.w	r2, r4, r2
 8007e3c:	6844      	ldr	r4, [r0, #4]
 8007e3e:	4322      	orrs	r2, r4
 8007e40:	6042      	str	r2, [r0, #4]
 8007e42:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007e46:	60b3      	str	r3, [r6, #8]
 8007e48:	60cb      	str	r3, [r1, #12]
 8007e4a:	e79a      	b.n	8007d82 <_free_r+0x62>
 8007e4c:	2a14      	cmp	r2, #20
 8007e4e:	d801      	bhi.n	8007e54 <_free_r+0x134>
 8007e50:	325b      	adds	r2, #91	; 0x5b
 8007e52:	e7e8      	b.n	8007e26 <_free_r+0x106>
 8007e54:	2a54      	cmp	r2, #84	; 0x54
 8007e56:	d802      	bhi.n	8007e5e <_free_r+0x13e>
 8007e58:	0b22      	lsrs	r2, r4, #12
 8007e5a:	326e      	adds	r2, #110	; 0x6e
 8007e5c:	e7e3      	b.n	8007e26 <_free_r+0x106>
 8007e5e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007e62:	d802      	bhi.n	8007e6a <_free_r+0x14a>
 8007e64:	0be2      	lsrs	r2, r4, #15
 8007e66:	3277      	adds	r2, #119	; 0x77
 8007e68:	e7dd      	b.n	8007e26 <_free_r+0x106>
 8007e6a:	f240 5154 	movw	r1, #1364	; 0x554
 8007e6e:	428a      	cmp	r2, r1
 8007e70:	bf9a      	itte	ls
 8007e72:	0ca2      	lsrls	r2, r4, #18
 8007e74:	327c      	addls	r2, #124	; 0x7c
 8007e76:	227e      	movhi	r2, #126	; 0x7e
 8007e78:	e7d5      	b.n	8007e26 <_free_r+0x106>
 8007e7a:	6889      	ldr	r1, [r1, #8]
 8007e7c:	428e      	cmp	r6, r1
 8007e7e:	d004      	beq.n	8007e8a <_free_r+0x16a>
 8007e80:	684a      	ldr	r2, [r1, #4]
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	42a2      	cmp	r2, r4
 8007e88:	d8f7      	bhi.n	8007e7a <_free_r+0x15a>
 8007e8a:	68ce      	ldr	r6, [r1, #12]
 8007e8c:	e7d9      	b.n	8007e42 <_free_r+0x122>
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	20000b68 	.word	0x20000b68
 8007e94:	20000f74 	.word	0x20000f74
 8007e98:	2000159c 	.word	0x2000159c
 8007e9c:	20000b70 	.word	0x20000b70

08007ea0 <__sfvwrite_r>:
 8007ea0:	6893      	ldr	r3, [r2, #8]
 8007ea2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	4690      	mov	r8, r2
 8007eac:	b91b      	cbnz	r3, 8007eb6 <__sfvwrite_r+0x16>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	b003      	add	sp, #12
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	898b      	ldrh	r3, [r1, #12]
 8007eb8:	0718      	lsls	r0, r3, #28
 8007eba:	d550      	bpl.n	8007f5e <__sfvwrite_r+0xbe>
 8007ebc:	690b      	ldr	r3, [r1, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d04d      	beq.n	8007f5e <__sfvwrite_r+0xbe>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f8d8 7000 	ldr.w	r7, [r8]
 8007ec8:	f013 0902 	ands.w	r9, r3, #2
 8007ecc:	d16c      	bne.n	8007fa8 <__sfvwrite_r+0x108>
 8007ece:	f013 0301 	ands.w	r3, r3, #1
 8007ed2:	f000 809c 	beq.w	800800e <__sfvwrite_r+0x16e>
 8007ed6:	4648      	mov	r0, r9
 8007ed8:	46ca      	mov	sl, r9
 8007eda:	46cb      	mov	fp, r9
 8007edc:	f1bb 0f00 	cmp.w	fp, #0
 8007ee0:	f000 8103 	beq.w	80080ea <__sfvwrite_r+0x24a>
 8007ee4:	b950      	cbnz	r0, 8007efc <__sfvwrite_r+0x5c>
 8007ee6:	465a      	mov	r2, fp
 8007ee8:	210a      	movs	r1, #10
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 f978 	bl	80001e0 <memchr>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f000 80ff 	beq.w	80080f4 <__sfvwrite_r+0x254>
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	eba0 090a 	sub.w	r9, r0, sl
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	6921      	ldr	r1, [r4, #16]
 8007f00:	6963      	ldr	r3, [r4, #20]
 8007f02:	45d9      	cmp	r9, fp
 8007f04:	464a      	mov	r2, r9
 8007f06:	bf28      	it	cs
 8007f08:	465a      	movcs	r2, fp
 8007f0a:	4288      	cmp	r0, r1
 8007f0c:	f240 80f5 	bls.w	80080fa <__sfvwrite_r+0x25a>
 8007f10:	68a5      	ldr	r5, [r4, #8]
 8007f12:	441d      	add	r5, r3
 8007f14:	42aa      	cmp	r2, r5
 8007f16:	f340 80f0 	ble.w	80080fa <__sfvwrite_r+0x25a>
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	f000 f931 	bl	8008184 <memmove>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	442b      	add	r3, r5
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 ff7a 	bl	8008e24 <_fflush_r>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d167      	bne.n	8008004 <__sfvwrite_r+0x164>
 8007f34:	ebb9 0905 	subs.w	r9, r9, r5
 8007f38:	f040 80f7 	bne.w	800812a <__sfvwrite_r+0x28a>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f000 ff70 	bl	8008e24 <_fflush_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d15d      	bne.n	8008004 <__sfvwrite_r+0x164>
 8007f48:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007f4c:	44aa      	add	sl, r5
 8007f4e:	ebab 0b05 	sub.w	fp, fp, r5
 8007f52:	1b55      	subs	r5, r2, r5
 8007f54:	f8c8 5008 	str.w	r5, [r8, #8]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d1bf      	bne.n	8007edc <__sfvwrite_r+0x3c>
 8007f5c:	e7a7      	b.n	8007eae <__sfvwrite_r+0xe>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fd7b 	bl	8008a5c <__swsetup_r>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0ab      	beq.n	8007ec2 <__sfvwrite_r+0x22>
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f6e:	e79f      	b.n	8007eb0 <__sfvwrite_r+0x10>
 8007f70:	e9d7 b900 	ldrd	fp, r9, [r7]
 8007f74:	3708      	adds	r7, #8
 8007f76:	f1b9 0f00 	cmp.w	r9, #0
 8007f7a:	d0f9      	beq.n	8007f70 <__sfvwrite_r+0xd0>
 8007f7c:	45d1      	cmp	r9, sl
 8007f7e:	464b      	mov	r3, r9
 8007f80:	69e1      	ldr	r1, [r4, #28]
 8007f82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007f84:	bf28      	it	cs
 8007f86:	4653      	movcs	r3, sl
 8007f88:	465a      	mov	r2, fp
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	47a8      	blx	r5
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	dd38      	ble.n	8008004 <__sfvwrite_r+0x164>
 8007f92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f96:	4483      	add	fp, r0
 8007f98:	eba9 0900 	sub.w	r9, r9, r0
 8007f9c:	1a18      	subs	r0, r3, r0
 8007f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d1e7      	bne.n	8007f76 <__sfvwrite_r+0xd6>
 8007fa6:	e782      	b.n	8007eae <__sfvwrite_r+0xe>
 8007fa8:	f04f 0b00 	mov.w	fp, #0
 8007fac:	f8df a180 	ldr.w	sl, [pc, #384]	; 8008130 <__sfvwrite_r+0x290>
 8007fb0:	46d9      	mov	r9, fp
 8007fb2:	e7e0      	b.n	8007f76 <__sfvwrite_r+0xd6>
 8007fb4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8007fb8:	3708      	adds	r7, #8
 8007fba:	f1ba 0f00 	cmp.w	sl, #0
 8007fbe:	d0f9      	beq.n	8007fb4 <__sfvwrite_r+0x114>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	6820      	ldr	r0, [r4, #0]
 8007fc4:	68a2      	ldr	r2, [r4, #8]
 8007fc6:	0599      	lsls	r1, r3, #22
 8007fc8:	d563      	bpl.n	8008092 <__sfvwrite_r+0x1f2>
 8007fca:	4552      	cmp	r2, sl
 8007fcc:	d836      	bhi.n	800803c <__sfvwrite_r+0x19c>
 8007fce:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007fd2:	d033      	beq.n	800803c <__sfvwrite_r+0x19c>
 8007fd4:	6921      	ldr	r1, [r4, #16]
 8007fd6:	6965      	ldr	r5, [r4, #20]
 8007fd8:	eba0 0b01 	sub.w	fp, r0, r1
 8007fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe4:	f10b 0201 	add.w	r2, fp, #1
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	4452      	add	r2, sl
 8007fec:	4295      	cmp	r5, r2
 8007fee:	bf38      	it	cc
 8007ff0:	4615      	movcc	r5, r2
 8007ff2:	055b      	lsls	r3, r3, #21
 8007ff4:	d53d      	bpl.n	8008072 <__sfvwrite_r+0x1d2>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7fd f8d3 	bl	80051a4 <_malloc_r>
 8007ffe:	b948      	cbnz	r0, 8008014 <__sfvwrite_r+0x174>
 8008000:	230c      	movs	r3, #12
 8008002:	6033      	str	r3, [r6, #0]
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	e7ad      	b.n	8007f6a <__sfvwrite_r+0xca>
 800800e:	4699      	mov	r9, r3
 8008010:	469a      	mov	sl, r3
 8008012:	e7d2      	b.n	8007fba <__sfvwrite_r+0x11a>
 8008014:	465a      	mov	r2, fp
 8008016:	6921      	ldr	r1, [r4, #16]
 8008018:	9001      	str	r0, [sp, #4]
 800801a:	f7fd faff 	bl	800561c <memcpy>
 800801e:	89a2      	ldrh	r2, [r4, #12]
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800802a:	81a2      	strh	r2, [r4, #12]
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	6165      	str	r5, [r4, #20]
 8008030:	445b      	add	r3, fp
 8008032:	eba5 050b 	sub.w	r5, r5, fp
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	4652      	mov	r2, sl
 800803a:	60a5      	str	r5, [r4, #8]
 800803c:	4552      	cmp	r2, sl
 800803e:	bf28      	it	cs
 8008040:	4652      	movcs	r2, sl
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	9201      	str	r2, [sp, #4]
 8008046:	4649      	mov	r1, r9
 8008048:	f000 f89c 	bl	8008184 <memmove>
 800804c:	68a3      	ldr	r3, [r4, #8]
 800804e:	9a01      	ldr	r2, [sp, #4]
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	441a      	add	r2, r3
 8008058:	4655      	mov	r5, sl
 800805a:	6022      	str	r2, [r4, #0]
 800805c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008060:	44a9      	add	r9, r5
 8008062:	ebaa 0a05 	sub.w	sl, sl, r5
 8008066:	1b45      	subs	r5, r0, r5
 8008068:	f8c8 5008 	str.w	r5, [r8, #8]
 800806c:	2d00      	cmp	r5, #0
 800806e:	d1a4      	bne.n	8007fba <__sfvwrite_r+0x11a>
 8008070:	e71d      	b.n	8007eae <__sfvwrite_r+0xe>
 8008072:	462a      	mov	r2, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f7fd fb41 	bl	80056fc <_realloc_r>
 800807a:	4603      	mov	r3, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d1d5      	bne.n	800802c <__sfvwrite_r+0x18c>
 8008080:	6921      	ldr	r1, [r4, #16]
 8008082:	4630      	mov	r0, r6
 8008084:	f7ff fe4c 	bl	8007d20 <_free_r>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	e7b6      	b.n	8008000 <__sfvwrite_r+0x160>
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	4283      	cmp	r3, r0
 8008096:	d302      	bcc.n	800809e <__sfvwrite_r+0x1fe>
 8008098:	6961      	ldr	r1, [r4, #20]
 800809a:	4551      	cmp	r1, sl
 800809c:	d915      	bls.n	80080ca <__sfvwrite_r+0x22a>
 800809e:	4552      	cmp	r2, sl
 80080a0:	bf28      	it	cs
 80080a2:	4652      	movcs	r2, sl
 80080a4:	4649      	mov	r1, r9
 80080a6:	4615      	mov	r5, r2
 80080a8:	f000 f86c 	bl	8008184 <memmove>
 80080ac:	68a3      	ldr	r3, [r4, #8]
 80080ae:	6822      	ldr	r2, [r4, #0]
 80080b0:	1b5b      	subs	r3, r3, r5
 80080b2:	442a      	add	r2, r5
 80080b4:	60a3      	str	r3, [r4, #8]
 80080b6:	6022      	str	r2, [r4, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1cf      	bne.n	800805c <__sfvwrite_r+0x1bc>
 80080bc:	4621      	mov	r1, r4
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 feb0 	bl	8008e24 <_fflush_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0c9      	beq.n	800805c <__sfvwrite_r+0x1bc>
 80080c8:	e79c      	b.n	8008004 <__sfvwrite_r+0x164>
 80080ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80080ce:	459a      	cmp	sl, r3
 80080d0:	bf38      	it	cc
 80080d2:	4653      	movcc	r3, sl
 80080d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80080d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80080da:	464a      	mov	r2, r9
 80080dc:	434b      	muls	r3, r1
 80080de:	4630      	mov	r0, r6
 80080e0:	69e1      	ldr	r1, [r4, #28]
 80080e2:	47a8      	blx	r5
 80080e4:	1e05      	subs	r5, r0, #0
 80080e6:	dcb9      	bgt.n	800805c <__sfvwrite_r+0x1bc>
 80080e8:	e78c      	b.n	8008004 <__sfvwrite_r+0x164>
 80080ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080ee:	2000      	movs	r0, #0
 80080f0:	3708      	adds	r7, #8
 80080f2:	e6f3      	b.n	8007edc <__sfvwrite_r+0x3c>
 80080f4:	f10b 0901 	add.w	r9, fp, #1
 80080f8:	e700      	b.n	8007efc <__sfvwrite_r+0x5c>
 80080fa:	4293      	cmp	r3, r2
 80080fc:	dc08      	bgt.n	8008110 <__sfvwrite_r+0x270>
 80080fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008100:	69e1      	ldr	r1, [r4, #28]
 8008102:	4652      	mov	r2, sl
 8008104:	4630      	mov	r0, r6
 8008106:	47a8      	blx	r5
 8008108:	1e05      	subs	r5, r0, #0
 800810a:	f73f af13 	bgt.w	8007f34 <__sfvwrite_r+0x94>
 800810e:	e779      	b.n	8008004 <__sfvwrite_r+0x164>
 8008110:	4651      	mov	r1, sl
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	f000 f836 	bl	8008184 <memmove>
 8008118:	9a01      	ldr	r2, [sp, #4]
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	60a3      	str	r3, [r4, #8]
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	4413      	add	r3, r2
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	4615      	mov	r5, r2
 8008128:	e704      	b.n	8007f34 <__sfvwrite_r+0x94>
 800812a:	2001      	movs	r0, #1
 800812c:	e70c      	b.n	8007f48 <__sfvwrite_r+0xa8>
 800812e:	bf00      	nop
 8008130:	7ffffc00 	.word	0x7ffffc00

08008134 <_fwalk_reent>:
 8008134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008138:	4606      	mov	r6, r0
 800813a:	4688      	mov	r8, r1
 800813c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8008140:	2700      	movs	r7, #0
 8008142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008146:	f1b9 0901 	subs.w	r9, r9, #1
 800814a:	d505      	bpl.n	8008158 <_fwalk_reent+0x24>
 800814c:	6824      	ldr	r4, [r4, #0]
 800814e:	2c00      	cmp	r4, #0
 8008150:	d1f7      	bne.n	8008142 <_fwalk_reent+0xe>
 8008152:	4638      	mov	r0, r7
 8008154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008158:	89ab      	ldrh	r3, [r5, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d907      	bls.n	800816e <_fwalk_reent+0x3a>
 800815e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008162:	3301      	adds	r3, #1
 8008164:	d003      	beq.n	800816e <_fwalk_reent+0x3a>
 8008166:	4629      	mov	r1, r5
 8008168:	4630      	mov	r0, r6
 800816a:	47c0      	blx	r8
 800816c:	4307      	orrs	r7, r0
 800816e:	3568      	adds	r5, #104	; 0x68
 8008170:	e7e9      	b.n	8008146 <_fwalk_reent+0x12>
	...

08008174 <_localeconv_r>:
 8008174:	4800      	ldr	r0, [pc, #0]	; (8008178 <_localeconv_r+0x4>)
 8008176:	4770      	bx	lr
 8008178:	2000106c 	.word	0x2000106c

0800817c <__retarget_lock_init_recursive>:
 800817c:	4770      	bx	lr

0800817e <__retarget_lock_close_recursive>:
 800817e:	4770      	bx	lr

08008180 <__retarget_lock_acquire_recursive>:
 8008180:	4770      	bx	lr

08008182 <__retarget_lock_release_recursive>:
 8008182:	4770      	bx	lr

08008184 <memmove>:
 8008184:	4288      	cmp	r0, r1
 8008186:	b510      	push	{r4, lr}
 8008188:	eb01 0402 	add.w	r4, r1, r2
 800818c:	d902      	bls.n	8008194 <memmove+0x10>
 800818e:	4284      	cmp	r4, r0
 8008190:	4623      	mov	r3, r4
 8008192:	d807      	bhi.n	80081a4 <memmove+0x20>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	42a1      	cmp	r1, r4
 8008198:	d008      	beq.n	80081ac <memmove+0x28>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081a2:	e7f8      	b.n	8008196 <memmove+0x12>
 80081a4:	4402      	add	r2, r0
 80081a6:	4601      	mov	r1, r0
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d100      	bne.n	80081ae <memmove+0x2a>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081b6:	e7f7      	b.n	80081a8 <memmove+0x24>

080081b8 <_Balloc>:
 80081b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80081ba:	b570      	push	{r4, r5, r6, lr}
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	b17b      	cbz	r3, 80081e2 <_Balloc+0x2a>
 80081c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80081c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80081c8:	b9a0      	cbnz	r0, 80081f4 <_Balloc+0x3c>
 80081ca:	2101      	movs	r1, #1
 80081cc:	fa01 f604 	lsl.w	r6, r1, r4
 80081d0:	1d72      	adds	r2, r6, #5
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 fcf9 	bl	8008bcc <_calloc_r>
 80081da:	b148      	cbz	r0, 80081f0 <_Balloc+0x38>
 80081dc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80081e0:	e00b      	b.n	80081fa <_Balloc+0x42>
 80081e2:	2221      	movs	r2, #33	; 0x21
 80081e4:	2104      	movs	r1, #4
 80081e6:	f000 fcf1 	bl	8008bcc <_calloc_r>
 80081ea:	64e8      	str	r0, [r5, #76]	; 0x4c
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1e8      	bne.n	80081c2 <_Balloc+0xa>
 80081f0:	2000      	movs	r0, #0
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	6802      	ldr	r2, [r0, #0]
 80081f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80081fa:	2300      	movs	r3, #0
 80081fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008200:	e7f7      	b.n	80081f2 <_Balloc+0x3a>

08008202 <_Bfree>:
 8008202:	b131      	cbz	r1, 8008212 <_Bfree+0x10>
 8008204:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008206:	684a      	ldr	r2, [r1, #4]
 8008208:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800820c:	6008      	str	r0, [r1, #0]
 800820e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008212:	4770      	bx	lr

08008214 <__multadd>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	690d      	ldr	r5, [r1, #16]
 800821a:	4607      	mov	r7, r0
 800821c:	460c      	mov	r4, r1
 800821e:	461e      	mov	r6, r3
 8008220:	f101 0c14 	add.w	ip, r1, #20
 8008224:	2000      	movs	r0, #0
 8008226:	f8dc 3000 	ldr.w	r3, [ip]
 800822a:	b299      	uxth	r1, r3
 800822c:	fb02 6101 	mla	r1, r2, r1, r6
 8008230:	0c1e      	lsrs	r6, r3, #16
 8008232:	0c0b      	lsrs	r3, r1, #16
 8008234:	fb02 3306 	mla	r3, r2, r6, r3
 8008238:	b289      	uxth	r1, r1
 800823a:	3001      	adds	r0, #1
 800823c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008240:	4285      	cmp	r5, r0
 8008242:	f84c 1b04 	str.w	r1, [ip], #4
 8008246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800824a:	dcec      	bgt.n	8008226 <__multadd+0x12>
 800824c:	b30e      	cbz	r6, 8008292 <__multadd+0x7e>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc19      	bgt.n	8008288 <__multadd+0x74>
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	4638      	mov	r0, r7
 8008258:	3101      	adds	r1, #1
 800825a:	f7ff ffad 	bl	80081b8 <_Balloc>
 800825e:	4680      	mov	r8, r0
 8008260:	b928      	cbnz	r0, 800826e <__multadd+0x5a>
 8008262:	4602      	mov	r2, r0
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <__multadd+0x84>)
 8008266:	480d      	ldr	r0, [pc, #52]	; (800829c <__multadd+0x88>)
 8008268:	21b5      	movs	r1, #181	; 0xb5
 800826a:	f000 fc91 	bl	8008b90 <__assert_func>
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	3202      	adds	r2, #2
 8008272:	f104 010c 	add.w	r1, r4, #12
 8008276:	0092      	lsls	r2, r2, #2
 8008278:	300c      	adds	r0, #12
 800827a:	f7fd f9cf 	bl	800561c <memcpy>
 800827e:	4621      	mov	r1, r4
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff ffbe 	bl	8008202 <_Bfree>
 8008286:	4644      	mov	r4, r8
 8008288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800828c:	3501      	adds	r5, #1
 800828e:	615e      	str	r6, [r3, #20]
 8008290:	6125      	str	r5, [r4, #16]
 8008292:	4620      	mov	r0, r4
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	0800e7b5 	.word	0x0800e7b5
 800829c:	0800e821 	.word	0x0800e821

080082a0 <__hi0bits>:
 80082a0:	0c03      	lsrs	r3, r0, #16
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	b9d3      	cbnz	r3, 80082dc <__hi0bits+0x3c>
 80082a6:	0400      	lsls	r0, r0, #16
 80082a8:	2310      	movs	r3, #16
 80082aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082ae:	bf04      	itt	eq
 80082b0:	0200      	lsleq	r0, r0, #8
 80082b2:	3308      	addeq	r3, #8
 80082b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082b8:	bf04      	itt	eq
 80082ba:	0100      	lsleq	r0, r0, #4
 80082bc:	3304      	addeq	r3, #4
 80082be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082c2:	bf04      	itt	eq
 80082c4:	0080      	lsleq	r0, r0, #2
 80082c6:	3302      	addeq	r3, #2
 80082c8:	2800      	cmp	r0, #0
 80082ca:	db05      	blt.n	80082d8 <__hi0bits+0x38>
 80082cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082d0:	f103 0301 	add.w	r3, r3, #1
 80082d4:	bf08      	it	eq
 80082d6:	2320      	moveq	r3, #32
 80082d8:	4618      	mov	r0, r3
 80082da:	4770      	bx	lr
 80082dc:	2300      	movs	r3, #0
 80082de:	e7e4      	b.n	80082aa <__hi0bits+0xa>

080082e0 <__lo0bits>:
 80082e0:	6803      	ldr	r3, [r0, #0]
 80082e2:	f013 0207 	ands.w	r2, r3, #7
 80082e6:	4601      	mov	r1, r0
 80082e8:	d00b      	beq.n	8008302 <__lo0bits+0x22>
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d423      	bmi.n	8008336 <__lo0bits+0x56>
 80082ee:	0798      	lsls	r0, r3, #30
 80082f0:	bf49      	itett	mi
 80082f2:	085b      	lsrmi	r3, r3, #1
 80082f4:	089b      	lsrpl	r3, r3, #2
 80082f6:	2001      	movmi	r0, #1
 80082f8:	600b      	strmi	r3, [r1, #0]
 80082fa:	bf5c      	itt	pl
 80082fc:	600b      	strpl	r3, [r1, #0]
 80082fe:	2002      	movpl	r0, #2
 8008300:	4770      	bx	lr
 8008302:	b298      	uxth	r0, r3
 8008304:	b9a8      	cbnz	r0, 8008332 <__lo0bits+0x52>
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	2010      	movs	r0, #16
 800830a:	b2da      	uxtb	r2, r3
 800830c:	b90a      	cbnz	r2, 8008312 <__lo0bits+0x32>
 800830e:	3008      	adds	r0, #8
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	071a      	lsls	r2, r3, #28
 8008314:	bf04      	itt	eq
 8008316:	091b      	lsreq	r3, r3, #4
 8008318:	3004      	addeq	r0, #4
 800831a:	079a      	lsls	r2, r3, #30
 800831c:	bf04      	itt	eq
 800831e:	089b      	lsreq	r3, r3, #2
 8008320:	3002      	addeq	r0, #2
 8008322:	07da      	lsls	r2, r3, #31
 8008324:	d403      	bmi.n	800832e <__lo0bits+0x4e>
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	f100 0001 	add.w	r0, r0, #1
 800832c:	d005      	beq.n	800833a <__lo0bits+0x5a>
 800832e:	600b      	str	r3, [r1, #0]
 8008330:	4770      	bx	lr
 8008332:	4610      	mov	r0, r2
 8008334:	e7e9      	b.n	800830a <__lo0bits+0x2a>
 8008336:	2000      	movs	r0, #0
 8008338:	4770      	bx	lr
 800833a:	2020      	movs	r0, #32
 800833c:	4770      	bx	lr
	...

08008340 <__i2b>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	2101      	movs	r1, #1
 8008346:	f7ff ff37 	bl	80081b8 <_Balloc>
 800834a:	4602      	mov	r2, r0
 800834c:	b928      	cbnz	r0, 800835a <__i2b+0x1a>
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <__i2b+0x24>)
 8008350:	4805      	ldr	r0, [pc, #20]	; (8008368 <__i2b+0x28>)
 8008352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008356:	f000 fc1b 	bl	8008b90 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	6144      	str	r4, [r0, #20]
 800835e:	6103      	str	r3, [r0, #16]
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	0800e7b5 	.word	0x0800e7b5
 8008368:	0800e821 	.word	0x0800e821

0800836c <__multiply>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4691      	mov	r9, r2
 8008372:	690a      	ldr	r2, [r1, #16]
 8008374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	bfb8      	it	lt
 800837c:	460b      	movlt	r3, r1
 800837e:	460c      	mov	r4, r1
 8008380:	bfbc      	itt	lt
 8008382:	464c      	movlt	r4, r9
 8008384:	4699      	movlt	r9, r3
 8008386:	6927      	ldr	r7, [r4, #16]
 8008388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	eb07 060a 	add.w	r6, r7, sl
 8008394:	42b3      	cmp	r3, r6
 8008396:	b085      	sub	sp, #20
 8008398:	bfb8      	it	lt
 800839a:	3101      	addlt	r1, #1
 800839c:	f7ff ff0c 	bl	80081b8 <_Balloc>
 80083a0:	b930      	cbnz	r0, 80083b0 <__multiply+0x44>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b44      	ldr	r3, [pc, #272]	; (80084b8 <__multiply+0x14c>)
 80083a6:	4845      	ldr	r0, [pc, #276]	; (80084bc <__multiply+0x150>)
 80083a8:	f240 115d 	movw	r1, #349	; 0x15d
 80083ac:	f000 fbf0 	bl	8008b90 <__assert_func>
 80083b0:	f100 0514 	add.w	r5, r0, #20
 80083b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083b8:	462b      	mov	r3, r5
 80083ba:	2200      	movs	r2, #0
 80083bc:	4543      	cmp	r3, r8
 80083be:	d321      	bcc.n	8008404 <__multiply+0x98>
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083c8:	f109 0314 	add.w	r3, r9, #20
 80083cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	1b3a      	subs	r2, r7, r4
 80083d4:	3a15      	subs	r2, #21
 80083d6:	f022 0203 	bic.w	r2, r2, #3
 80083da:	3204      	adds	r2, #4
 80083dc:	f104 0115 	add.w	r1, r4, #21
 80083e0:	428f      	cmp	r7, r1
 80083e2:	bf38      	it	cc
 80083e4:	2204      	movcc	r2, #4
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	9a02      	ldr	r2, [sp, #8]
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d80c      	bhi.n	800840a <__multiply+0x9e>
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	dd03      	ble.n	80083fc <__multiply+0x90>
 80083f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05a      	beq.n	80084b2 <__multiply+0x146>
 80083fc:	6106      	str	r6, [r0, #16]
 80083fe:	b005      	add	sp, #20
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	f843 2b04 	str.w	r2, [r3], #4
 8008408:	e7d8      	b.n	80083bc <__multiply+0x50>
 800840a:	f8b3 a000 	ldrh.w	sl, [r3]
 800840e:	f1ba 0f00 	cmp.w	sl, #0
 8008412:	d024      	beq.n	800845e <__multiply+0xf2>
 8008414:	f104 0e14 	add.w	lr, r4, #20
 8008418:	46a9      	mov	r9, r5
 800841a:	f04f 0c00 	mov.w	ip, #0
 800841e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008422:	f8d9 1000 	ldr.w	r1, [r9]
 8008426:	fa1f fb82 	uxth.w	fp, r2
 800842a:	b289      	uxth	r1, r1
 800842c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008434:	f8d9 2000 	ldr.w	r2, [r9]
 8008438:	4461      	add	r1, ip
 800843a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800843e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008446:	b289      	uxth	r1, r1
 8008448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800844c:	4577      	cmp	r7, lr
 800844e:	f849 1b04 	str.w	r1, [r9], #4
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	d8e2      	bhi.n	800841e <__multiply+0xb2>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	f845 c002 	str.w	ip, [r5, r2]
 800845e:	9a03      	ldr	r2, [sp, #12]
 8008460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008464:	3304      	adds	r3, #4
 8008466:	f1b9 0f00 	cmp.w	r9, #0
 800846a:	d020      	beq.n	80084ae <__multiply+0x142>
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	f104 0c14 	add.w	ip, r4, #20
 8008472:	46ae      	mov	lr, r5
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	f8bc b000 	ldrh.w	fp, [ip]
 800847c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008480:	fb09 220b 	mla	r2, r9, fp, r2
 8008484:	4492      	add	sl, r2
 8008486:	b289      	uxth	r1, r1
 8008488:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800848c:	f84e 1b04 	str.w	r1, [lr], #4
 8008490:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008494:	f8be 1000 	ldrh.w	r1, [lr]
 8008498:	0c12      	lsrs	r2, r2, #16
 800849a:	fb09 1102 	mla	r1, r9, r2, r1
 800849e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084a2:	4567      	cmp	r7, ip
 80084a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084a8:	d8e6      	bhi.n	8008478 <__multiply+0x10c>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	50a9      	str	r1, [r5, r2]
 80084ae:	3504      	adds	r5, #4
 80084b0:	e79a      	b.n	80083e8 <__multiply+0x7c>
 80084b2:	3e01      	subs	r6, #1
 80084b4:	e79c      	b.n	80083f0 <__multiply+0x84>
 80084b6:	bf00      	nop
 80084b8:	0800e7b5 	.word	0x0800e7b5
 80084bc:	0800e821 	.word	0x0800e821

080084c0 <__pow5mult>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4615      	mov	r5, r2
 80084c6:	f012 0203 	ands.w	r2, r2, #3
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	d007      	beq.n	80084e0 <__pow5mult+0x20>
 80084d0:	4c1a      	ldr	r4, [pc, #104]	; (800853c <__pow5mult+0x7c>)
 80084d2:	3a01      	subs	r2, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084da:	f7ff fe9b 	bl	8008214 <__multadd>
 80084de:	4607      	mov	r7, r0
 80084e0:	10ad      	asrs	r5, r5, #2
 80084e2:	d027      	beq.n	8008534 <__pow5mult+0x74>
 80084e4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80084e6:	b944      	cbnz	r4, 80084fa <__pow5mult+0x3a>
 80084e8:	f240 2171 	movw	r1, #625	; 0x271
 80084ec:	4630      	mov	r0, r6
 80084ee:	f7ff ff27 	bl	8008340 <__i2b>
 80084f2:	2300      	movs	r3, #0
 80084f4:	64b0      	str	r0, [r6, #72]	; 0x48
 80084f6:	4604      	mov	r4, r0
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	07eb      	lsls	r3, r5, #31
 8008500:	d50a      	bpl.n	8008518 <__pow5mult+0x58>
 8008502:	4639      	mov	r1, r7
 8008504:	4622      	mov	r2, r4
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff30 	bl	800836c <__multiply>
 800850c:	4639      	mov	r1, r7
 800850e:	4680      	mov	r8, r0
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff fe76 	bl	8008202 <_Bfree>
 8008516:	4647      	mov	r7, r8
 8008518:	106d      	asrs	r5, r5, #1
 800851a:	d00b      	beq.n	8008534 <__pow5mult+0x74>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	b938      	cbnz	r0, 8008530 <__pow5mult+0x70>
 8008520:	4622      	mov	r2, r4
 8008522:	4621      	mov	r1, r4
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ff21 	bl	800836c <__multiply>
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	f8c0 9000 	str.w	r9, [r0]
 8008530:	4604      	mov	r4, r0
 8008532:	e7e4      	b.n	80084fe <__pow5mult+0x3e>
 8008534:	4638      	mov	r0, r7
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	bf00      	nop
 800853c:	0800e970 	.word	0x0800e970

08008540 <__lshift>:
 8008540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008544:	460c      	mov	r4, r1
 8008546:	6849      	ldr	r1, [r1, #4]
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	4607      	mov	r7, r0
 8008552:	4691      	mov	r9, r2
 8008554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008558:	f108 0601 	add.w	r6, r8, #1
 800855c:	42b3      	cmp	r3, r6
 800855e:	db0b      	blt.n	8008578 <__lshift+0x38>
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff fe29 	bl	80081b8 <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b948      	cbnz	r0, 800857e <__lshift+0x3e>
 800856a:	4602      	mov	r2, r0
 800856c:	4b2a      	ldr	r3, [pc, #168]	; (8008618 <__lshift+0xd8>)
 800856e:	482b      	ldr	r0, [pc, #172]	; (800861c <__lshift+0xdc>)
 8008570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008574:	f000 fb0c 	bl	8008b90 <__assert_func>
 8008578:	3101      	adds	r1, #1
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	e7ee      	b.n	800855c <__lshift+0x1c>
 800857e:	2300      	movs	r3, #0
 8008580:	f100 0114 	add.w	r1, r0, #20
 8008584:	f100 0210 	add.w	r2, r0, #16
 8008588:	4618      	mov	r0, r3
 800858a:	4553      	cmp	r3, sl
 800858c:	db37      	blt.n	80085fe <__lshift+0xbe>
 800858e:	6920      	ldr	r0, [r4, #16]
 8008590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008594:	f104 0314 	add.w	r3, r4, #20
 8008598:	f019 091f 	ands.w	r9, r9, #31
 800859c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085a4:	d02f      	beq.n	8008606 <__lshift+0xc6>
 80085a6:	f1c9 0e20 	rsb	lr, r9, #32
 80085aa:	468a      	mov	sl, r1
 80085ac:	f04f 0c00 	mov.w	ip, #0
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	fa02 f209 	lsl.w	r2, r2, r9
 80085b6:	ea42 020c 	orr.w	r2, r2, ip
 80085ba:	f84a 2b04 	str.w	r2, [sl], #4
 80085be:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c2:	4298      	cmp	r0, r3
 80085c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085c8:	d8f2      	bhi.n	80085b0 <__lshift+0x70>
 80085ca:	1b03      	subs	r3, r0, r4
 80085cc:	3b15      	subs	r3, #21
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	3304      	adds	r3, #4
 80085d4:	f104 0215 	add.w	r2, r4, #21
 80085d8:	4290      	cmp	r0, r2
 80085da:	bf38      	it	cc
 80085dc:	2304      	movcc	r3, #4
 80085de:	f841 c003 	str.w	ip, [r1, r3]
 80085e2:	f1bc 0f00 	cmp.w	ip, #0
 80085e6:	d001      	beq.n	80085ec <__lshift+0xac>
 80085e8:	f108 0602 	add.w	r6, r8, #2
 80085ec:	3e01      	subs	r6, #1
 80085ee:	4638      	mov	r0, r7
 80085f0:	612e      	str	r6, [r5, #16]
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7ff fe05 	bl	8008202 <_Bfree>
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008602:	3301      	adds	r3, #1
 8008604:	e7c1      	b.n	800858a <__lshift+0x4a>
 8008606:	3904      	subs	r1, #4
 8008608:	f853 2b04 	ldr.w	r2, [r3], #4
 800860c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008610:	4298      	cmp	r0, r3
 8008612:	d8f9      	bhi.n	8008608 <__lshift+0xc8>
 8008614:	e7ea      	b.n	80085ec <__lshift+0xac>
 8008616:	bf00      	nop
 8008618:	0800e7b5 	.word	0x0800e7b5
 800861c:	0800e821 	.word	0x0800e821

08008620 <__mcmp>:
 8008620:	b530      	push	{r4, r5, lr}
 8008622:	6902      	ldr	r2, [r0, #16]
 8008624:	690c      	ldr	r4, [r1, #16]
 8008626:	1b12      	subs	r2, r2, r4
 8008628:	d10e      	bne.n	8008648 <__mcmp+0x28>
 800862a:	f100 0314 	add.w	r3, r0, #20
 800862e:	3114      	adds	r1, #20
 8008630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800863c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008640:	42a5      	cmp	r5, r4
 8008642:	d003      	beq.n	800864c <__mcmp+0x2c>
 8008644:	d305      	bcc.n	8008652 <__mcmp+0x32>
 8008646:	2201      	movs	r2, #1
 8008648:	4610      	mov	r0, r2
 800864a:	bd30      	pop	{r4, r5, pc}
 800864c:	4283      	cmp	r3, r0
 800864e:	d3f3      	bcc.n	8008638 <__mcmp+0x18>
 8008650:	e7fa      	b.n	8008648 <__mcmp+0x28>
 8008652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008656:	e7f7      	b.n	8008648 <__mcmp+0x28>

08008658 <__mdiff>:
 8008658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	460c      	mov	r4, r1
 800865e:	4606      	mov	r6, r0
 8008660:	4611      	mov	r1, r2
 8008662:	4620      	mov	r0, r4
 8008664:	4690      	mov	r8, r2
 8008666:	f7ff ffdb 	bl	8008620 <__mcmp>
 800866a:	1e05      	subs	r5, r0, #0
 800866c:	d110      	bne.n	8008690 <__mdiff+0x38>
 800866e:	4629      	mov	r1, r5
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff fda1 	bl	80081b8 <_Balloc>
 8008676:	b930      	cbnz	r0, 8008686 <__mdiff+0x2e>
 8008678:	4b3a      	ldr	r3, [pc, #232]	; (8008764 <__mdiff+0x10c>)
 800867a:	4602      	mov	r2, r0
 800867c:	f240 2132 	movw	r1, #562	; 0x232
 8008680:	4839      	ldr	r0, [pc, #228]	; (8008768 <__mdiff+0x110>)
 8008682:	f000 fa85 	bl	8008b90 <__assert_func>
 8008686:	2301      	movs	r3, #1
 8008688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800868c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	bfa4      	itt	ge
 8008692:	4643      	movge	r3, r8
 8008694:	46a0      	movge	r8, r4
 8008696:	4630      	mov	r0, r6
 8008698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800869c:	bfa6      	itte	ge
 800869e:	461c      	movge	r4, r3
 80086a0:	2500      	movge	r5, #0
 80086a2:	2501      	movlt	r5, #1
 80086a4:	f7ff fd88 	bl	80081b8 <_Balloc>
 80086a8:	b920      	cbnz	r0, 80086b4 <__mdiff+0x5c>
 80086aa:	4b2e      	ldr	r3, [pc, #184]	; (8008764 <__mdiff+0x10c>)
 80086ac:	4602      	mov	r2, r0
 80086ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086b2:	e7e5      	b.n	8008680 <__mdiff+0x28>
 80086b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086b8:	6926      	ldr	r6, [r4, #16]
 80086ba:	60c5      	str	r5, [r0, #12]
 80086bc:	f104 0914 	add.w	r9, r4, #20
 80086c0:	f108 0514 	add.w	r5, r8, #20
 80086c4:	f100 0e14 	add.w	lr, r0, #20
 80086c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086d0:	f108 0210 	add.w	r2, r8, #16
 80086d4:	46f2      	mov	sl, lr
 80086d6:	2100      	movs	r1, #0
 80086d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80086dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086e0:	fa1f f883 	uxth.w	r8, r3
 80086e4:	fa11 f18b 	uxtah	r1, r1, fp
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	eba1 0808 	sub.w	r8, r1, r8
 80086ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086f6:	fa1f f888 	uxth.w	r8, r8
 80086fa:	1419      	asrs	r1, r3, #16
 80086fc:	454e      	cmp	r6, r9
 80086fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008702:	f84a 3b04 	str.w	r3, [sl], #4
 8008706:	d8e7      	bhi.n	80086d8 <__mdiff+0x80>
 8008708:	1b33      	subs	r3, r6, r4
 800870a:	3b15      	subs	r3, #21
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	3304      	adds	r3, #4
 8008712:	3415      	adds	r4, #21
 8008714:	42a6      	cmp	r6, r4
 8008716:	bf38      	it	cc
 8008718:	2304      	movcc	r3, #4
 800871a:	441d      	add	r5, r3
 800871c:	4473      	add	r3, lr
 800871e:	469e      	mov	lr, r3
 8008720:	462e      	mov	r6, r5
 8008722:	4566      	cmp	r6, ip
 8008724:	d30e      	bcc.n	8008744 <__mdiff+0xec>
 8008726:	f10c 0203 	add.w	r2, ip, #3
 800872a:	1b52      	subs	r2, r2, r5
 800872c:	f022 0203 	bic.w	r2, r2, #3
 8008730:	3d03      	subs	r5, #3
 8008732:	45ac      	cmp	ip, r5
 8008734:	bf38      	it	cc
 8008736:	2200      	movcc	r2, #0
 8008738:	441a      	add	r2, r3
 800873a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800873e:	b17b      	cbz	r3, 8008760 <__mdiff+0x108>
 8008740:	6107      	str	r7, [r0, #16]
 8008742:	e7a3      	b.n	800868c <__mdiff+0x34>
 8008744:	f856 8b04 	ldr.w	r8, [r6], #4
 8008748:	fa11 f288 	uxtah	r2, r1, r8
 800874c:	1414      	asrs	r4, r2, #16
 800874e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008752:	b292      	uxth	r2, r2
 8008754:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008758:	f84e 2b04 	str.w	r2, [lr], #4
 800875c:	1421      	asrs	r1, r4, #16
 800875e:	e7e0      	b.n	8008722 <__mdiff+0xca>
 8008760:	3f01      	subs	r7, #1
 8008762:	e7ea      	b.n	800873a <__mdiff+0xe2>
 8008764:	0800e7b5 	.word	0x0800e7b5
 8008768:	0800e821 	.word	0x0800e821

0800876c <__d2b>:
 800876c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008770:	4689      	mov	r9, r1
 8008772:	2101      	movs	r1, #1
 8008774:	ec57 6b10 	vmov	r6, r7, d0
 8008778:	4690      	mov	r8, r2
 800877a:	f7ff fd1d 	bl	80081b8 <_Balloc>
 800877e:	4604      	mov	r4, r0
 8008780:	b930      	cbnz	r0, 8008790 <__d2b+0x24>
 8008782:	4602      	mov	r2, r0
 8008784:	4b25      	ldr	r3, [pc, #148]	; (800881c <__d2b+0xb0>)
 8008786:	4826      	ldr	r0, [pc, #152]	; (8008820 <__d2b+0xb4>)
 8008788:	f240 310a 	movw	r1, #778	; 0x30a
 800878c:	f000 fa00 	bl	8008b90 <__assert_func>
 8008790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008798:	bb35      	cbnz	r5, 80087e8 <__d2b+0x7c>
 800879a:	2e00      	cmp	r6, #0
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	d028      	beq.n	80087f2 <__d2b+0x86>
 80087a0:	4668      	mov	r0, sp
 80087a2:	9600      	str	r6, [sp, #0]
 80087a4:	f7ff fd9c 	bl	80082e0 <__lo0bits>
 80087a8:	9900      	ldr	r1, [sp, #0]
 80087aa:	b300      	cbz	r0, 80087ee <__d2b+0x82>
 80087ac:	9a01      	ldr	r2, [sp, #4]
 80087ae:	f1c0 0320 	rsb	r3, r0, #32
 80087b2:	fa02 f303 	lsl.w	r3, r2, r3
 80087b6:	430b      	orrs	r3, r1
 80087b8:	40c2      	lsrs	r2, r0
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	9201      	str	r2, [sp, #4]
 80087be:	9b01      	ldr	r3, [sp, #4]
 80087c0:	61a3      	str	r3, [r4, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bf14      	ite	ne
 80087c6:	2202      	movne	r2, #2
 80087c8:	2201      	moveq	r2, #1
 80087ca:	6122      	str	r2, [r4, #16]
 80087cc:	b1d5      	cbz	r5, 8008804 <__d2b+0x98>
 80087ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087d2:	4405      	add	r5, r0
 80087d4:	f8c9 5000 	str.w	r5, [r9]
 80087d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087dc:	f8c8 0000 	str.w	r0, [r8]
 80087e0:	4620      	mov	r0, r4
 80087e2:	b003      	add	sp, #12
 80087e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ec:	e7d5      	b.n	800879a <__d2b+0x2e>
 80087ee:	6161      	str	r1, [r4, #20]
 80087f0:	e7e5      	b.n	80087be <__d2b+0x52>
 80087f2:	a801      	add	r0, sp, #4
 80087f4:	f7ff fd74 	bl	80082e0 <__lo0bits>
 80087f8:	9b01      	ldr	r3, [sp, #4]
 80087fa:	6163      	str	r3, [r4, #20]
 80087fc:	2201      	movs	r2, #1
 80087fe:	6122      	str	r2, [r4, #16]
 8008800:	3020      	adds	r0, #32
 8008802:	e7e3      	b.n	80087cc <__d2b+0x60>
 8008804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800880c:	f8c9 0000 	str.w	r0, [r9]
 8008810:	6918      	ldr	r0, [r3, #16]
 8008812:	f7ff fd45 	bl	80082a0 <__hi0bits>
 8008816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800881a:	e7df      	b.n	80087dc <__d2b+0x70>
 800881c:	0800e7b5 	.word	0x0800e7b5
 8008820:	0800e821 	.word	0x0800e821

08008824 <frexp>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	2100      	movs	r1, #0
 8008828:	ec55 4b10 	vmov	r4, r5, d0
 800882c:	6001      	str	r1, [r0, #0]
 800882e:	4916      	ldr	r1, [pc, #88]	; (8008888 <frexp+0x64>)
 8008830:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008834:	428a      	cmp	r2, r1
 8008836:	4606      	mov	r6, r0
 8008838:	462b      	mov	r3, r5
 800883a:	dc22      	bgt.n	8008882 <frexp+0x5e>
 800883c:	ee10 1a10 	vmov	r1, s0
 8008840:	4311      	orrs	r1, r2
 8008842:	d01e      	beq.n	8008882 <frexp+0x5e>
 8008844:	4911      	ldr	r1, [pc, #68]	; (800888c <frexp+0x68>)
 8008846:	4029      	ands	r1, r5
 8008848:	b969      	cbnz	r1, 8008866 <frexp+0x42>
 800884a:	4b11      	ldr	r3, [pc, #68]	; (8008890 <frexp+0x6c>)
 800884c:	2200      	movs	r2, #0
 800884e:	ee10 0a10 	vmov	r0, s0
 8008852:	4629      	mov	r1, r5
 8008854:	f7f7 fed0 	bl	80005f8 <__aeabi_dmul>
 8008858:	460b      	mov	r3, r1
 800885a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800885e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008862:	4604      	mov	r4, r0
 8008864:	6031      	str	r1, [r6, #0]
 8008866:	6831      	ldr	r1, [r6, #0]
 8008868:	1512      	asrs	r2, r2, #20
 800886a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800886e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8008872:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008876:	440a      	add	r2, r1
 8008878:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800887c:	6032      	str	r2, [r6, #0]
 800887e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008882:	ec45 4b10 	vmov	d0, r4, r5
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	7fefffff 	.word	0x7fefffff
 800888c:	7ff00000 	.word	0x7ff00000
 8008890:	43500000 	.word	0x43500000

08008894 <__sread>:
 8008894:	b510      	push	{r4, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	f000 fb90 	bl	8008fc0 <_read_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	bfab      	itete	ge
 80088a4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80088a6:	89a3      	ldrhlt	r3, [r4, #12]
 80088a8:	181b      	addge	r3, r3, r0
 80088aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ae:	bfac      	ite	ge
 80088b0:	6523      	strge	r3, [r4, #80]	; 0x50
 80088b2:	81a3      	strhlt	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__swrite>:
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	461f      	mov	r7, r3
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	05db      	lsls	r3, r3, #23
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	4616      	mov	r6, r2
 80088c6:	d505      	bpl.n	80088d4 <__swrite+0x1e>
 80088c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088cc:	2302      	movs	r3, #2
 80088ce:	2200      	movs	r2, #0
 80088d0:	f000 fae6 	bl	8008ea0 <_lseek_r>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	4632      	mov	r2, r6
 80088e2:	463b      	mov	r3, r7
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	f000 b8a5 	b.w	8008a38 <_write_r>

080088ee <__sseek>:
 80088ee:	b510      	push	{r4, lr}
 80088f0:	460c      	mov	r4, r1
 80088f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f6:	f000 fad3 	bl	8008ea0 <_lseek_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	bf15      	itete	ne
 8008900:	6520      	strne	r0, [r4, #80]	; 0x50
 8008902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800890a:	81a3      	strheq	r3, [r4, #12]
 800890c:	bf18      	it	ne
 800890e:	81a3      	strhne	r3, [r4, #12]
 8008910:	bd10      	pop	{r4, pc}

08008912 <__sclose>:
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 b98f 	b.w	8008c38 <_close_r>

0800891a <strncpy>:
 800891a:	b510      	push	{r4, lr}
 800891c:	3901      	subs	r1, #1
 800891e:	4603      	mov	r3, r0
 8008920:	b132      	cbz	r2, 8008930 <strncpy+0x16>
 8008922:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008926:	f803 4b01 	strb.w	r4, [r3], #1
 800892a:	3a01      	subs	r2, #1
 800892c:	2c00      	cmp	r4, #0
 800892e:	d1f7      	bne.n	8008920 <strncpy+0x6>
 8008930:	441a      	add	r2, r3
 8008932:	2100      	movs	r1, #0
 8008934:	4293      	cmp	r3, r2
 8008936:	d100      	bne.n	800893a <strncpy+0x20>
 8008938:	bd10      	pop	{r4, pc}
 800893a:	f803 1b01 	strb.w	r1, [r3], #1
 800893e:	e7f9      	b.n	8008934 <strncpy+0x1a>

08008940 <__ssprint_r>:
 8008940:	6893      	ldr	r3, [r2, #8]
 8008942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008946:	4680      	mov	r8, r0
 8008948:	460c      	mov	r4, r1
 800894a:	4617      	mov	r7, r2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d061      	beq.n	8008a14 <__ssprint_r+0xd4>
 8008950:	2300      	movs	r3, #0
 8008952:	f8d2 a000 	ldr.w	sl, [r2]
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	469b      	mov	fp, r3
 800895a:	f1bb 0f00 	cmp.w	fp, #0
 800895e:	d02b      	beq.n	80089b8 <__ssprint_r+0x78>
 8008960:	68a6      	ldr	r6, [r4, #8]
 8008962:	455e      	cmp	r6, fp
 8008964:	d844      	bhi.n	80089f0 <__ssprint_r+0xb0>
 8008966:	89a2      	ldrh	r2, [r4, #12]
 8008968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800896c:	d03e      	beq.n	80089ec <__ssprint_r+0xac>
 800896e:	6820      	ldr	r0, [r4, #0]
 8008970:	6921      	ldr	r1, [r4, #16]
 8008972:	6965      	ldr	r5, [r4, #20]
 8008974:	eba0 0901 	sub.w	r9, r0, r1
 8008978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800897c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008980:	f109 0001 	add.w	r0, r9, #1
 8008984:	106d      	asrs	r5, r5, #1
 8008986:	4458      	add	r0, fp
 8008988:	4285      	cmp	r5, r0
 800898a:	bf38      	it	cc
 800898c:	4605      	movcc	r5, r0
 800898e:	0553      	lsls	r3, r2, #21
 8008990:	d545      	bpl.n	8008a1e <__ssprint_r+0xde>
 8008992:	4629      	mov	r1, r5
 8008994:	4640      	mov	r0, r8
 8008996:	f7fc fc05 	bl	80051a4 <_malloc_r>
 800899a:	4606      	mov	r6, r0
 800899c:	b9a0      	cbnz	r0, 80089c8 <__ssprint_r+0x88>
 800899e:	230c      	movs	r3, #12
 80089a0:	f8c8 3000 	str.w	r3, [r8]
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	2300      	movs	r3, #0
 80089ae:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b6:	e02f      	b.n	8008a18 <__ssprint_r+0xd8>
 80089b8:	f8da 3000 	ldr.w	r3, [sl]
 80089bc:	f8da b004 	ldr.w	fp, [sl, #4]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f10a 0a08 	add.w	sl, sl, #8
 80089c6:	e7c8      	b.n	800895a <__ssprint_r+0x1a>
 80089c8:	464a      	mov	r2, r9
 80089ca:	6921      	ldr	r1, [r4, #16]
 80089cc:	f7fc fe26 	bl	800561c <memcpy>
 80089d0:	89a2      	ldrh	r2, [r4, #12]
 80089d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80089d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089da:	81a2      	strh	r2, [r4, #12]
 80089dc:	6126      	str	r6, [r4, #16]
 80089de:	6165      	str	r5, [r4, #20]
 80089e0:	444e      	add	r6, r9
 80089e2:	eba5 0509 	sub.w	r5, r5, r9
 80089e6:	6026      	str	r6, [r4, #0]
 80089e8:	60a5      	str	r5, [r4, #8]
 80089ea:	465e      	mov	r6, fp
 80089ec:	455e      	cmp	r6, fp
 80089ee:	d900      	bls.n	80089f2 <__ssprint_r+0xb2>
 80089f0:	465e      	mov	r6, fp
 80089f2:	4632      	mov	r2, r6
 80089f4:	9901      	ldr	r1, [sp, #4]
 80089f6:	6820      	ldr	r0, [r4, #0]
 80089f8:	f7ff fbc4 	bl	8008184 <memmove>
 80089fc:	68a2      	ldr	r2, [r4, #8]
 80089fe:	1b92      	subs	r2, r2, r6
 8008a00:	60a2      	str	r2, [r4, #8]
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	4432      	add	r2, r6
 8008a06:	6022      	str	r2, [r4, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	eba2 030b 	sub.w	r3, r2, fp
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1d1      	bne.n	80089b8 <__ssprint_r+0x78>
 8008a14:	2000      	movs	r0, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	b003      	add	sp, #12
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4640      	mov	r0, r8
 8008a22:	f7fc fe6b 	bl	80056fc <_realloc_r>
 8008a26:	4606      	mov	r6, r0
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d1d7      	bne.n	80089dc <__ssprint_r+0x9c>
 8008a2c:	6921      	ldr	r1, [r4, #16]
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f7ff f976 	bl	8007d20 <_free_r>
 8008a34:	e7b3      	b.n	800899e <__ssprint_r+0x5e>
	...

08008a38 <_write_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d07      	ldr	r5, [pc, #28]	; (8008a58 <_write_r+0x20>)
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	4608      	mov	r0, r1
 8008a40:	4611      	mov	r1, r2
 8008a42:	2200      	movs	r2, #0
 8008a44:	602a      	str	r2, [r5, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f001 f954 	bl	8009cf4 <_write>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_write_r+0x1e>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_write_r+0x1e>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	200015a4 	.word	0x200015a4

08008a5c <__swsetup_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <__swsetup_r+0xac>)
 8008a60:	4605      	mov	r5, r0
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	460c      	mov	r4, r1
 8008a66:	b118      	cbz	r0, 8008a70 <__swsetup_r+0x14>
 8008a68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a6a:	b90b      	cbnz	r3, 8008a70 <__swsetup_r+0x14>
 8008a6c:	f7ff f8c8 	bl	8007c00 <__sinit>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a76:	0718      	lsls	r0, r3, #28
 8008a78:	d422      	bmi.n	8008ac0 <__swsetup_r+0x64>
 8008a7a:	06d9      	lsls	r1, r3, #27
 8008a7c:	d407      	bmi.n	8008a8e <__swsetup_r+0x32>
 8008a7e:	2309      	movs	r3, #9
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a8c:	e034      	b.n	8008af8 <__swsetup_r+0x9c>
 8008a8e:	0758      	lsls	r0, r3, #29
 8008a90:	d512      	bpl.n	8008ab8 <__swsetup_r+0x5c>
 8008a92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a94:	b141      	cbz	r1, 8008aa8 <__swsetup_r+0x4c>
 8008a96:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	d002      	beq.n	8008aa4 <__swsetup_r+0x48>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7ff f93e 	bl	8007d20 <_free_r>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f043 0308 	orr.w	r3, r3, #8
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	b94b      	cbnz	r3, 8008ad8 <__swsetup_r+0x7c>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ace:	d003      	beq.n	8008ad8 <__swsetup_r+0x7c>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fa22 	bl	8008f1c <__smakebuf_r>
 8008ad8:	89a0      	ldrh	r0, [r4, #12]
 8008ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ade:	f010 0301 	ands.w	r3, r0, #1
 8008ae2:	d00a      	beq.n	8008afa <__swsetup_r+0x9e>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60a3      	str	r3, [r4, #8]
 8008ae8:	6963      	ldr	r3, [r4, #20]
 8008aea:	425b      	negs	r3, r3
 8008aec:	61a3      	str	r3, [r4, #24]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	b943      	cbnz	r3, 8008b04 <__swsetup_r+0xa8>
 8008af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008af6:	d1c4      	bne.n	8008a82 <__swsetup_r+0x26>
 8008af8:	bd38      	pop	{r3, r4, r5, pc}
 8008afa:	0781      	lsls	r1, r0, #30
 8008afc:	bf58      	it	pl
 8008afe:	6963      	ldrpl	r3, [r4, #20]
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	e7f4      	b.n	8008aee <__swsetup_r+0x92>
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7f7      	b.n	8008af8 <__swsetup_r+0x9c>
 8008b08:	20000738 	.word	0x20000738

08008b0c <__register_exitproc>:
 8008b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008b8c <__register_exitproc+0x80>
 8008b14:	4606      	mov	r6, r0
 8008b16:	f8da 0000 	ldr.w	r0, [sl]
 8008b1a:	4698      	mov	r8, r3
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	4691      	mov	r9, r2
 8008b20:	f7ff fb2e 	bl	8008180 <__retarget_lock_acquire_recursive>
 8008b24:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <__register_exitproc+0x7c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8008b2c:	b91c      	cbnz	r4, 8008b36 <__register_exitproc+0x2a>
 8008b2e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008b32:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008b36:	6865      	ldr	r5, [r4, #4]
 8008b38:	f8da 0000 	ldr.w	r0, [sl]
 8008b3c:	2d1f      	cmp	r5, #31
 8008b3e:	dd05      	ble.n	8008b4c <__register_exitproc+0x40>
 8008b40:	f7ff fb1f 	bl	8008182 <__retarget_lock_release_recursive>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	b19e      	cbz	r6, 8008b76 <__register_exitproc+0x6a>
 8008b4e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8008b52:	2201      	movs	r2, #1
 8008b54:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8008b58:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8008b5c:	40aa      	lsls	r2, r5
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008b64:	2e02      	cmp	r6, #2
 8008b66:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008b6a:	bf02      	ittt	eq
 8008b6c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8008b70:	4313      	orreq	r3, r2
 8008b72:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8008b76:	1c6b      	adds	r3, r5, #1
 8008b78:	3502      	adds	r5, #2
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8008b80:	f7ff faff 	bl	8008182 <__retarget_lock_release_recursive>
 8008b84:	2000      	movs	r0, #0
 8008b86:	e7df      	b.n	8008b48 <__register_exitproc+0x3c>
 8008b88:	0800e750 	.word	0x0800e750
 8008b8c:	20000f78 	.word	0x20000f78

08008b90 <__assert_func>:
 8008b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b92:	4614      	mov	r4, r2
 8008b94:	461a      	mov	r2, r3
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <__assert_func+0x2c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	68d8      	ldr	r0, [r3, #12]
 8008b9e:	b14c      	cbz	r4, 8008bb4 <__assert_func+0x24>
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <__assert_func+0x30>)
 8008ba2:	9100      	str	r1, [sp, #0]
 8008ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ba8:	4906      	ldr	r1, [pc, #24]	; (8008bc4 <__assert_func+0x34>)
 8008baa:	462b      	mov	r3, r5
 8008bac:	f000 f960 	bl	8008e70 <fiprintf>
 8008bb0:	f000 ff2d 	bl	8009a0e <abort>
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <__assert_func+0x38>)
 8008bb6:	461c      	mov	r4, r3
 8008bb8:	e7f3      	b.n	8008ba2 <__assert_func+0x12>
 8008bba:	bf00      	nop
 8008bbc:	20000738 	.word	0x20000738
 8008bc0:	0800e97c 	.word	0x0800e97c
 8008bc4:	0800e989 	.word	0x0800e989
 8008bc8:	0800e9b7 	.word	0x0800e9b7

08008bcc <_calloc_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	fba1 1502 	umull	r1, r5, r1, r2
 8008bd2:	b92d      	cbnz	r5, 8008be0 <_calloc_r+0x14>
 8008bd4:	f7fc fae6 	bl	80051a4 <_malloc_r>
 8008bd8:	4604      	mov	r4, r0
 8008bda:	b938      	cbnz	r0, 8008bec <_calloc_r+0x20>
 8008bdc:	4620      	mov	r0, r4
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	f7fc fab6 	bl	8005150 <__errno>
 8008be4:	230c      	movs	r3, #12
 8008be6:	6003      	str	r3, [r0, #0]
 8008be8:	2400      	movs	r4, #0
 8008bea:	e7f7      	b.n	8008bdc <_calloc_r+0x10>
 8008bec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008bf0:	f022 0203 	bic.w	r2, r2, #3
 8008bf4:	3a04      	subs	r2, #4
 8008bf6:	2a24      	cmp	r2, #36	; 0x24
 8008bf8:	d819      	bhi.n	8008c2e <_calloc_r+0x62>
 8008bfa:	2a13      	cmp	r2, #19
 8008bfc:	d915      	bls.n	8008c2a <_calloc_r+0x5e>
 8008bfe:	2a1b      	cmp	r2, #27
 8008c00:	e9c0 5500 	strd	r5, r5, [r0]
 8008c04:	d806      	bhi.n	8008c14 <_calloc_r+0x48>
 8008c06:	f100 0308 	add.w	r3, r0, #8
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	e9c3 2200 	strd	r2, r2, [r3]
 8008c10:	609a      	str	r2, [r3, #8]
 8008c12:	e7e3      	b.n	8008bdc <_calloc_r+0x10>
 8008c14:	2a24      	cmp	r2, #36	; 0x24
 8008c16:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8008c1a:	bf11      	iteee	ne
 8008c1c:	f100 0310 	addne.w	r3, r0, #16
 8008c20:	6105      	streq	r5, [r0, #16]
 8008c22:	f100 0318 	addeq.w	r3, r0, #24
 8008c26:	6145      	streq	r5, [r0, #20]
 8008c28:	e7ef      	b.n	8008c0a <_calloc_r+0x3e>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	e7ed      	b.n	8008c0a <_calloc_r+0x3e>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7fc fd02 	bl	8005638 <memset>
 8008c34:	e7d2      	b.n	8008bdc <_calloc_r+0x10>
	...

08008c38 <_close_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	; (8008c54 <_close_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f001 f81e 	bl	8009c84 <_close>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_close_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_close_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200015a4 	.word	0x200015a4

08008c58 <_fclose_r>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	b911      	cbnz	r1, 8008c66 <_fclose_r+0xe>
 8008c60:	2500      	movs	r5, #0
 8008c62:	4628      	mov	r0, r5
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
 8008c66:	b118      	cbz	r0, 8008c70 <_fclose_r+0x18>
 8008c68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c6a:	b90b      	cbnz	r3, 8008c70 <_fclose_r+0x18>
 8008c6c:	f7fe ffc8 	bl	8007c00 <__sinit>
 8008c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c72:	07d8      	lsls	r0, r3, #31
 8008c74:	d405      	bmi.n	8008c82 <_fclose_r+0x2a>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	0599      	lsls	r1, r3, #22
 8008c7a:	d402      	bmi.n	8008c82 <_fclose_r+0x2a>
 8008c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7e:	f7ff fa7f 	bl	8008180 <__retarget_lock_acquire_recursive>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	b93b      	cbnz	r3, 8008c98 <_fclose_r+0x40>
 8008c88:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008c8a:	f015 0501 	ands.w	r5, r5, #1
 8008c8e:	d1e7      	bne.n	8008c60 <_fclose_r+0x8>
 8008c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c92:	f7ff fa76 	bl	8008182 <__retarget_lock_release_recursive>
 8008c96:	e7e4      	b.n	8008c62 <_fclose_r+0xa>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f000 f834 	bl	8008d08 <__sflush_r>
 8008ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	b133      	cbz	r3, 8008cb4 <_fclose_r+0x5c>
 8008ca6:	69e1      	ldr	r1, [r4, #28]
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4798      	blx	r3
 8008cac:	2800      	cmp	r0, #0
 8008cae:	bfb8      	it	lt
 8008cb0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	061a      	lsls	r2, r3, #24
 8008cb8:	d503      	bpl.n	8008cc2 <_fclose_r+0x6a>
 8008cba:	6921      	ldr	r1, [r4, #16]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff f82f 	bl	8007d20 <_free_r>
 8008cc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008cc4:	b141      	cbz	r1, 8008cd8 <_fclose_r+0x80>
 8008cc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d002      	beq.n	8008cd4 <_fclose_r+0x7c>
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f7ff f826 	bl	8007d20 <_free_r>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8008cd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008cda:	b121      	cbz	r1, 8008ce6 <_fclose_r+0x8e>
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff f81f 	bl	8007d20 <_free_r>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6463      	str	r3, [r4, #68]	; 0x44
 8008ce6:	f7fe ff73 	bl	8007bd0 <__sfp_lock_acquire>
 8008cea:	2300      	movs	r3, #0
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf0:	07db      	lsls	r3, r3, #31
 8008cf2:	d402      	bmi.n	8008cfa <_fclose_r+0xa2>
 8008cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf6:	f7ff fa44 	bl	8008182 <__retarget_lock_release_recursive>
 8008cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfc:	f7ff fa3f 	bl	800817e <__retarget_lock_close_recursive>
 8008d00:	f7fe ff6c 	bl	8007bdc <__sfp_lock_release>
 8008d04:	e7ad      	b.n	8008c62 <_fclose_r+0xa>
	...

08008d08 <__sflush_r>:
 8008d08:	898b      	ldrh	r3, [r1, #12]
 8008d0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	0718      	lsls	r0, r3, #28
 8008d16:	460c      	mov	r4, r1
 8008d18:	d45f      	bmi.n	8008dda <__sflush_r+0xd2>
 8008d1a:	684b      	ldr	r3, [r1, #4]
 8008d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	818a      	strh	r2, [r1, #12]
 8008d24:	dc05      	bgt.n	8008d32 <__sflush_r+0x2a>
 8008d26:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc02      	bgt.n	8008d32 <__sflush_r+0x2a>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	d0f9      	beq.n	8008d2c <__sflush_r+0x24>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d3e:	682f      	ldr	r7, [r5, #0]
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	d036      	beq.n	8008db2 <__sflush_r+0xaa>
 8008d44:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	075a      	lsls	r2, r3, #29
 8008d4a:	d505      	bpl.n	8008d58 <__sflush_r+0x50>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	1ac0      	subs	r0, r0, r3
 8008d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d52:	b10b      	cbz	r3, 8008d58 <__sflush_r+0x50>
 8008d54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d56:	1ac0      	subs	r0, r0, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d5e:	69e1      	ldr	r1, [r4, #28]
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b0      	blx	r6
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	d106      	bne.n	8008d78 <__sflush_r+0x70>
 8008d6a:	6829      	ldr	r1, [r5, #0]
 8008d6c:	291d      	cmp	r1, #29
 8008d6e:	d830      	bhi.n	8008dd2 <__sflush_r+0xca>
 8008d70:	4a2b      	ldr	r2, [pc, #172]	; (8008e20 <__sflush_r+0x118>)
 8008d72:	40ca      	lsrs	r2, r1
 8008d74:	07d6      	lsls	r6, r2, #31
 8008d76:	d52c      	bpl.n	8008dd2 <__sflush_r+0xca>
 8008d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d7c:	b21b      	sxth	r3, r3
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6062      	str	r2, [r4, #4]
 8008d82:	04d9      	lsls	r1, r3, #19
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	6022      	str	r2, [r4, #0]
 8008d8a:	d504      	bpl.n	8008d96 <__sflush_r+0x8e>
 8008d8c:	1c42      	adds	r2, r0, #1
 8008d8e:	d101      	bne.n	8008d94 <__sflush_r+0x8c>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b903      	cbnz	r3, 8008d96 <__sflush_r+0x8e>
 8008d94:	6520      	str	r0, [r4, #80]	; 0x50
 8008d96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008d98:	602f      	str	r7, [r5, #0]
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	d0c6      	beq.n	8008d2c <__sflush_r+0x24>
 8008d9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008da2:	4299      	cmp	r1, r3
 8008da4:	d002      	beq.n	8008dac <__sflush_r+0xa4>
 8008da6:	4628      	mov	r0, r5
 8008da8:	f7fe ffba 	bl	8007d20 <_free_r>
 8008dac:	2000      	movs	r0, #0
 8008dae:	6320      	str	r0, [r4, #48]	; 0x30
 8008db0:	e7bd      	b.n	8008d2e <__sflush_r+0x26>
 8008db2:	69e1      	ldr	r1, [r4, #28]
 8008db4:	2301      	movs	r3, #1
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b0      	blx	r6
 8008dba:	1c41      	adds	r1, r0, #1
 8008dbc:	d1c3      	bne.n	8008d46 <__sflush_r+0x3e>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0c0      	beq.n	8008d46 <__sflush_r+0x3e>
 8008dc4:	2b1d      	cmp	r3, #29
 8008dc6:	d001      	beq.n	8008dcc <__sflush_r+0xc4>
 8008dc8:	2b16      	cmp	r3, #22
 8008dca:	d101      	bne.n	8008dd0 <__sflush_r+0xc8>
 8008dcc:	602f      	str	r7, [r5, #0]
 8008dce:	e7ad      	b.n	8008d2c <__sflush_r+0x24>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	e7a9      	b.n	8008d2e <__sflush_r+0x26>
 8008dda:	690f      	ldr	r7, [r1, #16]
 8008ddc:	2f00      	cmp	r7, #0
 8008dde:	d0a5      	beq.n	8008d2c <__sflush_r+0x24>
 8008de0:	079b      	lsls	r3, r3, #30
 8008de2:	680e      	ldr	r6, [r1, #0]
 8008de4:	bf08      	it	eq
 8008de6:	694b      	ldreq	r3, [r1, #20]
 8008de8:	600f      	str	r7, [r1, #0]
 8008dea:	bf18      	it	ne
 8008dec:	2300      	movne	r3, #0
 8008dee:	eba6 0807 	sub.w	r8, r6, r7
 8008df2:	608b      	str	r3, [r1, #8]
 8008df4:	f1b8 0f00 	cmp.w	r8, #0
 8008df8:	dd98      	ble.n	8008d2c <__sflush_r+0x24>
 8008dfa:	69e1      	ldr	r1, [r4, #28]
 8008dfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dfe:	4643      	mov	r3, r8
 8008e00:	463a      	mov	r2, r7
 8008e02:	4628      	mov	r0, r5
 8008e04:	47b0      	blx	r6
 8008e06:	2800      	cmp	r0, #0
 8008e08:	dc06      	bgt.n	8008e18 <__sflush_r+0x110>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e16:	e78a      	b.n	8008d2e <__sflush_r+0x26>
 8008e18:	4407      	add	r7, r0
 8008e1a:	eba8 0800 	sub.w	r8, r8, r0
 8008e1e:	e7e9      	b.n	8008df4 <__sflush_r+0xec>
 8008e20:	20400001 	.word	0x20400001

08008e24 <_fflush_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	4605      	mov	r5, r0
 8008e2a:	b118      	cbz	r0, 8008e34 <_fflush_r+0x10>
 8008e2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e2e:	b90b      	cbnz	r3, 8008e34 <_fflush_r+0x10>
 8008e30:	f7fe fee6 	bl	8007c00 <__sinit>
 8008e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e38:	b1bb      	cbz	r3, 8008e6a <_fflush_r+0x46>
 8008e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e3c:	07d0      	lsls	r0, r2, #31
 8008e3e:	d404      	bmi.n	8008e4a <_fflush_r+0x26>
 8008e40:	0599      	lsls	r1, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_fflush_r+0x26>
 8008e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e46:	f7ff f99b 	bl	8008180 <__retarget_lock_acquire_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7ff ff5b 	bl	8008d08 <__sflush_r>
 8008e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e54:	07da      	lsls	r2, r3, #31
 8008e56:	4605      	mov	r5, r0
 8008e58:	d405      	bmi.n	8008e66 <_fflush_r+0x42>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	059b      	lsls	r3, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_fflush_r+0x42>
 8008e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e62:	f7ff f98e 	bl	8008182 <__retarget_lock_release_recursive>
 8008e66:	4628      	mov	r0, r5
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	461d      	mov	r5, r3
 8008e6c:	e7fb      	b.n	8008e66 <_fflush_r+0x42>
	...

08008e70 <fiprintf>:
 8008e70:	b40e      	push	{r1, r2, r3}
 8008e72:	b503      	push	{r0, r1, lr}
 8008e74:	4601      	mov	r1, r0
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	4805      	ldr	r0, [pc, #20]	; (8008e90 <fiprintf+0x20>)
 8008e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7e:	6800      	ldr	r0, [r0, #0]
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	f000 f8e1 	bl	8009048 <_vfiprintf_r>
 8008e86:	b002      	add	sp, #8
 8008e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e8c:	b003      	add	sp, #12
 8008e8e:	4770      	bx	lr
 8008e90:	20000738 	.word	0x20000738

08008e94 <__locale_mb_cur_max>:
 8008e94:	4b01      	ldr	r3, [pc, #4]	; (8008e9c <__locale_mb_cur_max+0x8>)
 8008e96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008e9a:	4770      	bx	lr
 8008e9c:	20000f7c 	.word	0x20000f7c

08008ea0 <_lseek_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	; (8008ec0 <_lseek_r+0x20>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f000 ff10 	bl	8009cd4 <_lseek>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_lseek_r+0x1e>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_lseek_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	200015a4 	.word	0x200015a4

08008ec4 <__swhatbuf_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	b096      	sub	sp, #88	; 0x58
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	da0a      	bge.n	8008eec <__swhatbuf_r+0x28>
 8008ed6:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8008eda:	2300      	movs	r3, #0
 8008edc:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	d116      	bne.n	8008f12 <__swhatbuf_r+0x4e>
 8008ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	e015      	b.n	8008f18 <__swhatbuf_r+0x54>
 8008eec:	466a      	mov	r2, sp
 8008eee:	f000 fe01 	bl	8009af4 <_fstat_r>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	dbef      	blt.n	8008ed6 <__swhatbuf_r+0x12>
 8008ef6:	9a01      	ldr	r2, [sp, #4]
 8008ef8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008efc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f00:	425a      	negs	r2, r3
 8008f02:	415a      	adcs	r2, r3
 8008f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	e002      	b.n	8008f18 <__swhatbuf_r+0x54>
 8008f12:	2240      	movs	r2, #64	; 0x40
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	b016      	add	sp, #88	; 0x58
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}

08008f1c <__smakebuf_r>:
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f20:	079d      	lsls	r5, r3, #30
 8008f22:	4606      	mov	r6, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	d507      	bpl.n	8008f38 <__smakebuf_r+0x1c>
 8008f28:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	2301      	movs	r3, #1
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	b002      	add	sp, #8
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	ab01      	add	r3, sp, #4
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	f7ff ffc2 	bl	8008ec4 <__swhatbuf_r>
 8008f40:	9900      	ldr	r1, [sp, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7fc f92d 	bl	80051a4 <_malloc_r>
 8008f4a:	b948      	cbnz	r0, 8008f60 <__smakebuf_r+0x44>
 8008f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f50:	059a      	lsls	r2, r3, #22
 8008f52:	d4ef      	bmi.n	8008f34 <__smakebuf_r+0x18>
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	f043 0302 	orr.w	r3, r3, #2
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	e7e3      	b.n	8008f28 <__smakebuf_r+0xc>
 8008f60:	4b0d      	ldr	r3, [pc, #52]	; (8008f98 <__smakebuf_r+0x7c>)
 8008f62:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	6020      	str	r0, [r4, #0]
 8008f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	6163      	str	r3, [r4, #20]
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	6120      	str	r0, [r4, #16]
 8008f76:	b15b      	cbz	r3, 8008f90 <__smakebuf_r+0x74>
 8008f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f000 fdcb 	bl	8009b18 <_isatty_r>
 8008f82:	b128      	cbz	r0, 8008f90 <__smakebuf_r+0x74>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	89a0      	ldrh	r0, [r4, #12]
 8008f92:	4305      	orrs	r5, r0
 8008f94:	81a5      	strh	r5, [r4, #12]
 8008f96:	e7cd      	b.n	8008f34 <__smakebuf_r+0x18>
 8008f98:	08007bc5 	.word	0x08007bc5

08008f9c <__ascii_mbtowc>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	b901      	cbnz	r1, 8008fa2 <__ascii_mbtowc+0x6>
 8008fa0:	a901      	add	r1, sp, #4
 8008fa2:	b142      	cbz	r2, 8008fb6 <__ascii_mbtowc+0x1a>
 8008fa4:	b14b      	cbz	r3, 8008fba <__ascii_mbtowc+0x1e>
 8008fa6:	7813      	ldrb	r3, [r2, #0]
 8008fa8:	600b      	str	r3, [r1, #0]
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	1e10      	subs	r0, r2, #0
 8008fae:	bf18      	it	ne
 8008fb0:	2001      	movne	r0, #1
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	e7fb      	b.n	8008fb2 <__ascii_mbtowc+0x16>
 8008fba:	f06f 0001 	mvn.w	r0, #1
 8008fbe:	e7f8      	b.n	8008fb2 <__ascii_mbtowc+0x16>

08008fc0 <_read_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_read_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f000 fe88 	bl	8009ce4 <_read>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_read_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_read_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	200015a4 	.word	0x200015a4

08008fe4 <__sprint_r>:
 8008fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	6893      	ldr	r3, [r2, #8]
 8008fea:	4680      	mov	r8, r0
 8008fec:	460f      	mov	r7, r1
 8008fee:	4614      	mov	r4, r2
 8008ff0:	b91b      	cbnz	r3, 8008ffa <__sprint_r+0x16>
 8008ff2:	6053      	str	r3, [r2, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008ffc:	049d      	lsls	r5, r3, #18
 8008ffe:	d520      	bpl.n	8009042 <__sprint_r+0x5e>
 8009000:	6815      	ldr	r5, [r2, #0]
 8009002:	3508      	adds	r5, #8
 8009004:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8009008:	f04f 0900 	mov.w	r9, #0
 800900c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009010:	45ca      	cmp	sl, r9
 8009012:	dc0b      	bgt.n	800902c <__sprint_r+0x48>
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	f026 0003 	bic.w	r0, r6, #3
 800901a:	1a18      	subs	r0, r3, r0
 800901c:	60a0      	str	r0, [r4, #8]
 800901e:	3508      	adds	r5, #8
 8009020:	2800      	cmp	r0, #0
 8009022:	d1ef      	bne.n	8009004 <__sprint_r+0x20>
 8009024:	2300      	movs	r3, #0
 8009026:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800902a:	e7e4      	b.n	8008ff6 <__sprint_r+0x12>
 800902c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009030:	463a      	mov	r2, r7
 8009032:	4640      	mov	r0, r8
 8009034:	f000 fd33 	bl	8009a9e <_fputwc_r>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d0f3      	beq.n	8009024 <__sprint_r+0x40>
 800903c:	f109 0901 	add.w	r9, r9, #1
 8009040:	e7e6      	b.n	8009010 <__sprint_r+0x2c>
 8009042:	f7fe ff2d 	bl	8007ea0 <__sfvwrite_r>
 8009046:	e7ed      	b.n	8009024 <__sprint_r+0x40>

08009048 <_vfiprintf_r>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	ed2d 8b02 	vpush	{d8}
 8009050:	b0b9      	sub	sp, #228	; 0xe4
 8009052:	460f      	mov	r7, r1
 8009054:	9201      	str	r2, [sp, #4]
 8009056:	461d      	mov	r5, r3
 8009058:	461c      	mov	r4, r3
 800905a:	4681      	mov	r9, r0
 800905c:	b118      	cbz	r0, 8009066 <_vfiprintf_r+0x1e>
 800905e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009060:	b90b      	cbnz	r3, 8009066 <_vfiprintf_r+0x1e>
 8009062:	f7fe fdcd 	bl	8007c00 <__sinit>
 8009066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009068:	07d8      	lsls	r0, r3, #31
 800906a:	d405      	bmi.n	8009078 <_vfiprintf_r+0x30>
 800906c:	89bb      	ldrh	r3, [r7, #12]
 800906e:	0599      	lsls	r1, r3, #22
 8009070:	d402      	bmi.n	8009078 <_vfiprintf_r+0x30>
 8009072:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009074:	f7ff f884 	bl	8008180 <__retarget_lock_acquire_recursive>
 8009078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800907c:	049a      	lsls	r2, r3, #18
 800907e:	d406      	bmi.n	800908e <_vfiprintf_r+0x46>
 8009080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009084:	81bb      	strh	r3, [r7, #12]
 8009086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800908c:	667b      	str	r3, [r7, #100]	; 0x64
 800908e:	89bb      	ldrh	r3, [r7, #12]
 8009090:	071e      	lsls	r6, r3, #28
 8009092:	d501      	bpl.n	8009098 <_vfiprintf_r+0x50>
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	b9bb      	cbnz	r3, 80090c8 <_vfiprintf_r+0x80>
 8009098:	4639      	mov	r1, r7
 800909a:	4648      	mov	r0, r9
 800909c:	f7ff fcde 	bl	8008a5c <__swsetup_r>
 80090a0:	b190      	cbz	r0, 80090c8 <_vfiprintf_r+0x80>
 80090a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a4:	07d8      	lsls	r0, r3, #31
 80090a6:	d508      	bpl.n	80090ba <_vfiprintf_r+0x72>
 80090a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090ac:	9302      	str	r3, [sp, #8]
 80090ae:	9802      	ldr	r0, [sp, #8]
 80090b0:	b039      	add	sp, #228	; 0xe4
 80090b2:	ecbd 8b02 	vpop	{d8}
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	89bb      	ldrh	r3, [r7, #12]
 80090bc:	0599      	lsls	r1, r3, #22
 80090be:	d4f3      	bmi.n	80090a8 <_vfiprintf_r+0x60>
 80090c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090c2:	f7ff f85e 	bl	8008182 <__retarget_lock_release_recursive>
 80090c6:	e7ef      	b.n	80090a8 <_vfiprintf_r+0x60>
 80090c8:	89bb      	ldrh	r3, [r7, #12]
 80090ca:	f003 021a 	and.w	r2, r3, #26
 80090ce:	2a0a      	cmp	r2, #10
 80090d0:	d116      	bne.n	8009100 <_vfiprintf_r+0xb8>
 80090d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	db12      	blt.n	8009100 <_vfiprintf_r+0xb8>
 80090da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090dc:	07d2      	lsls	r2, r2, #31
 80090de:	d404      	bmi.n	80090ea <_vfiprintf_r+0xa2>
 80090e0:	059e      	lsls	r6, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_vfiprintf_r+0xa2>
 80090e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090e6:	f7ff f84c 	bl	8008182 <__retarget_lock_release_recursive>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	462b      	mov	r3, r5
 80090ee:	4639      	mov	r1, r7
 80090f0:	4648      	mov	r0, r9
 80090f2:	b039      	add	sp, #228	; 0xe4
 80090f4:	ecbd 8b02 	vpop	{d8}
 80090f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	f000 bc3a 	b.w	8009974 <__sbprintf>
 8009100:	2300      	movs	r3, #0
 8009102:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8009106:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800910a:	ae0f      	add	r6, sp, #60	; 0x3c
 800910c:	ee08 3a10 	vmov	s16, r3
 8009110:	960c      	str	r6, [sp, #48]	; 0x30
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	9302      	str	r3, [sp, #8]
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	461d      	mov	r5, r3
 800911a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911e:	b10a      	cbz	r2, 8009124 <_vfiprintf_r+0xdc>
 8009120:	2a25      	cmp	r2, #37	; 0x25
 8009122:	d1f9      	bne.n	8009118 <_vfiprintf_r+0xd0>
 8009124:	9b01      	ldr	r3, [sp, #4]
 8009126:	ebb5 0803 	subs.w	r8, r5, r3
 800912a:	d00d      	beq.n	8009148 <_vfiprintf_r+0x100>
 800912c:	e9c6 3800 	strd	r3, r8, [r6]
 8009130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009132:	4443      	add	r3, r8
 8009134:	930e      	str	r3, [sp, #56]	; 0x38
 8009136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009138:	3301      	adds	r3, #1
 800913a:	2b07      	cmp	r3, #7
 800913c:	930d      	str	r3, [sp, #52]	; 0x34
 800913e:	dc75      	bgt.n	800922c <_vfiprintf_r+0x1e4>
 8009140:	3608      	adds	r6, #8
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	4443      	add	r3, r8
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	782b      	ldrb	r3, [r5, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 83d6 	beq.w	80098fc <_vfiprintf_r+0x8b4>
 8009150:	2300      	movs	r3, #0
 8009152:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009156:	1c6a      	adds	r2, r5, #1
 8009158:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800915c:	9100      	str	r1, [sp, #0]
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	469a      	mov	sl, r3
 8009162:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009166:	9201      	str	r2, [sp, #4]
 8009168:	f1a3 0220 	sub.w	r2, r3, #32
 800916c:	2a5a      	cmp	r2, #90	; 0x5a
 800916e:	f200 831f 	bhi.w	80097b0 <_vfiprintf_r+0x768>
 8009172:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009176:	009b      	.short	0x009b
 8009178:	031d031d 	.word	0x031d031d
 800917c:	031d00a3 	.word	0x031d00a3
 8009180:	031d031d 	.word	0x031d031d
 8009184:	031d0082 	.word	0x031d0082
 8009188:	00a6031d 	.word	0x00a6031d
 800918c:	031d00b0 	.word	0x031d00b0
 8009190:	00b200ad 	.word	0x00b200ad
 8009194:	00cd031d 	.word	0x00cd031d
 8009198:	00d000d0 	.word	0x00d000d0
 800919c:	00d000d0 	.word	0x00d000d0
 80091a0:	00d000d0 	.word	0x00d000d0
 80091a4:	00d000d0 	.word	0x00d000d0
 80091a8:	031d00d0 	.word	0x031d00d0
 80091ac:	031d031d 	.word	0x031d031d
 80091b0:	031d031d 	.word	0x031d031d
 80091b4:	031d031d 	.word	0x031d031d
 80091b8:	031d031d 	.word	0x031d031d
 80091bc:	010800fa 	.word	0x010800fa
 80091c0:	031d031d 	.word	0x031d031d
 80091c4:	031d031d 	.word	0x031d031d
 80091c8:	031d031d 	.word	0x031d031d
 80091cc:	031d031d 	.word	0x031d031d
 80091d0:	031d031d 	.word	0x031d031d
 80091d4:	031d0158 	.word	0x031d0158
 80091d8:	031d031d 	.word	0x031d031d
 80091dc:	031d01a1 	.word	0x031d01a1
 80091e0:	031d027e 	.word	0x031d027e
 80091e4:	029e031d 	.word	0x029e031d
 80091e8:	031d031d 	.word	0x031d031d
 80091ec:	031d031d 	.word	0x031d031d
 80091f0:	031d031d 	.word	0x031d031d
 80091f4:	031d031d 	.word	0x031d031d
 80091f8:	031d031d 	.word	0x031d031d
 80091fc:	010a00fa 	.word	0x010a00fa
 8009200:	031d031d 	.word	0x031d031d
 8009204:	00e0031d 	.word	0x00e0031d
 8009208:	00f4010a 	.word	0x00f4010a
 800920c:	00ed031d 	.word	0x00ed031d
 8009210:	0136031d 	.word	0x0136031d
 8009214:	018f015a 	.word	0x018f015a
 8009218:	031d00f4 	.word	0x031d00f4
 800921c:	009901a1 	.word	0x009901a1
 8009220:	031d0280 	.word	0x031d0280
 8009224:	0065031d 	.word	0x0065031d
 8009228:	0099031d 	.word	0x0099031d
 800922c:	aa0c      	add	r2, sp, #48	; 0x30
 800922e:	4639      	mov	r1, r7
 8009230:	4648      	mov	r0, r9
 8009232:	f7ff fed7 	bl	8008fe4 <__sprint_r>
 8009236:	2800      	cmp	r0, #0
 8009238:	f040 833f 	bne.w	80098ba <_vfiprintf_r+0x872>
 800923c:	ae0f      	add	r6, sp, #60	; 0x3c
 800923e:	e780      	b.n	8009142 <_vfiprintf_r+0xfa>
 8009240:	4a9c      	ldr	r2, [pc, #624]	; (80094b4 <_vfiprintf_r+0x46c>)
 8009242:	9205      	str	r2, [sp, #20]
 8009244:	f01a 0220 	ands.w	r2, sl, #32
 8009248:	f000 8235 	beq.w	80096b6 <_vfiprintf_r+0x66e>
 800924c:	3407      	adds	r4, #7
 800924e:	f024 0207 	bic.w	r2, r4, #7
 8009252:	4693      	mov	fp, r2
 8009254:	6855      	ldr	r5, [r2, #4]
 8009256:	f85b 4b08 	ldr.w	r4, [fp], #8
 800925a:	f01a 0f01 	tst.w	sl, #1
 800925e:	d009      	beq.n	8009274 <_vfiprintf_r+0x22c>
 8009260:	ea54 0205 	orrs.w	r2, r4, r5
 8009264:	bf1f      	itttt	ne
 8009266:	2230      	movne	r2, #48	; 0x30
 8009268:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800926c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8009270:	f04a 0a02 	orrne.w	sl, sl, #2
 8009274:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009278:	e11a      	b.n	80094b0 <_vfiprintf_r+0x468>
 800927a:	4648      	mov	r0, r9
 800927c:	f7fe ff7a 	bl	8008174 <_localeconv_r>
 8009280:	6843      	ldr	r3, [r0, #4]
 8009282:	4618      	mov	r0, r3
 8009284:	ee08 3a10 	vmov	s16, r3
 8009288:	f7f6 ffa2 	bl	80001d0 <strlen>
 800928c:	9007      	str	r0, [sp, #28]
 800928e:	4648      	mov	r0, r9
 8009290:	f7fe ff70 	bl	8008174 <_localeconv_r>
 8009294:	6883      	ldr	r3, [r0, #8]
 8009296:	9306      	str	r3, [sp, #24]
 8009298:	9b07      	ldr	r3, [sp, #28]
 800929a:	b12b      	cbz	r3, 80092a8 <_vfiprintf_r+0x260>
 800929c:	9b06      	ldr	r3, [sp, #24]
 800929e:	b11b      	cbz	r3, 80092a8 <_vfiprintf_r+0x260>
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b10b      	cbz	r3, 80092a8 <_vfiprintf_r+0x260>
 80092a4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	e75a      	b.n	8009162 <_vfiprintf_r+0x11a>
 80092ac:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f9      	bne.n	80092a8 <_vfiprintf_r+0x260>
 80092b4:	2320      	movs	r3, #32
 80092b6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80092ba:	e7f5      	b.n	80092a8 <_vfiprintf_r+0x260>
 80092bc:	f04a 0a01 	orr.w	sl, sl, #1
 80092c0:	e7f2      	b.n	80092a8 <_vfiprintf_r+0x260>
 80092c2:	f854 3b04 	ldr.w	r3, [r4], #4
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	daed      	bge.n	80092a8 <_vfiprintf_r+0x260>
 80092cc:	425b      	negs	r3, r3
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	f04a 0a04 	orr.w	sl, sl, #4
 80092d4:	e7e8      	b.n	80092a8 <_vfiprintf_r+0x260>
 80092d6:	232b      	movs	r3, #43	; 0x2b
 80092d8:	e7ed      	b.n	80092b6 <_vfiprintf_r+0x26e>
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80092e0:	2b2a      	cmp	r3, #42	; 0x2a
 80092e2:	d112      	bne.n	800930a <_vfiprintf_r+0x2c2>
 80092e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80092e8:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80092ec:	e9cd 3200 	strd	r3, r2, [sp]
 80092f0:	e7da      	b.n	80092a8 <_vfiprintf_r+0x260>
 80092f2:	9b00      	ldr	r3, [sp, #0]
 80092f4:	200a      	movs	r0, #10
 80092f6:	fb00 1303 	mla	r3, r0, r3, r1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009300:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009304:	2909      	cmp	r1, #9
 8009306:	d9f4      	bls.n	80092f2 <_vfiprintf_r+0x2aa>
 8009308:	e72d      	b.n	8009166 <_vfiprintf_r+0x11e>
 800930a:	2100      	movs	r1, #0
 800930c:	9100      	str	r1, [sp, #0]
 800930e:	e7f7      	b.n	8009300 <_vfiprintf_r+0x2b8>
 8009310:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009314:	e7c8      	b.n	80092a8 <_vfiprintf_r+0x260>
 8009316:	2100      	movs	r1, #0
 8009318:	9a01      	ldr	r2, [sp, #4]
 800931a:	9103      	str	r1, [sp, #12]
 800931c:	9903      	ldr	r1, [sp, #12]
 800931e:	3b30      	subs	r3, #48	; 0x30
 8009320:	200a      	movs	r0, #10
 8009322:	fb00 3301 	mla	r3, r0, r1, r3
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	f812 3b01 	ldrb.w	r3, [r2], #1
 800932c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009330:	2909      	cmp	r1, #9
 8009332:	d9f3      	bls.n	800931c <_vfiprintf_r+0x2d4>
 8009334:	e717      	b.n	8009166 <_vfiprintf_r+0x11e>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b68      	cmp	r3, #104	; 0x68
 800933c:	bf01      	itttt	eq
 800933e:	9b01      	ldreq	r3, [sp, #4]
 8009340:	3301      	addeq	r3, #1
 8009342:	9301      	streq	r3, [sp, #4]
 8009344:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009348:	bf18      	it	ne
 800934a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800934e:	e7ab      	b.n	80092a8 <_vfiprintf_r+0x260>
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b6c      	cmp	r3, #108	; 0x6c
 8009356:	d105      	bne.n	8009364 <_vfiprintf_r+0x31c>
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	3301      	adds	r3, #1
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	f04a 0a20 	orr.w	sl, sl, #32
 8009362:	e7a1      	b.n	80092a8 <_vfiprintf_r+0x260>
 8009364:	f04a 0a10 	orr.w	sl, sl, #16
 8009368:	e79e      	b.n	80092a8 <_vfiprintf_r+0x260>
 800936a:	46a3      	mov	fp, r4
 800936c:	2100      	movs	r1, #0
 800936e:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009372:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009376:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800937a:	2301      	movs	r3, #1
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	460d      	mov	r5, r1
 8009380:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009384:	e0ad      	b.n	80094e2 <_vfiprintf_r+0x49a>
 8009386:	f04a 0a10 	orr.w	sl, sl, #16
 800938a:	f01a 0f20 	tst.w	sl, #32
 800938e:	d011      	beq.n	80093b4 <_vfiprintf_r+0x36c>
 8009390:	3407      	adds	r4, #7
 8009392:	f024 0307 	bic.w	r3, r4, #7
 8009396:	469b      	mov	fp, r3
 8009398:	685d      	ldr	r5, [r3, #4]
 800939a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800939e:	2d00      	cmp	r5, #0
 80093a0:	da06      	bge.n	80093b0 <_vfiprintf_r+0x368>
 80093a2:	4264      	negs	r4, r4
 80093a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80093a8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80093ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80093b0:	2301      	movs	r3, #1
 80093b2:	e04a      	b.n	800944a <_vfiprintf_r+0x402>
 80093b4:	46a3      	mov	fp, r4
 80093b6:	f01a 0f10 	tst.w	sl, #16
 80093ba:	f85b 5b04 	ldr.w	r5, [fp], #4
 80093be:	d002      	beq.n	80093c6 <_vfiprintf_r+0x37e>
 80093c0:	462c      	mov	r4, r5
 80093c2:	17ed      	asrs	r5, r5, #31
 80093c4:	e7eb      	b.n	800939e <_vfiprintf_r+0x356>
 80093c6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80093ca:	d003      	beq.n	80093d4 <_vfiprintf_r+0x38c>
 80093cc:	b22c      	sxth	r4, r5
 80093ce:	f345 35c0 	sbfx	r5, r5, #15, #1
 80093d2:	e7e4      	b.n	800939e <_vfiprintf_r+0x356>
 80093d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80093d8:	d0f2      	beq.n	80093c0 <_vfiprintf_r+0x378>
 80093da:	b26c      	sxtb	r4, r5
 80093dc:	f345 15c0 	sbfx	r5, r5, #7, #1
 80093e0:	e7dd      	b.n	800939e <_vfiprintf_r+0x356>
 80093e2:	f01a 0f20 	tst.w	sl, #32
 80093e6:	f104 0b04 	add.w	fp, r4, #4
 80093ea:	d007      	beq.n	80093fc <_vfiprintf_r+0x3b4>
 80093ec:	9a02      	ldr	r2, [sp, #8]
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	9902      	ldr	r1, [sp, #8]
 80093f2:	17d2      	asrs	r2, r2, #31
 80093f4:	e9c3 1200 	strd	r1, r2, [r3]
 80093f8:	465c      	mov	r4, fp
 80093fa:	e68c      	b.n	8009116 <_vfiprintf_r+0xce>
 80093fc:	f01a 0f10 	tst.w	sl, #16
 8009400:	d003      	beq.n	800940a <_vfiprintf_r+0x3c2>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	9a02      	ldr	r2, [sp, #8]
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	e7f6      	b.n	80093f8 <_vfiprintf_r+0x3b0>
 800940a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800940e:	d003      	beq.n	8009418 <_vfiprintf_r+0x3d0>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	9a02      	ldr	r2, [sp, #8]
 8009414:	801a      	strh	r2, [r3, #0]
 8009416:	e7ef      	b.n	80093f8 <_vfiprintf_r+0x3b0>
 8009418:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800941c:	d0f1      	beq.n	8009402 <_vfiprintf_r+0x3ba>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	9a02      	ldr	r2, [sp, #8]
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	e7e8      	b.n	80093f8 <_vfiprintf_r+0x3b0>
 8009426:	f04a 0a10 	orr.w	sl, sl, #16
 800942a:	f01a 0320 	ands.w	r3, sl, #32
 800942e:	d01f      	beq.n	8009470 <_vfiprintf_r+0x428>
 8009430:	3407      	adds	r4, #7
 8009432:	f024 0307 	bic.w	r3, r4, #7
 8009436:	469b      	mov	fp, r3
 8009438:	685d      	ldr	r5, [r3, #4]
 800943a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800943e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009442:	2300      	movs	r3, #0
 8009444:	2200      	movs	r2, #0
 8009446:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800944a:	9a00      	ldr	r2, [sp, #0]
 800944c:	3201      	adds	r2, #1
 800944e:	f000 8262 	beq.w	8009916 <_vfiprintf_r+0x8ce>
 8009452:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009456:	9204      	str	r2, [sp, #16]
 8009458:	ea54 0205 	orrs.w	r2, r4, r5
 800945c:	f040 8261 	bne.w	8009922 <_vfiprintf_r+0x8da>
 8009460:	9a00      	ldr	r2, [sp, #0]
 8009462:	2a00      	cmp	r2, #0
 8009464:	f000 8199 	beq.w	800979a <_vfiprintf_r+0x752>
 8009468:	2b01      	cmp	r3, #1
 800946a:	f040 825d 	bne.w	8009928 <_vfiprintf_r+0x8e0>
 800946e:	e139      	b.n	80096e4 <_vfiprintf_r+0x69c>
 8009470:	46a3      	mov	fp, r4
 8009472:	f01a 0510 	ands.w	r5, sl, #16
 8009476:	f85b 4b04 	ldr.w	r4, [fp], #4
 800947a:	d001      	beq.n	8009480 <_vfiprintf_r+0x438>
 800947c:	461d      	mov	r5, r3
 800947e:	e7de      	b.n	800943e <_vfiprintf_r+0x3f6>
 8009480:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8009484:	d001      	beq.n	800948a <_vfiprintf_r+0x442>
 8009486:	b2a4      	uxth	r4, r4
 8009488:	e7d9      	b.n	800943e <_vfiprintf_r+0x3f6>
 800948a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800948e:	d0d6      	beq.n	800943e <_vfiprintf_r+0x3f6>
 8009490:	b2e4      	uxtb	r4, r4
 8009492:	e7f3      	b.n	800947c <_vfiprintf_r+0x434>
 8009494:	2330      	movs	r3, #48	; 0x30
 8009496:	46a3      	mov	fp, r4
 8009498:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800949c:	2378      	movs	r3, #120	; 0x78
 800949e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80094a2:	f85b 4b04 	ldr.w	r4, [fp], #4
 80094a6:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <_vfiprintf_r+0x46c>)
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	2500      	movs	r5, #0
 80094ac:	f04a 0a02 	orr.w	sl, sl, #2
 80094b0:	2302      	movs	r3, #2
 80094b2:	e7c7      	b.n	8009444 <_vfiprintf_r+0x3fc>
 80094b4:	0800e764 	.word	0x0800e764
 80094b8:	9b00      	ldr	r3, [sp, #0]
 80094ba:	46a3      	mov	fp, r4
 80094bc:	2500      	movs	r5, #0
 80094be:	1c5c      	adds	r4, r3, #1
 80094c0:	f85b 8b04 	ldr.w	r8, [fp], #4
 80094c4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80094c8:	f000 80ce 	beq.w	8009668 <_vfiprintf_r+0x620>
 80094cc:	461a      	mov	r2, r3
 80094ce:	4629      	mov	r1, r5
 80094d0:	4640      	mov	r0, r8
 80094d2:	f7f6 fe85 	bl	80001e0 <memchr>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f000 8174 	beq.w	80097c4 <_vfiprintf_r+0x77c>
 80094dc:	eba0 0308 	sub.w	r3, r0, r8
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	9b00      	ldr	r3, [sp, #0]
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	bfb8      	it	lt
 80094e8:	462b      	movlt	r3, r5
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80094f0:	b113      	cbz	r3, 80094f8 <_vfiprintf_r+0x4b0>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	3301      	adds	r3, #1
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	f01a 0302 	ands.w	r3, sl, #2
 80094fc:	9308      	str	r3, [sp, #32]
 80094fe:	bf1e      	ittt	ne
 8009500:	9b04      	ldrne	r3, [sp, #16]
 8009502:	3302      	addne	r3, #2
 8009504:	9304      	strne	r3, [sp, #16]
 8009506:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800950a:	9309      	str	r3, [sp, #36]	; 0x24
 800950c:	d11f      	bne.n	800954e <_vfiprintf_r+0x506>
 800950e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009512:	1a9c      	subs	r4, r3, r2
 8009514:	2c00      	cmp	r4, #0
 8009516:	dd1a      	ble.n	800954e <_vfiprintf_r+0x506>
 8009518:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800951c:	48aa      	ldr	r0, [pc, #680]	; (80097c8 <_vfiprintf_r+0x780>)
 800951e:	6030      	str	r0, [r6, #0]
 8009520:	2c10      	cmp	r4, #16
 8009522:	f103 0301 	add.w	r3, r3, #1
 8009526:	f106 0108 	add.w	r1, r6, #8
 800952a:	f300 8153 	bgt.w	80097d4 <_vfiprintf_r+0x78c>
 800952e:	6074      	str	r4, [r6, #4]
 8009530:	2b07      	cmp	r3, #7
 8009532:	4414      	add	r4, r2
 8009534:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009538:	f340 815e 	ble.w	80097f8 <_vfiprintf_r+0x7b0>
 800953c:	aa0c      	add	r2, sp, #48	; 0x30
 800953e:	4639      	mov	r1, r7
 8009540:	4648      	mov	r0, r9
 8009542:	f7ff fd4f 	bl	8008fe4 <__sprint_r>
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 81b7 	bne.w	80098ba <_vfiprintf_r+0x872>
 800954c:	ae0f      	add	r6, sp, #60	; 0x3c
 800954e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009552:	b173      	cbz	r3, 8009572 <_vfiprintf_r+0x52a>
 8009554:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800955a:	6032      	str	r2, [r6, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	6072      	str	r2, [r6, #4]
 8009560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009562:	3301      	adds	r3, #1
 8009564:	3201      	adds	r2, #1
 8009566:	2b07      	cmp	r3, #7
 8009568:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800956c:	f300 8146 	bgt.w	80097fc <_vfiprintf_r+0x7b4>
 8009570:	3608      	adds	r6, #8
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	b16b      	cbz	r3, 8009592 <_vfiprintf_r+0x54a>
 8009576:	aa0b      	add	r2, sp, #44	; 0x2c
 8009578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800957a:	6032      	str	r2, [r6, #0]
 800957c:	2202      	movs	r2, #2
 800957e:	6072      	str	r2, [r6, #4]
 8009580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009582:	3301      	adds	r3, #1
 8009584:	3202      	adds	r2, #2
 8009586:	2b07      	cmp	r3, #7
 8009588:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800958c:	f300 813f 	bgt.w	800980e <_vfiprintf_r+0x7c6>
 8009590:	3608      	adds	r6, #8
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	2b80      	cmp	r3, #128	; 0x80
 8009596:	d11f      	bne.n	80095d8 <_vfiprintf_r+0x590>
 8009598:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800959c:	1a9c      	subs	r4, r3, r2
 800959e:	2c00      	cmp	r4, #0
 80095a0:	dd1a      	ble.n	80095d8 <_vfiprintf_r+0x590>
 80095a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80095a6:	4889      	ldr	r0, [pc, #548]	; (80097cc <_vfiprintf_r+0x784>)
 80095a8:	6030      	str	r0, [r6, #0]
 80095aa:	2c10      	cmp	r4, #16
 80095ac:	f103 0301 	add.w	r3, r3, #1
 80095b0:	f106 0108 	add.w	r1, r6, #8
 80095b4:	f300 8134 	bgt.w	8009820 <_vfiprintf_r+0x7d8>
 80095b8:	6074      	str	r4, [r6, #4]
 80095ba:	2b07      	cmp	r3, #7
 80095bc:	4414      	add	r4, r2
 80095be:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80095c2:	f340 813f 	ble.w	8009844 <_vfiprintf_r+0x7fc>
 80095c6:	aa0c      	add	r2, sp, #48	; 0x30
 80095c8:	4639      	mov	r1, r7
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7ff fd0a 	bl	8008fe4 <__sprint_r>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f040 8172 	bne.w	80098ba <_vfiprintf_r+0x872>
 80095d6:	ae0f      	add	r6, sp, #60	; 0x3c
 80095d8:	9b00      	ldr	r3, [sp, #0]
 80095da:	1aec      	subs	r4, r5, r3
 80095dc:	2c00      	cmp	r4, #0
 80095de:	dd1a      	ble.n	8009616 <_vfiprintf_r+0x5ce>
 80095e0:	4d7a      	ldr	r5, [pc, #488]	; (80097cc <_vfiprintf_r+0x784>)
 80095e2:	6035      	str	r5, [r6, #0]
 80095e4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80095e8:	2c10      	cmp	r4, #16
 80095ea:	f103 0301 	add.w	r3, r3, #1
 80095ee:	f106 0208 	add.w	r2, r6, #8
 80095f2:	f300 8129 	bgt.w	8009848 <_vfiprintf_r+0x800>
 80095f6:	6074      	str	r4, [r6, #4]
 80095f8:	2b07      	cmp	r3, #7
 80095fa:	440c      	add	r4, r1
 80095fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009600:	f340 8133 	ble.w	800986a <_vfiprintf_r+0x822>
 8009604:	aa0c      	add	r2, sp, #48	; 0x30
 8009606:	4639      	mov	r1, r7
 8009608:	4648      	mov	r0, r9
 800960a:	f7ff fceb 	bl	8008fe4 <__sprint_r>
 800960e:	2800      	cmp	r0, #0
 8009610:	f040 8153 	bne.w	80098ba <_vfiprintf_r+0x872>
 8009614:	ae0f      	add	r6, sp, #60	; 0x3c
 8009616:	9b00      	ldr	r3, [sp, #0]
 8009618:	980e      	ldr	r0, [sp, #56]	; 0x38
 800961a:	6073      	str	r3, [r6, #4]
 800961c:	4418      	add	r0, r3
 800961e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009620:	f8c6 8000 	str.w	r8, [r6]
 8009624:	3301      	adds	r3, #1
 8009626:	2b07      	cmp	r3, #7
 8009628:	900e      	str	r0, [sp, #56]	; 0x38
 800962a:	930d      	str	r3, [sp, #52]	; 0x34
 800962c:	f300 811f 	bgt.w	800986e <_vfiprintf_r+0x826>
 8009630:	f106 0308 	add.w	r3, r6, #8
 8009634:	f01a 0f04 	tst.w	sl, #4
 8009638:	f040 8121 	bne.w	800987e <_vfiprintf_r+0x836>
 800963c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009640:	9904      	ldr	r1, [sp, #16]
 8009642:	428a      	cmp	r2, r1
 8009644:	bfac      	ite	ge
 8009646:	189b      	addge	r3, r3, r2
 8009648:	185b      	addlt	r3, r3, r1
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800964e:	b13b      	cbz	r3, 8009660 <_vfiprintf_r+0x618>
 8009650:	aa0c      	add	r2, sp, #48	; 0x30
 8009652:	4639      	mov	r1, r7
 8009654:	4648      	mov	r0, r9
 8009656:	f7ff fcc5 	bl	8008fe4 <__sprint_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	f040 812d 	bne.w	80098ba <_vfiprintf_r+0x872>
 8009660:	2300      	movs	r3, #0
 8009662:	930d      	str	r3, [sp, #52]	; 0x34
 8009664:	ae0f      	add	r6, sp, #60	; 0x3c
 8009666:	e6c7      	b.n	80093f8 <_vfiprintf_r+0x3b0>
 8009668:	4640      	mov	r0, r8
 800966a:	f7f6 fdb1 	bl	80001d0 <strlen>
 800966e:	9000      	str	r0, [sp, #0]
 8009670:	e737      	b.n	80094e2 <_vfiprintf_r+0x49a>
 8009672:	f04a 0a10 	orr.w	sl, sl, #16
 8009676:	f01a 0320 	ands.w	r3, sl, #32
 800967a:	d008      	beq.n	800968e <_vfiprintf_r+0x646>
 800967c:	3407      	adds	r4, #7
 800967e:	f024 0307 	bic.w	r3, r4, #7
 8009682:	469b      	mov	fp, r3
 8009684:	685d      	ldr	r5, [r3, #4]
 8009686:	f85b 4b08 	ldr.w	r4, [fp], #8
 800968a:	2301      	movs	r3, #1
 800968c:	e6da      	b.n	8009444 <_vfiprintf_r+0x3fc>
 800968e:	46a3      	mov	fp, r4
 8009690:	f01a 0510 	ands.w	r5, sl, #16
 8009694:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009698:	d001      	beq.n	800969e <_vfiprintf_r+0x656>
 800969a:	461d      	mov	r5, r3
 800969c:	e7f5      	b.n	800968a <_vfiprintf_r+0x642>
 800969e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80096a2:	d001      	beq.n	80096a8 <_vfiprintf_r+0x660>
 80096a4:	b2a4      	uxth	r4, r4
 80096a6:	e7f0      	b.n	800968a <_vfiprintf_r+0x642>
 80096a8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80096ac:	d0ed      	beq.n	800968a <_vfiprintf_r+0x642>
 80096ae:	b2e4      	uxtb	r4, r4
 80096b0:	e7f3      	b.n	800969a <_vfiprintf_r+0x652>
 80096b2:	4a47      	ldr	r2, [pc, #284]	; (80097d0 <_vfiprintf_r+0x788>)
 80096b4:	e5c5      	b.n	8009242 <_vfiprintf_r+0x1fa>
 80096b6:	46a3      	mov	fp, r4
 80096b8:	f01a 0510 	ands.w	r5, sl, #16
 80096bc:	f85b 4b04 	ldr.w	r4, [fp], #4
 80096c0:	d001      	beq.n	80096c6 <_vfiprintf_r+0x67e>
 80096c2:	4615      	mov	r5, r2
 80096c4:	e5c9      	b.n	800925a <_vfiprintf_r+0x212>
 80096c6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 80096ca:	d001      	beq.n	80096d0 <_vfiprintf_r+0x688>
 80096cc:	b2a4      	uxth	r4, r4
 80096ce:	e5c4      	b.n	800925a <_vfiprintf_r+0x212>
 80096d0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80096d4:	f43f adc1 	beq.w	800925a <_vfiprintf_r+0x212>
 80096d8:	b2e4      	uxtb	r4, r4
 80096da:	e7f2      	b.n	80096c2 <_vfiprintf_r+0x67a>
 80096dc:	2c0a      	cmp	r4, #10
 80096de:	f175 0300 	sbcs.w	r3, r5, #0
 80096e2:	d205      	bcs.n	80096f0 <_vfiprintf_r+0x6a8>
 80096e4:	3430      	adds	r4, #48	; 0x30
 80096e6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80096ea:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80096ee:	e137      	b.n	8009960 <_vfiprintf_r+0x918>
 80096f0:	ab38      	add	r3, sp, #224	; 0xe0
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096fa:	f04f 0a00 	mov.w	sl, #0
 80096fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009700:	9b08      	ldr	r3, [sp, #32]
 8009702:	220a      	movs	r2, #10
 8009704:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009708:	4620      	mov	r0, r4
 800970a:	2300      	movs	r3, #0
 800970c:	4629      	mov	r1, r5
 800970e:	f7f7 fa4b 	bl	8000ba8 <__aeabi_uldivmod>
 8009712:	9b08      	ldr	r3, [sp, #32]
 8009714:	3230      	adds	r2, #48	; 0x30
 8009716:	f803 2c01 	strb.w	r2, [r3, #-1]
 800971a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971c:	f10a 0a01 	add.w	sl, sl, #1
 8009720:	b1db      	cbz	r3, 800975a <_vfiprintf_r+0x712>
 8009722:	9b06      	ldr	r3, [sp, #24]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	4553      	cmp	r3, sl
 8009728:	d117      	bne.n	800975a <_vfiprintf_r+0x712>
 800972a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800972e:	d014      	beq.n	800975a <_vfiprintf_r+0x712>
 8009730:	2c0a      	cmp	r4, #10
 8009732:	f175 0300 	sbcs.w	r3, r5, #0
 8009736:	d310      	bcc.n	800975a <_vfiprintf_r+0x712>
 8009738:	9b07      	ldr	r3, [sp, #28]
 800973a:	eba8 0803 	sub.w	r8, r8, r3
 800973e:	461a      	mov	r2, r3
 8009740:	ee18 1a10 	vmov	r1, s16
 8009744:	4640      	mov	r0, r8
 8009746:	f7ff f8e8 	bl	800891a <strncpy>
 800974a:	9b06      	ldr	r3, [sp, #24]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	b1a3      	cbz	r3, 800977a <_vfiprintf_r+0x732>
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	3301      	adds	r3, #1
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	2300      	movs	r3, #0
 800975c:	220a      	movs	r2, #10
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 fa21 	bl	8000ba8 <__aeabi_uldivmod>
 8009766:	2c0a      	cmp	r4, #10
 8009768:	f175 0300 	sbcs.w	r3, r5, #0
 800976c:	f0c0 80f8 	bcc.w	8009960 <_vfiprintf_r+0x918>
 8009770:	4604      	mov	r4, r0
 8009772:	460d      	mov	r5, r1
 8009774:	f8cd 8020 	str.w	r8, [sp, #32]
 8009778:	e7c2      	b.n	8009700 <_vfiprintf_r+0x6b8>
 800977a:	469a      	mov	sl, r3
 800977c:	e7ed      	b.n	800975a <_vfiprintf_r+0x712>
 800977e:	f004 030f 	and.w	r3, r4, #15
 8009782:	9a05      	ldr	r2, [sp, #20]
 8009784:	0924      	lsrs	r4, r4, #4
 8009786:	5cd3      	ldrb	r3, [r2, r3]
 8009788:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800978c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8009790:	092d      	lsrs	r5, r5, #4
 8009792:	ea54 0305 	orrs.w	r3, r4, r5
 8009796:	d1f2      	bne.n	800977e <_vfiprintf_r+0x736>
 8009798:	e0e2      	b.n	8009960 <_vfiprintf_r+0x918>
 800979a:	b933      	cbnz	r3, 80097aa <_vfiprintf_r+0x762>
 800979c:	f01a 0f01 	tst.w	sl, #1
 80097a0:	d003      	beq.n	80097aa <_vfiprintf_r+0x762>
 80097a2:	2330      	movs	r3, #48	; 0x30
 80097a4:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 80097a8:	e79f      	b.n	80096ea <_vfiprintf_r+0x6a2>
 80097aa:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80097ae:	e0d7      	b.n	8009960 <_vfiprintf_r+0x918>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 80a3 	beq.w	80098fc <_vfiprintf_r+0x8b4>
 80097b6:	2100      	movs	r1, #0
 80097b8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80097bc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80097c0:	46a3      	mov	fp, r4
 80097c2:	e5da      	b.n	800937a <_vfiprintf_r+0x332>
 80097c4:	4605      	mov	r5, r0
 80097c6:	e68c      	b.n	80094e2 <_vfiprintf_r+0x49a>
 80097c8:	0800e9c2 	.word	0x0800e9c2
 80097cc:	0800e9d2 	.word	0x0800e9d2
 80097d0:	0800e775 	.word	0x0800e775
 80097d4:	2010      	movs	r0, #16
 80097d6:	4402      	add	r2, r0
 80097d8:	2b07      	cmp	r3, #7
 80097da:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80097de:	6070      	str	r0, [r6, #4]
 80097e0:	dd07      	ble.n	80097f2 <_vfiprintf_r+0x7aa>
 80097e2:	aa0c      	add	r2, sp, #48	; 0x30
 80097e4:	4639      	mov	r1, r7
 80097e6:	4648      	mov	r0, r9
 80097e8:	f7ff fbfc 	bl	8008fe4 <__sprint_r>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d164      	bne.n	80098ba <_vfiprintf_r+0x872>
 80097f0:	a90f      	add	r1, sp, #60	; 0x3c
 80097f2:	3c10      	subs	r4, #16
 80097f4:	460e      	mov	r6, r1
 80097f6:	e68f      	b.n	8009518 <_vfiprintf_r+0x4d0>
 80097f8:	460e      	mov	r6, r1
 80097fa:	e6a8      	b.n	800954e <_vfiprintf_r+0x506>
 80097fc:	aa0c      	add	r2, sp, #48	; 0x30
 80097fe:	4639      	mov	r1, r7
 8009800:	4648      	mov	r0, r9
 8009802:	f7ff fbef 	bl	8008fe4 <__sprint_r>
 8009806:	2800      	cmp	r0, #0
 8009808:	d157      	bne.n	80098ba <_vfiprintf_r+0x872>
 800980a:	ae0f      	add	r6, sp, #60	; 0x3c
 800980c:	e6b1      	b.n	8009572 <_vfiprintf_r+0x52a>
 800980e:	aa0c      	add	r2, sp, #48	; 0x30
 8009810:	4639      	mov	r1, r7
 8009812:	4648      	mov	r0, r9
 8009814:	f7ff fbe6 	bl	8008fe4 <__sprint_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	d14e      	bne.n	80098ba <_vfiprintf_r+0x872>
 800981c:	ae0f      	add	r6, sp, #60	; 0x3c
 800981e:	e6b8      	b.n	8009592 <_vfiprintf_r+0x54a>
 8009820:	2010      	movs	r0, #16
 8009822:	4402      	add	r2, r0
 8009824:	2b07      	cmp	r3, #7
 8009826:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800982a:	6070      	str	r0, [r6, #4]
 800982c:	dd07      	ble.n	800983e <_vfiprintf_r+0x7f6>
 800982e:	aa0c      	add	r2, sp, #48	; 0x30
 8009830:	4639      	mov	r1, r7
 8009832:	4648      	mov	r0, r9
 8009834:	f7ff fbd6 	bl	8008fe4 <__sprint_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	d13e      	bne.n	80098ba <_vfiprintf_r+0x872>
 800983c:	a90f      	add	r1, sp, #60	; 0x3c
 800983e:	3c10      	subs	r4, #16
 8009840:	460e      	mov	r6, r1
 8009842:	e6ae      	b.n	80095a2 <_vfiprintf_r+0x55a>
 8009844:	460e      	mov	r6, r1
 8009846:	e6c7      	b.n	80095d8 <_vfiprintf_r+0x590>
 8009848:	2010      	movs	r0, #16
 800984a:	4401      	add	r1, r0
 800984c:	2b07      	cmp	r3, #7
 800984e:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009852:	6070      	str	r0, [r6, #4]
 8009854:	dd06      	ble.n	8009864 <_vfiprintf_r+0x81c>
 8009856:	aa0c      	add	r2, sp, #48	; 0x30
 8009858:	4639      	mov	r1, r7
 800985a:	4648      	mov	r0, r9
 800985c:	f7ff fbc2 	bl	8008fe4 <__sprint_r>
 8009860:	bb58      	cbnz	r0, 80098ba <_vfiprintf_r+0x872>
 8009862:	aa0f      	add	r2, sp, #60	; 0x3c
 8009864:	3c10      	subs	r4, #16
 8009866:	4616      	mov	r6, r2
 8009868:	e6bb      	b.n	80095e2 <_vfiprintf_r+0x59a>
 800986a:	4616      	mov	r6, r2
 800986c:	e6d3      	b.n	8009616 <_vfiprintf_r+0x5ce>
 800986e:	aa0c      	add	r2, sp, #48	; 0x30
 8009870:	4639      	mov	r1, r7
 8009872:	4648      	mov	r0, r9
 8009874:	f7ff fbb6 	bl	8008fe4 <__sprint_r>
 8009878:	b9f8      	cbnz	r0, 80098ba <_vfiprintf_r+0x872>
 800987a:	ab0f      	add	r3, sp, #60	; 0x3c
 800987c:	e6da      	b.n	8009634 <_vfiprintf_r+0x5ec>
 800987e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009882:	1a54      	subs	r4, r2, r1
 8009884:	2c00      	cmp	r4, #0
 8009886:	f77f aed9 	ble.w	800963c <_vfiprintf_r+0x5f4>
 800988a:	4d39      	ldr	r5, [pc, #228]	; (8009970 <_vfiprintf_r+0x928>)
 800988c:	2610      	movs	r6, #16
 800988e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009892:	2c10      	cmp	r4, #16
 8009894:	f102 0201 	add.w	r2, r2, #1
 8009898:	601d      	str	r5, [r3, #0]
 800989a:	dc1d      	bgt.n	80098d8 <_vfiprintf_r+0x890>
 800989c:	605c      	str	r4, [r3, #4]
 800989e:	2a07      	cmp	r2, #7
 80098a0:	440c      	add	r4, r1
 80098a2:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80098a6:	f77f aec9 	ble.w	800963c <_vfiprintf_r+0x5f4>
 80098aa:	aa0c      	add	r2, sp, #48	; 0x30
 80098ac:	4639      	mov	r1, r7
 80098ae:	4648      	mov	r0, r9
 80098b0:	f7ff fb98 	bl	8008fe4 <__sprint_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f43f aec1 	beq.w	800963c <_vfiprintf_r+0x5f4>
 80098ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d405      	bmi.n	80098cc <_vfiprintf_r+0x884>
 80098c0:	89bb      	ldrh	r3, [r7, #12]
 80098c2:	059a      	lsls	r2, r3, #22
 80098c4:	d402      	bmi.n	80098cc <_vfiprintf_r+0x884>
 80098c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80098c8:	f7fe fc5b 	bl	8008182 <__retarget_lock_release_recursive>
 80098cc:	89bb      	ldrh	r3, [r7, #12]
 80098ce:	065b      	lsls	r3, r3, #25
 80098d0:	f57f abed 	bpl.w	80090ae <_vfiprintf_r+0x66>
 80098d4:	f7ff bbe8 	b.w	80090a8 <_vfiprintf_r+0x60>
 80098d8:	3110      	adds	r1, #16
 80098da:	2a07      	cmp	r2, #7
 80098dc:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80098e0:	605e      	str	r6, [r3, #4]
 80098e2:	dc02      	bgt.n	80098ea <_vfiprintf_r+0x8a2>
 80098e4:	3308      	adds	r3, #8
 80098e6:	3c10      	subs	r4, #16
 80098e8:	e7d1      	b.n	800988e <_vfiprintf_r+0x846>
 80098ea:	aa0c      	add	r2, sp, #48	; 0x30
 80098ec:	4639      	mov	r1, r7
 80098ee:	4648      	mov	r0, r9
 80098f0:	f7ff fb78 	bl	8008fe4 <__sprint_r>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d1e0      	bne.n	80098ba <_vfiprintf_r+0x872>
 80098f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80098fa:	e7f4      	b.n	80098e6 <_vfiprintf_r+0x89e>
 80098fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098fe:	b913      	cbnz	r3, 8009906 <_vfiprintf_r+0x8be>
 8009900:	2300      	movs	r3, #0
 8009902:	930d      	str	r3, [sp, #52]	; 0x34
 8009904:	e7d9      	b.n	80098ba <_vfiprintf_r+0x872>
 8009906:	aa0c      	add	r2, sp, #48	; 0x30
 8009908:	4639      	mov	r1, r7
 800990a:	4648      	mov	r0, r9
 800990c:	f7ff fb6a 	bl	8008fe4 <__sprint_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	d0f5      	beq.n	8009900 <_vfiprintf_r+0x8b8>
 8009914:	e7d1      	b.n	80098ba <_vfiprintf_r+0x872>
 8009916:	ea54 0205 	orrs.w	r2, r4, r5
 800991a:	f8cd a010 	str.w	sl, [sp, #16]
 800991e:	f43f ada3 	beq.w	8009468 <_vfiprintf_r+0x420>
 8009922:	2b01      	cmp	r3, #1
 8009924:	f43f aeda 	beq.w	80096dc <_vfiprintf_r+0x694>
 8009928:	2b02      	cmp	r3, #2
 800992a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800992e:	f43f af26 	beq.w	800977e <_vfiprintf_r+0x736>
 8009932:	f004 0307 	and.w	r3, r4, #7
 8009936:	08e4      	lsrs	r4, r4, #3
 8009938:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800993c:	08ed      	lsrs	r5, r5, #3
 800993e:	3330      	adds	r3, #48	; 0x30
 8009940:	ea54 0105 	orrs.w	r1, r4, r5
 8009944:	4642      	mov	r2, r8
 8009946:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800994a:	d1f2      	bne.n	8009932 <_vfiprintf_r+0x8ea>
 800994c:	9904      	ldr	r1, [sp, #16]
 800994e:	07c8      	lsls	r0, r1, #31
 8009950:	d506      	bpl.n	8009960 <_vfiprintf_r+0x918>
 8009952:	2b30      	cmp	r3, #48	; 0x30
 8009954:	d004      	beq.n	8009960 <_vfiprintf_r+0x918>
 8009956:	2330      	movs	r3, #48	; 0x30
 8009958:	f808 3c01 	strb.w	r3, [r8, #-1]
 800995c:	f1a2 0802 	sub.w	r8, r2, #2
 8009960:	ab38      	add	r3, sp, #224	; 0xe0
 8009962:	eba3 0308 	sub.w	r3, r3, r8
 8009966:	9d00      	ldr	r5, [sp, #0]
 8009968:	f8dd a010 	ldr.w	sl, [sp, #16]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	e5b8      	b.n	80094e2 <_vfiprintf_r+0x49a>
 8009970:	0800e9c2 	.word	0x0800e9c2

08009974 <__sbprintf>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	460c      	mov	r4, r1
 8009978:	8989      	ldrh	r1, [r1, #12]
 800997a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800997e:	f021 0102 	bic.w	r1, r1, #2
 8009982:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009986:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009988:	911b      	str	r1, [sp, #108]	; 0x6c
 800998a:	89e1      	ldrh	r1, [r4, #14]
 800998c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009990:	69e1      	ldr	r1, [r4, #28]
 8009992:	9109      	str	r1, [sp, #36]	; 0x24
 8009994:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009996:	910b      	str	r1, [sp, #44]	; 0x2c
 8009998:	a91c      	add	r1, sp, #112	; 0x70
 800999a:	9102      	str	r1, [sp, #8]
 800999c:	9106      	str	r1, [sp, #24]
 800999e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099a2:	4606      	mov	r6, r0
 80099a4:	9104      	str	r1, [sp, #16]
 80099a6:	9107      	str	r1, [sp, #28]
 80099a8:	a818      	add	r0, sp, #96	; 0x60
 80099aa:	2100      	movs	r1, #0
 80099ac:	e9cd 3200 	strd	r3, r2, [sp]
 80099b0:	9108      	str	r1, [sp, #32]
 80099b2:	f7fe fbe3 	bl	800817c <__retarget_lock_init_recursive>
 80099b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099ba:	a902      	add	r1, sp, #8
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fb43 	bl	8009048 <_vfiprintf_r>
 80099c2:	1e05      	subs	r5, r0, #0
 80099c4:	db07      	blt.n	80099d6 <__sbprintf+0x62>
 80099c6:	a902      	add	r1, sp, #8
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff fa2b 	bl	8008e24 <_fflush_r>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	bf18      	it	ne
 80099d2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80099d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80099da:	9818      	ldr	r0, [sp, #96]	; 0x60
 80099dc:	065b      	lsls	r3, r3, #25
 80099de:	bf42      	ittt	mi
 80099e0:	89a3      	ldrhmi	r3, [r4, #12]
 80099e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80099e6:	81a3      	strhmi	r3, [r4, #12]
 80099e8:	f7fe fbc9 	bl	800817e <__retarget_lock_close_recursive>
 80099ec:	4628      	mov	r0, r5
 80099ee:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80099f2:	bd70      	pop	{r4, r5, r6, pc}

080099f4 <__ascii_wctomb>:
 80099f4:	b149      	cbz	r1, 8009a0a <__ascii_wctomb+0x16>
 80099f6:	2aff      	cmp	r2, #255	; 0xff
 80099f8:	bf85      	ittet	hi
 80099fa:	238a      	movhi	r3, #138	; 0x8a
 80099fc:	6003      	strhi	r3, [r0, #0]
 80099fe:	700a      	strbls	r2, [r1, #0]
 8009a00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009a04:	bf98      	it	ls
 8009a06:	2001      	movls	r0, #1
 8009a08:	4770      	bx	lr
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4770      	bx	lr

08009a0e <abort>:
 8009a0e:	b508      	push	{r3, lr}
 8009a10:	2006      	movs	r0, #6
 8009a12:	f000 f8bb 	bl	8009b8c <raise>
 8009a16:	2001      	movs	r0, #1
 8009a18:	f000 f974 	bl	8009d04 <_exit>

08009a1c <__fputwc>:
 8009a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	4680      	mov	r8, r0
 8009a22:	460e      	mov	r6, r1
 8009a24:	4615      	mov	r5, r2
 8009a26:	f7ff fa35 	bl	8008e94 <__locale_mb_cur_max>
 8009a2a:	2801      	cmp	r0, #1
 8009a2c:	d11c      	bne.n	8009a68 <__fputwc+0x4c>
 8009a2e:	1e73      	subs	r3, r6, #1
 8009a30:	2bfe      	cmp	r3, #254	; 0xfe
 8009a32:	d819      	bhi.n	8009a68 <__fputwc+0x4c>
 8009a34:	f88d 6004 	strb.w	r6, [sp, #4]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	2700      	movs	r7, #0
 8009a3c:	f10d 0904 	add.w	r9, sp, #4
 8009a40:	42a7      	cmp	r7, r4
 8009a42:	d020      	beq.n	8009a86 <__fputwc+0x6a>
 8009a44:	68ab      	ldr	r3, [r5, #8]
 8009a46:	f817 1009 	ldrb.w	r1, [r7, r9]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	60ab      	str	r3, [r5, #8]
 8009a50:	da04      	bge.n	8009a5c <__fputwc+0x40>
 8009a52:	69aa      	ldr	r2, [r5, #24]
 8009a54:	4293      	cmp	r3, r2
 8009a56:	db1a      	blt.n	8009a8e <__fputwc+0x72>
 8009a58:	290a      	cmp	r1, #10
 8009a5a:	d018      	beq.n	8009a8e <__fputwc+0x72>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	602a      	str	r2, [r5, #0]
 8009a62:	7019      	strb	r1, [r3, #0]
 8009a64:	3701      	adds	r7, #1
 8009a66:	e7eb      	b.n	8009a40 <__fputwc+0x24>
 8009a68:	a901      	add	r1, sp, #4
 8009a6a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4640      	mov	r0, r8
 8009a72:	f000 f8f1 	bl	8009c58 <_wcrtomb_r>
 8009a76:	1c41      	adds	r1, r0, #1
 8009a78:	4604      	mov	r4, r0
 8009a7a:	d1de      	bne.n	8009a3a <__fputwc+0x1e>
 8009a7c:	89ab      	ldrh	r3, [r5, #12]
 8009a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a82:	81ab      	strh	r3, [r5, #12]
 8009a84:	4606      	mov	r6, r0
 8009a86:	4630      	mov	r0, r6
 8009a88:	b003      	add	sp, #12
 8009a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4640      	mov	r0, r8
 8009a92:	f000 f897 	bl	8009bc4 <__swbuf_r>
 8009a96:	1c42      	adds	r2, r0, #1
 8009a98:	d1e4      	bne.n	8009a64 <__fputwc+0x48>
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	e7f3      	b.n	8009a86 <__fputwc+0x6a>

08009a9e <_fputwc_r>:
 8009a9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aa2:	4614      	mov	r4, r2
 8009aa4:	07da      	lsls	r2, r3, #31
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	d407      	bmi.n	8009aba <_fputwc_r+0x1c>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d404      	bmi.n	8009aba <_fputwc_r+0x1c>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	9101      	str	r1, [sp, #4]
 8009ab4:	f7fe fb64 	bl	8008180 <__retarget_lock_acquire_recursive>
 8009ab8:	9901      	ldr	r1, [sp, #4]
 8009aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abe:	0498      	lsls	r0, r3, #18
 8009ac0:	d406      	bmi.n	8009ad0 <_fputwc_r+0x32>
 8009ac2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ace:	6663      	str	r3, [r4, #100]	; 0x64
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7ff ffa2 	bl	8009a1c <__fputwc>
 8009ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ada:	07da      	lsls	r2, r3, #31
 8009adc:	4605      	mov	r5, r0
 8009ade:	d405      	bmi.n	8009aec <_fputwc_r+0x4e>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	059b      	lsls	r3, r3, #22
 8009ae4:	d402      	bmi.n	8009aec <_fputwc_r+0x4e>
 8009ae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae8:	f7fe fb4b 	bl	8008182 <__retarget_lock_release_recursive>
 8009aec:	4628      	mov	r0, r5
 8009aee:	b003      	add	sp, #12
 8009af0:	bd30      	pop	{r4, r5, pc}
	...

08009af4 <_fstat_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_fstat_r+0x20>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f000 f8c7 	bl	8009c94 <_fstat>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_fstat_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_fstat_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	200015a4 	.word	0x200015a4

08009b18 <_isatty_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	; (8009b34 <_isatty_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f000 f8c6 	bl	8009cb4 <_isatty>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_isatty_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_isatty_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	200015a4 	.word	0x200015a4

08009b38 <_raise_r>:
 8009b38:	291f      	cmp	r1, #31
 8009b3a:	b538      	push	{r3, r4, r5, lr}
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	460d      	mov	r5, r1
 8009b40:	d904      	bls.n	8009b4c <_raise_r+0x14>
 8009b42:	2316      	movs	r3, #22
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8009b50:	b112      	cbz	r2, 8009b58 <_raise_r+0x20>
 8009b52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b56:	b94b      	cbnz	r3, 8009b6c <_raise_r+0x34>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f831 	bl	8009bc0 <_getpid_r>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	4601      	mov	r1, r0
 8009b62:	4620      	mov	r0, r4
 8009b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b68:	f000 b818 	b.w	8009b9c <_kill_r>
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d00a      	beq.n	8009b86 <_raise_r+0x4e>
 8009b70:	1c59      	adds	r1, r3, #1
 8009b72:	d103      	bne.n	8009b7c <_raise_r+0x44>
 8009b74:	2316      	movs	r3, #22
 8009b76:	6003      	str	r3, [r0, #0]
 8009b78:	2001      	movs	r0, #1
 8009b7a:	e7e6      	b.n	8009b4a <_raise_r+0x12>
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b82:	4628      	mov	r0, r5
 8009b84:	4798      	blx	r3
 8009b86:	2000      	movs	r0, #0
 8009b88:	e7df      	b.n	8009b4a <_raise_r+0x12>
	...

08009b8c <raise>:
 8009b8c:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <raise+0xc>)
 8009b8e:	4601      	mov	r1, r0
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	f7ff bfd1 	b.w	8009b38 <_raise_r>
 8009b96:	bf00      	nop
 8009b98:	20000738 	.word	0x20000738

08009b9c <_kill_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d07      	ldr	r5, [pc, #28]	; (8009bbc <_kill_r+0x20>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	f000 f88b 	bl	8009cc4 <_kill>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	d102      	bne.n	8009bb8 <_kill_r+0x1c>
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	b103      	cbz	r3, 8009bb8 <_kill_r+0x1c>
 8009bb6:	6023      	str	r3, [r4, #0]
 8009bb8:	bd38      	pop	{r3, r4, r5, pc}
 8009bba:	bf00      	nop
 8009bbc:	200015a4 	.word	0x200015a4

08009bc0 <_getpid_r>:
 8009bc0:	f000 b870 	b.w	8009ca4 <_getpid>

08009bc4 <__swbuf_r>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	460e      	mov	r6, r1
 8009bc8:	4614      	mov	r4, r2
 8009bca:	4605      	mov	r5, r0
 8009bcc:	b118      	cbz	r0, 8009bd6 <__swbuf_r+0x12>
 8009bce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009bd0:	b90b      	cbnz	r3, 8009bd6 <__swbuf_r+0x12>
 8009bd2:	f7fe f815 	bl	8007c00 <__sinit>
 8009bd6:	69a3      	ldr	r3, [r4, #24]
 8009bd8:	60a3      	str	r3, [r4, #8]
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	0719      	lsls	r1, r3, #28
 8009bde:	d529      	bpl.n	8009c34 <__swbuf_r+0x70>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	b33b      	cbz	r3, 8009c34 <__swbuf_r+0x70>
 8009be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be8:	b2f6      	uxtb	r6, r6
 8009bea:	049a      	lsls	r2, r3, #18
 8009bec:	4637      	mov	r7, r6
 8009bee:	d52a      	bpl.n	8009c46 <__swbuf_r+0x82>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	6920      	ldr	r0, [r4, #16]
 8009bf4:	1a18      	subs	r0, r3, r0
 8009bf6:	6963      	ldr	r3, [r4, #20]
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	dc04      	bgt.n	8009c06 <__swbuf_r+0x42>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7ff f910 	bl	8008e24 <_fflush_r>
 8009c04:	b9e0      	cbnz	r0, 8009c40 <__swbuf_r+0x7c>
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	701e      	strb	r6, [r3, #0]
 8009c14:	6962      	ldr	r2, [r4, #20]
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d004      	beq.n	8009c26 <__swbuf_r+0x62>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	07db      	lsls	r3, r3, #31
 8009c20:	d506      	bpl.n	8009c30 <__swbuf_r+0x6c>
 8009c22:	2e0a      	cmp	r6, #10
 8009c24:	d104      	bne.n	8009c30 <__swbuf_r+0x6c>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f7ff f8fb 	bl	8008e24 <_fflush_r>
 8009c2e:	b938      	cbnz	r0, 8009c40 <__swbuf_r+0x7c>
 8009c30:	4638      	mov	r0, r7
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c34:	4621      	mov	r1, r4
 8009c36:	4628      	mov	r0, r5
 8009c38:	f7fe ff10 	bl	8008a5c <__swsetup_r>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d0d1      	beq.n	8009be4 <__swbuf_r+0x20>
 8009c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c44:	e7f4      	b.n	8009c30 <__swbuf_r+0x6c>
 8009c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c52:	6663      	str	r3, [r4, #100]	; 0x64
 8009c54:	e7cc      	b.n	8009bf0 <__swbuf_r+0x2c>
	...

08009c58 <_wcrtomb_r>:
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	4c09      	ldr	r4, [pc, #36]	; (8009c80 <_wcrtomb_r+0x28>)
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8009c62:	4605      	mov	r5, r0
 8009c64:	461e      	mov	r6, r3
 8009c66:	b909      	cbnz	r1, 8009c6c <_wcrtomb_r+0x14>
 8009c68:	460a      	mov	r2, r1
 8009c6a:	a901      	add	r1, sp, #4
 8009c6c:	47b8      	blx	r7
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	bf01      	itttt	eq
 8009c72:	2300      	moveq	r3, #0
 8009c74:	6033      	streq	r3, [r6, #0]
 8009c76:	238a      	moveq	r3, #138	; 0x8a
 8009c78:	602b      	streq	r3, [r5, #0]
 8009c7a:	b005      	add	sp, #20
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000f7c 	.word	0x20000f7c

08009c84 <_close>:
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <_close+0xc>)
 8009c86:	2258      	movs	r2, #88	; 0x58
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8e:	4770      	bx	lr
 8009c90:	200015a4 	.word	0x200015a4

08009c94 <_fstat>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	; (8009ca0 <_fstat+0xc>)
 8009c96:	2258      	movs	r2, #88	; 0x58
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c9e:	4770      	bx	lr
 8009ca0:	200015a4 	.word	0x200015a4

08009ca4 <_getpid>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <_getpid+0xc>)
 8009ca6:	2258      	movs	r2, #88	; 0x58
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cae:	4770      	bx	lr
 8009cb0:	200015a4 	.word	0x200015a4

08009cb4 <_isatty>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <_isatty+0xc>)
 8009cb6:	2258      	movs	r2, #88	; 0x58
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	200015a4 	.word	0x200015a4

08009cc4 <_kill>:
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <_kill+0xc>)
 8009cc6:	2258      	movs	r2, #88	; 0x58
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cce:	4770      	bx	lr
 8009cd0:	200015a4 	.word	0x200015a4

08009cd4 <_lseek>:
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <_lseek+0xc>)
 8009cd6:	2258      	movs	r2, #88	; 0x58
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cde:	4770      	bx	lr
 8009ce0:	200015a4 	.word	0x200015a4

08009ce4 <_read>:
 8009ce4:	4b02      	ldr	r3, [pc, #8]	; (8009cf0 <_read+0xc>)
 8009ce6:	2258      	movs	r2, #88	; 0x58
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cee:	4770      	bx	lr
 8009cf0:	200015a4 	.word	0x200015a4

08009cf4 <_write>:
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <_write+0xc>)
 8009cf6:	2258      	movs	r2, #88	; 0x58
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfe:	4770      	bx	lr
 8009d00:	200015a4 	.word	0x200015a4

08009d04 <_exit>:
 8009d04:	e7fe      	b.n	8009d04 <_exit>
	...

08009d08 <_init>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr

08009d14 <_fini>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr
