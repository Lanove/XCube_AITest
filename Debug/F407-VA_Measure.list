
F407-VA_Measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005264  0800f800  0800f800  0001f800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a64  08014a64  00031100  2**0
                  CONTENTS
  4 .ARM          00000008  08014a64  08014a64  00024a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a6c  08014a6c  00031100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014a6c  08014a6c  00024a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a74  08014a74  00024a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001100  20000000  08014a78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00031100  2**0
                  CONTENTS
 10 .bss          000008d0  20001100  20001100  00031100  2**5
                  ALLOC
 11 ._user_heap_stack 00003648  200019d0  200019d0  00031100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033170  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005729  00000000  00000000  000642a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  000699d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007138  00000000  00000000  0006ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a32  00000000  00000000  00071f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003621f  00000000  00000000  0009994a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18ae  00000000  00000000  000cfb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b1417  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c60  00000000  00000000  001b1468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00034d2e  00000000  00000000  001b70c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  001ebdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  001ebec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001100 	.word	0x20001100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7d8 	.word	0x0800f7d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001104 	.word	0x20001104
 80001cc:	0800f7d8 	.word	0x0800f7d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_CRC_Init+0x18>)
{
 8000f4e:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <MX_CRC_Init+0x1c>)
 8000f52:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f54:	f001 fbee 	bl	8002734 <HAL_CRC_Init>
 8000f58:	b900      	cbnz	r0, 8000f5c <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5a:	bd08      	pop	{r3, pc}
 8000f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f60:	f001 b83c 	b.w	8001fdc <Error_Handler>
 8000f64:	2000111c 	.word	0x2000111c
 8000f68:	40023000 	.word	0x40023000

08000f6c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_CRC_MspInit+0x30>)
 8000f6e:	6802      	ldr	r2, [r0, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d000      	beq.n	8000f76 <HAL_CRC_MspInit+0xa>
 8000f74:	4770      	bx	lr
{
 8000f76:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f78:	2200      	movs	r2, #0
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8000f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f84:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8000f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f96:	b002      	add	sp, #8
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023000 	.word	0x40023000

08000fa0 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b085      	sub	sp, #20
	_ds3231_ui2c = hi2c;
 8000fa4:	4d76      	ldr	r5, [pc, #472]	; (8001180 <DS3231_Init+0x1e0>)
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000fa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000faa:	260e      	movs	r6, #14
 8000fac:	f10d 020b 	add.w	r2, sp, #11
 8000fb0:	9400      	str	r4, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
	_ds3231_ui2c = hi2c;
 8000fb6:	6028      	str	r0, [r5, #0]
/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000fb8:	f88d 600b 	strb.w	r6, [sp, #11]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000fbc:	f001 fdc4 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000fc0:	aa03      	add	r2, sp, #12
 8000fc2:	6828      	ldr	r0, [r5, #0]
 8000fc4:	9400      	str	r4, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	21d0      	movs	r1, #208	; 0xd0
 8000fca:	f001 ff4f 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8000fce:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000fd2:	6828      	ldr	r0, [r5, #0]
 8000fd4:	9400      	str	r4, [sp, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
	uint8_t bytes[2] = { regAddr, val };
 8000fda:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000fde:	aa03      	add	r2, sp, #12
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 8000fe4:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000fe8:	f001 fdae 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000fec:	f10d 020b 	add.w	r2, sp, #11
 8000ff0:	6828      	ldr	r0, [r5, #0]
 8000ff2:	9400      	str	r4, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	21d0      	movs	r1, #208	; 0xd0
 8000ff8:	f88d 600b 	strb.w	r6, [sp, #11]
 8000ffc:	f001 fda4 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001000:	aa03      	add	r2, sp, #12
 8001002:	6828      	ldr	r0, [r5, #0]
 8001004:	9400      	str	r4, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	21d0      	movs	r1, #208	; 0xd0
 800100a:	f001 ff2f 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 800100e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001012:	6828      	ldr	r0, [r5, #0]
 8001014:	9400      	str	r4, [sp, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8001016:	f023 0304 	bic.w	r3, r3, #4
 800101a:	f043 0304 	orr.w	r3, r3, #4
	uint8_t bytes[2] = { regAddr, val };
 800101e:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001022:	aa03      	add	r2, sp, #12
 8001024:	2302      	movs	r3, #2
 8001026:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 8001028:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 800102c:	f001 fd8c 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001030:	f10d 020b 	add.w	r2, sp, #11
 8001034:	6828      	ldr	r0, [r5, #0]
 8001036:	9400      	str	r4, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	21d0      	movs	r1, #208	; 0xd0
 800103c:	f88d 600b 	strb.w	r6, [sp, #11]
 8001040:	f001 fd82 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001044:	aa03      	add	r2, sp, #12
 8001046:	6828      	ldr	r0, [r5, #0]
 8001048:	9400      	str	r4, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	21d0      	movs	r1, #208	; 0xd0
 800104e:	f001 ff0d 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001052:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001056:	6828      	ldr	r0, [r5, #0]
 8001058:	9400      	str	r4, [sp, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800105a:	f023 0302 	bic.w	r3, r3, #2
	uint8_t bytes[2] = { regAddr, val };
 800105e:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001062:	aa03      	add	r2, sp, #12
 8001064:	2302      	movs	r3, #2
 8001066:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 8001068:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 800106c:	f001 fd6c 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001070:	f10d 020b 	add.w	r2, sp, #11
 8001074:	6828      	ldr	r0, [r5, #0]
 8001076:	9400      	str	r4, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	21d0      	movs	r1, #208	; 0xd0
 800107c:	f88d 600b 	strb.w	r6, [sp, #11]
 8001080:	f001 fd62 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001084:	aa03      	add	r2, sp, #12
 8001086:	6828      	ldr	r0, [r5, #0]
 8001088:	9400      	str	r4, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	21d0      	movs	r1, #208	; 0xd0
 800108e:	f001 feed 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001092:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001096:	6828      	ldr	r0, [r5, #0]
 8001098:	9400      	str	r4, [sp, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800109a:	f023 0304 	bic.w	r3, r3, #4
 800109e:	f043 0304 	orr.w	r3, r3, #4
	uint8_t bytes[2] = { regAddr, val };
 80010a2:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80010a6:	aa03      	add	r2, sp, #12
 80010a8:	2302      	movs	r3, #2
 80010aa:	21d0      	movs	r1, #208	; 0xd0
 80010ac:	270f      	movs	r7, #15
	uint8_t bytes[2] = { regAddr, val };
 80010ae:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80010b2:	f001 fd49 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80010b6:	f10d 020b 	add.w	r2, sp, #11
 80010ba:	6828      	ldr	r0, [r5, #0]
 80010bc:	9400      	str	r4, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	21d0      	movs	r1, #208	; 0xd0
 80010c2:	f88d 700b 	strb.w	r7, [sp, #11]
 80010c6:	f001 fd3f 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80010ca:	aa03      	add	r2, sp, #12
 80010cc:	6828      	ldr	r0, [r5, #0]
 80010ce:	9400      	str	r4, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	21d0      	movs	r1, #208	; 0xd0
 80010d4:	f001 feca 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 80010d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80010dc:	6828      	ldr	r0, [r5, #0]
 80010de:	9400      	str	r4, [sp, #0]

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80010e0:	f023 0301 	bic.w	r3, r3, #1
	uint8_t bytes[2] = { regAddr, val };
 80010e4:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80010e8:	aa03      	add	r2, sp, #12
 80010ea:	2302      	movs	r3, #2
 80010ec:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 80010ee:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80010f2:	f001 fd29 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80010f6:	f10d 020b 	add.w	r2, sp, #11
 80010fa:	6828      	ldr	r0, [r5, #0]
 80010fc:	9400      	str	r4, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	21d0      	movs	r1, #208	; 0xd0
 8001102:	f88d 700b 	strb.w	r7, [sp, #11]
 8001106:	f001 fd1f 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800110a:	aa03      	add	r2, sp, #12
 800110c:	6828      	ldr	r0, [r5, #0]
 800110e:	9400      	str	r4, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	21d0      	movs	r1, #208	; 0xd0
 8001114:	f001 feaa 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001118:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 800111c:	6828      	ldr	r0, [r5, #0]
 800111e:	9400      	str	r4, [sp, #0]
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8001120:	f023 0302 	bic.w	r3, r3, #2
	uint8_t bytes[2] = { regAddr, val };
 8001124:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001128:	aa03      	add	r2, sp, #12
 800112a:	2302      	movs	r3, #2
 800112c:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 800112e:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001132:	f001 fd09 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001136:	f10d 020b 	add.w	r2, sp, #11
 800113a:	6828      	ldr	r0, [r5, #0]
 800113c:	9400      	str	r4, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	21d0      	movs	r1, #208	; 0xd0
 8001142:	f88d 600b 	strb.w	r6, [sp, #11]
 8001146:	f001 fcff 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800114a:	aa03      	add	r2, sp, #12
 800114c:	6828      	ldr	r0, [r5, #0]
 800114e:	9400      	str	r4, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	f001 fe8a 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001158:	f89d 100c 	ldrb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 800115c:	6828      	ldr	r0, [r5, #0]
 800115e:	9400      	str	r4, [sp, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8001160:	f021 0104 	bic.w	r1, r1, #4
 8001164:	f041 0104 	orr.w	r1, r1, #4
	uint8_t bytes[2] = { regAddr, val };
 8001168:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 800116c:	2302      	movs	r3, #2
 800116e:	aa03      	add	r2, sp, #12
 8001170:	21d0      	movs	r1, #208	; 0xd0
	uint8_t bytes[2] = { regAddr, val };
 8001172:	f88d 600c 	strb.w	r6, [sp, #12]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8001176:	f001 fce7 	bl	8002b48 <HAL_I2C_Master_Transmit>
}
 800117a:	b005      	add	sp, #20
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117e:	bf00      	nop
 8001180:	20001124 	.word	0x20001124

08001184 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8001184:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001186:	4d11      	ldr	r5, [pc, #68]	; (80011cc <DS3231_GetDate+0x48>)
uint8_t DS3231_GetDate(void) {
 8001188:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800118a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800118e:	2004      	movs	r0, #4
 8001190:	f10d 020e 	add.w	r2, sp, #14
 8001194:	f88d 000e 	strb.w	r0, [sp, #14]
 8001198:	2301      	movs	r3, #1
 800119a:	6828      	ldr	r0, [r5, #0]
 800119c:	9400      	str	r4, [sp, #0]
 800119e:	21d0      	movs	r1, #208	; 0xd0
 80011a0:	f001 fcd2 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80011a4:	6828      	ldr	r0, [r5, #0]
 80011a6:	9400      	str	r4, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	f10d 020f 	add.w	r2, sp, #15
 80011ae:	21d0      	movs	r1, #208	; 0xd0
 80011b0:	f001 fe5c 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 80011b4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80011b8:	0903      	lsrs	r3, r0, #4
 80011ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011be:	f000 000f 	and.w	r0, r0, #15
 80011c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80011c6:	b2c0      	uxtb	r0, r0
 80011c8:	b005      	add	sp, #20
 80011ca:	bd30      	pop	{r4, r5, pc}
 80011cc:	20001124 	.word	0x20001124

080011d0 <DS3231_GetMonth>:
uint8_t DS3231_GetMonth(void) {
 80011d0:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80011d2:	4d11      	ldr	r5, [pc, #68]	; (8001218 <DS3231_GetMonth+0x48>)
uint8_t DS3231_GetMonth(void) {
 80011d4:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80011d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80011da:	2005      	movs	r0, #5
 80011dc:	f10d 020e 	add.w	r2, sp, #14
 80011e0:	f88d 000e 	strb.w	r0, [sp, #14]
 80011e4:	2301      	movs	r3, #1
 80011e6:	6828      	ldr	r0, [r5, #0]
 80011e8:	9400      	str	r4, [sp, #0]
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	f001 fcac 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80011f0:	6828      	ldr	r0, [r5, #0]
 80011f2:	9400      	str	r4, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	f10d 020f 	add.w	r2, sp, #15
 80011fa:	21d0      	movs	r1, #208	; 0xd0
 80011fc:	f001 fe36 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001200:	f89d 000f 	ldrb.w	r0, [sp, #15]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001204:	f3c0 1302 	ubfx	r3, r0, #4, #3
 8001208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800120c:	f000 000f 	and.w	r0, r0, #15
}
 8001210:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001214:	b005      	add	sp, #20
 8001216:	bd30      	pop	{r4, r5, pc}
 8001218:	20001124 	.word	0x20001124

0800121c <DS3231_GetYear>:
uint16_t DS3231_GetYear(void) {
 800121c:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800121e:	4e21      	ldr	r6, [pc, #132]	; (80012a4 <DS3231_GetYear+0x88>)
uint16_t DS3231_GetYear(void) {
 8001220:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001222:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001226:	2106      	movs	r1, #6
 8001228:	f10d 020e 	add.w	r2, sp, #14
 800122c:	f88d 100e 	strb.w	r1, [sp, #14]
 8001230:	6830      	ldr	r0, [r6, #0]
 8001232:	9500      	str	r5, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	21d0      	movs	r1, #208	; 0xd0
 8001238:	f001 fc86 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800123c:	f10d 020f 	add.w	r2, sp, #15
 8001240:	6830      	ldr	r0, [r6, #0]
 8001242:	9500      	str	r5, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	21d0      	movs	r1, #208	; 0xd0
 8001248:	f001 fe10 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 800124c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001250:	9500      	str	r5, [sp, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001252:	091c      	lsrs	r4, r3, #4
 8001254:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001258:	f003 040f 	and.w	r4, r3, #15
 800125c:	f04f 0c05 	mov.w	ip, #5
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001260:	f10d 020e 	add.w	r2, sp, #14
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001264:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001268:	2301      	movs	r3, #1
 800126a:	6830      	ldr	r0, [r6, #0]
 800126c:	f88d c00e 	strb.w	ip, [sp, #14]
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	f001 fc69 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001276:	6830      	ldr	r0, [r6, #0]
 8001278:	9500      	str	r5, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	f10d 020f 	add.w	r2, sp, #15
 8001280:	21d0      	movs	r1, #208	; 0xd0
 8001282:	f001 fdf3 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001286:	f89d 000f 	ldrb.w	r0, [sp, #15]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 800128a:	09c0      	lsrs	r0, r0, #7
 800128c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001290:	b2e4      	uxtb	r4, r4
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8001292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001296:	eb04 0080 	add.w	r0, r4, r0, lsl #2
}
 800129a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800129e:	b004      	add	sp, #16
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
 80012a2:	bf00      	nop
 80012a4:	20001124 	.word	0x20001124

080012a8 <DS3231_GetHour>:
uint8_t DS3231_GetHour(void) {
 80012a8:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80012aa:	4d11      	ldr	r5, [pc, #68]	; (80012f0 <DS3231_GetHour+0x48>)
uint8_t DS3231_GetHour(void) {
 80012ac:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80012ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80012b2:	2002      	movs	r0, #2
 80012b4:	f10d 020e 	add.w	r2, sp, #14
 80012b8:	f88d 000e 	strb.w	r0, [sp, #14]
 80012bc:	2301      	movs	r3, #1
 80012be:	6828      	ldr	r0, [r5, #0]
 80012c0:	9400      	str	r4, [sp, #0]
 80012c2:	21d0      	movs	r1, #208	; 0xd0
 80012c4:	f001 fc40 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80012c8:	6828      	ldr	r0, [r5, #0]
 80012ca:	9400      	str	r4, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	f10d 020f 	add.w	r2, sp, #15
 80012d2:	21d0      	movs	r1, #208	; 0xd0
 80012d4:	f001 fdca 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 80012d8:	f89d 000f 	ldrb.w	r0, [sp, #15]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80012dc:	0903      	lsrs	r3, r0, #4
 80012de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012e2:	f000 000f 	and.w	r0, r0, #15
 80012e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80012ea:	b2c0      	uxtb	r0, r0
 80012ec:	b005      	add	sp, #20
 80012ee:	bd30      	pop	{r4, r5, pc}
 80012f0:	20001124 	.word	0x20001124

080012f4 <DS3231_GetMinute>:
uint8_t DS3231_GetMinute(void) {
 80012f4:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80012f6:	4e11      	ldr	r6, [pc, #68]	; (800133c <DS3231_GetMinute+0x48>)
uint8_t DS3231_GetMinute(void) {
 80012f8:	b084      	sub	sp, #16
 80012fa:	2401      	movs	r4, #1
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80012fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001300:	4623      	mov	r3, r4
 8001302:	f10d 020e 	add.w	r2, sp, #14
 8001306:	6830      	ldr	r0, [r6, #0]
 8001308:	9500      	str	r5, [sp, #0]
 800130a:	21d0      	movs	r1, #208	; 0xd0
 800130c:	f88d 400e 	strb.w	r4, [sp, #14]
 8001310:	f001 fc1a 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001314:	4623      	mov	r3, r4
 8001316:	6830      	ldr	r0, [r6, #0]
 8001318:	9500      	str	r5, [sp, #0]
 800131a:	f10d 020f 	add.w	r2, sp, #15
 800131e:	21d0      	movs	r1, #208	; 0xd0
 8001320:	f001 fda4 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001324:	f89d 000f 	ldrb.w	r0, [sp, #15]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001328:	0903      	lsrs	r3, r0, #4
 800132a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800132e:	f000 000f 	and.w	r0, r0, #15
 8001332:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001336:	b2c0      	uxtb	r0, r0
 8001338:	b004      	add	sp, #16
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	20001124 	.word	0x20001124

08001340 <DS3231_GetSecond>:
uint8_t DS3231_GetSecond(void) {
 8001340:	b530      	push	{r4, r5, lr}
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001342:	4d11      	ldr	r5, [pc, #68]	; (8001388 <DS3231_GetSecond+0x48>)
uint8_t DS3231_GetSecond(void) {
 8001344:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001346:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800134a:	2000      	movs	r0, #0
 800134c:	f10d 020e 	add.w	r2, sp, #14
 8001350:	f88d 000e 	strb.w	r0, [sp, #14]
 8001354:	2301      	movs	r3, #1
 8001356:	6828      	ldr	r0, [r5, #0]
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	21d0      	movs	r1, #208	; 0xd0
 800135c:	f001 fbf4 	bl	8002b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001360:	6828      	ldr	r0, [r5, #0]
 8001362:	9400      	str	r4, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	f10d 020f 	add.w	r2, sp, #15
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	f001 fd7e 	bl	8002e6c <HAL_I2C_Master_Receive>
	return val;
 8001370:	f89d 000f 	ldrb.w	r0, [sp, #15]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001374:	0903      	lsrs	r3, r0, #4
 8001376:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800137a:	f000 000f 	and.w	r0, r0, #15
 800137e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001382:	b2c0      	uxtb	r0, r0
 8001384:	b005      	add	sp, #20
 8001386:	bd30      	pop	{r4, r5, pc}
 8001388:	20001124 	.word	0x20001124

0800138c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PD14   ------> S_TIM4_CH3
*/
void MX_GPIO_Init(void)
{
 800138c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	2400      	movs	r4, #0
{
 8001390:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001396:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_GPIO_Init+0xd8>)
 800139c:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|SEL_Pin, GPIO_PIN_RESET);
 80013a2:	4d31      	ldr	r5, [pc, #196]	; (8001468 <MX_GPIO_Init+0xdc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013a4:	4e31      	ldr	r6, [pc, #196]	; (800146c <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ae:	f002 0204 	and.w	r2, r2, #4
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	9402      	str	r4, [sp, #8]
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
 80013c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	9403      	str	r4, [sp, #12]
 80013cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30
 80013d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d6:	f002 0201 	and.w	r2, r2, #1
 80013da:	9203      	str	r2, [sp, #12]
 80013dc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	9404      	str	r4, [sp, #16]
 80013e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e2:	f042 0202 	orr.w	r2, r2, #2
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
 80013e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ea:	f002 0202 	and.w	r2, r2, #2
 80013ee:	9204      	str	r2, [sp, #16]
 80013f0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	9405      	str	r4, [sp, #20]
 80013f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|SEL_Pin, GPIO_PIN_RESET);
 8001404:	4622      	mov	r2, r4
 8001406:	4628      	mov	r0, r5
 8001408:	2122      	movs	r1, #34	; 0x22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|SEL_Pin, GPIO_PIN_RESET);
 800140c:	f001 fac6 	bl	800299c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001410:	4622      	mov	r2, r4
 8001412:	4630      	mov	r0, r6
 8001414:	2120      	movs	r1, #32
 8001416:	f001 fac1 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED0_Pin|SEL_Pin;
 800141a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED0_Pin|SEL_Pin;
 800141e:	2222      	movs	r2, #34	; 0x22
 8001420:	2500      	movs	r5, #0
 8001422:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED0_Pin|SEL_Pin;
 8001426:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800142a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f001 f995 	bl	800275c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001432:	4630      	mov	r0, r6
 8001434:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED1_Pin;
 8001436:	2220      	movs	r2, #32
 8001438:	2301      	movs	r3, #1
 800143a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800143e:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001442:	f001 f98b 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144a:	2302      	movs	r3, #2
 800144c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	4807      	ldr	r0, [pc, #28]	; (8001470 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001452:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001456:	e9cd 4508 	strd	r4, r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800145a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	f001 f97e 	bl	800275c <HAL_GPIO_Init>

}
 8001460:	b00c      	add	sp, #48	; 0x30
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00

08001474 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001474:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_I2C1_Init+0x30>)
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001482:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 8001486:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001492:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	f001 fa90 	bl	80029b8 <HAL_I2C_Init>
 8001498:	b900      	cbnz	r0, 800149c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800149a:	bd10      	pop	{r4, pc}
 800149c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80014a0:	f000 bd9c 	b.w	8001fdc <Error_Handler>
 80014a4:	20001128 	.word	0x20001128
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_I2C_MspInit+0x64>)
 80014b4:	6802      	ldr	r2, [r0, #0]
{
 80014b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80014ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014c4:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 80014c6:	d001      	beq.n	80014cc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c8:	b009      	add	sp, #36	; 0x24
 80014ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4d12      	ldr	r5, [pc, #72]	; (8001518 <HAL_I2C_MspInit+0x68>)
 80014ce:	9400      	str	r4, [sp, #0]
 80014d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	632b      	str	r3, [r5, #48]	; 0x30
 80014da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e2:	22c0      	movs	r2, #192	; 0xc0
 80014e4:	2312      	movs	r3, #18
 80014e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f001 f931 	bl	800275c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fa:	9401      	str	r4, [sp, #4]
 80014fc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	642b      	str	r3, [r5, #64]	; 0x40
 8001504:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9b01      	ldr	r3, [sp, #4]
}
 800150e:	b009      	add	sp, #36	; 0x24
 8001510:	bd30      	pop	{r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <aiInit>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*
 * Bootstrap
 */
int aiInit(void) {
 8001520:	b510      	push	{r4, lr}
 8001522:	b082      	sub	sp, #8
	ai_error err;

	/* Create and initialize the c-model */
	const ai_handle acts[] = { activations };
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <aiInit+0x44>)
	err = ai_network_create_and_init(&network, acts, NULL);
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <aiInit+0x48>)
	const ai_handle acts[] = { activations };
 8001528:	9301      	str	r3, [sp, #4]
	err = ai_network_create_and_init(&network, acts, NULL);
 800152a:	2200      	movs	r2, #0
 800152c:	a901      	add	r1, sp, #4
 800152e:	f007 facd 	bl	8008acc <ai_network_create_and_init>
	if (err.type != AI_ERROR_NONE) {
 8001532:	b2c0      	uxtb	r0, r0
 8001534:	b988      	cbnz	r0, 800155a <aiInit+0x3a>
		printf("Error INIT AI Network!\r\n");
	};

	/* Reteive pointers to the model's input/output tensors */
	ai_input = ai_network_inputs_get(network, NULL);
 8001536:	4c0c      	ldr	r4, [pc, #48]	; (8001568 <aiInit+0x48>)
 8001538:	2100      	movs	r1, #0
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	f007 fa04 	bl	8008948 <ai_network_inputs_get>
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <aiInit+0x4c>)
 8001542:	4602      	mov	r2, r0
	ai_output = ai_network_outputs_get(network, NULL);
 8001544:	2100      	movs	r1, #0
 8001546:	6820      	ldr	r0, [r4, #0]
	ai_input = ai_network_inputs_get(network, NULL);
 8001548:	601a      	str	r2, [r3, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 800154a:	f007 fa09 	bl	8008960 <ai_network_outputs_get>
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <aiInit+0x50>)
 8001550:	4602      	mov	r2, r0

	return 0;
}
 8001552:	2000      	movs	r0, #0
	ai_output = ai_network_outputs_get(network, NULL);
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	b002      	add	sp, #8
 8001558:	bd10      	pop	{r4, pc}
		printf("Error INIT AI Network!\r\n");
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <aiInit+0x54>)
 800155c:	f009 fe2e 	bl	800b1bc <puts>
 8001560:	e7e9      	b.n	8001536 <aiInit+0x16>
 8001562:	bf00      	nop
 8001564:	20001180 	.word	0x20001180
 8001568:	200014d0 	.word	0x200014d0
 800156c:	20001380 	.word	0x20001380
 8001570:	20001384 	.word	0x20001384
 8001574:	0800f810 	.word	0x0800f810

08001578 <HAL_TIM_IC_CaptureCallback>:

void printUART(const char *str, size_t len) {
	HAL_UART_Transmit(&huart1, (uint8_t*) str, len, HAL_MAX_DELAY);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < 2; i++) {
		if ((htim == cfx_htim && (htim->Channel == cfx_activtimch[i]))) {
 800157c:	4d96      	ldr	r5, [pc, #600]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800157e:	682b      	ldr	r3, [r5, #0]
 8001580:	4283      	cmp	r3, r0
 8001582:	d001      	beq.n	8001588 <HAL_TIM_IC_CaptureCallback+0x10>
						real_power = 0;
				}
			}
		}
	}
}
 8001584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((htim == cfx_htim && (htim->Channel == cfx_activtimch[i]))) {
 8001588:	4e94      	ldr	r6, [pc, #592]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x264>)
 800158a:	7f03      	ldrb	r3, [r0, #28]
 800158c:	7832      	ldrb	r2, [r6, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	4604      	mov	r4, r0
 8001592:	d029      	beq.n	80015e8 <HAL_TIM_IC_CaptureCallback+0x70>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	42a3      	cmp	r3, r4
 8001598:	d1f4      	bne.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
 800159a:	7f22      	ldrb	r2, [r4, #28]
 800159c:	7873      	ldrb	r3, [r6, #1]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d1f0      	bne.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
			if (cfx_edgeStates[i] == 0) {
 80015a2:	4f8f      	ldr	r7, [pc, #572]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80015a4:	787d      	ldrb	r5, [r7, #1]
 80015a6:	2d00      	cmp	r5, #0
 80015a8:	d162      	bne.n	8001670 <HAL_TIM_IC_CaptureCallback+0xf8>
				cfx_t1[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 80015aa:	4e8e      	ldr	r6, [pc, #568]	; (80017e4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80015ac:	4620      	mov	r0, r4
 80015ae:	6871      	ldr	r1, [r6, #4]
 80015b0:	f003 fa8c 	bl	8004acc <HAL_TIM_ReadCapturedValue>
 80015b4:	4a8c      	ldr	r2, [pc, #560]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0x270>)
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80015b6:	6873      	ldr	r3, [r6, #4]
				cfx_t1[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 80015b8:	6050      	str	r0, [r2, #4]
				cfx_edgeStates[i] = 1;
 80015ba:	2201      	movs	r2, #1
 80015bc:	707a      	strb	r2, [r7, #1]
				cfx_ovc[i] = 0;
 80015be:	4a8b      	ldr	r2, [pc, #556]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 80015c0:	6055      	str	r5, [r2, #4]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80c9 	beq.w	800175a <HAL_TIM_IC_CaptureCallback+0x1e2>
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	f000 80d0 	beq.w	800176e <HAL_TIM_IC_CaptureCallback+0x1f6>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	f000 80ef 	beq.w	80017b6 <HAL_TIM_IC_CaptureCallback+0x23e>
 80015d8:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80015dc:	621a      	str	r2, [r3, #32]
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015e4:	621a      	str	r2, [r3, #32]
 80015e6:	e7cd      	b.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
			if (cfx_edgeStates[i] == 0) {
 80015e8:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80017e0 <HAL_TIM_IC_CaptureCallback+0x268>
 80015ec:	f899 7000 	ldrb.w	r7, [r9]
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d07a      	beq.n	80016ea <HAL_TIM_IC_CaptureCallback+0x172>
				cfx_t2[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 80015f4:	4f7b      	ldr	r7, [pc, #492]	; (80017e4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	f003 fa68 	bl	8004acc <HAL_TIM_ReadCapturedValue>
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 80015fc:	4b7b      	ldr	r3, [pc, #492]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 80015fe:	497a      	ldr	r1, [pc, #488]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0x270>)
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001600:	683a      	ldr	r2, [r7, #0]
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4f7a      	ldr	r7, [pc, #488]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001606:	6809      	ldr	r1, [r1, #0]
 8001608:	fb07 0303 	mla	r3, r7, r3, r0
 800160c:	1a5b      	subs	r3, r3, r1
				cfx_t2[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 800160e:	4979      	ldr	r1, [pc, #484]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001610:	6008      	str	r0, [r1, #0]
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 8001612:	4979      	ldr	r1, [pc, #484]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001614:	600b      	str	r3, [r1, #0]
				cfx_edgeStates[i] = 0;
 8001616:	2100      	movs	r1, #0
 8001618:	f889 1000 	strb.w	r1, [r9]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800161c:	2a00      	cmp	r2, #0
 800161e:	f000 8094 	beq.w	800174a <HAL_TIM_IC_CaptureCallback+0x1d2>
 8001622:	2a04      	cmp	r2, #4
 8001624:	f000 80bf 	beq.w	80017a6 <HAL_TIM_IC_CaptureCallback+0x22e>
 8001628:	2a08      	cmp	r2, #8
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6a11      	ldr	r1, [r2, #32]
 800162e:	bf14      	ite	ne
 8001630:	f421 4120 	bicne.w	r1, r1, #40960	; 0xa000
 8001634:	f421 6120 	biceq.w	r1, r1, #2560	; 0xa00
 8001638:	6211      	str	r1, [r2, #32]
 800163a:	6a11      	ldr	r1, [r2, #32]
 800163c:	6211      	str	r1, [r2, #32]
				if (htim->Channel == cfx_activtimch[0]) {
 800163e:	7831      	ldrb	r1, [r6, #0]
 8001640:	7f22      	ldrb	r2, [r4, #28]
 8001642:	4291      	cmp	r1, r2
 8001644:	d1a6      	bne.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
					real_power = (float) US_PER_W / (float) cfx_us[i];
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 80017fc <HAL_TIM_IC_CaptureCallback+0x284>
					if (real_power > 1000)
 800164e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001800 <HAL_TIM_IC_CaptureCallback+0x288>
						real_power = 0;
 8001652:	4b6c      	ldr	r3, [pc, #432]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
					real_power = (float) US_PER_W / (float) cfx_us[i];
 8001654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001658:	eec6 7a26 	vdiv.f32	s15, s12, s13
					if (real_power > 1000)
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						real_power = 0;
 8001664:	bfc6      	itte	gt
 8001666:	2200      	movgt	r2, #0
 8001668:	601a      	strgt	r2, [r3, #0]
					real_power = (float) US_PER_W / (float) cfx_us[i];
 800166a:	edc3 7a00 	vstrle	s15, [r3]
 800166e:	e791      	b.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
				cfx_t2[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 8001670:	4d5c      	ldr	r5, [pc, #368]	; (80017e4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001672:	4620      	mov	r0, r4
 8001674:	6869      	ldr	r1, [r5, #4]
 8001676:	f003 fa29 	bl	8004acc <HAL_TIM_ReadCapturedValue>
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 800167c:	495a      	ldr	r1, [pc, #360]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0x270>)
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800167e:	686a      	ldr	r2, [r5, #4]
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4d5b      	ldr	r5, [pc, #364]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001684:	6849      	ldr	r1, [r1, #4]
 8001686:	fb05 0303 	mla	r3, r5, r3, r0
 800168a:	1a5b      	subs	r3, r3, r1
				cfx_t2[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 800168c:	4959      	ldr	r1, [pc, #356]	; (80017f4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800168e:	6048      	str	r0, [r1, #4]
				cfx_us[i] = (cfx_t2[i] + (cfx_ovc[i] * 2000000)) - cfx_t1[i];
 8001690:	4959      	ldr	r1, [pc, #356]	; (80017f8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001692:	604b      	str	r3, [r1, #4]
				cfx_edgeStates[i] = 0;
 8001694:	2100      	movs	r1, #0
 8001696:	7079      	strb	r1, [r7, #1]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001698:	2a00      	cmp	r2, #0
 800169a:	d04e      	beq.n	800173a <HAL_TIM_IC_CaptureCallback+0x1c2>
 800169c:	2a04      	cmp	r2, #4
 800169e:	d07a      	beq.n	8001796 <HAL_TIM_IC_CaptureCallback+0x21e>
 80016a0:	2a08      	cmp	r2, #8
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6a11      	ldr	r1, [r2, #32]
 80016a6:	bf0c      	ite	eq
 80016a8:	f421 6120 	biceq.w	r1, r1, #2560	; 0xa00
 80016ac:	f421 4120 	bicne.w	r1, r1, #40960	; 0xa000
 80016b0:	6211      	str	r1, [r2, #32]
 80016b2:	6a11      	ldr	r1, [r2, #32]
 80016b4:	6211      	str	r1, [r2, #32]
				if (htim->Channel == cfx_activtimch[0]) {
 80016b6:	7f21      	ldrb	r1, [r4, #28]
 80016b8:	7832      	ldrb	r2, [r6, #0]
 80016ba:	4291      	cmp	r1, r2
 80016bc:	f47f af62 	bne.w	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
					real_power = (float) US_PER_W / (float) cfx_us[i];
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80017fc <HAL_TIM_IC_CaptureCallback+0x284>
					if (real_power > 1000)
 80016c8:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001800 <HAL_TIM_IC_CaptureCallback+0x288>
						real_power = 0;
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_TIM_IC_CaptureCallback+0x28c>)
					real_power = (float) US_PER_W / (float) cfx_us[i];
 80016ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d2:	ee86 7a27 	vdiv.f32	s14, s12, s15
					if (real_power > 1000)
 80016d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						real_power = 0;
 80016de:	bfca      	itet	gt
 80016e0:	2200      	movgt	r2, #0
					real_power = (float) US_PER_W / (float) cfx_us[i];
 80016e2:	ed83 7a00 	vstrle	s14, [r3]
						real_power = 0;
 80016e6:	601a      	strgt	r2, [r3, #0]
}
 80016e8:	e74c      	b.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
				cfx_t1[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 80016ea:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80017e4 <HAL_TIM_IC_CaptureCallback+0x26c>
 80016ee:	f8d8 1000 	ldr.w	r1, [r8]
 80016f2:	f003 f9eb 	bl	8004acc <HAL_TIM_ReadCapturedValue>
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0x270>)
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80016f8:	f8d8 3000 	ldr.w	r3, [r8]
				cfx_t1[i] = HAL_TIM_ReadCapturedValue(htim, cfx_timch[i]);
 80016fc:	6010      	str	r0, [r2, #0]
				cfx_ovc[i] = 0;
 80016fe:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_TIM_IC_CaptureCallback+0x274>)
 8001700:	6017      	str	r7, [r2, #0]
				cfx_edgeStates[i] = 1;
 8001702:	2201      	movs	r2, #1
 8001704:	f889 2000 	strb.w	r2, [r9]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001708:	b16b      	cbz	r3, 8001726 <HAL_TIM_IC_CaptureCallback+0x1ae>
 800170a:	2b04      	cmp	r3, #4
 800170c:	d039      	beq.n	8001782 <HAL_TIM_IC_CaptureCallback+0x20a>
 800170e:	2b08      	cmp	r3, #8
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	d057      	beq.n	80017c6 <HAL_TIM_IC_CaptureCallback+0x24e>
 8001716:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800171a:	621a      	str	r2, [r3, #32]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001722:	621a      	str	r2, [r3, #32]
 8001724:	e736      	b.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	6a1a      	ldr	r2, [r3, #32]
 800172a:	f022 020a 	bic.w	r2, r2, #10
 800172e:	621a      	str	r2, [r3, #32]
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	f042 0202 	orr.w	r2, r2, #2
 8001736:	621a      	str	r2, [r3, #32]
 8001738:	e72c      	b.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	6a11      	ldr	r1, [r2, #32]
 800173e:	f021 010a 	bic.w	r1, r1, #10
 8001742:	6211      	str	r1, [r2, #32]
 8001744:	6a11      	ldr	r1, [r2, #32]
 8001746:	6211      	str	r1, [r2, #32]
 8001748:	e7b5      	b.n	80016b6 <HAL_TIM_IC_CaptureCallback+0x13e>
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	6a11      	ldr	r1, [r2, #32]
 800174e:	f021 010a 	bic.w	r1, r1, #10
 8001752:	6211      	str	r1, [r2, #32]
 8001754:	6a11      	ldr	r1, [r2, #32]
 8001756:	6211      	str	r1, [r2, #32]
 8001758:	e771      	b.n	800163e <HAL_TIM_IC_CaptureCallback+0xc6>
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	f022 020a 	bic.w	r2, r2, #10
 8001762:	621a      	str	r2, [r3, #32]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	f042 0202 	orr.w	r2, r2, #2
 800176a:	621a      	str	r2, [r3, #32]
 800176c:	e70a      	b.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001776:	621a      	str	r2, [r3, #32]
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	e700      	b.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	621a      	str	r2, [r3, #32]
 8001794:	e6fe      	b.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	6a11      	ldr	r1, [r2, #32]
 800179a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 800179e:	6211      	str	r1, [r2, #32]
 80017a0:	6a11      	ldr	r1, [r2, #32]
 80017a2:	6211      	str	r1, [r2, #32]
 80017a4:	e787      	b.n	80016b6 <HAL_TIM_IC_CaptureCallback+0x13e>
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	6a11      	ldr	r1, [r2, #32]
 80017aa:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80017ae:	6211      	str	r1, [r2, #32]
 80017b0:	6a11      	ldr	r1, [r2, #32]
 80017b2:	6211      	str	r1, [r2, #32]
 80017b4:	e743      	b.n	800163e <HAL_TIM_IC_CaptureCallback+0xc6>
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80017b6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80017ba:	621a      	str	r2, [r3, #32]
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c2:	621a      	str	r2, [r3, #32]
 80017c4:	e6de      	b.n	8001584 <HAL_TIM_IC_CaptureCallback+0xc>
 80017c6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	6a1a      	ldr	r2, [r3, #32]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d2:	621a      	str	r2, [r3, #32]
 80017d4:	e6de      	b.n	8001594 <HAL_TIM_IC_CaptureCallback+0x1c>
 80017d6:	bf00      	nop
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000000 	.word	0x20000000
 80017e0:	2000148c 	.word	0x2000148c
 80017e4:	20000008 	.word	0x20000008
 80017e8:	2000149c 	.word	0x2000149c
 80017ec:	20001490 	.word	0x20001490
 80017f0:	001e8480 	.word	0x001e8480
 80017f4:	200014a4 	.word	0x200014a4
 80017f8:	200014ac 	.word	0x200014ac
 80017fc:	4af84a80 	.word	0x4af84a80
 8001800:	447a0000 	.word	0x447a0000
 8001804:	20001508 	.word	0x20001508

08001808 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == cfx_htim) { // Period of timer is elapsed, reset CFs Input Capture when it's overflowing for 2 times atleast
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4283      	cmp	r3, r0
 800180e:	d000      	beq.n	8001812 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001810:	4770      	bx	lr
		for (int i = 0; i < 2; i++) {
			cfx_ovc[i]++;
 8001812:	4a3e      	ldr	r2, [pc, #248]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001814:	493e      	ldr	r1, [pc, #248]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f8d1 c000 	ldr.w	ip, [r1]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
			cfx_ovc[i]++;
 800181e:	3301      	adds	r3, #1
 8001820:	4c3c      	ldr	r4, [pc, #240]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x10c>)
			if (cfx_ovc[i] >= 2) {
 8001822:	2b01      	cmp	r3, #1
 8001824:	f8d4 e000 	ldr.w	lr, [r4]
 8001828:	d91d      	bls.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x5e>
				if (i == 0) {
					real_power = 0.;
					current_rms = 0.;
				}
				cfx_ovc[i] = 0;
				if (cfx_edgeStates[i] == 1) {
 800182a:	4e3b      	ldr	r6, [pc, #236]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800182c:	7835      	ldrb	r5, [r6, #0]
				cfx_ovc[i] = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	6013      	str	r3, [r2, #0]
				if (cfx_edgeStates[i] == 1) {
 8001832:	2d00      	cmp	r5, #0
 8001834:	d042      	beq.n	80018bc <HAL_TIM_PeriodElapsedCallback+0xb4>
					cfx_edgeStates[i] = 0;
 8001836:	7033      	strb	r3, [r6, #0]
					cfx_us[i] = 0;
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001838:	4e38      	ldr	r6, [pc, #224]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x114>)
					cfx_us[i] = 0;
 800183a:	4f39      	ldr	r7, [pc, #228]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x118>)
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800183c:	6836      	ldr	r6, [r6, #0]
					cfx_us[i] = 0;
 800183e:	603b      	str	r3, [r7, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001840:	f04f 0c00 	mov.w	ip, #0
 8001844:	6803      	ldr	r3, [r0, #0]
 8001846:	2e00      	cmp	r6, #0
 8001848:	d030      	beq.n	80018ac <HAL_TIM_PeriodElapsedCallback+0xa4>
 800184a:	2e04      	cmp	r6, #4
 800184c:	d04a      	beq.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0xdc>
 800184e:	2e08      	cmp	r6, #8
 8001850:	6a1e      	ldr	r6, [r3, #32]
 8001852:	bf14      	ite	ne
 8001854:	f426 4620 	bicne.w	r6, r6, #40960	; 0xa000
 8001858:	f426 6620 	biceq.w	r6, r6, #2560	; 0xa00
 800185c:	621e      	str	r6, [r3, #32]
 800185e:	6a1e      	ldr	r6, [r3, #32]
 8001860:	621e      	str	r6, [r3, #32]
 8001862:	46e6      	mov	lr, ip
 8001864:	e001      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x62>
			cfx_ovc[i]++;
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	2500      	movs	r5, #0
 800186a:	6853      	ldr	r3, [r2, #4]
 800186c:	3301      	adds	r3, #1
			if (cfx_ovc[i] >= 2) {
 800186e:	2b01      	cmp	r3, #1
 8001870:	d918      	bls.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x9c>
				if (cfx_edgeStates[i] == 1) {
 8001872:	4e29      	ldr	r6, [pc, #164]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x110>)
				cfx_ovc[i] = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	6053      	str	r3, [r2, #4]
				if (cfx_edgeStates[i] == 1) {
 8001878:	7872      	ldrb	r2, [r6, #1]
 800187a:	b162      	cbz	r2, 8001896 <HAL_TIM_PeriodElapsedCallback+0x8e>
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x114>)
					cfx_edgeStates[i] = 0;
 800187e:	7073      	strb	r3, [r6, #1]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001880:	6852      	ldr	r2, [r2, #4]
					cfx_us[i] = 0;
 8001882:	4e27      	ldr	r6, [pc, #156]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001884:	6073      	str	r3, [r6, #4]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	b9ea      	cbnz	r2, 80018c6 <HAL_TIM_PeriodElapsedCallback+0xbe>
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	f022 020a 	bic.w	r2, r2, #10
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	621a      	str	r2, [r3, #32]
		for (int i = 0; i < 2; i++) {
 8001896:	b905      	cbnz	r5, 800189a <HAL_TIM_PeriodElapsedCallback+0x92>
							TIM_INPUTCHANNELPOLARITY_RISING);
				}
			}
		}
	}
}
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	f8c4 e000 	str.w	lr, [r4]
 800189e:	f8c1 c000 	str.w	ip, [r1]
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cfx_ovc[i]++;
 80018a4:	6053      	str	r3, [r2, #4]
		for (int i = 0; i < 2; i++) {
 80018a6:	2d00      	cmp	r5, #0
 80018a8:	d0f6      	beq.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x90>
 80018aa:	e7f6      	b.n	800189a <HAL_TIM_PeriodElapsedCallback+0x92>
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80018ac:	6a1e      	ldr	r6, [r3, #32]
 80018ae:	f026 060a 	bic.w	r6, r6, #10
 80018b2:	621e      	str	r6, [r3, #32]
 80018b4:	6a1e      	ldr	r6, [r3, #32]
 80018b6:	621e      	str	r6, [r3, #32]
 80018b8:	46e6      	mov	lr, ip
 80018ba:	e7d6      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x62>
					current_rms = 0.;
 80018bc:	f04f 0c00 	mov.w	ip, #0
				if (cfx_edgeStates[i] == 1) {
 80018c0:	2501      	movs	r5, #1
					real_power = 0.;
 80018c2:	46e6      	mov	lr, ip
 80018c4:	e7d1      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x62>
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80018c6:	2a04      	cmp	r2, #4
 80018c8:	d014      	beq.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0xec>
 80018ca:	2a08      	cmp	r2, #8
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	bf0c      	ite	eq
 80018d0:	f422 6220 	biceq.w	r2, r2, #2560	; 0xa00
 80018d4:	f422 4220 	bicne.w	r2, r2, #40960	; 0xa000
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	621a      	str	r2, [r3, #32]
		for (int i = 0; i < 2; i++) {
 80018de:	2d00      	cmp	r5, #0
 80018e0:	d0da      	beq.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x90>
 80018e2:	e7da      	b.n	800189a <HAL_TIM_PeriodElapsedCallback+0x92>
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, cfx_timch[i],
 80018e4:	6a1e      	ldr	r6, [r3, #32]
 80018e6:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
 80018ea:	621e      	str	r6, [r3, #32]
 80018ec:	6a1e      	ldr	r6, [r3, #32]
 80018ee:	621e      	str	r6, [r3, #32]
 80018f0:	46e6      	mov	lr, ip
 80018f2:	e7ba      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x62>
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018fa:	621a      	str	r2, [r3, #32]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	621a      	str	r2, [r3, #32]
		for (int i = 0; i < 2; i++) {
 8001900:	2d00      	cmp	r5, #0
 8001902:	d0c9      	beq.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001904:	e7c9      	b.n	800189a <HAL_TIM_PeriodElapsedCallback+0x92>
 8001906:	bf00      	nop
 8001908:	20000004 	.word	0x20000004
 800190c:	20001490 	.word	0x20001490
 8001910:	200014b4 	.word	0x200014b4
 8001914:	20001508 	.word	0x20001508
 8001918:	2000148c 	.word	0x2000148c
 800191c:	20000008 	.word	0x20000008
 8001920:	200014ac 	.word	0x200014ac
 8001924:	00000000 	.word	0x00000000

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	2300      	movs	r3, #0
{
 800192c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001936:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <SystemClock_Config+0xb0>)
 800193c:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800194a:	6408      	str	r0, [r1, #64]	; 0x40
 800194c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800194e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001952:	9100      	str	r1, [sp, #0]
 8001954:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	6813      	ldr	r3, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001968:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800196a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80019c8 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800196e:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001970:	2004      	movs	r0, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 168;
 800197a:	22a8      	movs	r2, #168	; 0xa8
 800197c:	e9cd 0210 	strd	r0, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001980:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001982:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001984:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001986:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800198a:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198e:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f001 fcdc 	bl	800334c <HAL_RCC_OscConfig>
 8001994:	b108      	cbz	r0, 800199a <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001996:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001998:	e7fe      	b.n	8001998 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80019d0 <SystemClock_Config+0xa8>
 800199e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a2:	2200      	movs	r2, #0
 80019a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ae:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019b6:	f001 fee1 	bl	800377c <HAL_RCC_ClockConfig>
 80019ba:	b108      	cbz	r0, 80019c0 <SystemClock_Config+0x98>
 80019bc:	b672      	cpsid	i
	while (1) {
 80019be:	e7fe      	b.n	80019be <SystemClock_Config+0x96>
}
 80019c0:	b014      	add	sp, #80	; 0x50
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	00000009 	.word	0x00000009
 80019cc:	00010000 	.word	0x00010000
 80019d0:	0000000f 	.word	0x0000000f
 80019d4:	00000002 	.word	0x00000002
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000

080019e0 <main>:
{
 80019e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e4:	ed2d 8b06 	vpush	{d8-d10}
	HAL_TIM_Base_Start_IT(cfx_htim);
 80019e8:	4c20      	ldr	r4, [pc, #128]	; (8001a6c <main+0x8c>)
	HAL_TIM_IC_Start_IT(cfx_htim, cfx_timch[0]);
 80019ea:	4d21      	ldr	r5, [pc, #132]	; (8001a70 <main+0x90>)
{
 80019ec:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
  HAL_Init();
 80019f0:	f000 fdea 	bl	80025c8 <HAL_Init>
  SystemClock_Config();
 80019f4:	f7ff ff98 	bl	8001928 <SystemClock_Config>
  MX_GPIO_Init();
 80019f8:	f7ff fcc8 	bl	800138c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019fc:	f000 fcf2 	bl	80023e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001a00:	f000 fbf2 	bl	80021e8 <MX_TIM3_Init>
  MX_RNG_Init();
 8001a04:	f000 faec 	bl	8001fe0 <MX_RNG_Init>
  MX_CRC_Init();
 8001a08:	f7ff faa0 	bl	8000f4c <MX_CRC_Init>
  MX_TIM5_Init();
 8001a0c:	f000 fc28 	bl	8002260 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001a10:	f000 fd04 	bl	800241c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a14:	f7ff fd2e 	bl	8001474 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001a18:	f004 fb3e 	bl	8006098 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8001a1c:	f000 fb08 	bl	8002030 <MX_SDIO_SD_Init>
	HAL_TIM_Base_Start_IT(cfx_htim);
 8001a20:	6820      	ldr	r0, [r4, #0]
 8001a22:	f002 fd4d 	bl	80044c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(cfx_htim, cfx_timch[0]);
 8001a26:	6829      	ldr	r1, [r5, #0]
 8001a28:	6820      	ldr	r0, [r4, #0]
 8001a2a:	f002 fe15 	bl	8004658 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(cfx_htim, cfx_timch[1]);
 8001a2e:	6869      	ldr	r1, [r5, #4]
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	f002 fe11 	bl	8004658 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001a36:	480f      	ldr	r0, [pc, #60]	; (8001a74 <main+0x94>)
 8001a38:	f002 fd42 	bl	80044c0 <HAL_TIM_Base_Start_IT>
	aiInit();
 8001a3c:	f7ff fd70 	bl	8001520 <aiInit>
	DS3231_Init(&hi2c1);
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <main+0x98>)
 8001a42:	f7ff faad 	bl	8000fa0 <DS3231_Init>
	HAL_Delay(1000);
 8001a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a4a:	f000 fde9 	bl	8002620 <HAL_Delay>
	FRESULT fresult = f_mount(&fs, "/", 1);
 8001a4e:	490b      	ldr	r1, [pc, #44]	; (8001a7c <main+0x9c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	a8a7      	add	r0, sp, #668	; 0x29c
 8001a54:	f006 faea 	bl	800802c <f_mount>
	if (fresult != FR_OK) {
 8001a58:	b1a0      	cbz	r0, 8001a84 <main+0xa4>
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001a5a:	4c09      	ldr	r4, [pc, #36]	; (8001a80 <main+0xa0>)
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	2102      	movs	r1, #2
 8001a60:	f000 ffa0 	bl	80029a4 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001a64:	2064      	movs	r0, #100	; 0x64
 8001a66:	f000 fddb 	bl	8002620 <HAL_Delay>
		while (1) {
 8001a6a:	e7f7      	b.n	8001a5c <main+0x7c>
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200015a8 	.word	0x200015a8
 8001a78:	20001128 	.word	0x20001128
 8001a7c:	0800f87c 	.word	0x0800f87c
 8001a80:	40020000 	.word	0x40020000
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001a84:	ed9f 8bc4 	vldr	d8, [pc, #784]	; 8001d98 <main+0x3b8>
 8001a88:	f8df b37c 	ldr.w	fp, [pc, #892]	; 8001e08 <main+0x428>
 8001a8c:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8001e0c <main+0x42c>
 8001a90:	4fc3      	ldr	r7, [pc, #780]	; (8001da0 <main+0x3c0>)
			voltage_rms = (float) US_PER_VOLT / (float) cfx_us[1];
 8001a92:	ed9f aac4 	vldr	s20, [pc, #784]	; 8001da4 <main+0x3c4>
			current_rms = (float) US_PER_mA / (float) cfx_us[1];
 8001a96:	eddf 9ac4 	vldr	s19, [pc, #784]	; 8001da8 <main+0x3c8>
		if (real_power == 0.)
 8001a9a:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8001dac <main+0x3cc>
 8001a9e:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8001e10 <main+0x430>
 8001aa2:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8001e14 <main+0x434>
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001aa6:	4ec2      	ldr	r6, [pc, #776]	; (8001db0 <main+0x3d0>)
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001aa8:	48c2      	ldr	r0, [pc, #776]	; (8001db4 <main+0x3d4>)
 8001aaa:	2102      	movs	r1, #2
 8001aac:	f000 ff7a 	bl	80029a4 <HAL_GPIO_TogglePin>
		if (cfx_readCurrent)
 8001ab0:	4bc1      	ldr	r3, [pc, #772]	; (8001db8 <main+0x3d8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 81be 	beq.w	8001e36 <main+0x456>
			current_rms = (float) US_PER_mA / (float) cfx_us[1];
 8001aba:	4bc0      	ldr	r3, [pc, #768]	; (8001dbc <main+0x3dc>)
		apparent_power = voltage_rms * current_rms / 1000.;
 8001abc:	ed9a 7a00 	vldr	s14, [sl]
			current_rms = (float) US_PER_mA / (float) cfx_us[1];
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8001ad0:	edcb 6a00 	vstr	s13, [fp]
		if (real_power == 0.)
 8001ad4:	edd7 7a00 	vldr	s15, [r7]
		apparent_power = voltage_rms * current_rms / 1000.;
 8001ad8:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8001dc0 <main+0x3e0>
		if (real_power == 0.)
 8001adc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		apparent_power = voltage_rms * current_rms / 1000.;
 8001ae4:	bf12      	itee	ne
 8001ae6:	eddb 7a00 	vldrne	s15, [fp]
			current_rms = 0.;
 8001aea:	ed8b 9a00 	vstreq	s18, [fp]
 8001aee:	eef0 7a49 	vmoveq.f32	s15, s18
		apparent_power = voltage_rms * current_rms / 1000.;
 8001af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afa:	ed89 7a00 	vstr	s14, [r9]
		t_float += ((float) HAL_GetTick() - (float) lastTick) / 1000.;
 8001afe:	f000 fd89 	bl	8002614 <HAL_GetTick>
 8001b02:	4bb0      	ldr	r3, [pc, #704]	; (8001dc4 <main+0x3e4>)
 8001b04:	ee07 0a90 	vmov	s15, r0
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8001b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd12 	bl	8000548 <__aeabi_f2d>
 8001b24:	2200      	movs	r2, #0
 8001b26:	4ba8      	ldr	r3, [pc, #672]	; (8001dc8 <main+0x3e8>)
 8001b28:	f7fe fe90 	bl	800084c <__aeabi_ddiv>
 8001b2c:	4ba7      	ldr	r3, [pc, #668]	; (8001dcc <main+0x3ec>)
 8001b2e:	4604      	mov	r4, r0
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	460d      	mov	r5, r1
 8001b34:	f7fe fd08 	bl	8000548 <__aeabi_f2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	f7ff f830 	bl	8000ba8 <__aeabi_d2f>
		if (t_float >= 120.)
 8001b48:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001dd0 <main+0x3f0>
		t_float += ((float) HAL_GetTick() - (float) lastTick) / 1000.;
 8001b4c:	ee07 0a90 	vmov	s15, r0
		if (t_float >= 120.)
 8001b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	f280 8167 	bge.w	8001e2a <main+0x44a>
		t_float += ((float) HAL_GetTick() - (float) lastTick) / 1000.;
 8001b5c:	4b9b      	ldr	r3, [pc, #620]	; (8001dcc <main+0x3ec>)
 8001b5e:	6018      	str	r0, [r3, #0]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b60:	4b9c      	ldr	r3, [pc, #624]	; (8001dd4 <main+0x3f4>)
		in_data[0] = t_float;
 8001b62:	489d      	ldr	r0, [pc, #628]	; (8001dd8 <main+0x3f8>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b64:	6819      	ldr	r1, [r3, #0]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b66:	4b9d      	ldr	r3, [pc, #628]	; (8001ddc <main+0x3fc>)
		in_data[0] = t_float;
 8001b68:	edc0 7a00 	vstr	s15, [r0]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b6c:	681a      	ldr	r2, [r3, #0]
		in_data[1] = voltage_rms;
 8001b6e:	f8da 3000 	ldr.w	r3, [sl]
 8001b72:	6043      	str	r3, [r0, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001b74:	4b9a      	ldr	r3, [pc, #616]	; (8001de0 <main+0x400>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001b76:	6048      	str	r0, [r1, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001b78:	6818      	ldr	r0, [r3, #0]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001b7a:	f8c2 8004 	str.w	r8, [r2, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001b7e:	f006 fffd 	bl	8008b7c <ai_network_run>
	if (n_batch != 1) {
 8001b82:	2801      	cmp	r0, #1
 8001b84:	f040 818e 	bne.w	8001ea4 <main+0x4c4>
	ai_float maxValue = input_data[0];
 8001b88:	edd8 7a00 	vldr	s15, [r8]
		if (input_data[i] > maxValue) {
 8001b8c:	ed98 7a01 	vldr	s14, [r8, #4]
 8001b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	bf48      	it	mi
 8001b9a:	eef0 7a47 	vmovmi.f32	s15, s14
 8001b9e:	ed98 7a02 	vldr	s14, [r8, #8]
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	bf4c      	ite	mi
 8001ba8:	2401      	movmi	r4, #1
 8001baa:	2400      	movpl	r4, #0
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int maxIndex = 0;
 8001bb0:	4625      	mov	r5, r4
		if (input_data[i] > maxValue) {
 8001bb2:	d503      	bpl.n	8001bbc <main+0x1dc>
 8001bb4:	2402      	movs	r4, #2
 8001bb6:	eef0 7a47 	vmov.f32	s15, s14
	for (int i = 1; i < len; i++) {
 8001bba:	4625      	mov	r5, r4
		if (input_data[i] > maxValue) {
 8001bbc:	ed98 7a03 	vldr	s14, [r8, #12]
 8001bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d503      	bpl.n	8001bd2 <main+0x1f2>
 8001bca:	2403      	movs	r4, #3
 8001bcc:	eef0 7a47 	vmov.f32	s15, s14
	for (int i = 1; i < len; i++) {
 8001bd0:	4625      	mov	r5, r4
		if (input_data[i] > maxValue) {
 8001bd2:	ed98 7a04 	vldr	s14, [r8, #16]
		if (lastGangguan != gangguan
 8001bd6:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <main+0x404>)
		if (input_data[i] > maxValue) {
 8001bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	f100 8135 	bmi.w	8001e4e <main+0x46e>
		if (lastGangguan != gangguan
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	f040 8170 	bne.w	8001ecc <main+0x4ec>
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001bec:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <main+0x3ec>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f7fe fcaa 	bl	8000548 <__aeabi_f2d>
 8001bf4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8001bf8:	f8da 0000 	ldr.w	r0, [sl]
 8001bfc:	f7fe fca4 	bl	8000548 <__aeabi_f2d>
 8001c00:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001c04:	f8db 0000 	ldr.w	r0, [fp]
 8001c08:	f7fe fc9e 	bl	8000548 <__aeabi_f2d>
 8001c0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001c10:	f8d9 0000 	ldr.w	r0, [r9]
 8001c14:	f7fe fc98 	bl	8000548 <__aeabi_f2d>
 8001c18:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001c1c:	6838      	ldr	r0, [r7, #0]
 8001c1e:	f7fe fc93 	bl	8000548 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
	if (g == NORMAL)
 8001c26:	2d00      	cmp	r5, #0
 8001c28:	f040 8146 	bne.w	8001eb8 <main+0x4d8>
		return "Normal";
 8001c2c:	496e      	ldr	r1, [pc, #440]	; (8001de8 <main+0x408>)
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001c2e:	9108      	str	r1, [sp, #32]
 8001c30:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8001c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c38:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8001c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c40:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8001c44:	4969      	ldr	r1, [pc, #420]	; (8001dec <main+0x40c>)
 8001c46:	ed8d 7b00 	vstr	d7, [sp]
 8001c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c4e:	4630      	mov	r0, r6
 8001c50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001c54:	f009 fc6e 	bl	800b534 <sprintf>
		printUART(buffer, strlen(buffer));
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f7fe fab9 	bl	80001d0 <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, len, HAL_MAX_DELAY);
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c62:	b282      	uxth	r2, r0
 8001c64:	4631      	mov	r1, r6
 8001c66:	4862      	ldr	r0, [pc, #392]	; (8001df0 <main+0x410>)
 8001c68:	f003 f8d8 	bl	8004e1c <HAL_UART_Transmit>
		sprintf(buffer, "%u_%u_%u.csv", DS3231_GetDate(), DS3231_GetMonth(),
 8001c6c:	f7ff fa8a 	bl	8001184 <DS3231_GetDate>
 8001c70:	9010      	str	r0, [sp, #64]	; 0x40
 8001c72:	f7ff faad 	bl	80011d0 <DS3231_GetMonth>
 8001c76:	900e      	str	r0, [sp, #56]	; 0x38
				DS3231_GetYear());
 8001c78:	f7ff fad0 	bl	800121c <DS3231_GetYear>
		sprintf(buffer, "%u_%u_%u.csv", DS3231_GetDate(), DS3231_GetMonth(),
 8001c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001c7e:	495d      	ldr	r1, [pc, #372]	; (8001df4 <main+0x414>)
 8001c80:	9000      	str	r0, [sp, #0]
 8001c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c84:	4630      	mov	r0, r6
 8001c86:	f009 fc55 	bl	800b534 <sprintf>
		fresult = f_open(&file, buffer,
 8001c8a:	2233      	movs	r2, #51	; 0x33
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	a81b      	add	r0, sp, #108	; 0x6c
 8001c90:	f006 fa0e 	bl	80080b0 <f_open>
		if(fresult != FR_OK){
 8001c94:	2800      	cmp	r0, #0
 8001c96:	f040 8179 	bne.w	8001f8c <main+0x5ac>
				DS3231_GetHour(), DS3231_GetMinute(), DS3231_GetSecond(),
 8001c9a:	f7ff fb05 	bl	80012a8 <DS3231_GetHour>
 8001c9e:	9019      	str	r0, [sp, #100]	; 0x64
 8001ca0:	f7ff fb28 	bl	80012f4 <DS3231_GetMinute>
 8001ca4:	9018      	str	r0, [sp, #96]	; 0x60
 8001ca6:	f7ff fb4b 	bl	8001340 <DS3231_GetSecond>
 8001caa:	9016      	str	r0, [sp, #88]	; 0x58
		sprintf(buffer,
 8001cac:	f8da 0000 	ldr.w	r0, [sl]
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001cb8:	f8db 0000 	ldr.w	r0, [fp]
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001cd0:	6838      	ldr	r0, [r7, #0]
 8001cd2:	f7fe fc39 	bl	8000548 <__aeabi_f2d>
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <main+0x3ec>)
 8001cd8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
	if (g == NORMAL)
 8001ce2:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	f000 80e4 	beq.w	8001eb4 <main+0x4d4>
	else if (g == SAG)
 8001cec:	2c01      	cmp	r4, #1
 8001cee:	f000 80fa 	beq.w	8001ee6 <main+0x506>
	else if (g == SWELL)
 8001cf2:	2c03      	cmp	r4, #3
 8001cf4:	f000 80ff 	beq.w	8001ef6 <main+0x516>
	else if (g == UNDERVOLTAGE)
 8001cf8:	2c02      	cmp	r4, #2
 8001cfa:	f000 8100 	beq.w	8001efe <main+0x51e>
		return "Overvoltage";
 8001cfe:	f8df c118 	ldr.w	ip, [pc, #280]	; 8001e18 <main+0x438>
 8001d02:	4d3d      	ldr	r5, [pc, #244]	; (8001df8 <main+0x418>)
 8001d04:	2c04      	cmp	r4, #4
 8001d06:	bf18      	it	ne
 8001d08:	4665      	movne	r5, ip
		sprintf(buffer,
 8001d0a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8001d0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d12:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8001d16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d1a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8001d1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001d22:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8001d26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001d2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d2c:	9100      	str	r1, [sp, #0]
 8001d2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d32:	4932      	ldr	r1, [pc, #200]	; (8001dfc <main+0x41c>)
 8001d34:	950c      	str	r5, [sp, #48]	; 0x30
 8001d36:	4630      	mov	r0, r6
 8001d38:	f009 fbfc 	bl	800b534 <sprintf>
		int writtenBytes = f_puts(buffer, &file);
 8001d3c:	a91b      	add	r1, sp, #108	; 0x6c
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f006 fd0e 	bl	8008760 <f_puts>
		if(writtenBytes < 0){
 8001d44:	2800      	cmp	r0, #0
 8001d46:	f2c0 812a 	blt.w	8001f9e <main+0x5be>
		f_close(&file);
 8001d4a:	a81b      	add	r0, sp, #108	; 0x6c
 8001d4c:	f006 fc78 	bl	8008640 <f_close>
		pwr.kondisi = gangguan;
 8001d50:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <main+0x420>)
		pwr.voltage_rms = voltage_rms;
 8001d52:	f8da 3000 	ldr.w	r3, [sl]
 8001d56:	6013      	str	r3, [r2, #0]
		pwr.current_rms = current_rms;
 8001d58:	f8db 3000 	ldr.w	r3, [fp]
 8001d5c:	6053      	str	r3, [r2, #4]
		pwr.apparent_power = apparent_power;
 8001d5e:	f8d9 3000 	ldr.w	r3, [r9]
 8001d62:	6093      	str	r3, [r2, #8]
		pwr.real_power = real_power;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	60d3      	str	r3, [r2, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*) &pwr,
 8001d68:	4925      	ldr	r1, [pc, #148]	; (8001e00 <main+0x420>)
		pwr.kondisi = gangguan;
 8001d6a:	7414      	strb	r4, [r2, #16]
		HAL_UART_Transmit(&huart3, (uint8_t*) &pwr,
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d70:	2214      	movs	r2, #20
 8001d72:	4824      	ldr	r0, [pc, #144]	; (8001e04 <main+0x424>)
 8001d74:	f003 f852 	bl	8004e1c <HAL_UART_Transmit>
		bool copy_readCurrent = cfx_readCurrent; // prevent to be toggled from interrupt before switching SEL
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <main+0x3d8>)
		HAL_GPIO_TogglePin(SEL_GPIO_Port, SEL_Pin);
 8001d7a:	480e      	ldr	r0, [pc, #56]	; (8001db4 <main+0x3d4>)
		bool copy_readCurrent = cfx_readCurrent; // prevent to be toggled from interrupt before switching SEL
 8001d7c:	781d      	ldrb	r5, [r3, #0]
		HAL_GPIO_TogglePin(SEL_GPIO_Port, SEL_Pin);
 8001d7e:	2120      	movs	r1, #32
 8001d80:	f000 fe10 	bl	80029a4 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 8001d84:	f000 fc46 	bl	8002614 <HAL_GetTick>
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <main+0x3e4>)
 8001d8a:	6018      	str	r0, [r3, #0]
		lastGangguan = gangguan;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <main+0x404>)
 8001d8e:	701c      	strb	r4, [r3, #0]
 8001d90:	e044      	b.n	8001e1c <main+0x43c>
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	3fe00000 	.word	0x3fe00000
 8001da0:	20001508 	.word	0x20001508
 8001da4:	47e4c000 	.word	0x47e4c000
 8001da8:	4a012e50 	.word	0x4a012e50
 8001dac:	00000000 	.word	0x00000000
 8001db0:	2000138c 	.word	0x2000138c
 8001db4:	40020000 	.word	0x40020000
 8001db8:	20001498 	.word	0x20001498
 8001dbc:	200014ac 	.word	0x200014ac
 8001dc0:	447a0000 	.word	0x447a0000
 8001dc4:	200014cc 	.word	0x200014cc
 8001dc8:	408f4000 	.word	0x408f4000
 8001dcc:	20000010 	.word	0x20000010
 8001dd0:	42f00000 	.word	0x42f00000
 8001dd4:	20001380 	.word	0x20001380
 8001dd8:	200014c0 	.word	0x200014c0
 8001ddc:	20001384 	.word	0x20001384
 8001de0:	200014d0 	.word	0x200014d0
 8001de4:	200014c8 	.word	0x200014c8
 8001de8:	0800f85c 	.word	0x0800f85c
 8001dec:	0800f880 	.word	0x0800f880
 8001df0:	20001638 	.word	0x20001638
 8001df4:	0800f8a8 	.word	0x0800f8a8
 8001df8:	0800f870 	.word	0x0800f870
 8001dfc:	0800f8b8 	.word	0x0800f8b8
 8001e00:	200014f4 	.word	0x200014f4
 8001e04:	2000167c 	.word	0x2000167c
 8001e08:	200014b4 	.word	0x200014b4
 8001e0c:	2000150c 	.word	0x2000150c
 8001e10:	20001388 	.word	0x20001388
 8001e14:	200014e0 	.word	0x200014e0
 8001e18:	0800f854 	.word	0x0800f854
		if (copy_readCurrent)
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d03c      	beq.n	8001e9a <main+0x4ba>
			HAL_Delay(500);
 8001e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e24:	f000 fbfc 	bl	8002620 <HAL_Delay>
 8001e28:	e63e      	b.n	8001aa8 <main+0xc8>
			t_float = 120.;
 8001e2a:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <main+0x5d0>)
 8001e2c:	eef0 7a47 	vmov.f32	s15, s14
 8001e30:	ed83 7a00 	vstr	s14, [r3]
 8001e34:	e694      	b.n	8001b60 <main+0x180>
			voltage_rms = (float) US_PER_VOLT / (float) cfx_us[1];
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <main+0x5d4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	930e      	str	r3, [sp, #56]	; 0x38
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e44:	ee8a 7a27 	vdiv.f32	s14, s20, s15
 8001e48:	ed8a 7a00 	vstr	s14, [sl]
 8001e4c:	e642      	b.n	8001ad4 <main+0xf4>
		if (lastGangguan != gangguan
 8001e4e:	781c      	ldrb	r4, [r3, #0]
 8001e50:	2c04      	cmp	r4, #4
 8001e52:	d077      	beq.n	8001f44 <main+0x564>
				&& !(lastGangguan == SWELL && gangguan == OVERVOLTAGE)
 8001e54:	2c03      	cmp	r4, #3
 8001e56:	d054      	beq.n	8001f02 <main+0x522>
			t_float = 0.5;
 8001e58:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <main+0x5d0>)
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001e5a:	f8da 0000 	ldr.w	r0, [sl]
			t_float = 0.5;
 8001e5e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001e62:	6013      	str	r3, [r2, #0]
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001e64:	f7fe fb70 	bl	8000548 <__aeabi_f2d>
 8001e68:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001e6c:	f8db 0000 	ldr.w	r0, [fp]
 8001e70:	f7fe fb6a 	bl	8000548 <__aeabi_f2d>
 8001e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001e78:	f8d9 0000 	ldr.w	r0, [r9]
 8001e7c:	f7fe fb64 	bl	8000548 <__aeabi_f2d>
 8001e80:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f7fe fb5f 	bl	8000548 <__aeabi_f2d>
 8001e8a:	ed8d 8b14 	vstr	d8, [sp, #80]	; 0x50
	for (int i = 1; i < len; i++) {
 8001e8e:	2504      	movs	r5, #4
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
	return maxIndex;
 8001e94:	462c      	mov	r4, r5
		return "Overvoltage";
 8001e96:	4948      	ldr	r1, [pc, #288]	; (8001fb8 <main+0x5d8>)
 8001e98:	e6c9      	b.n	8001c2e <main+0x24e>
			HAL_Delay(2000);
 8001e9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e9e:	f000 fbbf 	bl	8002620 <HAL_Delay>
	while (1) {
 8001ea2:	e601      	b.n	8001aa8 <main+0xc8>
		err = ai_network_get_error(network);
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <main+0x5dc>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	f006 fd4c 	bl	8008944 <ai_network_get_error>
		printf("Error Invoking Network!!\r\n");
 8001eac:	4844      	ldr	r0, [pc, #272]	; (8001fc0 <main+0x5e0>)
 8001eae:	f009 f985 	bl	800b1bc <puts>
		return 1;
 8001eb2:	e669      	b.n	8001b88 <main+0x1a8>
		return "Normal";
 8001eb4:	4d43      	ldr	r5, [pc, #268]	; (8001fc4 <main+0x5e4>)
 8001eb6:	e728      	b.n	8001d0a <main+0x32a>
	else if (g == SAG)
 8001eb8:	2c01      	cmp	r4, #1
 8001eba:	d012      	beq.n	8001ee2 <main+0x502>
	else if (g == SWELL)
 8001ebc:	2c03      	cmp	r4, #3
 8001ebe:	d014      	beq.n	8001eea <main+0x50a>
	else if (g == UNDERVOLTAGE)
 8001ec0:	2c02      	cmp	r4, #2
 8001ec2:	d01a      	beq.n	8001efa <main+0x51a>
	else if (g == OVERVOLTAGE)
 8001ec4:	2c04      	cmp	r4, #4
 8001ec6:	d0e6      	beq.n	8001e96 <main+0x4b6>
	return "Unknown";
 8001ec8:	493f      	ldr	r1, [pc, #252]	; (8001fc8 <main+0x5e8>)
 8001eca:	e6b0      	b.n	8001c2e <main+0x24e>
				&& !(lastGangguan == SWELL && gangguan == OVERVOLTAGE)
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d001      	beq.n	8001ed4 <main+0x4f4>
				&& !(lastGangguan == SAG && gangguan == UNDERVOLTAGE))
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00c      	beq.n	8001eee <main+0x50e>
			t_float = 0.5;
 8001ed4:	4a36      	ldr	r2, [pc, #216]	; (8001fb0 <main+0x5d0>)
 8001ed6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001eda:	ed8d 8b14 	vstr	d8, [sp, #80]	; 0x50
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e68a      	b.n	8001bf8 <main+0x218>
		return "Sag";
 8001ee2:	493a      	ldr	r1, [pc, #232]	; (8001fcc <main+0x5ec>)
 8001ee4:	e6a3      	b.n	8001c2e <main+0x24e>
 8001ee6:	4d39      	ldr	r5, [pc, #228]	; (8001fcc <main+0x5ec>)
 8001ee8:	e70f      	b.n	8001d0a <main+0x32a>
		return "Swell";
 8001eea:	4939      	ldr	r1, [pc, #228]	; (8001fd0 <main+0x5f0>)
 8001eec:	e69f      	b.n	8001c2e <main+0x24e>
				&& !(lastGangguan == SAG && gangguan == UNDERVOLTAGE))
 8001eee:	2c02      	cmp	r4, #2
 8001ef0:	f43f ae7c 	beq.w	8001bec <main+0x20c>
 8001ef4:	e7ee      	b.n	8001ed4 <main+0x4f4>
		return "Swell";
 8001ef6:	4d36      	ldr	r5, [pc, #216]	; (8001fd0 <main+0x5f0>)
 8001ef8:	e707      	b.n	8001d0a <main+0x32a>
		return "Undervoltage";
 8001efa:	4936      	ldr	r1, [pc, #216]	; (8001fd4 <main+0x5f4>)
 8001efc:	e697      	b.n	8001c2e <main+0x24e>
 8001efe:	4d35      	ldr	r5, [pc, #212]	; (8001fd4 <main+0x5f4>)
 8001f00:	e703      	b.n	8001d0a <main+0x32a>
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <main+0x5d0>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	f7fe fb1f 	bl	8000548 <__aeabi_f2d>
 8001f0a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8001f0e:	f8da 0000 	ldr.w	r0, [sl]
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001f1a:	f8db 0000 	ldr.w	r0, [fp]
 8001f1e:	f7fe fb13 	bl	8000548 <__aeabi_f2d>
 8001f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001f26:	f8d9 0000 	ldr.w	r0, [r9]
 8001f2a:	f7fe fb0d 	bl	8000548 <__aeabi_f2d>
 8001f2e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	2504      	movs	r5, #4
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4602      	mov	r2, r0
		return "Overvoltage";
 8001f3e:	491e      	ldr	r1, [pc, #120]	; (8001fb8 <main+0x5d8>)
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001f40:	462c      	mov	r4, r5
 8001f42:	e674      	b.n	8001c2e <main+0x24e>
 8001f44:	f8da 0000 	ldr.w	r0, [sl]
 8001f48:	f7fe fafe 	bl	8000548 <__aeabi_f2d>
 8001f4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001f50:	f8db 0000 	ldr.w	r0, [fp]
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001f5c:	f8d9 0000 	ldr.w	r0, [r9]
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001f68:	6838      	ldr	r0, [r7, #0]
 8001f6a:	f7fe faed 	bl	8000548 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <main+0x5d0>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
	for (int i = 1; i < len; i++) {
 8001f7e:	4625      	mov	r5, r4
		sprintf(buffer, "%.2fV %.2fmA %.2fVA %.2fW %.2fs %s\r\n", voltage_rms,
 8001f80:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	if (g == NORMAL)
 8001f84:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		return "Overvoltage";
 8001f88:	490b      	ldr	r1, [pc, #44]	; (8001fb8 <main+0x5d8>)
 8001f8a:	e650      	b.n	8001c2e <main+0x24e>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001f8c:	4c12      	ldr	r4, [pc, #72]	; (8001fd8 <main+0x5f8>)
 8001f8e:	4620      	mov	r0, r4
 8001f90:	2102      	movs	r1, #2
 8001f92:	f000 fd07 	bl	80029a4 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	f000 fb42 	bl	8002620 <HAL_Delay>
			while (1) {
 8001f9c:	e7f7      	b.n	8001f8e <main+0x5ae>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001f9e:	4c0e      	ldr	r4, [pc, #56]	; (8001fd8 <main+0x5f8>)
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	f000 fcfe 	bl	80029a4 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 8001fa8:	2064      	movs	r0, #100	; 0x64
 8001faa:	f000 fb39 	bl	8002620 <HAL_Delay>
			while (1) {
 8001fae:	e7f7      	b.n	8001fa0 <main+0x5c0>
 8001fb0:	20000010 	.word	0x20000010
 8001fb4:	200014ac 	.word	0x200014ac
 8001fb8:	0800f870 	.word	0x0800f870
 8001fbc:	200014d0 	.word	0x200014d0
 8001fc0:	0800f828 	.word	0x0800f828
 8001fc4:	0800f85c 	.word	0x0800f85c
 8001fc8:	0800f854 	.word	0x0800f854
 8001fcc:	0800f86c 	.word	0x0800f86c
 8001fd0:	0800f864 	.word	0x0800f864
 8001fd4:	0800f844 	.word	0x0800f844
 8001fd8:	40020000 	.word	0x40020000

08001fdc <Error_Handler>:
 8001fdc:	b672      	cpsid	i
	while (1) {
 8001fde:	e7fe      	b.n	8001fde <Error_Handler+0x2>

08001fe0 <MX_RNG_Init>:
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_RNG_Init+0x18>)
{
 8001fe2:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <MX_RNG_Init+0x1c>)
 8001fe6:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001fe8:	f001 fc86 	bl	80038f8 <HAL_RNG_Init>
 8001fec:	b900      	cbnz	r0, 8001ff0 <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001fee:	bd08      	pop	{r3, pc}
 8001ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ff4:	f7ff bff2 	b.w	8001fdc <Error_Handler>
 8001ff8:	20001510 	.word	0x20001510
 8001ffc:	50060800 	.word	0x50060800

08002000 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RNG_MspInit+0x28>)
 8002002:	6802      	ldr	r2, [r0, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d000      	beq.n	800200a <HAL_RNG_MspInit+0xa>
 8002008:	4770      	bx	lr
{
 800200a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_RNG_MspInit+0x2c>)
 800200e:	2200      	movs	r2, #0
 8002010:	9201      	str	r2, [sp, #4]
 8002012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002024:	b002      	add	sp, #8
 8002026:	4770      	bx	lr
 8002028:	50060800 	.word	0x50060800
 800202c:	40023800 	.word	0x40023800

08002030 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002030:	4810      	ldr	r0, [pc, #64]	; (8002074 <MX_SDIO_SD_Init+0x44>)
 8002032:	4911      	ldr	r1, [pc, #68]	; (8002078 <MX_SDIO_SD_Init+0x48>)
{
 8002034:	b508      	push	{r3, lr}
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd.Init.ClockDiv = 10;
 8002036:	220a      	movs	r2, #10
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	e9c0 1300 	strd	r1, r3, [r0]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800203e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002042:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsd.Init.ClockDiv = 10;
 8002046:	6182      	str	r2, [r0, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8002048:	f002 f8d0 	bl	80041ec <HAL_SD_Init>
 800204c:	b928      	cbnz	r0, 800205a <MX_SDIO_SD_Init+0x2a>
    {
      Error_Handler();
    }
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <MX_SDIO_SD_Init+0x44>)
 8002050:	2100      	movs	r1, #0
 8002052:	f002 f8fd 	bl	8004250 <HAL_SD_ConfigWideBusOperation>
 8002056:	b940      	cbnz	r0, 800206a <MX_SDIO_SD_Init+0x3a>
      Error_Handler();
    }

  /* USER CODE END SDIO_Init 2 */

}
 8002058:	bd08      	pop	{r3, pc}
      Error_Handler();
 800205a:	f7ff ffbf 	bl	8001fdc <Error_Handler>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_1B) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_SDIO_SD_Init+0x44>)
 8002060:	2100      	movs	r1, #0
 8002062:	f002 f8f5 	bl	8004250 <HAL_SD_ConfigWideBusOperation>
 8002066:	2800      	cmp	r0, #0
 8002068:	d0f6      	beq.n	8002058 <MX_SDIO_SD_Init+0x28>
}
 800206a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      Error_Handler();
 800206e:	f7ff bfb5 	b.w	8001fdc <Error_Handler>
 8002072:	bf00      	nop
 8002074:	20001520 	.word	0x20001520
 8002078:	40012c00 	.word	0x40012c00

0800207c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800207c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDIO)
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_SD_MspInit+0x94>)
 8002080:	6801      	ldr	r1, [r0, #0]
{
 8002082:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDIO)
 8002086:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800208c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002090:	9308      	str	r3, [sp, #32]
  if(sdHandle->Instance==SDIO)
 8002092:	d001      	beq.n	8002098 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002094:	b00a      	add	sp, #40	; 0x28
 8002096:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002098:	f502 3286 	add.w	r2, r2, #68608	; 0x10c00
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	481c      	ldr	r0, [pc, #112]	; (8002114 <HAL_SD_MspInit+0x98>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80020a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80020a6:	6451      	str	r1, [r2, #68]	; 0x44
 80020a8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020aa:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80020ae:	9101      	str	r1, [sp, #4]
 80020b0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020b6:	f041 0104 	orr.w	r1, r1, #4
 80020ba:	6311      	str	r1, [r2, #48]	; 0x30
 80020bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020be:	f001 0104 	and.w	r1, r1, #4
 80020c2:	9102      	str	r1, [sp, #8]
 80020c4:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	9303      	str	r3, [sp, #12]
 80020c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020d8:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80020dc:	2302      	movs	r3, #2
 80020de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80020e2:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80020e8:	e9cd 3407 	strd	r3, r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f000 fb35 	bl	800275c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f2:	2204      	movs	r2, #4
 80020f4:	2302      	movs	r3, #2
 80020f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <HAL_SD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80020fc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020fe:	2200      	movs	r2, #0
 8002100:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002104:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002108:	f000 fb28 	bl	800275c <HAL_GPIO_Init>
}
 800210c:	b00a      	add	sp, #40	; 0x28
 800210e:	bd10      	pop	{r4, pc}
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00

0800211c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_MspInit+0x34>)
 8002120:	2100      	movs	r1, #0
 8002122:	9100      	str	r1, [sp, #0]
 8002124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
 800212c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800212e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002132:	9200      	str	r2, [sp, #0]
 8002134:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	9101      	str	r1, [sp, #4]
 8002138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	b002      	add	sp, #8
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler>
 8002156:	bf00      	nop

08002158 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <HardFault_Handler>
 800215a:	bf00      	nop

0800215c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler>
 800215e:	bf00      	nop

08002160 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <BusFault_Handler>
 8002162:	bf00      	nop

08002164 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler>
 8002166:	bf00      	nop

08002168 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <DebugMon_Handler>:
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <PendSV_Handler>:
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 ba42 	b.w	80025fc <HAL_IncTick>

08002178 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002178:	4801      	ldr	r0, [pc, #4]	; (8002180 <TIM3_IRQHandler+0x8>)
 800217a:	f002 bcc7 	b.w	8004b0c <HAL_TIM_IRQHandler>
 800217e:	bf00      	nop
 8002180:	200015a8 	.word	0x200015a8

08002184 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <TIM5_IRQHandler+0x8>)
 8002186:	f002 bcc1 	b.w	8004b0c <HAL_TIM_IRQHandler>
 800218a:	bf00      	nop
 800218c:	200015f0 	.word	0x200015f0

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002192:	4c0c      	ldr	r4, [pc, #48]	; (80021c4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <_sbrk+0x38>)
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002198:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 800219c:	b12a      	cbz	r2, 80021aa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4410      	add	r0, r2
 80021a0:	4288      	cmp	r0, r1
 80021a2:	d807      	bhi.n	80021b4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021a4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80021a6:	4610      	mov	r0, r2
 80021a8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <_sbrk+0x40>)
 80021ac:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4410      	add	r0, r2
 80021b0:	4288      	cmp	r0, r1
 80021b2:	d9f7      	bls.n	80021a4 <_sbrk+0x14>
    errno = ENOMEM;
 80021b4:	f008 fd34 	bl	800ac20 <__errno>
 80021b8:	230c      	movs	r3, #12
    return (void *)-1;
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 80021be:	6003      	str	r3, [r0, #0]
}
 80021c0:	4610      	mov	r0, r2
 80021c2:	bd10      	pop	{r4, pc}
 80021c4:	200015a4 	.word	0x200015a4
 80021c8:	2001c000 	.word	0x2001c000
 80021cc:	00002048 	.word	0x00002048
 80021d0:	200019d0 	.word	0x200019d0

080021d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <SystemInit+0x10>)
 80021d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e8:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ea:	481a      	ldr	r0, [pc, #104]	; (8002254 <MX_TIM3_Init+0x6c>)
 80021ec:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <MX_TIM3_Init+0x70>)
 80021ee:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 169;
 80021f0:	22a9      	movs	r2, #169	; 0xa9
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 169;
 80021f4:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 80021f6:	2263      	movs	r2, #99	; 0x63
{
 80021f8:	b087      	sub	sp, #28
  htim3.Init.Period = 99;
 80021fa:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021fe:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002204:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800220e:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002210:	f002 f8c8 	bl	80043a4 <HAL_TIM_Base_Init>
 8002214:	b998      	cbnz	r0, 800223e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221e:	a902      	add	r1, sp, #8
 8002220:	f002 fba4 	bl	800496c <HAL_TIM_ConfigClockSource>
 8002224:	b998      	cbnz	r0, 800224e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002226:	2220      	movs	r2, #32
 8002228:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <MX_TIM3_Init+0x6c>)
 800222c:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800222e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002232:	f002 fd15 	bl	8004c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	b928      	cbnz	r0, 8002244 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002238:	b007      	add	sp, #28
 800223a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800223e:	f7ff fecd 	bl	8001fdc <Error_Handler>
 8002242:	e7e8      	b.n	8002216 <MX_TIM3_Init+0x2e>
    Error_Handler();
 8002244:	f7ff feca 	bl	8001fdc <Error_Handler>
}
 8002248:	b007      	add	sp, #28
 800224a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800224e:	f7ff fec5 	bl	8001fdc <Error_Handler>
 8002252:	e7e8      	b.n	8002226 <MX_TIM3_Init+0x3e>
 8002254:	200015a8 	.word	0x200015a8
 8002258:	40000400 	.word	0x40000400
 800225c:	00000000 	.word	0x00000000

08002260 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002260:	b500      	push	{lr}
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002262:	4831      	ldr	r0, [pc, #196]	; (8002328 <MX_TIM5_Init+0xc8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002264:	2300      	movs	r3, #0
{
 8002266:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002268:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800226c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002274:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002278:	e9cd 3304 	strd	r3, r3, [sp, #16]
  htim5.Init.Prescaler = 168;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227c:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 2000000;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	6183      	str	r3, [r0, #24]
  htim5.Instance = TIM5;
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <MX_TIM5_Init+0xcc>)
 8002284:	6003      	str	r3, [r0, #0]
  htim5.Init.Period = 2000000;
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <MX_TIM5_Init+0xd0>)
 8002288:	60c3      	str	r3, [r0, #12]
  htim5.Init.Prescaler = 168;
 800228a:	23a8      	movs	r3, #168	; 0xa8
 800228c:	6043      	str	r3, [r0, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800228e:	f002 f889 	bl	80043a4 <HAL_TIM_Base_Init>
 8002292:	bb60      	cbnz	r0, 80022ee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002298:	4823      	ldr	r0, [pc, #140]	; (8002328 <MX_TIM5_Init+0xc8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229a:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800229c:	a906      	add	r1, sp, #24
 800229e:	f002 fb65 	bl	800496c <HAL_TIM_ConfigClockSource>
 80022a2:	bba8      	cbnz	r0, 8002310 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80022a4:	4820      	ldr	r0, [pc, #128]	; (8002328 <MX_TIM5_Init+0xc8>)
 80022a6:	f002 f949 	bl	800453c <HAL_TIM_IC_Init>
 80022aa:	bb70      	cbnz	r0, 800230a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2200      	movs	r2, #0
 80022ae:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022b0:	481d      	ldr	r0, [pc, #116]	; (8002328 <MX_TIM5_Init+0xc8>)
 80022b2:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022b8:	f002 fcd2 	bl	8004c60 <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	bb10      	cbnz	r0, 8002304 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022be:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8002318 <MX_TIM5_Init+0xb8>
 80022c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80022c6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8002320 <MX_TIM5_Init+0xc0>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022ca:	2208      	movs	r2, #8
 80022cc:	4816      	ldr	r0, [pc, #88]	; (8002328 <MX_TIM5_Init+0xc8>)
 80022ce:	eb0d 0102 	add.w	r1, sp, r2
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022d2:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022d6:	f002 fa6b 	bl	80047b0 <HAL_TIM_IC_ConfigChannel>
 80022da:	b980      	cbnz	r0, 80022fe <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022dc:	4812      	ldr	r0, [pc, #72]	; (8002328 <MX_TIM5_Init+0xc8>)
 80022de:	220c      	movs	r2, #12
 80022e0:	a902      	add	r1, sp, #8
 80022e2:	f002 fa65 	bl	80047b0 <HAL_TIM_IC_ConfigChannel>
 80022e6:	b928      	cbnz	r0, 80022f4 <MX_TIM5_Init+0x94>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022e8:	b00b      	add	sp, #44	; 0x2c
 80022ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022ee:	f7ff fe75 	bl	8001fdc <Error_Handler>
 80022f2:	e7cf      	b.n	8002294 <MX_TIM5_Init+0x34>
    Error_Handler();
 80022f4:	f7ff fe72 	bl	8001fdc <Error_Handler>
}
 80022f8:	b00b      	add	sp, #44	; 0x2c
 80022fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022fe:	f7ff fe6d 	bl	8001fdc <Error_Handler>
 8002302:	e7eb      	b.n	80022dc <MX_TIM5_Init+0x7c>
    Error_Handler();
 8002304:	f7ff fe6a 	bl	8001fdc <Error_Handler>
 8002308:	e7d9      	b.n	80022be <MX_TIM5_Init+0x5e>
    Error_Handler();
 800230a:	f7ff fe67 	bl	8001fdc <Error_Handler>
 800230e:	e7cd      	b.n	80022ac <MX_TIM5_Init+0x4c>
    Error_Handler();
 8002310:	f7ff fe64 	bl	8001fdc <Error_Handler>
 8002314:	e7c6      	b.n	80022a4 <MX_TIM5_Init+0x44>
 8002316:	bf00      	nop
 8002318:	00000000 	.word	0x00000000
 800231c:	00000001 	.word	0x00000001
	...
 8002328:	200015f0 	.word	0x200015f0
 800232c:	40000c00 	.word	0x40000c00
 8002330:	001e8480 	.word	0x001e8480

08002334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002334:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_baseHandle->Instance==TIM3)
 8002336:	6803      	ldr	r3, [r0, #0]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_TIM_Base_MspInit+0xa0>)
{
 800233a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM3)
 800233e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002344:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002348:	9408      	str	r4, [sp, #32]
  if(tim_baseHandle->Instance==TIM3)
 800234a:	d004      	beq.n	8002356 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_TIM_Base_MspInit+0xa4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d016      	beq.n	8002380 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002352:	b00a      	add	sp, #40	; 0x28
 8002354:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_TIM_Base_MspInit+0xa8>)
 8002358:	9401      	str	r4, [sp, #4]
 800235a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800235c:	f041 0102 	orr.w	r1, r1, #2
 8002360:	6419      	str	r1, [r3, #64]	; 0x40
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f003 0302 	and.w	r3, r3, #2
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002368:	4622      	mov	r2, r4
 800236a:	4621      	mov	r1, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800236e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002370:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002372:	f000 f979 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002376:	201d      	movs	r0, #29
 8002378:	f000 f9b4 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 800237c:	b00a      	add	sp, #40	; 0x28
 800237e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_TIM_Base_MspInit+0xa8>)
 8002382:	9402      	str	r4, [sp, #8]
 8002384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <HAL_TIM_Base_MspInit+0xac>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002388:	f042 0208 	orr.w	r2, r2, #8
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
 800238e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002390:	f002 0208 	and.w	r2, r2, #8
 8002394:	9202      	str	r2, [sp, #8]
 8002396:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	9403      	str	r4, [sp, #12]
 800239a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = CF_Pin|CF1_Pin;
 80023aa:	220c      	movs	r2, #12
 80023ac:	2302      	movs	r3, #2
 80023ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023b4:	2302      	movs	r3, #2
 80023b6:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f000 f9cf 	bl	800275c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023be:	4622      	mov	r2, r4
 80023c0:	4621      	mov	r1, r4
 80023c2:	2032      	movs	r0, #50	; 0x32
 80023c4:	f000 f950 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023c8:	2032      	movs	r0, #50	; 0x32
 80023ca:	f000 f98b 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 80023ce:	b00a      	add	sp, #40	; 0x28
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	bf00      	nop
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e4:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <MX_USART1_UART_Init+0x30>)
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 230400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 230400;
 80023ec:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 230400;
 80023f2:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023fa:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002402:	f002 fc71 	bl	8004ce8 <HAL_UART_Init>
 8002406:	b900      	cbnz	r0, 800240a <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002408:	bd10      	pop	{r4, pc}
 800240a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800240e:	f7ff bde5 	b.w	8001fdc <Error_Handler>
 8002412:	bf00      	nop
 8002414:	20001638 	.word	0x20001638
 8002418:	40011000 	.word	0x40011000

0800241c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800241c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <MX_USART3_UART_Init+0x30>)
 8002420:	4c0b      	ldr	r4, [pc, #44]	; (8002450 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 9600;
 8002424:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002428:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 800242a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800242e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002432:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002436:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800243a:	f002 fc55 	bl	8004ce8 <HAL_UART_Init>
 800243e:	b900      	cbnz	r0, 8002442 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002440:	bd10      	pop	{r4, pc}
 8002442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002446:	f7ff bdc9 	b.w	8001fdc <Error_Handler>
 800244a:	bf00      	nop
 800244c:	2000167c 	.word	0x2000167c
 8002450:	40004800 	.word	0x40004800
 8002454:	00000000 	.word	0x00000000

08002458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002458:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 800245a:	6802      	ldr	r2, [r0, #0]
 800245c:	492e      	ldr	r1, [pc, #184]	; (8002518 <HAL_UART_MspInit+0xc0>)
{
 800245e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART1)
 8002462:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002468:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800246c:	9308      	str	r3, [sp, #32]
  if(uartHandle->Instance==USART1)
 800246e:	d004      	beq.n	800247a <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002470:	492a      	ldr	r1, [pc, #168]	; (800251c <HAL_UART_MspInit+0xc4>)
 8002472:	428a      	cmp	r2, r1
 8002474:	d024      	beq.n	80024c0 <HAL_UART_MspInit+0x68>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002476:	b00a      	add	sp, #40	; 0x28
 8002478:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_UART_MspInit+0xc8>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002480:	f040 0010 	orr.w	r0, r0, #16
 8002484:	6450      	str	r0, [r2, #68]	; 0x44
 8002486:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002488:	f000 0010 	and.w	r0, r0, #16
 800248c:	9000      	str	r0, [sp, #0]
 800248e:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	4823      	ldr	r0, [pc, #140]	; (8002524 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800249e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8002508 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024aa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ae:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b2:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f000 f950 	bl	800275c <HAL_GPIO_Init>
}
 80024bc:	b00a      	add	sp, #40	; 0x28
 80024be:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_UART_MspInit+0xc8>)
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80024c6:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80024ca:	6410      	str	r0, [r2, #64]	; 0x40
 80024cc:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80024ce:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 80024d2:	9002      	str	r0, [sp, #8]
 80024d4:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	4813      	ldr	r0, [pc, #76]	; (8002528 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024e4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002510 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024f4:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f000 f92d 	bl	800275c <HAL_GPIO_Init>
}
 8002502:	b00a      	add	sp, #40	; 0x28
 8002504:	bd10      	pop	{r4, pc}
 8002506:	bf00      	nop
 8002508:	00000600 	.word	0x00000600
 800250c:	00000002 	.word	0x00000002
 8002510:	00000c00 	.word	0x00000c00
 8002514:	00000002 	.word	0x00000002
 8002518:	40011000 	.word	0x40011000
 800251c:	40004800 	.word	0x40004800
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400

0800252c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800252c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002532:	490e      	ldr	r1, [pc, #56]	; (800256c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002538:	e002      	b.n	8002540 <LoopCopyDataInit>

0800253a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800253c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253e:	3304      	adds	r3, #4

08002540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002544:	d3f9      	bcc.n	800253a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002548:	4c0b      	ldr	r4, [pc, #44]	; (8002578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800254c:	e001      	b.n	8002552 <LoopFillZerobss>

0800254e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002550:	3204      	adds	r2, #4

08002552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002554:	d3fb      	bcc.n	800254e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002556:	f7ff fe3d 	bl	80021d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255a:	f008 fb67 	bl	800ac2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255e:	f7ff fa3f 	bl	80019e0 <main>
  bx  lr    
 8002562:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002564:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	20001100 	.word	0x20001100
  ldr r2, =_sidata
 8002570:	08014a78 	.word	0x08014a78
  ldr r2, =_sbss
 8002574:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8002578:	200019d0 	.word	0x200019d0

0800257c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC_IRQHandler>
	...

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_InitTick+0x3c>)
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_InitTick+0x40>)
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
{
 800258a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002590:	fbb0 f0f2 	udiv	r0, r0, r2
 8002594:	fbb3 f0f0 	udiv	r0, r3, r0
 8002598:	f000 f8b2 	bl	8002700 <HAL_SYSTICK_Config>
 800259c:	b908      	cbnz	r0, 80025a2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	2d0f      	cmp	r5, #15
 80025a0:	d901      	bls.n	80025a6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80025a2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80025a4:	bd38      	pop	{r3, r4, r5, pc}
 80025a6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	4602      	mov	r2, r0
 80025aa:	4629      	mov	r1, r5
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b0:	f000 f85a 	bl	8002668 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_InitTick+0x44>)
 80025b6:	4620      	mov	r0, r4
 80025b8:	601d      	str	r5, [r3, #0]
}
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	20000018 	.word	0x20000018
 80025c0:	20000014 	.word	0x20000014
 80025c4:	2000001c 	.word	0x2000001c

080025c8 <HAL_Init>:
{
 80025c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x30>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f82d 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f7ff ffc8 	bl	8002580 <HAL_InitTick>
  HAL_MspInit();
 80025f0:	f7ff fd94 	bl	800211c <HAL_MspInit>
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	bd08      	pop	{r3, pc}
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_IncTick+0x10>)
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_IncTick+0x14>)
 8002600:	6811      	ldr	r1, [r2, #0]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	440b      	add	r3, r1
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200016c0 	.word	0x200016c0
 8002610:	20000018 	.word	0x20000018

08002614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002614:	4b01      	ldr	r3, [pc, #4]	; (800261c <HAL_GetTick+0x8>)
 8002616:	6818      	ldr	r0, [r3, #0]
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200016c0 	.word	0x200016c0

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fff6 	bl	8002614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002628:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800262a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800262c:	d002      	beq.n	8002634 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_Delay+0x20>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	1b43      	subs	r3, r0, r5
 800263a:	42a3      	cmp	r3, r4
 800263c:	d3fa      	bcc.n	8002634 <HAL_Delay+0x14>
  {
  }
}
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	20000018 	.word	0x20000018

08002644 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002646:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002648:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002656:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800265e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_NVIC_SetPriority+0x74>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002670:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002672:	f1c3 0e07 	rsb	lr, r3, #7
 8002676:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267e:	bf28      	it	cs
 8002680:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002684:	f1bc 0f06 	cmp.w	ip, #6
 8002688:	d91b      	bls.n	80026c2 <HAL_NVIC_SetPriority+0x5a>
 800268a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002690:	fa0c fc03 	lsl.w	ip, ip, r3
 8002694:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800269c:	fa0c fc0e 	lsl.w	ip, ip, lr
 80026a0:	ea21 010c 	bic.w	r1, r1, ip
 80026a4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80026a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80026ac:	db0c      	blt.n	80026c8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026b2:	0109      	lsls	r1, r1, #4
 80026b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026b8:	b2c9      	uxtb	r1, r1
 80026ba:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026be:	f85d fb04 	ldr.w	pc, [sp], #4
 80026c2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c4:	4613      	mov	r3, r2
 80026c6:	e7e7      	b.n	8002698 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_NVIC_SetPriority+0x78>)
 80026ca:	f000 000f 	and.w	r0, r0, #15
 80026ce:	0109      	lsls	r1, r1, #4
 80026d0:	4403      	add	r3, r0
 80026d2:	b2c9      	uxtb	r1, r1
 80026d4:	7619      	strb	r1, [r3, #24]
 80026d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00
 80026e0:	e000ecfc 	.word	0xe000ecfc

080026e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026e4:	2800      	cmp	r0, #0
 80026e6:	db08      	blt.n	80026fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e8:	0941      	lsrs	r1, r0, #5
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_NVIC_EnableIRQ+0x18>)
 80026ec:	f000 001f 	and.w	r0, r0, #31
 80026f0:	2301      	movs	r3, #1
 80026f2:	fa03 f000 	lsl.w	r0, r3, r0
 80026f6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100

08002700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	3801      	subs	r0, #1
 8002702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002706:	d210      	bcs.n	800272a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002708:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	4c08      	ldr	r4, [pc, #32]	; (8002730 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002710:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8002716:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002722:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	6119      	str	r1, [r3, #16]
 8002728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2001      	movs	r0, #1
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002734:	b180      	cbz	r0, 8002758 <HAL_CRC_Init+0x24>
{
 8002736:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002738:	7943      	ldrb	r3, [r0, #5]
 800273a:	4604      	mov	r4, r0
 800273c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002740:	b11b      	cbz	r3, 800274a <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002742:	2301      	movs	r3, #1
 8002744:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002746:	2000      	movs	r0, #0
}
 8002748:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800274a:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800274c:	f7fe fc0e 	bl	8000f6c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8002750:	2301      	movs	r3, #1
 8002752:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8002754:	2000      	movs	r0, #0
}
 8002756:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
}
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002760:	2200      	movs	r2, #0
 8002762:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002994 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002768:	4e83      	ldr	r6, [pc, #524]	; (8002978 <HAL_GPIO_Init+0x21c>)
{
 800276a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276c:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276e:	4689      	mov	r9, r1
 8002770:	e005      	b.n	800277e <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002772:	3301      	adds	r3, #1
 8002774:	2b10      	cmp	r3, #16
 8002776:	f102 0202 	add.w	r2, r2, #2
 800277a:	f000 8089 	beq.w	8002890 <HAL_GPIO_Init+0x134>
    ioposition = 0x01U << position;
 800277e:	2101      	movs	r1, #1
 8002780:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002782:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8002786:	43a1      	bics	r1, r4
 8002788:	d1f3      	bne.n	8002772 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800278e:	f00c 0103 	and.w	r1, ip, #3
 8002792:	1e4d      	subs	r5, r1, #1
 8002794:	2d01      	cmp	r5, #1
 8002796:	d97e      	bls.n	8002896 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	2903      	cmp	r1, #3
 800279a:	f040 80be 	bne.w	800291a <HAL_GPIO_Init+0x1be>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279e:	4091      	lsls	r1, r2
 80027a0:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80027a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a6:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a8:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80027ac:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ae:	d0e0      	beq.n	8002772 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b0:	2100      	movs	r1, #0
 80027b2:	9103      	str	r1, [sp, #12]
 80027b4:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80027b8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80027bc:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 80027c0:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80027c4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80027c8:	9103      	str	r1, [sp, #12]
 80027ca:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80027cc:	f023 0103 	bic.w	r1, r3, #3
 80027d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80027d4:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d8:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80027dc:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e0:	00bf      	lsls	r7, r7, #2
 80027e2:	250f      	movs	r5, #15
 80027e4:	40bd      	lsls	r5, r7
 80027e6:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ea:	4d64      	ldr	r5, [pc, #400]	; (800297c <HAL_GPIO_Init+0x220>)
 80027ec:	42a8      	cmp	r0, r5
 80027ee:	d024      	beq.n	800283a <HAL_GPIO_Init+0xde>
 80027f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027f4:	42a8      	cmp	r0, r5
 80027f6:	f000 8094 	beq.w	8002922 <HAL_GPIO_Init+0x1c6>
 80027fa:	4d61      	ldr	r5, [pc, #388]	; (8002980 <HAL_GPIO_Init+0x224>)
 80027fc:	42a8      	cmp	r0, r5
 80027fe:	f000 8097 	beq.w	8002930 <HAL_GPIO_Init+0x1d4>
 8002802:	4d60      	ldr	r5, [pc, #384]	; (8002984 <HAL_GPIO_Init+0x228>)
 8002804:	42a8      	cmp	r0, r5
 8002806:	f000 809a 	beq.w	800293e <HAL_GPIO_Init+0x1e2>
 800280a:	4d5f      	ldr	r5, [pc, #380]	; (8002988 <HAL_GPIO_Init+0x22c>)
 800280c:	42a8      	cmp	r0, r5
 800280e:	f000 809d 	beq.w	800294c <HAL_GPIO_Init+0x1f0>
 8002812:	4d5e      	ldr	r5, [pc, #376]	; (800298c <HAL_GPIO_Init+0x230>)
 8002814:	42a8      	cmp	r0, r5
 8002816:	f000 80a0 	beq.w	800295a <HAL_GPIO_Init+0x1fe>
 800281a:	4d5d      	ldr	r5, [pc, #372]	; (8002990 <HAL_GPIO_Init+0x234>)
 800281c:	42a8      	cmp	r0, r5
 800281e:	f000 80a3 	beq.w	8002968 <HAL_GPIO_Init+0x20c>
 8002822:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002998 <HAL_GPIO_Init+0x23c>
 8002826:	4570      	cmp	r0, lr
 8002828:	bf0c      	ite	eq
 800282a:	f04f 0e07 	moveq.w	lr, #7
 800282e:	f04f 0e08 	movne.w	lr, #8
 8002832:	fa0e f707 	lsl.w	r7, lr, r7
 8002836:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800283a:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 800283e:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002840:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002844:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002848:	bf0c      	ite	eq
 800284a:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 800284c:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002850:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002852:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002858:	bf0c      	ite	eq
 800285a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800285c:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002860:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002862:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002864:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002868:	bf0c      	ite	eq
 800286a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800286c:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002870:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002872:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002874:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002878:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800287c:	bf0c      	ite	eq
 800287e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002880:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002884:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8002886:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002888:	f102 0202 	add.w	r2, r2, #2
 800288c:	f47f af77 	bne.w	800277e <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8002890:	b005      	add	sp, #20
 8002892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800289a:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289c:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	2503      	movs	r5, #3
 80028a2:	fa05 fe02 	lsl.w	lr, r5, r2
 80028a6:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80028ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80028b0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b2:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b6:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ba:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80028be:	409f      	lsls	r7, r3
 80028c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80028c4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80028c6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c8:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80028d0:	4097      	lsls	r7, r2
 80028d2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80028d8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	fa01 f102 	lsl.w	r1, r1, r2
 80028de:	f47f af60 	bne.w	80027a2 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80028e2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80028e6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ea:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80028ee:	f8de 7020 	ldr.w	r7, [lr, #32]
 80028f2:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f8:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028fc:	fa07 f708 	lsl.w	r7, r7, r8
 8002900:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002902:	270f      	movs	r7, #15
 8002904:	fa07 f808 	lsl.w	r8, r7, r8
 8002908:	9f00      	ldr	r7, [sp, #0]
 800290a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800290e:	9f01      	ldr	r7, [sp, #4]
 8002910:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8002914:	f8ce 7020 	str.w	r7, [lr, #32]
 8002918:	e743      	b.n	80027a2 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800291a:	2503      	movs	r5, #3
 800291c:	4095      	lsls	r5, r2
 800291e:	43ed      	mvns	r5, r5
 8002920:	e7d1      	b.n	80028c6 <HAL_GPIO_Init+0x16a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002922:	f04f 0e01 	mov.w	lr, #1
 8002926:	fa0e f707 	lsl.w	r7, lr, r7
 800292a:	ea48 0807 	orr.w	r8, r8, r7
 800292e:	e784      	b.n	800283a <HAL_GPIO_Init+0xde>
 8002930:	f04f 0e02 	mov.w	lr, #2
 8002934:	fa0e f707 	lsl.w	r7, lr, r7
 8002938:	ea48 0807 	orr.w	r8, r8, r7
 800293c:	e77d      	b.n	800283a <HAL_GPIO_Init+0xde>
 800293e:	f04f 0e03 	mov.w	lr, #3
 8002942:	fa0e f707 	lsl.w	r7, lr, r7
 8002946:	ea48 0807 	orr.w	r8, r8, r7
 800294a:	e776      	b.n	800283a <HAL_GPIO_Init+0xde>
 800294c:	f04f 0e04 	mov.w	lr, #4
 8002950:	fa0e f707 	lsl.w	r7, lr, r7
 8002954:	ea48 0807 	orr.w	r8, r8, r7
 8002958:	e76f      	b.n	800283a <HAL_GPIO_Init+0xde>
 800295a:	f04f 0e05 	mov.w	lr, #5
 800295e:	fa0e f707 	lsl.w	r7, lr, r7
 8002962:	ea48 0807 	orr.w	r8, r8, r7
 8002966:	e768      	b.n	800283a <HAL_GPIO_Init+0xde>
 8002968:	f04f 0e06 	mov.w	lr, #6
 800296c:	fa0e f707 	lsl.w	r7, lr, r7
 8002970:	ea48 0807 	orr.w	r8, r8, r7
 8002974:	e761      	b.n	800283a <HAL_GPIO_Init+0xde>
 8002976:	bf00      	nop
 8002978:	40013c00 	.word	0x40013c00
 800297c:	40020000 	.word	0x40020000
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40023800 	.word	0x40023800
 8002998:	40021c00 	.word	0x40021c00

0800299c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	b902      	cbnz	r2, 80029a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	0409      	lsls	r1, r1, #16
 80029a0:	6181      	str	r1, [r0, #24]
  }
}
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a6:	ea01 0203 	and.w	r2, r1, r3
 80029aa:	ea21 0103 	bic.w	r1, r1, r3
 80029ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80029b2:	6181      	str	r1, [r0, #24]
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f000 80b9 	beq.w	8002b30 <HAL_I2C_Init+0x178>
{
 80029be:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029c4:	4604      	mov	r4, r0
 80029c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8098 	beq.w	8002b00 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f000 ff62 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f4:	6863      	ldr	r3, [r4, #4]
 80029f6:	494f      	ldr	r1, [pc, #316]	; (8002b34 <HAL_I2C_Init+0x17c>)
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d84f      	bhi.n	8002a9c <HAL_I2C_Init+0xe4>
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_I2C_Init+0x180>)
 80029fe:	4290      	cmp	r0, r2
 8002a00:	d97c      	bls.n	8002afc <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	4d4e      	ldr	r5, [pc, #312]	; (8002b3c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002a06:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a0a:	1e43      	subs	r3, r0, #1
 8002a0c:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6850      	ldr	r0, [r2, #4]
 8002a14:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002a18:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8002a1c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a20:	f101 0c01 	add.w	ip, r1, #1
 8002a24:	6a11      	ldr	r1, [r2, #32]
 8002a26:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002a2a:	ea41 010c 	orr.w	r1, r1, ip
 8002a2e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a30:	69d1      	ldr	r1, [r2, #28]
 8002a32:	f640 7efc 	movw	lr, #4092	; 0xffc
 8002a36:	3301      	adds	r3, #1
 8002a38:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002a3c:	ea13 0f0e 	tst.w	r3, lr
 8002a40:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002a44:	d161      	bne.n	8002b0a <HAL_I2C_Init+0x152>
 8002a46:	2304      	movs	r3, #4
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a4c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002a50:	6811      	ldr	r1, [r2, #0]
 8002a52:	4303      	orrs	r3, r0
 8002a54:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a5c:	6891      	ldr	r1, [r2, #8]
 8002a5e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002a62:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002a66:	4303      	orrs	r3, r0
 8002a68:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a74:	68d1      	ldr	r1, [r2, #12]
 8002a76:	4303      	orrs	r3, r0
 8002a78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a82:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8002a8a:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8002a98:	4618      	mov	r0, r3
}
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_I2C_Init+0x188>)
 8002a9e:	4290      	cmp	r0, r2
 8002aa0:	d92c      	bls.n	8002afc <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa2:	4d26      	ldr	r5, [pc, #152]	; (8002b3c <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa4:	4e27      	ldr	r6, [pc, #156]	; (8002b44 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa6:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	6855      	ldr	r5, [r2, #4]
 8002aae:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002ab2:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8002ab6:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab8:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002abc:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002ac0:	fb05 f101 	mul.w	r1, r5, r1
 8002ac4:	fba6 5101 	umull	r5, r1, r6, r1
 8002ac8:	6a15      	ldr	r5, [r2, #32]
 8002aca:	0989      	lsrs	r1, r1, #6
 8002acc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002ad0:	3101      	adds	r1, #1
 8002ad2:	4329      	orrs	r1, r5
 8002ad4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad6:	69d1      	ldr	r1, [r2, #28]
 8002ad8:	68a5      	ldr	r5, [r4, #8]
 8002ada:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ade:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ae2:	b9ad      	cbnz	r5, 8002b10 <HAL_I2C_Init+0x158>
 8002ae4:	3801      	subs	r0, #1
 8002ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	b1d3      	cbz	r3, 8002b2c <HAL_I2C_Init+0x174>
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	e7a5      	b.n	8002a48 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
}
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002b00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002b04:	f7fe fcd4 	bl	80014b0 <HAL_I2C_MspInit>
 8002b08:	e762      	b.n	80029d0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	e79b      	b.n	8002a48 <HAL_I2C_Init+0x90>
 8002b10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b14:	3801      	subs	r0, #1
 8002b16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	b113      	cbz	r3, 8002b2c <HAL_I2C_Init+0x174>
 8002b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2a:	e78d      	b.n	8002a48 <HAL_I2C_Init+0x90>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e78b      	b.n	8002a48 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002b30:	2001      	movs	r0, #1
}
 8002b32:	4770      	bx	lr
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	003d08ff 	.word	0x003d08ff
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	4605      	mov	r5, r0
 8002b4e:	b083      	sub	sp, #12
 8002b50:	4699      	mov	r9, r3
 8002b52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002b54:	4688      	mov	r8, r1
 8002b56:	4692      	mov	sl, r2
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fd5c 	bl	8002614 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d003      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 8002b64:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b66:	b003      	add	sp, #12
 8002b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6c:	4606      	mov	r6, r0
 8002b6e:	e005      	b.n	8002b7c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7ff fd50 	bl	8002614 <HAL_GetTick>
 8002b74:	1b80      	subs	r0, r0, r6
 8002b76:	2819      	cmp	r0, #25
 8002b78:	f200 80f5 	bhi.w	8002d66 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b7c:	682c      	ldr	r4, [r5, #0]
 8002b7e:	69a3      	ldr	r3, [r4, #24]
 8002b80:	ea6f 0c03 	mvn.w	ip, r3
 8002b84:	f01c 0b02 	ands.w	fp, ip, #2
 8002b88:	d0f2      	beq.n	8002b70 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8002b8a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d0e8      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0x1c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	07d9      	lsls	r1, r3, #31
 8002b9c:	d56f      	bpl.n	8002c7e <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9e:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba0:	4a97      	ldr	r2, [pc, #604]	; (8002e00 <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ba8:	2321      	movs	r3, #33	; 0x21
 8002baa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bae:	2310      	movs	r3, #16
 8002bb0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002bb8:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bbc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbe:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002bc0:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002bc4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d006      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x92>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d004      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x92>
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d002      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002bd6:	2b12      	cmp	r3, #18
 8002bd8:	d103      	bne.n	8002be2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	1c7b      	adds	r3, r7, #1
 8002be4:	d13d      	bne.n	8002c62 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be6:	6963      	ldr	r3, [r4, #20]
 8002be8:	07d8      	lsls	r0, r3, #31
 8002bea:	d5fc      	bpl.n	8002be6 <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bec:	692b      	ldr	r3, [r5, #16]
 8002bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf2:	d149      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf4:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002bf8:	6121      	str	r1, [r4, #16]
 8002bfa:	1c78      	adds	r0, r7, #1
 8002bfc:	d004      	beq.n	8002c08 <HAL_I2C_Master_Transmit+0xc0>
 8002bfe:	e0d8      	b.n	8002db2 <HAL_I2C_Master_Transmit+0x26a>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	6963      	ldr	r3, [r4, #20]
 8002c02:	055a      	lsls	r2, r3, #21
 8002c04:	f100 80bd 	bmi.w	8002d82 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	6963      	ldr	r3, [r4, #20]
 8002c0a:	0799      	lsls	r1, r3, #30
 8002c0c:	d5f8      	bpl.n	8002c00 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	6963      	ldr	r3, [r4, #20]
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	69a3      	ldr	r3, [r4, #24]
 8002c18:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002c1a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d074      	beq.n	8002d0c <HAL_I2C_Master_Transmit+0x1c4>
 8002c22:	1c79      	adds	r1, r7, #1
 8002c24:	d17f      	bne.n	8002d26 <HAL_I2C_Master_Transmit+0x1de>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c26:	6963      	ldr	r3, [r4, #20]
 8002c28:	061a      	lsls	r2, r3, #24
 8002c2a:	d441      	bmi.n	8002cb0 <HAL_I2C_Master_Transmit+0x168>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c2c:	6963      	ldr	r3, [r4, #20]
 8002c2e:	055b      	lsls	r3, r3, #21
 8002c30:	d5f9      	bpl.n	8002c26 <HAL_I2C_Master_Transmit+0xde>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002c3a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c3e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c42:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c46:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	f000 80e4 	beq.w	8002e22 <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
}
 8002c5c:	b003      	add	sp, #12
 8002c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c62:	6963      	ldr	r3, [r4, #20]
 8002c64:	07d9      	lsls	r1, r3, #31
 8002c66:	d4c1      	bmi.n	8002bec <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7ff fcd4 	bl	8002614 <HAL_GetTick>
 8002c6c:	1b80      	subs	r0, r0, r6
 8002c6e:	4287      	cmp	r7, r0
 8002c70:	f0c0 80af 	bcc.w	8002dd2 <HAL_I2C_Master_Transmit+0x28a>
 8002c74:	2f00      	cmp	r7, #0
 8002c76:	f000 80ac 	beq.w	8002dd2 <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7a:	682c      	ldr	r4, [r5, #0]
 8002c7c:	e7b1      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	e78a      	b.n	8002b9e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c88:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002c8c:	f003 0306 	and.w	r3, r3, #6
 8002c90:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002c94:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002c96:	1c7b      	adds	r3, r7, #1
 8002c98:	d003      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x15a>
 8002c9a:	e0b3      	b.n	8002e04 <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9c:	6963      	ldr	r3, [r4, #20]
 8002c9e:	0559      	lsls	r1, r3, #21
 8002ca0:	d46f      	bmi.n	8002d82 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca2:	6963      	ldr	r3, [r4, #20]
 8002ca4:	0718      	lsls	r0, r3, #28
 8002ca6:	d5f9      	bpl.n	8002c9c <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca8:	fa5f f388 	uxtb.w	r3, r8
 8002cac:	6123      	str	r3, [r4, #16]
 8002cae:	e7a4      	b.n	8002bfa <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8002cb2:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb6:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8002cb8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc0:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8002cc2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002cc4:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ccc:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 8002cce:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd0:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8002cd2:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd4:	d50c      	bpl.n	8002cf0 <HAL_I2C_Master_Transmit+0x1a8>
 8002cd6:	b15a      	cbz	r2, 8002cf0 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd8:	7843      	ldrb	r3, [r0, #1]
 8002cda:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8002cdc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8002cde:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8002ce0:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8002ce4:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8002ce6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002ce8:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002cec:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8002cee:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8002cf0:	1c78      	adds	r0, r7, #1
 8002cf2:	d128      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf4:	6963      	ldr	r3, [r4, #20]
 8002cf6:	0759      	lsls	r1, r3, #29
 8002cf8:	d405      	bmi.n	8002d06 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cfa:	6963      	ldr	r3, [r4, #20]
 8002cfc:	055a      	lsls	r2, r3, #21
 8002cfe:	d498      	bmi.n	8002c32 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d00:	6963      	ldr	r3, [r4, #20]
 8002d02:	0759      	lsls	r1, r3, #29
 8002d04:	d5f9      	bpl.n	8002cfa <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8002d06:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d18a      	bne.n	8002c22 <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002d1c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8002d24:	e71f      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d26:	6963      	ldr	r3, [r4, #20]
 8002d28:	0618      	lsls	r0, r3, #24
 8002d2a:	d4c1      	bmi.n	8002cb0 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d2c:	6963      	ldr	r3, [r4, #20]
 8002d2e:	0558      	lsls	r0, r3, #21
 8002d30:	f53f af7f 	bmi.w	8002c32 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d34:	f7ff fc6e 	bl	8002614 <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	4287      	cmp	r7, r0
 8002d3c:	d378      	bcc.n	8002e30 <HAL_I2C_Master_Transmit+0x2e8>
 8002d3e:	2f00      	cmp	r7, #0
 8002d40:	d076      	beq.n	8002e30 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d42:	682c      	ldr	r4, [r5, #0]
 8002d44:	e76d      	b.n	8002c22 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d46:	6963      	ldr	r3, [r4, #20]
 8002d48:	075b      	lsls	r3, r3, #29
 8002d4a:	d4dc      	bmi.n	8002d06 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	055b      	lsls	r3, r3, #21
 8002d50:	f53f af6f 	bmi.w	8002c32 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7ff fc5e 	bl	8002614 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	4287      	cmp	r7, r0
 8002d5c:	d368      	bcc.n	8002e30 <HAL_I2C_Master_Transmit+0x2e8>
 8002d5e:	2f00      	cmp	r7, #0
 8002d60:	d066      	beq.n	8002e30 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d62:	682c      	ldr	r4, [r5, #0]
 8002d64:	e7c4      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d66:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d68:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d6c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d70:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d76:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	f043 0320 	orr.w	r3, r3, #32
 8002d7e:	642b      	str	r3, [r5, #64]	; 0x40
 8002d80:	e6f0      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d88:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d94:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002da0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da4:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002daa:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002dac:	b003      	add	sp, #12
 8002dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db2:	6963      	ldr	r3, [r4, #20]
 8002db4:	079b      	lsls	r3, r3, #30
 8002db6:	f53f af2a 	bmi.w	8002c0e <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dba:	6963      	ldr	r3, [r4, #20]
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	d4e0      	bmi.n	8002d82 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7ff fc28 	bl	8002614 <HAL_GetTick>
 8002dc4:	1b80      	subs	r0, r0, r6
 8002dc6:	4287      	cmp	r7, r0
 8002dc8:	d340      	bcc.n	8002e4c <HAL_I2C_Master_Transmit+0x304>
 8002dca:	2f00      	cmp	r7, #0
 8002dcc:	d03e      	beq.n	8002e4c <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dce:	682c      	ldr	r4, [r5, #0]
 8002dd0:	e713      	b.n	8002bfa <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ddc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8002de4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dee:	680b      	ldr	r3, [r1, #0]
 8002df0:	05da      	lsls	r2, r3, #23
 8002df2:	f57f af32 	bpl.w	8002c5a <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfa:	642b      	str	r3, [r5, #64]	; 0x40
 8002dfc:	e72d      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
 8002dfe:	bf00      	nop
 8002e00:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e04:	6963      	ldr	r3, [r4, #20]
 8002e06:	071a      	lsls	r2, r3, #28
 8002e08:	f53f af4e 	bmi.w	8002ca8 <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0c:	6963      	ldr	r3, [r4, #20]
 8002e0e:	055a      	lsls	r2, r3, #21
 8002e10:	d4b7      	bmi.n	8002d82 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7ff fbff 	bl	8002614 <HAL_GetTick>
 8002e16:	1b80      	subs	r0, r0, r6
 8002e18:	4287      	cmp	r7, r0
 8002e1a:	d317      	bcc.n	8002e4c <HAL_I2C_Master_Transmit+0x304>
 8002e1c:	b1b7      	cbz	r7, 8002e4c <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	682c      	ldr	r4, [r5, #0]
 8002e20:	e739      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	682a      	ldr	r2, [r5, #0]
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e69a      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e30:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e32:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e34:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e36:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e3a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e40:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002e4a:	e702      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e4e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e52:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e56:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e5c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
 8002e68:	e67d      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1e>
 8002e6a:	bf00      	nop

08002e6c <HAL_I2C_Master_Receive>:
{
 8002e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e70:	4605      	mov	r5, r0
 8002e72:	b087      	sub	sp, #28
 8002e74:	4699      	mov	r9, r3
 8002e76:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002e78:	4688      	mov	r8, r1
 8002e7a:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff fbca 	bl	8002614 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d003      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8002e88:	2002      	movs	r0, #2
}
 8002e8a:	b007      	add	sp, #28
 8002e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e90:	4607      	mov	r7, r0
 8002e92:	e005      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7ff fbbe 	bl	8002614 <HAL_GetTick>
 8002e98:	1bc0      	subs	r0, r0, r7
 8002e9a:	2819      	cmp	r0, #25
 8002e9c:	f200 80a7 	bhi.w	8002fee <HAL_I2C_Master_Receive+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	682c      	ldr	r4, [r5, #0]
 8002ea2:	69a0      	ldr	r0, [r4, #24]
 8002ea4:	43c0      	mvns	r0, r0
 8002ea6:	f010 0b02 	ands.w	fp, r0, #2
 8002eaa:	d0f3      	beq.n	8002e94 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8002eac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d0e9      	beq.n	8002e88 <HAL_I2C_Master_Receive+0x1c>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d560      	bpl.n	8002f82 <HAL_I2C_Master_Receive+0x116>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec0:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	4a8d      	ldr	r2, [pc, #564]	; (80030f8 <HAL_I2C_Master_Receive+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec8:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eca:	2322      	movs	r3, #34	; 0x22
 8002ecc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002eda:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ede:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee0:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002ee4:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8002ee8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ef0:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef2:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ef4:	d007      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x9a>
 8002ef6:	2a01      	cmp	r2, #1
 8002ef8:	d005      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x9a>
 8002efa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002efe:	d002      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f02:	2b11      	cmp	r3, #17
 8002f04:	d103      	bne.n	8002f0e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	1c70      	adds	r0, r6, #1
 8002f10:	d129      	bne.n	8002f66 <HAL_I2C_Master_Receive+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f12:	6963      	ldr	r3, [r4, #20]
 8002f14:	07d9      	lsls	r1, r3, #31
 8002f16:	d5fc      	bpl.n	8002f12 <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f18:	692b      	ldr	r3, [r5, #16]
 8002f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1e:	d135      	bne.n	8002f8c <HAL_I2C_Master_Receive+0x120>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f20:	f048 0301 	orr.w	r3, r8, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	6123      	str	r3, [r4, #16]
 8002f28:	1c72      	adds	r2, r6, #1
 8002f2a:	d003      	beq.n	8002f34 <HAL_I2C_Master_Receive+0xc8>
 8002f2c:	e107      	b.n	800313e <HAL_I2C_Master_Receive+0x2d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	0558      	lsls	r0, r3, #21
 8002f32:	d46a      	bmi.n	800300a <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f34:	6963      	ldr	r3, [r4, #20]
 8002f36:	079b      	lsls	r3, r3, #30
 8002f38:	d5f9      	bpl.n	8002f2e <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8002f3a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d17c      	bne.n	800303a <HAL_I2C_Master_Receive+0x1ce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	69a3      	ldr	r3, [r4, #24]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f52:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	2320      	movs	r3, #32
 8002f58:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002f5c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8002f64:	e791      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f66:	6963      	ldr	r3, [r4, #20]
 8002f68:	07da      	lsls	r2, r3, #31
 8002f6a:	d4d5      	bmi.n	8002f18 <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	f7ff fb52 	bl	8002614 <HAL_GetTick>
 8002f70:	1bc0      	subs	r0, r0, r7
 8002f72:	4286      	cmp	r6, r0
 8002f74:	f0c0 810c 	bcc.w	8003190 <HAL_I2C_Master_Receive+0x324>
 8002f78:	2e00      	cmp	r6, #0
 8002f7a:	f000 8109 	beq.w	8003190 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7e:	682c      	ldr	r4, [r5, #0]
 8002f80:	e7c5      	b.n	8002f0e <HAL_I2C_Master_Receive+0xa2>
      __HAL_I2C_ENABLE(hi2c);
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	e799      	b.n	8002ec0 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f8c:	ea4f 19e8 	mov.w	r9, r8, asr #7
 8002f90:	f009 0906 	and.w	r9, r9, #6
 8002f94:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8002f98:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002f9a:	1c70      	adds	r0, r6, #1
 8002f9c:	d003      	beq.n	8002fa6 <HAL_I2C_Master_Receive+0x13a>
 8002f9e:	e11d      	b.n	80031dc <HAL_I2C_Master_Receive+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa0:	6963      	ldr	r3, [r4, #20]
 8002fa2:	055a      	lsls	r2, r3, #21
 8002fa4:	d431      	bmi.n	800300a <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa6:	6963      	ldr	r3, [r4, #20]
 8002fa8:	0719      	lsls	r1, r3, #28
 8002faa:	d5f9      	bpl.n	8002fa0 <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fac:	fa5f f388 	uxtb.w	r3, r8
 8002fb0:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002fb2:	1c71      	adds	r1, r6, #1
 8002fb4:	d003      	beq.n	8002fbe <HAL_I2C_Master_Receive+0x152>
 8002fb6:	e1a6      	b.n	8003306 <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb8:	6963      	ldr	r3, [r4, #20]
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	d425      	bmi.n	800300a <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	079a      	lsls	r2, r3, #30
 8002fc2:	d5f9      	bpl.n	8002fb8 <HAL_I2C_Master_Receive+0x14c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9305      	str	r3, [sp, #20]
 8002fc8:	6963      	ldr	r3, [r4, #20]
 8002fca:	9305      	str	r3, [sp, #20]
 8002fcc:	69a3      	ldr	r3, [r4, #24]
 8002fce:	9305      	str	r3, [sp, #20]
 8002fd0:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002fda:	1c72      	adds	r2, r6, #1
 8002fdc:	f040 81a6 	bne.w	800332c <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe0:	6963      	ldr	r3, [r4, #20]
 8002fe2:	07db      	lsls	r3, r3, #31
 8002fe4:	d5fc      	bpl.n	8002fe0 <HAL_I2C_Master_Receive+0x174>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fe6:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8002fea:	6123      	str	r3, [r4, #16]
 8002fec:	e79c      	b.n	8002f28 <HAL_I2C_Master_Receive+0xbc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fee:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff0:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ff8:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ffe:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	f043 0320 	orr.w	r3, r3, #32
 8003006:	642b      	str	r3, [r5, #64]	; 0x40
 8003008:	e73e      	b.n	8002e88 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003010:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003014:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003026:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003028:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800302c:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003032:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003034:	b007      	add	sp, #28
 8003036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 800303a:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303c:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 800303e:	f000 8153 	beq.w	80032e8 <HAL_I2C_Master_Receive+0x47c>
    else if (hi2c->XferSize == 2U)
 8003042:	2b02      	cmp	r3, #2
 8003044:	f000 810b 	beq.w	800325e <HAL_I2C_Master_Receive+0x3f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800304c:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2200      	movs	r2, #0
 8003050:	9204      	str	r2, [sp, #16]
 8003052:	6962      	ldr	r2, [r4, #20]
 8003054:	9204      	str	r2, [sp, #16]
 8003056:	69a2      	ldr	r2, [r4, #24]
 8003058:	9204      	str	r2, [sp, #16]
 800305a:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 800305c:	2b03      	cmp	r3, #3
 800305e:	d848      	bhi.n	80030f2 <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 8003060:	2b01      	cmp	r3, #1
 8003062:	f000 8128 	beq.w	80032b6 <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 8003066:	2b02      	cmp	r3, #2
 8003068:	f000 80d4 	beq.w	8003214 <HAL_I2C_Master_Receive+0x3a8>
 800306c:	1c72      	adds	r2, r6, #1
 800306e:	f040 8105 	bne.w	800327c <HAL_I2C_Master_Receive+0x410>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003072:	6963      	ldr	r3, [r4, #20]
 8003074:	075b      	lsls	r3, r3, #29
 8003076:	d5fc      	bpl.n	8003072 <HAL_I2C_Master_Receive+0x206>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003078:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003080:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	6923      	ldr	r3, [r4, #16]
 8003084:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8003086:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003088:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800308a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800308c:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800308e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003090:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003092:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003094:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003096:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003098:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800309a:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309c:	682a      	ldr	r2, [r5, #0]
 800309e:	f040 80fc 	bne.w	800329a <HAL_I2C_Master_Receive+0x42e>
 80030a2:	6953      	ldr	r3, [r2, #20]
 80030a4:	075b      	lsls	r3, r3, #29
 80030a6:	d5fc      	bpl.n	80030a2 <HAL_I2C_Master_Receive+0x236>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	6913      	ldr	r3, [r2, #16]
 80030b4:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80030b6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80030b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80030ba:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c4:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 80030c6:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80030c8:	1c4c      	adds	r4, r1, #1
 80030ca:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80030cc:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 80030d0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80030d2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80030d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80030d6:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80030d8:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80030da:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80030dc:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80030de:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80030e0:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80030e2:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80030e4:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f43f af34 	beq.w	8002f54 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 80030ec:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ee:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 80030f0:	d9b6      	bls.n	8003060 <HAL_I2C_Master_Receive+0x1f4>
 80030f2:	b966      	cbnz	r6, 800310e <HAL_I2C_Master_Receive+0x2a2>
 80030f4:	e033      	b.n	800315e <HAL_I2C_Master_Receive+0x2f2>
 80030f6:	bf00      	nop
 80030f8:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030fc:	6963      	ldr	r3, [r4, #20]
 80030fe:	06db      	lsls	r3, r3, #27
 8003100:	d45c      	bmi.n	80031bc <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7ff fa87 	bl	8002614 <HAL_GetTick>
 8003106:	1bc0      	subs	r0, r0, r7
 8003108:	4286      	cmp	r6, r0
 800310a:	d330      	bcc.n	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800310c:	682c      	ldr	r4, [r5, #0]
 800310e:	6963      	ldr	r3, [r4, #20]
 8003110:	065a      	lsls	r2, r3, #25
 8003112:	d5f3      	bpl.n	80030fc <HAL_I2C_Master_Receive+0x290>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003116:	6922      	ldr	r2, [r4, #16]
 8003118:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800311a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800311c:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 800311e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003120:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8003122:	3a01      	subs	r2, #1
 8003124:	b292      	uxth	r2, r2
 8003126:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003128:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 800312a:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 800312c:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 800312e:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003130:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 8003132:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8003134:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003136:	d5d6      	bpl.n	80030e6 <HAL_I2C_Master_Receive+0x27a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	6903      	ldr	r3, [r0, #16]
 800313a:	704b      	strb	r3, [r1, #1]
 800313c:	e083      	b.n	8003246 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800313e:	6963      	ldr	r3, [r4, #20]
 8003140:	0799      	lsls	r1, r3, #30
 8003142:	f53f aefa 	bmi.w	8002f3a <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003146:	6963      	ldr	r3, [r4, #20]
 8003148:	0559      	lsls	r1, r3, #21
 800314a:	f53f af5e 	bmi.w	800300a <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7ff fa61 	bl	8002614 <HAL_GetTick>
 8003152:	1bc0      	subs	r0, r0, r7
 8003154:	4286      	cmp	r6, r0
 8003156:	d30a      	bcc.n	800316e <HAL_I2C_Master_Receive+0x302>
 8003158:	b14e      	cbz	r6, 800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315a:	682c      	ldr	r4, [r5, #0]
 800315c:	e6e4      	b.n	8002f28 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800315e:	6963      	ldr	r3, [r4, #20]
 8003160:	0659      	lsls	r1, r3, #25
 8003162:	d4d7      	bmi.n	8003114 <HAL_I2C_Master_Receive+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003164:	6963      	ldr	r3, [r4, #20]
 8003166:	06d8      	lsls	r0, r3, #27
 8003168:	d428      	bmi.n	80031bc <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7ff fa53 	bl	8002614 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800316e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003170:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003172:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003174:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003178:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800317e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	642b      	str	r3, [r5, #64]	; 0x40
}
 800318a:	b007      	add	sp, #28
 800318c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003190:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003192:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003194:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003196:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800319a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a0:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80031a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ac:	680b      	ldr	r3, [r1, #0]
 80031ae:	05d9      	lsls	r1, r3, #23
 80031b0:	d512      	bpl.n	80031d8 <HAL_I2C_Master_Receive+0x36c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b6:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
 80031ba:	e666      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c0:	f06f 0110 	mvn.w	r1, #16
 80031c4:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80031d2:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80031d4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
 80031da:	e656      	b.n	8002e8a <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	6963      	ldr	r3, [r4, #20]
 80031de:	071b      	lsls	r3, r3, #28
 80031e0:	f53f aee4 	bmi.w	8002fac <HAL_I2C_Master_Receive+0x140>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e4:	6963      	ldr	r3, [r4, #20]
 80031e6:	055b      	lsls	r3, r3, #21
 80031e8:	f53f af0f 	bmi.w	800300a <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7ff fa12 	bl	8002614 <HAL_GetTick>
 80031f0:	1bc0      	subs	r0, r0, r7
 80031f2:	4286      	cmp	r6, r0
 80031f4:	d3bb      	bcc.n	800316e <HAL_I2C_Master_Receive+0x302>
 80031f6:	2e00      	cmp	r6, #0
 80031f8:	d0b9      	beq.n	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031fa:	682c      	ldr	r4, [r5, #0]
 80031fc:	e6cd      	b.n	8002f9a <HAL_I2C_Master_Receive+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fe:	6963      	ldr	r3, [r4, #20]
 8003200:	0759      	lsls	r1, r3, #29
 8003202:	d40c      	bmi.n	800321e <HAL_I2C_Master_Receive+0x3b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7ff fa06 	bl	8002614 <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	4286      	cmp	r6, r0
 800320c:	d3af      	bcc.n	800316e <HAL_I2C_Master_Receive+0x302>
 800320e:	2e00      	cmp	r6, #0
 8003210:	d0ad      	beq.n	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003212:	682c      	ldr	r4, [r5, #0]
 8003214:	1c73      	adds	r3, r6, #1
 8003216:	d1f2      	bne.n	80031fe <HAL_I2C_Master_Receive+0x392>
 8003218:	6963      	ldr	r3, [r4, #20]
 800321a:	0758      	lsls	r0, r3, #29
 800321c:	d5fc      	bpl.n	8003218 <HAL_I2C_Master_Receive+0x3ac>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003224:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003228:	6922      	ldr	r2, [r4, #16]
 800322a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800322c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800322e:	1c53      	adds	r3, r2, #1
 8003230:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003232:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003238:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800323a:	3b01      	subs	r3, #1
 800323c:	b29b      	uxth	r3, r3
 800323e:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8003246:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003248:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800324a:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800324c:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800324e:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8003250:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003252:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003254:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8003256:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 8003258:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 800325a:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800325c:	e743      	b.n	80030e6 <HAL_I2C_Master_Receive+0x27a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003262:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326c:	2200      	movs	r2, #0
 800326e:	9203      	str	r2, [sp, #12]
 8003270:	6962      	ldr	r2, [r4, #20]
 8003272:	9203      	str	r2, [sp, #12]
 8003274:	69a2      	ldr	r2, [r4, #24]
 8003276:	9203      	str	r2, [sp, #12]
 8003278:	9a03      	ldr	r2, [sp, #12]
 800327a:	e6ef      	b.n	800305c <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327c:	6963      	ldr	r3, [r4, #20]
 800327e:	0758      	lsls	r0, r3, #29
 8003280:	f53f aefa 	bmi.w	8003078 <HAL_I2C_Master_Receive+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7ff f9c6 	bl	8002614 <HAL_GetTick>
 8003288:	1bc0      	subs	r0, r0, r7
 800328a:	4286      	cmp	r6, r0
 800328c:	f4ff af6f 	bcc.w	800316e <HAL_I2C_Master_Receive+0x302>
 8003290:	2e00      	cmp	r6, #0
 8003292:	f43f af6c 	beq.w	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003296:	682c      	ldr	r4, [r5, #0]
 8003298:	e6e8      	b.n	800306c <HAL_I2C_Master_Receive+0x200>
 800329a:	6953      	ldr	r3, [r2, #20]
 800329c:	075c      	lsls	r4, r3, #29
 800329e:	f53f af03 	bmi.w	80030a8 <HAL_I2C_Master_Receive+0x23c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7ff f9b7 	bl	8002614 <HAL_GetTick>
 80032a6:	1bc0      	subs	r0, r0, r7
 80032a8:	4286      	cmp	r6, r0
 80032aa:	f4ff af60 	bcc.w	800316e <HAL_I2C_Master_Receive+0x302>
 80032ae:	2e00      	cmp	r6, #0
 80032b0:	f47f aef3 	bne.w	800309a <HAL_I2C_Master_Receive+0x22e>
 80032b4:	e75b      	b.n	800316e <HAL_I2C_Master_Receive+0x302>
 80032b6:	b95e      	cbnz	r6, 80032d0 <HAL_I2C_Master_Receive+0x464>
 80032b8:	e011      	b.n	80032de <HAL_I2C_Master_Receive+0x472>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ba:	6963      	ldr	r3, [r4, #20]
 80032bc:	06d9      	lsls	r1, r3, #27
 80032be:	f53f af7d 	bmi.w	80031bc <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7ff f9a7 	bl	8002614 <HAL_GetTick>
 80032c6:	1bc0      	subs	r0, r0, r7
 80032c8:	4286      	cmp	r6, r0
 80032ca:	f4ff af50 	bcc.w	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ce:	682c      	ldr	r4, [r5, #0]
 80032d0:	6963      	ldr	r3, [r4, #20]
 80032d2:	0658      	lsls	r0, r3, #25
 80032d4:	d5f1      	bpl.n	80032ba <HAL_I2C_Master_Receive+0x44e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032dc:	e7b3      	b.n	8003246 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032de:	6963      	ldr	r3, [r4, #20]
 80032e0:	065a      	lsls	r2, r3, #25
 80032e2:	f57f af3f 	bpl.w	8003164 <HAL_I2C_Master_Receive+0x2f8>
 80032e6:	e7f6      	b.n	80032d6 <HAL_I2C_Master_Receive+0x46a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2200      	movs	r2, #0
 80032f0:	9202      	str	r2, [sp, #8]
 80032f2:	6962      	ldr	r2, [r4, #20]
 80032f4:	9202      	str	r2, [sp, #8]
 80032f6:	69a2      	ldr	r2, [r4, #24]
 80032f8:	9202      	str	r2, [sp, #8]
 80032fa:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	6022      	str	r2, [r4, #0]
 8003304:	e6aa      	b.n	800305c <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003306:	6963      	ldr	r3, [r4, #20]
 8003308:	0798      	lsls	r0, r3, #30
 800330a:	f53f ae5b 	bmi.w	8002fc4 <HAL_I2C_Master_Receive+0x158>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	0558      	lsls	r0, r3, #21
 8003312:	f53f ae7a 	bmi.w	800300a <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003316:	f7ff f97d 	bl	8002614 <HAL_GetTick>
 800331a:	1bc0      	subs	r0, r0, r7
 800331c:	4286      	cmp	r6, r0
 800331e:	f4ff af26 	bcc.w	800316e <HAL_I2C_Master_Receive+0x302>
 8003322:	2e00      	cmp	r6, #0
 8003324:	f43f af23 	beq.w	800316e <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	682c      	ldr	r4, [r5, #0]
 800332a:	e642      	b.n	8002fb2 <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332c:	6963      	ldr	r3, [r4, #20]
 800332e:	07d8      	lsls	r0, r3, #31
 8003330:	f53f ae59 	bmi.w	8002fe6 <HAL_I2C_Master_Receive+0x17a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003334:	f7ff f96e 	bl	8002614 <HAL_GetTick>
 8003338:	1bc0      	subs	r0, r0, r7
 800333a:	4286      	cmp	r6, r0
 800333c:	f4ff af28 	bcc.w	8003190 <HAL_I2C_Master_Receive+0x324>
 8003340:	2e00      	cmp	r6, #0
 8003342:	f43f af25 	beq.w	8003190 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003346:	682c      	ldr	r4, [r5, #0]
 8003348:	e647      	b.n	8002fda <HAL_I2C_Master_Receive+0x16e>
 800334a:	bf00      	nop

0800334c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	2800      	cmp	r0, #0
 800334e:	f000 81a2 	beq.w	8003696 <HAL_RCC_OscConfig+0x34a>
{
 8003352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	07dd      	lsls	r5, r3, #31
{
 800335a:	b082      	sub	sp, #8
 800335c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	d52f      	bpl.n	80033c0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003360:	499e      	ldr	r1, [pc, #632]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 8003362:	688a      	ldr	r2, [r1, #8]
 8003364:	f002 020c 	and.w	r2, r2, #12
 8003368:	2a04      	cmp	r2, #4
 800336a:	f000 80ed 	beq.w	8003548 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	688a      	ldr	r2, [r1, #8]
 8003370:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003374:	2a08      	cmp	r2, #8
 8003376:	f000 80e3 	beq.w	8003540 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337a:	6863      	ldr	r3, [r4, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	f000 80ec 	beq.w	800355c <HAL_RCC_OscConfig+0x210>
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	f000 8175 	beq.w	8003676 <HAL_RCC_OscConfig+0x32a>
 800338c:	4d93      	ldr	r5, [pc, #588]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 800338e:	682a      	ldr	r2, [r5, #0]
 8003390:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003394:	602a      	str	r2, [r5, #0]
 8003396:	682a      	ldr	r2, [r5, #0]
 8003398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800339c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80e1 	bne.w	8003566 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff f936 	bl	8002614 <HAL_GetTick>
 80033a8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7ff f932 	bl	8002614 <HAL_GetTick>
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	2864      	cmp	r0, #100	; 0x64
 80033b4:	f200 8101 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	039b      	lsls	r3, r3, #14
 80033bc:	d4f6      	bmi.n	80033ac <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	079f      	lsls	r7, r3, #30
 80033c2:	d528      	bpl.n	8003416 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c4:	4a85      	ldr	r2, [pc, #532]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 80033c6:	6891      	ldr	r1, [r2, #8]
 80033c8:	f011 0f0c 	tst.w	r1, #12
 80033cc:	f000 8090 	beq.w	80034f0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d0:	6891      	ldr	r1, [r2, #8]
 80033d2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	2908      	cmp	r1, #8
 80033d8:	f000 8086 	beq.w	80034e8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033dc:	68e3      	ldr	r3, [r4, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 810e 	beq.w	8003600 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4e7d      	ldr	r6, [pc, #500]	; (80035dc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ec:	f7ff f912 	bl	8002614 <HAL_GetTick>
 80033f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	e005      	b.n	8003400 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7ff f90e 	bl	8002614 <HAL_GetTick>
 80033f8:	1b40      	subs	r0, r0, r5
 80033fa:	2802      	cmp	r0, #2
 80033fc:	f200 80dd 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	0798      	lsls	r0, r3, #30
 8003404:	d5f6      	bpl.n	80033f4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	6833      	ldr	r3, [r6, #0]
 8003408:	6922      	ldr	r2, [r4, #16]
 800340a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800340e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003412:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	071a      	lsls	r2, r3, #28
 8003418:	d451      	bmi.n	80034be <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	0758      	lsls	r0, r3, #29
 800341c:	d52f      	bpl.n	800347e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4a6f      	ldr	r2, [pc, #444]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 8003420:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003422:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003426:	d07f      	beq.n	8003528 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003428:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4e6e      	ldr	r6, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x298>)
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	05d9      	lsls	r1, r3, #23
 8003430:	f140 80b3 	bpl.w	800359a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	f000 80c3 	beq.w	80035c2 <HAL_RCC_OscConfig+0x276>
 800343c:	2b05      	cmp	r3, #5
 800343e:	f000 812c 	beq.w	800369a <HAL_RCC_OscConfig+0x34e>
 8003442:	4e66      	ldr	r6, [pc, #408]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 8003444:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	6732      	str	r2, [r6, #112]	; 0x70
 800344c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 80b9 	bne.w	80035cc <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7ff f8db 	bl	8002614 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003462:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003464:	e005      	b.n	8003472 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7ff f8d5 	bl	8002614 <HAL_GetTick>
 800346a:	1bc0      	subs	r0, r0, r7
 800346c:	4540      	cmp	r0, r8
 800346e:	f200 80a4 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003474:	0798      	lsls	r0, r3, #30
 8003476:	d4f6      	bmi.n	8003466 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003478:	2d00      	cmp	r5, #0
 800347a:	f040 8106 	bne.w	800368a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347e:	69a0      	ldr	r0, [r4, #24]
 8003480:	b1c8      	cbz	r0, 80034b6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003482:	4d56      	ldr	r5, [pc, #344]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 8003484:	68ab      	ldr	r3, [r5, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	f000 80c9 	beq.w	8003622 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_OscConfig+0x294>)
 8003492:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003494:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003496:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003498:	f000 8109 	beq.w	80036ae <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7ff f8ba 	bl	8002614 <HAL_GetTick>
 80034a0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a4:	f7ff f8b6 	bl	8002614 <HAL_GetTick>
 80034a8:	1b00      	subs	r0, r0, r4
 80034aa:	2802      	cmp	r0, #2
 80034ac:	f200 8085 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	d4f6      	bmi.n	80034a4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2000      	movs	r0, #0
}
 80034b8:	b002      	add	sp, #8
 80034ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034be:	6963      	ldr	r3, [r4, #20]
 80034c0:	b30b      	cbz	r3, 8003506 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c4:	4e45      	ldr	r6, [pc, #276]	; (80035dc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80034c6:	2201      	movs	r2, #1
 80034c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80034cc:	f7ff f8a2 	bl	8002614 <HAL_GetTick>
 80034d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e004      	b.n	80034de <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d4:	f7ff f89e 	bl	8002614 <HAL_GetTick>
 80034d8:	1b40      	subs	r0, r0, r5
 80034da:	2802      	cmp	r0, #2
 80034dc:	d86d      	bhi.n	80035ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80034e0:	079b      	lsls	r3, r3, #30
 80034e2:	d5f7      	bpl.n	80034d4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	e798      	b.n	800341a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	0256      	lsls	r6, r2, #9
 80034ec:	f53f af76 	bmi.w	80033dc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f0:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	0795      	lsls	r5, r2, #30
 80034f6:	d544      	bpl.n	8003582 <HAL_RCC_OscConfig+0x236>
 80034f8:	68e2      	ldr	r2, [r4, #12]
 80034fa:	2a01      	cmp	r2, #1
 80034fc:	d041      	beq.n	8003582 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80034fe:	2001      	movs	r0, #1
}
 8003500:	b002      	add	sp, #8
 8003502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003506:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4e34      	ldr	r6, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800350a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800350e:	f7ff f881 	bl	8002614 <HAL_GetTick>
 8003512:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	e004      	b.n	8003520 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003516:	f7ff f87d 	bl	8002614 <HAL_GetTick>
 800351a:	1b40      	subs	r0, r0, r5
 800351c:	2802      	cmp	r0, #2
 800351e:	d84c      	bhi.n	80035ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003522:	079f      	lsls	r7, r3, #30
 8003524:	d4f7      	bmi.n	8003516 <HAL_RCC_OscConfig+0x1ca>
 8003526:	e7dd      	b.n	80034e4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800353c:	2501      	movs	r5, #1
 800353e:	e774      	b.n	800342a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003540:	684a      	ldr	r2, [r1, #4]
 8003542:	0250      	lsls	r0, r2, #9
 8003544:	f57f af19 	bpl.w	800337a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	0391      	lsls	r1, r2, #14
 800354e:	f57f af37 	bpl.w	80033c0 <HAL_RCC_OscConfig+0x74>
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	2a00      	cmp	r2, #0
 8003556:	f47f af33 	bne.w	80033c0 <HAL_RCC_OscConfig+0x74>
 800355a:	e7d0      	b.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003566:	f7ff f855 	bl	8002614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4e1c      	ldr	r6, [pc, #112]	; (80035dc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800356c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e004      	b.n	800357a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7ff f850 	bl	8002614 <HAL_GetTick>
 8003574:	1b40      	subs	r0, r0, r5
 8003576:	2864      	cmp	r0, #100	; 0x64
 8003578:	d81f      	bhi.n	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	6833      	ldr	r3, [r6, #0]
 800357c:	039a      	lsls	r2, r3, #14
 800357e:	d5f7      	bpl.n	8003570 <HAL_RCC_OscConfig+0x224>
 8003580:	e71d      	b.n	80033be <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 8003584:	6920      	ldr	r0, [r4, #16]
 8003586:	680a      	ldr	r2, [r1, #0]
 8003588:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800358c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003590:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	071a      	lsls	r2, r3, #28
 8003594:	f57f af41 	bpl.w	800341a <HAL_RCC_OscConfig+0xce>
 8003598:	e791      	b.n	80034be <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	6833      	ldr	r3, [r6, #0]
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80035a2:	f7ff f837 	bl	8002614 <HAL_GetTick>
 80035a6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	05da      	lsls	r2, r3, #23
 80035ac:	f53f af42 	bmi.w	8003434 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7ff f830 	bl	8002614 <HAL_GetTick>
 80035b4:	1bc0      	subs	r0, r0, r7
 80035b6:	2802      	cmp	r0, #2
 80035b8:	d9f6      	bls.n	80035a8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80035ba:	2003      	movs	r0, #3
}
 80035bc:	b002      	add	sp, #8
 80035be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c2:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_RCC_OscConfig+0x290>)
 80035c4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80035cc:	f7ff f822 	bl	8002614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	4f02      	ldr	r7, [pc, #8]	; (80035dc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80035d2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x2a6>
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	42470000 	.word	0x42470000
 80035e4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7ff f814 	bl	8002614 <HAL_GetTick>
 80035ec:	1b80      	subs	r0, r0, r6
 80035ee:	4540      	cmp	r0, r8
 80035f0:	d8e3      	bhi.n	80035ba <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d5f7      	bpl.n	80035e8 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	f43f af40 	beq.w	800347e <HAL_RCC_OscConfig+0x132>
 80035fe:	e044      	b.n	800368a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8003600:	4a42      	ldr	r2, [pc, #264]	; (800370c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4e43      	ldr	r6, [pc, #268]	; (8003710 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003604:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003606:	f7ff f805 	bl	8002614 <HAL_GetTick>
 800360a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360c:	e004      	b.n	8003618 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360e:	f7ff f801 	bl	8002614 <HAL_GetTick>
 8003612:	1b40      	subs	r0, r0, r5
 8003614:	2802      	cmp	r0, #2
 8003616:	d8d0      	bhi.n	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	0799      	lsls	r1, r3, #30
 800361c:	d4f7      	bmi.n	800360e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	e6f9      	b.n	8003416 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003622:	2801      	cmp	r0, #1
 8003624:	f43f af48 	beq.w	80034b8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003628:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	4291      	cmp	r1, r2
 8003632:	f47f af64 	bne.w	80034fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	4291      	cmp	r1, r2
 800363e:	f47f af5e 	bne.w	80034fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003642:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003644:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003648:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800364e:	f47f af56 	bne.w	80034fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003652:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003654:	0852      	lsrs	r2, r2, #1
 8003656:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800365a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003660:	f47f af4d 	bne.w	80034fe <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003664:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003666:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800366e:	bf14      	ite	ne
 8003670:	2001      	movne	r0, #1
 8003672:	2000      	moveq	r0, #0
 8003674:	e720      	b.n	80034b8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCC_OscConfig+0x3c4>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003686:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003688:	e76d      	b.n	8003566 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x3c4>)
 800368c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6413      	str	r3, [r2, #64]	; 0x40
 8003694:	e6f3      	b.n	800347e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003696:	2001      	movs	r0, #1
}
 8003698:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x3c4>)
 800369c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800369e:	f042 0204 	orr.w	r2, r2, #4
 80036a2:	671a      	str	r2, [r3, #112]	; 0x70
 80036a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ac:	e78e      	b.n	80035cc <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80036ae:	f7fe ffb1 	bl	8002614 <HAL_GetTick>
 80036b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	e005      	b.n	80036c2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fe ffad 	bl	8002614 <HAL_GetTick>
 80036ba:	1b80      	subs	r0, r0, r6
 80036bc:	2802      	cmp	r0, #2
 80036be:	f63f af7c 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	0199      	lsls	r1, r3, #6
 80036c6:	d4f6      	bmi.n	80036b6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80036cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036ce:	430b      	orrs	r3, r1
 80036d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036d4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80036de:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80036e0:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80036e6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80036ea:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80036ec:	f7fe ff92 	bl	8002614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	4d07      	ldr	r5, [pc, #28]	; (8003710 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80036f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	e005      	b.n	8003702 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe ff8d 	bl	8002614 <HAL_GetTick>
 80036fa:	1b00      	subs	r0, r0, r4
 80036fc:	2802      	cmp	r0, #2
 80036fe:	f63f af5c 	bhi.w	80035ba <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	019a      	lsls	r2, r3, #6
 8003706:	d5f6      	bpl.n	80036f6 <HAL_RCC_OscConfig+0x3aa>
 8003708:	e6d5      	b.n	80034b6 <HAL_RCC_OscConfig+0x16a>
 800370a:	bf00      	nop
 800370c:	42470000 	.word	0x42470000
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003716:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003718:	688b      	ldr	r3, [r1, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d01b      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x46>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d117      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003726:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003728:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003734:	d113      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	480f      	ldr	r0, [pc, #60]	; (8003774 <HAL_RCC_GetSysClockFreq+0x60>)
 8003738:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800373c:	fba1 0100 	umull	r0, r1, r1, r0
 8003740:	f7fd fa82 	bl	8000c48 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800374c:	3301      	adds	r3, #1
 800374e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003750:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003754:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003756:	4807      	ldr	r0, [pc, #28]	; (8003774 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003758:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375a:	4807      	ldr	r0, [pc, #28]	; (8003778 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800375c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4806      	ldr	r0, [pc, #24]	; (8003778 <HAL_RCC_GetSysClockFreq+0x64>)
 8003760:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003764:	2300      	movs	r3, #0
 8003766:	fba1 0100 	umull	r0, r1, r1, r0
 800376a:	f7fd fa6d 	bl	8000c48 <__aeabi_uldivmod>
 800376e:	e7e9      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x30>
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800377c:	2800      	cmp	r0, #0
 800377e:	f000 8087 	beq.w	8003890 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003782:	4a48      	ldr	r2, [pc, #288]	; (80038a4 <HAL_RCC_ClockConfig+0x128>)
 8003784:	6813      	ldr	r3, [r2, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	428b      	cmp	r3, r1
{
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003790:	460d      	mov	r5, r1
 8003792:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	d209      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	b2cb      	uxtb	r3, r1
 8003798:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	428b      	cmp	r3, r1
 80037a2:	d002      	beq.n	80037aa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
}
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0798      	lsls	r0, r3, #30
 80037ae:	d514      	bpl.n	80037da <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	0759      	lsls	r1, r3, #29
 80037b2:	d504      	bpl.n	80037be <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b4:	493c      	ldr	r1, [pc, #240]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 80037b6:	688a      	ldr	r2, [r1, #8]
 80037b8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80037bc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	071a      	lsls	r2, r3, #28
 80037c0:	d504      	bpl.n	80037cc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c2:	4939      	ldr	r1, [pc, #228]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80037ca:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4936      	ldr	r1, [pc, #216]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 80037ce:	68a0      	ldr	r0, [r4, #8]
 80037d0:	688a      	ldr	r2, [r1, #8]
 80037d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037d6:	4302      	orrs	r2, r0
 80037d8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037da:	07df      	lsls	r7, r3, #31
 80037dc:	d521      	bpl.n	8003822 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	2a01      	cmp	r2, #1
 80037e2:	d057      	beq.n	8003894 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e4:	1e93      	subs	r3, r2, #2
 80037e6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ec:	d94d      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	0799      	lsls	r1, r3, #30
 80037f0:	d5d8      	bpl.n	80037a4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4e2d      	ldr	r6, [pc, #180]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 80037f4:	68b3      	ldr	r3, [r6, #8]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80037fe:	f7fe ff09 	bl	8002614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003802:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003806:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	e004      	b.n	8003814 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380a:	f7fe ff03 	bl	8002614 <HAL_GetTick>
 800380e:	1bc0      	subs	r0, r0, r7
 8003810:	4540      	cmp	r0, r8
 8003812:	d844      	bhi.n	800389e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	68b3      	ldr	r3, [r6, #8]
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003820:	d1f3      	bne.n	800380a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003822:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x128>)
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	42ab      	cmp	r3, r5
 800382c:	d906      	bls.n	800383c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	b2eb      	uxtb	r3, r5
 8003830:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	42ab      	cmp	r3, r5
 800383a:	d1b3      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	075a      	lsls	r2, r3, #29
 8003840:	d506      	bpl.n	8003850 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003842:	4919      	ldr	r1, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	688a      	ldr	r2, [r1, #8]
 8003848:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800384c:	4302      	orrs	r2, r0
 800384e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	d507      	bpl.n	8003864 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	6893      	ldr	r3, [r2, #8]
 800385a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800385e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003862:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003864:	f7ff ff56 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8003868:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 800386a:	4c10      	ldr	r4, [pc, #64]	; (80038ac <HAL_RCC_ClockConfig+0x130>)
 800386c:	6892      	ldr	r2, [r2, #8]
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <HAL_RCC_ClockConfig+0x134>)
 8003870:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003874:	4603      	mov	r3, r0
 8003876:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003878:	480e      	ldr	r0, [pc, #56]	; (80038b4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800387c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003880:	f7fe fe7e 	bl	8002580 <HAL_InitTick>
  return HAL_OK;
 8003884:	2000      	movs	r0, #0
}
 8003886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	0198      	lsls	r0, r3, #6
 800388c:	d4b1      	bmi.n	80037f2 <HAL_RCC_ClockConfig+0x76>
 800388e:	e789      	b.n	80037a4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
}
 8003892:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_ClockConfig+0x12c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	039e      	lsls	r6, r3, #14
 800389a:	d4aa      	bmi.n	80037f2 <HAL_RCC_ClockConfig+0x76>
 800389c:	e782      	b.n	80037a4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800389e:	2003      	movs	r0, #3
 80038a0:	e781      	b.n	80037a6 <HAL_RCC_ClockConfig+0x2a>
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	0800f8e8 	.word	0x0800f8e8
 80038b0:	20000014 	.word	0x20000014
 80038b4:	2000001c 	.word	0x2000001c

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80038ba:	4905      	ldr	r1, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038c0:	6808      	ldr	r0, [r1, #0]
 80038c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80038c8:	40d8      	lsrs	r0, r3
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800
 80038d0:	20000014 	.word	0x20000014
 80038d4:	0800f8f8 	.word	0x0800f8f8

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80038da:	4905      	ldr	r1, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038e0:	6808      	ldr	r0, [r1, #0]
 80038e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80038e8:	40d8      	lsrs	r0, r3
 80038ea:	4770      	bx	lr
 80038ec:	40023800 	.word	0x40023800
 80038f0:	20000014 	.word	0x20000014
 80038f4:	0800f8f8 	.word	0x0800f8f8

080038f8 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80038f8:	b1b0      	cbz	r0, 8003928 <HAL_RNG_Init+0x30>
{
 80038fa:	b510      	push	{r4, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80038fc:	7943      	ldrb	r3, [r0, #5]
 80038fe:	4604      	mov	r4, r0
 8003900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003904:	b163      	cbz	r3, 8003920 <HAL_RNG_Init+0x28>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003906:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8003908:	2302      	movs	r3, #2
 800390a:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800390c:	680b      	ldr	r3, [r1, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800390e:	2001      	movs	r0, #1
  __HAL_RNG_ENABLE(hrng);
 8003910:	f043 0304 	orr.w	r3, r3, #4

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003914:	2200      	movs	r2, #0
  __HAL_RNG_ENABLE(hrng);
 8003916:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 8003918:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800391a:	4610      	mov	r0, r2
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800391c:	60a2      	str	r2, [r4, #8]
}
 800391e:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8003920:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8003922:	f7fe fb6d 	bl	8002000 <HAL_RNG_MspInit>
 8003926:	e7ee      	b.n	8003906 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8003928:	2001      	movs	r0, #1
}
 800392a:	4770      	bx	lr

0800392c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	4605      	mov	r5, r0
 8003932:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7fe fe6e 	bl	8002614 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8003938:	2200      	movs	r2, #0
 800393a:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800393c:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800393e:	2108      	movs	r1, #8
 8003940:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8003942:	e9cd 2300 	strd	r2, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003946:	f001 fb5f 	bl	8005008 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800394a:	4604      	mov	r4, r0
 800394c:	b110      	cbz	r0, 8003954 <SD_FindSCR+0x28>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800394e:	4620      	mov	r0, r4
 8003950:	b009      	add	sp, #36	; 0x24
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003954:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8003956:	6828      	ldr	r0, [r5, #0]
 8003958:	0409      	lsls	r1, r1, #16
 800395a:	f002 f819 	bl	8005990 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800395e:	4604      	mov	r4, r0
 8003960:	2800      	cmp	r0, #0
 8003962:	d1f4      	bne.n	800394e <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003968:	2308      	movs	r3, #8
 800396a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800396e:	2230      	movs	r2, #48	; 0x30
 8003970:	2302      	movs	r3, #2
 8003972:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003976:	a902      	add	r1, sp, #8
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003978:	2200      	movs	r2, #0
 800397a:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800397c:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800397e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003982:	f001 fb2b 	bl	8004fdc <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003986:	6828      	ldr	r0, [r5, #0]
 8003988:	f002 f97a 	bl	8005c80 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800398c:	4604      	mov	r4, r0
 800398e:	b140      	cbz	r0, 80039a2 <SD_FindSCR+0x76>
 8003990:	e7dd      	b.n	800394e <SD_FindSCR+0x22>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003992:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003994:	0491      	lsls	r1, r2, #18
 8003996:	d515      	bpl.n	80039c4 <SD_FindSCR+0x98>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003998:	f7fe fe3c 	bl	8002614 <HAL_GetTick>
 800399c:	1b83      	subs	r3, r0, r6
 800399e:	3301      	adds	r3, #1
 80039a0:	d024      	beq.n	80039ec <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80039a2:	6828      	ldr	r0, [r5, #0]
 80039a4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039a6:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80039aa:	d10b      	bne.n	80039c4 <SD_FindSCR+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80039ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039ae:	0293      	lsls	r3, r2, #10
 80039b0:	d5ef      	bpl.n	8003992 <SD_FindSCR+0x66>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80039b2:	f001 fafd 	bl	8004fb0 <SDIO_ReadFIFO>
 80039b6:	ab08      	add	r3, sp, #32
 80039b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80039bc:	3401      	adds	r4, #1
 80039be:	f843 0c20 	str.w	r0, [r3, #-32]
 80039c2:	e7e9      	b.n	8003998 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039c6:	0712      	lsls	r2, r2, #28
 80039c8:	d416      	bmi.n	80039f8 <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039cc:	0793      	lsls	r3, r2, #30
 80039ce:	d416      	bmi.n	80039fe <SD_FindSCR+0xd2>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80039d2:	f014 0420 	ands.w	r4, r4, #32
 80039d6:	d10c      	bne.n	80039f2 <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039d8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80039dc:	f240 533a 	movw	r3, #1338	; 0x53a
 80039e0:	ba09      	rev	r1, r1
 80039e2:	ba12      	rev	r2, r2
 80039e4:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039e6:	e9c7 1200 	strd	r1, r2, [r7]
  return HAL_SD_ERROR_NONE;
 80039ea:	e7b0      	b.n	800394e <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 80039ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80039f0:	e7ad      	b.n	800394e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039f2:	2420      	movs	r4, #32
 80039f4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80039f6:	e7aa      	b.n	800394e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80039f8:	2408      	movs	r4, #8
 80039fa:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039fc:	e7a7      	b.n	800394e <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039fe:	2402      	movs	r4, #2
 8003a00:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a02:	e7a4      	b.n	800394e <SD_FindSCR+0x22>

08003a04 <HAL_SD_ReadBlocks>:
{
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	460c      	mov	r4, r1
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	4691      	mov	r9, r2
 8003a10:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7fe fdff 	bl	8002614 <HAL_GetTick>
  if(NULL == pData)
 8003a16:	2c00      	cmp	r4, #0
 8003a18:	f000 8093 	beq.w	8003b42 <HAL_SD_ReadBlocks+0x13e>
  if(hsd->State == HAL_SD_STATE_READY)
 8003a1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	fa5f f883 	uxtb.w	r8, r3
 8003a26:	d17b      	bne.n	8003b20 <HAL_SD_ReadBlocks+0x11c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a2a:	eb09 0106 	add.w	r1, r9, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a2e:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a30:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a34:	f200 808f 	bhi.w	8003b56 <HAL_SD_ReadBlocks+0x152>
 8003a38:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 8003a3a:	6838      	ldr	r0, [r7, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 8003a3e:	2103      	movs	r1, #3
 8003a40:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003a44:	62c3      	str	r3, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4a:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003a4c:	0273      	lsls	r3, r6, #9
 8003a4e:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a50:	f04f 0a02 	mov.w	sl, #2
 8003a54:	2390      	movs	r3, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a56:	2a01      	cmp	r2, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a58:	e9cd 3a04 	strd	r3, sl, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003a5c:	f04f 0b01 	mov.w	fp, #1
 8003a60:	f04f 0300 	mov.w	r3, #0
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a64:	a902      	add	r1, sp, #8
      add *= 512U;
 8003a66:	bf18      	it	ne
 8003a68:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003a6c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a70:	f001 fab4 	bl	8004fdc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003a74:	455e      	cmp	r6, fp
 8003a76:	d95d      	bls.n	8003b34 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003a78:	6838      	ldr	r0, [r7, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003a7a:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f001 fc00 	bl	8005284 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d16e      	bne.n	8003b66 <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 8003a88:	9b03      	ldr	r3, [sp, #12]
 8003a8a:	9301      	str	r3, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a8c:	f240 3a2a 	movw	sl, #810	; 0x32a
 8003a90:	e005      	b.n	8003a9e <HAL_SD_ReadBlocks+0x9a>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a92:	f7fe fdbf 	bl	8002614 <HAL_GetTick>
 8003a96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a98:	1b40      	subs	r0, r0, r5
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	d22e      	bcs.n	8003afc <HAL_SD_ReadBlocks+0xf8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003aa2:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003aa6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003aa8:	d169      	bne.n	8003b7e <HAL_SD_ReadBlocks+0x17a>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003aaa:	0419      	lsls	r1, r3, #16
 8003aac:	d5f1      	bpl.n	8003a92 <HAL_SD_ReadBlocks+0x8e>
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_SD_ReadBlocks+0x8e>
 8003ab4:	f104 0b04 	add.w	fp, r4, #4
 8003ab8:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8003abc:	e000      	b.n	8003ac0 <HAL_SD_ReadBlocks+0xbc>
          data = SDIO_ReadFIFO(hsd->Instance);
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f001 fa75 	bl	8004fb0 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ac6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003aca:	0c01      	lsrs	r1, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003acc:	0e02      	lsrs	r2, r0, #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003ace:	f80b 0c04 	strb.w	r0, [fp, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ad2:	f80b cc03 	strb.w	ip, [fp, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ad6:	f80b 1c02 	strb.w	r1, [fp, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003ada:	f80b 2c01 	strb.w	r2, [fp, #-1]
        for(count = 0U; count < 8U; count++)
 8003ade:	f10b 0b04 	add.w	fp, fp, #4
 8003ae2:	45cb      	cmp	fp, r9
 8003ae4:	d1eb      	bne.n	8003abe <HAL_SD_ReadBlocks+0xba>
          dataremaining--;
 8003ae6:	9b01      	ldr	r3, [sp, #4]
 8003ae8:	3b20      	subs	r3, #32
 8003aea:	9301      	str	r3, [sp, #4]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003aec:	f7fe fd92 	bl	8002614 <HAL_GetTick>
 8003af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003af2:	1b40      	subs	r0, r0, r5
 8003af4:	4298      	cmp	r0, r3
          tempbuff++;
 8003af6:	f104 0420 	add.w	r4, r4, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003afa:	d3d0      	bcc.n	8003a9e <HAL_SD_ReadBlocks+0x9a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8003b04:	f04f 0803 	mov.w	r8, #3
        hsd->State= HAL_SD_STATE_READY;
 8003b08:	2101      	movs	r1, #1
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hsd->Context = SD_CONTEXT_NONE;
 8003b0e:	2200      	movs	r2, #0
}
 8003b10:	4640      	mov	r0, r8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b14:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b18:	633a      	str	r2, [r7, #48]	; 0x30
}
 8003b1a:	b009      	add	sp, #36	; 0x24
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    return HAL_ERROR;
 8003b26:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	b009      	add	sp, #36	; 0x24
 8003b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b34:	6838      	ldr	r0, [r7, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003b36:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	f001 fb02 	bl	8005144 <SDMMC_CmdReadSingleBlock>
 8003b40:	e7a0      	b.n	8003a84 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    return HAL_ERROR;
 8003b44:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8003b4c:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003b50:	b009      	add	sp, #36	; 0x24
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b58:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003b60:	b009      	add	sp, #36	; 0x24
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b6e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8003b70:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8003b72:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8003b74:	63b8      	str	r0, [r7, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b76:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
          return HAL_ERROR;
 8003b7c:	e7d6      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	d50a      	bpl.n	8003b98 <HAL_SD_ReadBlocks+0x194>
 8003b82:	2e01      	cmp	r6, #1
 8003b84:	d908      	bls.n	8003b98 <HAL_SD_ReadBlocks+0x194>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d005      	beq.n	8003b98 <HAL_SD_ReadBlocks+0x194>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f001 fd57 	bl	8005640 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d1e7      	bne.n	8003b66 <HAL_SD_ReadBlocks+0x162>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003b9a:	f013 0308 	ands.w	r3, r3, #8
 8003b9e:	d134      	bne.n	8003c0a <HAL_SD_ReadBlocks+0x206>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ba0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003ba2:	f011 0102 	ands.w	r1, r1, #2
 8003ba6:	d13c      	bne.n	8003c22 <HAL_SD_ReadBlocks+0x21e>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ba8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003baa:	0698      	lsls	r0, r3, #26
 8003bac:	d44d      	bmi.n	8003c4a <HAL_SD_ReadBlocks+0x246>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003bae:	9e01      	ldr	r6, [sp, #4]
 8003bb0:	3604      	adds	r6, #4
 8003bb2:	4426      	add	r6, r4
 8003bb4:	3404      	adds	r4, #4
 8003bb6:	e000      	b.n	8003bba <HAL_SD_ReadBlocks+0x1b6>
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003bbc:	029b      	lsls	r3, r3, #10
      data = SDIO_ReadFIFO(hsd->Instance);
 8003bbe:	4610      	mov	r0, r2
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003bc0:	d53a      	bpl.n	8003c38 <HAL_SD_ReadBlocks+0x234>
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d038      	beq.n	8003c38 <HAL_SD_ReadBlocks+0x234>
      data = SDIO_ReadFIFO(hsd->Instance);
 8003bc6:	f001 f9f3 	bl	8004fb0 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003bca:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003bcc:	f804 0c04 	strb.w	r0, [r4, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003bd0:	f804 3c03 	strb.w	r3, [r4, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bd4:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bd6:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bd8:	f804 3c02 	strb.w	r3, [r4, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bdc:	f804 0c01 	strb.w	r0, [r4, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003be0:	f7fe fd18 	bl	8002614 <HAL_GetTick>
 8003be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003be6:	1b40      	subs	r0, r0, r5
 8003be8:	4298      	cmp	r0, r3
 8003bea:	f104 0404 	add.w	r4, r4, #4
 8003bee:	d3e3      	bcc.n	8003bb8 <HAL_SD_ReadBlocks+0x1b4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003bf8:	2101      	movs	r1, #1
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hsd->Context = SD_CONTEXT_NONE;
 8003bfe:	2200      	movs	r2, #0
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c02:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c06:	633a      	str	r2, [r7, #48]	; 0x30
        return HAL_ERROR;
 8003c08:	e790      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003c0c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c10:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c12:	f043 0308 	orr.w	r3, r3, #8
      hsd->Context = SD_CONTEXT_NONE;
 8003c16:	2200      	movs	r2, #0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c1a:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c1e:	633a      	str	r2, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003c20:	e784      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c22:	490f      	ldr	r1, [pc, #60]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003c24:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c28:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c2a:	f042 0202 	orr.w	r2, r2, #2
 8003c2e:	63ba      	str	r2, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c30:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003c36:	e779      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c38:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8003c3c:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c3e:	6391      	str	r1, [r2, #56]	; 0x38
    return HAL_OK;
 8003c40:	f04f 0800 	mov.w	r8, #0
    hsd->State = HAL_SD_STATE_READY;
 8003c44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    return HAL_OK;
 8003c48:	e770      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_SD_ReadBlocks+0x25c>)
 8003c4c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c50:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c52:	f043 0320 	orr.w	r3, r3, #32
 8003c56:	63bb      	str	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c58:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c5c:	6339      	str	r1, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003c5e:	e765      	b.n	8003b2c <HAL_SD_ReadBlocks+0x128>
 8003c60:	004005ff 	.word	0x004005ff

08003c64 <HAL_SD_WriteBlocks>:
{
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	460c      	mov	r4, r1
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	4691      	mov	r9, r2
 8003c70:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8003c72:	f7fe fccf 	bl	8002614 <HAL_GetTick>
  if(NULL == pData)
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	d07b      	beq.n	8003d72 <HAL_SD_WriteBlocks+0x10e>
  if(hsd->State == HAL_SD_STATE_READY)
 8003c7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	fa5f f883 	uxtb.w	r8, r3
 8003c84:	d165      	bne.n	8003d52 <HAL_SD_WriteBlocks+0xee>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c88:	eb09 0106 	add.w	r1, r9, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c8c:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c8e:	4291      	cmp	r1, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c92:	d878      	bhi.n	8003d86 <HAL_SD_WriteBlocks+0x122>
 8003c94:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 8003c96:	6838      	ldr	r0, [r7, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003ca0:	62c3      	str	r3, [r0, #44]	; 0x2c
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ca2:	2300      	movs	r3, #0
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ca4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cac:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cae:	0273      	lsls	r3, r6, #9
 8003cb0:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cb2:	2390      	movs	r3, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cb4:	2a01      	cmp	r2, #1
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cb6:	9304      	str	r3, [sp, #16]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cb8:	a902      	add	r1, sp, #8
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cba:	f04f 0301 	mov.w	r3, #1
      add *= 512U;
 8003cbe:	bf18      	it	ne
 8003cc0:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cc4:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cc6:	f001 f989 	bl	8004fdc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003cca:	2e01      	cmp	r6, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ccc:	4649      	mov	r1, r9
    if(NumberOfBlocks > 1U)
 8003cce:	d94a      	bls.n	8003d66 <HAL_SD_WriteBlocks+0x102>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003cd0:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003cd2:	6838      	ldr	r0, [r7, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003cd6:	f001 fc13 	bl	8005500 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d15b      	bne.n	8003d96 <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
 8003cde:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003ce2:	f240 3a1a 	movw	sl, #794	; 0x31a
 8003ce6:	e005      	b.n	8003cf4 <HAL_SD_WriteBlocks+0x90>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ce8:	f7fe fc94 	bl	8002614 <HAL_GetTick>
 8003cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cee:	1b40      	subs	r0, r0, r5
 8003cf0:	4298      	cmp	r0, r3
 8003cf2:	d21e      	bcs.n	8003d32 <HAL_SD_WriteBlocks+0xce>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cf8:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003cfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003cfe:	d156      	bne.n	8003dae <HAL_SD_WriteBlocks+0x14a>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003d00:	045a      	lsls	r2, r3, #17
 8003d02:	d5f1      	bpl.n	8003ce8 <HAL_SD_WriteBlocks+0x84>
 8003d04:	f1bb 0f00 	cmp.w	fp, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_SD_WriteBlocks+0x84>
 8003d0a:	f104 0920 	add.w	r9, r4, #32
 8003d0e:	e000      	b.n	8003d12 <HAL_SD_WriteBlocks+0xae>
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d10:	6838      	ldr	r0, [r7, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003d12:	f854 3b04 	ldr.w	r3, [r4], #4
 8003d16:	9301      	str	r3, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d18:	a901      	add	r1, sp, #4
 8003d1a:	f001 f94d 	bl	8004fb8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d1e:	454c      	cmp	r4, r9
 8003d20:	d1f6      	bne.n	8003d10 <HAL_SD_WriteBlocks+0xac>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d22:	f7fe fc77 	bl	8002614 <HAL_GetTick>
 8003d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d28:	1b40      	subs	r0, r0, r5
 8003d2a:	4298      	cmp	r0, r3
          dataremaining--;
 8003d2c:	f1ab 0b20 	sub.w	fp, fp, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d30:	d3e0      	bcc.n	8003cf4 <HAL_SD_WriteBlocks+0x90>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <HAL_SD_WriteBlocks+0x1d0>)
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8003d3c:	f04f 0803 	mov.w	r8, #3
        hsd->State = HAL_SD_STATE_READY;
 8003d40:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4640      	mov	r0, r8
        hsd->State = HAL_SD_STATE_READY;
 8003d46:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
}
 8003d4c:	b009      	add	sp, #36	; 0x24
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    return HAL_ERROR;
 8003d58:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003d5e:	4640      	mov	r0, r8
 8003d60:	b009      	add	sp, #36	; 0x24
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003d66:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d68:	6838      	ldr	r0, [r7, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d6c:	f001 fb2a 	bl	80053c4 <SDMMC_CmdWriteSingleBlock>
 8003d70:	e7b3      	b.n	8003cda <HAL_SD_WriteBlocks+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    return HAL_ERROR;
 8003d74:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8003d7c:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003d80:	b009      	add	sp, #36	; 0x24
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d88:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
}
 8003d90:	b009      	add	sp, #36	; 0x24
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <HAL_SD_WriteBlocks+0x1d0>)
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d9e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8003da0:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8003da2:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8003da4:	63b8      	str	r0, [r7, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003da6:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
          return HAL_ERROR;
 8003dac:	e7d7      	b.n	8003d5e <HAL_SD_WriteBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003dae:	05db      	lsls	r3, r3, #23
 8003db0:	d509      	bpl.n	8003dc6 <HAL_SD_WriteBlocks+0x162>
 8003db2:	2e01      	cmp	r6, #1
 8003db4:	d907      	bls.n	8003dc6 <HAL_SD_WriteBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d004      	beq.n	8003dc6 <HAL_SD_WriteBlocks+0x162>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dbc:	f001 fc40 	bl	8005640 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d1e8      	bne.n	8003d96 <HAL_SD_WriteBlocks+0x132>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dc8:	f013 0308 	ands.w	r3, r3, #8
 8003dcc:	d112      	bne.n	8003df4 <HAL_SD_WriteBlocks+0x190>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003dce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003dd0:	f012 0202 	ands.w	r2, r2, #2
 8003dd4:	d11a      	bne.n	8003e0c <HAL_SD_WriteBlocks+0x1a8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003dd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dd8:	f013 0310 	ands.w	r3, r3, #16
 8003ddc:	d021      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x1be>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_SD_WriteBlocks+0x1d0>)
 8003de0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003de4:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dec:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003df0:	633a      	str	r2, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003df2:	e7b4      	b.n	8003d5e <HAL_SD_WriteBlocks+0xfa>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_SD_WriteBlocks+0x1d0>)
 8003df6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dfa:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
      hsd->Context = SD_CONTEXT_NONE;
 8003e00:	2200      	movs	r2, #0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e04:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e08:	633a      	str	r2, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003e0a:	e7a8      	b.n	8003d5e <HAL_SD_WriteBlocks+0xfa>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_SD_WriteBlocks+0x1d0>)
 8003e0e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e12:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e14:	f042 0202 	orr.w	r2, r2, #2
 8003e18:	63ba      	str	r2, [r7, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e1a:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e1e:	633b      	str	r3, [r7, #48]	; 0x30
      return HAL_ERROR;
 8003e20:	e79d      	b.n	8003d5e <HAL_SD_WriteBlocks+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e22:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8003e26:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e28:	6381      	str	r1, [r0, #56]	; 0x38
    return HAL_OK;
 8003e2a:	4698      	mov	r8, r3
    hsd->State = HAL_SD_STATE_READY;
 8003e2c:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
    return HAL_OK;
 8003e30:	e795      	b.n	8003d5e <HAL_SD_WriteBlocks+0xfa>
 8003e32:	bf00      	nop
 8003e34:	004005ff 	.word	0x004005ff

08003e38 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e38:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8003e3a:	b410      	push	{r4}
 8003e3c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e3e:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e40:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e44:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e46:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e48:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e4c:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e50:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e52:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e54:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e58:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e5a:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e5c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e60:	0d14      	lsrs	r4, r2, #20
 8003e62:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e64:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8003e68:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e6a:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8003e6e:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003e70:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8003e74:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e76:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8003e7a:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003e7c:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e7e:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8003e82:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003e84:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003e86:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d16f      	bne.n	8003f6c <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e8c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003e8e:	f640 74fc 	movw	r4, #4092	; 0xffc
 8003e92:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 8003e96:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e9a:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e9e:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ea0:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003ea2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003ea6:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8003eaa:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003eac:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003eae:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003eb2:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003eb6:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003eb8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003eba:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ebc:	7e0c      	ldrb	r4, [r1, #24]
 8003ebe:	f004 0407 	and.w	r4, r4, #7
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003ec2:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ec4:	3402      	adds	r4, #2
 8003ec6:	fa02 f404 	lsl.w	r4, r2, r4
 8003eca:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ecc:	7a0a      	ldrb	r2, [r1, #8]
 8003ece:	f002 0c0f 	and.w	ip, r2, #15
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	fa02 f20c 	lsl.w	r2, r2, ip
 8003ed8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003eda:	0a52      	lsrs	r2, r2, #9
 8003edc:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
 8003ee0:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003ee4:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ee8:	f3c0 3480 	ubfx	r4, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003eec:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ef0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ef4:	764c      	strb	r4, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003ef6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ef8:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003efe:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f02:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f04:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f06:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f0a:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f0e:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 8003f10:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f12:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f14:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f18:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f1c:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 8003f20:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f24:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f28:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f2c:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f30:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f34:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f38:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f3c:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f40:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f44:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f48:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f4c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f50:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f54:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f58:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 8003f5c:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f5e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003f62:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8003f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f6a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f6c:	2801      	cmp	r0, #1
 8003f6e:	d110      	bne.n	8003f92 <HAL_SD_GetCardCSD+0x15a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003f70:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003f72:	0412      	lsls	r2, r2, #16
 8003f74:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8003f78:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8003f7c:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f7e:	690a      	ldr	r2, [r1, #16]
 8003f80:	3201      	adds	r2, #1
    hsd->SdCard.BlockSize = 512U;
 8003f82:	f44f 7400 	mov.w	r4, #512	; 0x200
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f86:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 8003f88:	e9c3 4216 	strd	r4, r2, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003f8e:	661c      	str	r4, [r3, #96]	; 0x60
 8003f90:	e7aa      	b.n	8003ee8 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4906      	ldr	r1, [pc, #24]	; (8003fb0 <HAL_SD_GetCardCSD+0x178>)
 8003f96:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f9a:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fa2:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fa6:	4608      	mov	r0, r1
}
 8003fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	004005ff 	.word	0x004005ff

08003fb4 <HAL_SD_InitCard>:
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003fb6:	2200      	movs	r2, #0
{
 8003fb8:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003fba:	2500      	movs	r5, #0
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	2376      	movs	r3, #118	; 0x76
 8003fc0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003fc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  status = SDIO_Init(hsd->Instance, Init);
 8003fc8:	ab09      	add	r3, sp, #36	; 0x24
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003fca:	e9cd 4506 	strd	r4, r5, [sp, #24]
{
 8003fce:	4605      	mov	r5, r0
  status = SDIO_Init(hsd->Instance, Init);
 8003fd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003fd8:	ab06      	add	r3, sp, #24
 8003fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fdc:	6828      	ldr	r0, [r5, #0]
 8003fde:	f000 ffcb 	bl	8004f78 <SDIO_Init>
  if(status != HAL_OK)
 8003fe2:	b118      	cbz	r0, 8003fec <HAL_SD_InitCard+0x38>
    return HAL_ERROR;
 8003fe4:	2601      	movs	r6, #1
}
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	b019      	add	sp, #100	; 0x64
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 8003fec:	4e7c      	ldr	r6, [pc, #496]	; (80041e0 <HAL_SD_InitCard+0x22c>)
 8003fee:	4604      	mov	r4, r0
  __HAL_SD_ENABLE(hsd);
 8003ff0:	2701      	movs	r7, #1
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ff2:	6828      	ldr	r0, [r5, #0]
  __HAL_SD_DISABLE(hsd);
 8003ff4:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ff8:	f000 ffe4 	bl	8004fc4 <SDIO_PowerState_ON>
  HAL_Delay(2);
 8003ffc:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8003ffe:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
  HAL_Delay(2);
 8004002:	f7fe fb0d 	bl	8002620 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004006:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t count = 0U;
 8004008:	9405      	str	r4, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800400a:	f001 fc5f 	bl	80058cc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	4604      	mov	r4, r0
 8004010:	b958      	cbnz	r0, 800402a <HAL_SD_InitCard+0x76>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004012:	6828      	ldr	r0, [r5, #0]
 8004014:	f001 fc80 	bl	8005918 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004018:	b980      	cbnz	r0, 800403c <HAL_SD_InitCard+0x88>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800401a:	64af      	str	r7, [r5, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800401c:	6828      	ldr	r0, [r5, #0]
 800401e:	2100      	movs	r1, #0
 8004020:	f001 fcb6 	bl	8005990 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004024:	b1a0      	cbz	r0, 8004050 <HAL_SD_InitCard+0x9c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004026:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800402a:	2601      	movs	r6, #1
 800402c:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004030:	6bab      	ldr	r3, [r5, #56]	; 0x38
}
 8004032:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8004034:	431c      	orrs	r4, r3
 8004036:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8004038:	b019      	add	sp, #100	; 0x64
 800403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800403c:	6828      	ldr	r0, [r5, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800403e:	64ac      	str	r4, [r5, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004040:	f001 fc44 	bl	80058cc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004044:	2800      	cmp	r0, #0
 8004046:	f040 80c6 	bne.w	80041d6 <HAL_SD_InitCard+0x222>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800404a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800404c:	2b01      	cmp	r3, #1
 800404e:	d0e5      	beq.n	800401c <HAL_SD_InitCard+0x68>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004050:	9a05      	ldr	r2, [sp, #20]
 8004052:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004056:	429a      	cmp	r2, r3
 8004058:	d81f      	bhi.n	800409a <HAL_SD_InitCard+0xe6>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800405a:	4e62      	ldr	r6, [pc, #392]	; (80041e4 <HAL_SD_InitCard+0x230>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800405c:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8004060:	e012      	b.n	8004088 <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004062:	6828      	ldr	r0, [r5, #0]
 8004064:	f001 fd34 	bl	8005ad0 <SDMMC_CmdAppOperCommand>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004068:	4621      	mov	r1, r4
    if(errorstate != HAL_SD_ERROR_NONE)
 800406a:	2800      	cmp	r0, #0
 800406c:	d1db      	bne.n	8004026 <HAL_SD_InitCard+0x72>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800406e:	6828      	ldr	r0, [r5, #0]
 8004070:	f000 ffb0 	bl	8004fd4 <SDIO_GetResponse>
    count++;
 8004074:	9b05      	ldr	r3, [sp, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800407a:	9b05      	ldr	r3, [sp, #20]
 800407c:	42bb      	cmp	r3, r7
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800407e:	4604      	mov	r4, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004080:	ea4f 72d0 	mov.w	r2, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004084:	d809      	bhi.n	800409a <HAL_SD_InitCard+0xe6>
 8004086:	b942      	cbnz	r2, 800409a <HAL_SD_InitCard+0xe6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004088:	2100      	movs	r1, #0
 800408a:	6828      	ldr	r0, [r5, #0]
 800408c:	f001 fc80 	bl	8005990 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004090:	4631      	mov	r1, r6
    if(errorstate != HAL_SD_ERROR_NONE)
 8004092:	4604      	mov	r4, r0
 8004094:	2800      	cmp	r0, #0
 8004096:	d0e4      	beq.n	8004062 <HAL_SD_InitCard+0xae>
 8004098:	e7c7      	b.n	800402a <HAL_SD_InitCard+0x76>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800409a:	9a05      	ldr	r2, [sp, #20]
 800409c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80040a0:	429a      	cmp	r2, r3
 80040a2:	f200 809a 	bhi.w	80041da <HAL_SD_InitCard+0x226>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040a6:	f3c4 7480 	ubfx	r4, r4, #30, #1
  uint16_t sd_rca = 1U;
 80040aa:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80040ac:	6828      	ldr	r0, [r5, #0]
 80040ae:	646c      	str	r4, [r5, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80040b0:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80040b4:	f000 ff8a 	bl	8004fcc <SDIO_GetPowerState>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f000 8086 	beq.w	80041ca <HAL_SD_InitCard+0x216>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80040be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d131      	bne.n	8004128 <HAL_SD_InitCard+0x174>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80040c4:	2104      	movs	r1, #4
 80040c6:	6828      	ldr	r0, [r5, #0]
 80040c8:	f000 ff84 	bl	8004fd4 <SDIO_GetResponse>
 80040cc:	0d00      	lsrs	r0, r0, #20
 80040ce:	64e8      	str	r0, [r5, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80040d0:	a90d      	add	r1, sp, #52	; 0x34
 80040d2:	4628      	mov	r0, r5
 80040d4:	f7ff feb0 	bl	8003e38 <HAL_SD_GetCardCSD>
 80040d8:	4606      	mov	r6, r0
 80040da:	2800      	cmp	r0, #0
 80040dc:	d178      	bne.n	80041d0 <HAL_SD_InitCard+0x21c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80040de:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80040e0:	6828      	ldr	r0, [r5, #0]
 80040e2:	0412      	lsls	r2, r2, #16
 80040e4:	4633      	mov	r3, r6
 80040e6:	f001 fb51 	bl	800578c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ea:	bb08      	cbnz	r0, 8004130 <HAL_SD_InitCard+0x17c>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80040ec:	462a      	mov	r2, r5
 80040ee:	1d2b      	adds	r3, r5, #4
 80040f0:	f852 4b10 	ldr.w	r4, [r2], #16
 80040f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80040f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80040fa:	4620      	mov	r0, r4
 80040fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040fe:	f000 ff3b 	bl	8004f78 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004102:	6828      	ldr	r0, [r5, #0]
 8004104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004108:	f000 ff7e 	bl	8005008 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800410c:	2800      	cmp	r0, #0
 800410e:	f43f af6a 	beq.w	8003fe6 <HAL_SD_InitCard+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004112:	682b      	ldr	r3, [r5, #0]
 8004114:	4a34      	ldr	r2, [pc, #208]	; (80041e8 <HAL_SD_InitCard+0x234>)
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004118:	6baa      	ldr	r2, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800411a:	2301      	movs	r3, #1
    hsd->ErrorCode |= errorstate;
 800411c:	4310      	orrs	r0, r2
 800411e:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8004120:	461e      	mov	r6, r3
    hsd->State = HAL_SD_STATE_READY;
 8004122:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8004126:	e75e      	b.n	8003fe6 <HAL_SD_InitCard+0x32>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004128:	6828      	ldr	r0, [r5, #0]
 800412a:	f001 fe4b 	bl	8005dc4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800412e:	b140      	cbz	r0, 8004142 <HAL_SD_InitCard+0x18e>
    hsd->State = HAL_SD_STATE_READY;
 8004130:	2601      	movs	r6, #1
 8004132:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004136:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004138:	4318      	orrs	r0, r3
 800413a:	63a8      	str	r0, [r5, #56]	; 0x38
}
 800413c:	4630      	mov	r0, r6
 800413e:	b019      	add	sp, #100	; 0x64
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004142:	4601      	mov	r1, r0
 8004144:	6828      	ldr	r0, [r5, #0]
 8004146:	f000 ff45 	bl	8004fd4 <SDIO_GetResponse>
 800414a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800414c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800414e:	676b      	str	r3, [r5, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004150:	6828      	ldr	r0, [r5, #0]
 8004152:	f000 ff3f 	bl	8004fd4 <SDIO_GetResponse>
 8004156:	4603      	mov	r3, r0
 8004158:	67ab      	str	r3, [r5, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800415a:	2108      	movs	r1, #8
 800415c:	6828      	ldr	r0, [r5, #0]
 800415e:	f000 ff39 	bl	8004fd4 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004162:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004164:	67e8      	str	r0, [r5, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004166:	6828      	ldr	r0, [r5, #0]
 8004168:	f000 ff34 	bl	8004fd4 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800416c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800416e:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004172:	2b03      	cmp	r3, #3
 8004174:	d0a6      	beq.n	80040c4 <HAL_SD_InitCard+0x110>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004176:	6828      	ldr	r0, [r5, #0]
 8004178:	f10d 0112 	add.w	r1, sp, #18
 800417c:	f001 fe96 	bl	8005eac <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004180:	2800      	cmp	r0, #0
 8004182:	d1d5      	bne.n	8004130 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004184:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004186:	2b03      	cmp	r3, #3
 8004188:	d09c      	beq.n	80040c4 <HAL_SD_InitCard+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 800418a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800418e:	6529      	str	r1, [r5, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004190:	6828      	ldr	r0, [r5, #0]
 8004192:	0409      	lsls	r1, r1, #16
 8004194:	f001 fe4e 	bl	8005e34 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004198:	2800      	cmp	r0, #0
 800419a:	d1c9      	bne.n	8004130 <HAL_SD_InitCard+0x17c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800419c:	4601      	mov	r1, r0
 800419e:	6828      	ldr	r0, [r5, #0]
 80041a0:	f000 ff18 	bl	8004fd4 <SDIO_GetResponse>
 80041a4:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80041a6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041a8:	666b      	str	r3, [r5, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80041aa:	6828      	ldr	r0, [r5, #0]
 80041ac:	f000 ff12 	bl	8004fd4 <SDIO_GetResponse>
 80041b0:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041b2:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80041b4:	66ab      	str	r3, [r5, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041b6:	6828      	ldr	r0, [r5, #0]
 80041b8:	f000 ff0c 	bl	8004fd4 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80041bc:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041be:	66e8      	str	r0, [r5, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80041c0:	6828      	ldr	r0, [r5, #0]
 80041c2:	f000 ff07 	bl	8004fd4 <SDIO_GetResponse>
 80041c6:	6728      	str	r0, [r5, #112]	; 0x70
 80041c8:	e77c      	b.n	80040c4 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80041ce:	e7af      	b.n	8004130 <HAL_SD_InitCard+0x17c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80041d4:	e7ac      	b.n	8004130 <HAL_SD_InitCard+0x17c>
 80041d6:	4604      	mov	r4, r0
 80041d8:	e727      	b.n	800402a <HAL_SD_InitCard+0x76>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041da:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80041de:	e724      	b.n	800402a <HAL_SD_InitCard+0x76>
 80041e0:	42258000 	.word	0x42258000
 80041e4:	c1100000 	.word	0xc1100000
 80041e8:	004005ff 	.word	0x004005ff

080041ec <HAL_SD_Init>:
  if(hsd == NULL)
 80041ec:	b1c8      	cbz	r0, 8004222 <HAL_SD_Init+0x36>
{
 80041ee:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 80041f0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80041f4:	4604      	mov	r4, r0
 80041f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041fa:	b173      	cbz	r3, 800421a <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 80041fc:	2303      	movs	r3, #3
 80041fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff fed6 	bl	8003fb4 <HAL_SD_InitCard>
 8004208:	b928      	cbnz	r0, 8004216 <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 800420a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800420c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800420e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004210:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004214:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004216:	2001      	movs	r0, #1
}
 8004218:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800421a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800421c:	f7fd ff2e 	bl	800207c <HAL_SD_MspInit>
 8004220:	e7ec      	b.n	80041fc <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8004222:	2001      	movs	r0, #1
}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop

08004228 <HAL_SD_GetCardInfo>:
{
 8004228:	b4f0      	push	{r4, r5, r6, r7}
 800422a:	e9d0 c712 	ldrd	ip, r7, [r0, #72]	; 0x48
 800422e:	e9d0 6514 	ldrd	r6, r5, [r0, #80]	; 0x50
 8004232:	e9d0 4216 	ldrd	r4, r2, [r0, #88]	; 0x58
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004236:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004238:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800423a:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800423e:	e9c1 0c00 	strd	r0, ip, [r1]
 8004242:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 8004246:	2000      	movs	r0, #0
 8004248:	bcf0      	pop	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800424a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800424e:	4770      	bx	lr

08004250 <HAL_SD_ConfigWideBusOperation>:
{
 8004250:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004252:	6c43      	ldr	r3, [r0, #68]	; 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 8004254:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004256:	4293      	cmp	r3, r2
{
 8004258:	b08a      	sub	sp, #40	; 0x28
 800425a:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800425c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
{
 8004260:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004262:	d024      	beq.n	80042ae <HAL_SD_ConfigWideBusOperation+0x5e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004264:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004268:	d021      	beq.n	80042ae <HAL_SD_ConfigWideBusOperation+0x5e>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800426a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800426e:	d05d      	beq.n	800432c <HAL_SD_ConfigWideBusOperation+0xdc>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004270:	2900      	cmp	r1, #0
 8004272:	d03c      	beq.n	80042ee <HAL_SD_ConfigWideBusOperation+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004274:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800427a:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800427c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800427e:	b9ed      	cbnz	r5, 80042bc <HAL_SD_ConfigWideBusOperation+0x6c>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004280:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004284:	e9cd 6207 	strd	r6, r2, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004288:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800428a:	ab0a      	add	r3, sp, #40	; 0x28
 800428c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	9304      	str	r3, [sp, #16]
    (void)SDIO_Init(hsd->Instance, Init);
 8004294:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004298:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800429c:	e9cd 1205 	strd	r1, r2, [sp, #20]
    (void)SDIO_Init(hsd->Instance, Init);
 80042a0:	ab04      	add	r3, sp, #16
 80042a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	f000 fe67 	bl	8004f78 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042aa:	6820      	ldr	r0, [r4, #0]
 80042ac:	e00d      	b.n	80042ca <HAL_SD_ConfigWideBusOperation+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b4:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80042b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d0e1      	beq.n	8004280 <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_SD_ConfigWideBusOperation+0x128>)
 80042c0:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042c2:	2301      	movs	r3, #1
    status = HAL_ERROR;
 80042c4:	461d      	mov	r5, r3
    hsd->State = HAL_SD_STATE_READY;
 80042c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042ce:	f000 fe9b 	bl	8005008 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d2:	b130      	cbz	r0, 80042e2 <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <HAL_SD_ConfigWideBusOperation+0x128>)
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042dc:	4318      	orrs	r0, r3
    status = HAL_ERROR;
 80042de:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 80042e0:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80042e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80042ea:	b00a      	add	sp, #40	; 0x28
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042f2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80042f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042f8:	f000 fe6c 	bl	8004fd4 <SDIO_GetResponse>
 80042fc:	0182      	lsls	r2, r0, #6
 80042fe:	d434      	bmi.n	800436a <HAL_SD_ConfigWideBusOperation+0x11a>
  errorstate = SD_FindSCR(hsd, scr);
 8004300:	a904      	add	r1, sp, #16
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fb12 	bl	800392c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004308:	b960      	cbnz	r0, 8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800430a:	9b05      	ldr	r3, [sp, #20]
 800430c:	03db      	lsls	r3, r3, #15
 800430e:	d52f      	bpl.n	8004370 <HAL_SD_ConfigWideBusOperation+0x120>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004310:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	0409      	lsls	r1, r1, #16
 8004316:	f001 fb3b 	bl	8005990 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800431a:	b918      	cbnz	r0, 8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800431c:	4601      	mov	r1, r0
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	f001 fc0e 	bl	8005b40 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004326:	4318      	orrs	r0, r3
 8004328:	63a0      	str	r0, [r4, #56]	; 0x38
 800432a:	e7c4      	b.n	80042b6 <HAL_SD_ConfigWideBusOperation+0x66>
  uint32_t scr[2U] = {0U, 0U};
 800432c:	2200      	movs	r2, #0
 800432e:	2300      	movs	r3, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004330:	6800      	ldr	r0, [r0, #0]
 8004332:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0U, 0U};
 8004334:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004338:	f000 fe4c 	bl	8004fd4 <SDIO_GetResponse>
 800433c:	0180      	lsls	r0, r0, #6
 800433e:	d414      	bmi.n	800436a <HAL_SD_ConfigWideBusOperation+0x11a>
  errorstate = SD_FindSCR(hsd, scr);
 8004340:	a904      	add	r1, sp, #16
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff faf2 	bl	800392c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004348:	2800      	cmp	r0, #0
 800434a:	d1eb      	bne.n	8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800434c:	9b05      	ldr	r3, [sp, #20]
 800434e:	0359      	lsls	r1, r3, #13
 8004350:	d50e      	bpl.n	8004370 <HAL_SD_ConfigWideBusOperation+0x120>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004352:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	0409      	lsls	r1, r1, #16
 8004358:	f001 fb1a 	bl	8005990 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800435c:	2800      	cmp	r0, #0
 800435e:	d1e1      	bne.n	8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	2102      	movs	r1, #2
 8004364:	f001 fbec 	bl	8005b40 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004368:	e7dc      	b.n	8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800436a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800436e:	e7d9      	b.n	8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004370:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004374:	e7d6      	b.n	8004324 <HAL_SD_ConfigWideBusOperation+0xd4>
 8004376:	bf00      	nop
 8004378:	004005ff 	.word	0x004005ff

0800437c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800437c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800437e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004380:	0409      	lsls	r1, r1, #16
{
 8004382:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004384:	6800      	ldr	r0, [r0, #0]
 8004386:	f001 fde7 	bl	8005f58 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800438a:	4601      	mov	r1, r0
 800438c:	b120      	cbz	r0, 8004398 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800438e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004390:	4319      	orrs	r1, r3
 8004392:	2000      	movs	r0, #0
 8004394:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8004396:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	f000 fe1b 	bl	8004fd4 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800439e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80043a2:	bd10      	pop	{r4, pc}

080043a4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f000 8087 	beq.w	80044b8 <HAL_TIM_Base_Init+0x114>
{
 80043aa:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043b0:	4604      	mov	r4, r0
 80043b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d079      	beq.n	80044ae <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043bc:	493f      	ldr	r1, [pc, #252]	; (80044bc <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80043c6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	d05d      	beq.n	8004486 <HAL_TIM_Base_Init+0xe2>
 80043ca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80043ce:	d031      	beq.n	8004434 <HAL_TIM_Base_Init+0x90>
 80043d0:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80043d4:	428a      	cmp	r2, r1
 80043d6:	d02d      	beq.n	8004434 <HAL_TIM_Base_Init+0x90>
 80043d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043dc:	428a      	cmp	r2, r1
 80043de:	d029      	beq.n	8004434 <HAL_TIM_Base_Init+0x90>
 80043e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043e4:	428a      	cmp	r2, r1
 80043e6:	d025      	beq.n	8004434 <HAL_TIM_Base_Init+0x90>
 80043e8:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d04a      	beq.n	8004486 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80043f4:	428a      	cmp	r2, r1
 80043f6:	d021      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
 80043f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043fc:	428a      	cmp	r2, r1
 80043fe:	d01d      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
 8004400:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004404:	428a      	cmp	r2, r1
 8004406:	d019      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
 8004408:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800440c:	428a      	cmp	r2, r1
 800440e:	d015      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
 8004410:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004414:	428a      	cmp	r2, r1
 8004416:	d011      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
 8004418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800441c:	428a      	cmp	r2, r1
 800441e:	d00d      	beq.n	800443c <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004422:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004428:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800442a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004430:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004432:	e010      	b.n	8004456 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8004434:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800443a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800443e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004444:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800444c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800444e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004450:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004452:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004454:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004456:	2301      	movs	r3, #1
 8004458:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004462:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800446a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004476:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800447a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800447e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004482:	2000      	movs	r0, #0
}
 8004484:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004486:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004488:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800448e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004494:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004496:	69a1      	ldr	r1, [r4, #24]
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800449e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	68e3      	ldr	r3, [r4, #12]
 80044a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	6963      	ldr	r3, [r4, #20]
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	e7d3      	b.n	8004456 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80044ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044b2:	f7fd ff3f 	bl	8002334 <HAL_TIM_Base_MspInit>
 80044b6:	e780      	b.n	80043ba <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80044b8:	2001      	movs	r0, #1
}
 80044ba:	4770      	bx	lr
 80044bc:	40010000 	.word	0x40010000

080044c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80044c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d12f      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	4919      	ldr	r1, [pc, #100]	; (8004530 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	2202      	movs	r2, #2
 80044ce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	d019      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d016      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <HAL_TIM_Base_Start_IT+0x74>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 80044ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 80044f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 80044fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 8004502:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x52>
 800450a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800450e:	4293      	cmp	r3, r2
 8004510:	d104      	bne.n	800451c <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	2a06      	cmp	r2, #6
 800451a:	d007      	beq.n	800452c <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004522:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4770      	bx	lr
    return HAL_ERROR;
 8004528:	2001      	movs	r0, #1
 800452a:	4770      	bx	lr
  return HAL_OK;
 800452c:	2000      	movs	r0, #0
}
 800452e:	4770      	bx	lr
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400

08004538 <HAL_TIM_IC_MspInit>:
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800453c:	2800      	cmp	r0, #0
 800453e:	f000 8087 	beq.w	8004650 <HAL_TIM_IC_Init+0x114>
{
 8004542:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004544:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004548:	4604      	mov	r4, r0
 800454a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800454e:	2b00      	cmp	r3, #0
 8004550:	d079      	beq.n	8004646 <HAL_TIM_IC_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004552:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	493f      	ldr	r1, [pc, #252]	; (8004654 <HAL_TIM_IC_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800455e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	d05d      	beq.n	800461e <HAL_TIM_IC_Init+0xe2>
 8004562:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004566:	d031      	beq.n	80045cc <HAL_TIM_IC_Init+0x90>
 8004568:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800456c:	428a      	cmp	r2, r1
 800456e:	d02d      	beq.n	80045cc <HAL_TIM_IC_Init+0x90>
 8004570:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004574:	428a      	cmp	r2, r1
 8004576:	d029      	beq.n	80045cc <HAL_TIM_IC_Init+0x90>
 8004578:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800457c:	428a      	cmp	r2, r1
 800457e:	d025      	beq.n	80045cc <HAL_TIM_IC_Init+0x90>
 8004580:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004584:	428a      	cmp	r2, r1
 8004586:	d04a      	beq.n	800461e <HAL_TIM_IC_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004588:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800458c:	428a      	cmp	r2, r1
 800458e:	d021      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
 8004590:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004594:	428a      	cmp	r2, r1
 8004596:	d01d      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
 8004598:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800459c:	428a      	cmp	r2, r1
 800459e:	d019      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
 80045a0:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d015      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
 80045a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d011      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
 80045b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80045b4:	428a      	cmp	r2, r1
 80045b6:	d00d      	beq.n	80045d4 <HAL_TIM_IC_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ba:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80045c2:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80045c4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045c8:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ca:	e010      	b.n	80045ee <HAL_TIM_IC_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80045cc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045d2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045dc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80045e6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80045e8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ea:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045ec:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80045ee:	2301      	movs	r3, #1
 80045f0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80045fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80045fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004602:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800461a:	2000      	movs	r0, #0
}
 800461c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800461e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004620:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004626:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462e:	69a1      	ldr	r1, [r4, #24]
 8004630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004634:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004636:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004640:	6963      	ldr	r3, [r4, #20]
 8004642:	6313      	str	r3, [r2, #48]	; 0x30
 8004644:	e7d3      	b.n	80045ee <HAL_TIM_IC_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8004646:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800464a:	f7ff ff75 	bl	8004538 <HAL_TIM_IC_MspInit>
 800464e:	e780      	b.n	8004552 <HAL_TIM_IC_Init+0x16>
    return HAL_ERROR;
 8004650:	2001      	movs	r0, #1
}
 8004652:	4770      	bx	lr
 8004654:	40010000 	.word	0x40010000

08004658 <HAL_TIM_IC_Start_IT>:
{
 8004658:	4684      	mov	ip, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800465a:	2900      	cmp	r1, #0
 800465c:	d14e      	bne.n	80046fc <HAL_TIM_IC_Start_IT+0xa4>
 800465e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004662:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004666:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004668:	b2d3      	uxtb	r3, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800466a:	2801      	cmp	r0, #1
 800466c:	d102      	bne.n	8004674 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800466e:	2b01      	cmp	r3, #1
 8004670:	d002      	beq.n	8004678 <HAL_TIM_IC_Start_IT+0x20>
}
 8004672:	4770      	bx	lr
  switch (Channel)
 8004674:	2001      	movs	r0, #1
 8004676:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004678:	2900      	cmp	r1, #0
 800467a:	d14e      	bne.n	800471a <HAL_TIM_IC_Start_IT+0xc2>
 800467c:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800467e:	f8dc 3000 	ldr.w	r3, [ip]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	f88c 203e 	strb.w	r2, [ip, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004686:	f88c 2042 	strb.w	r2, [ip, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	f042 0202 	orr.w	r2, r2, #2
 8004690:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004692:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	2201      	movs	r2, #1
 8004696:	f001 011f 	and.w	r1, r1, #31
 800469a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800469e:	ea20 0001 	bic.w	r0, r0, r1
 80046a2:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046a4:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	4a41      	ldr	r2, [pc, #260]	; (80047ac <HAL_TIM_IC_Start_IT+0x154>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046a8:	4301      	orrs	r1, r0
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046aa:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ac:	6219      	str	r1, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d017      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046d6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IC_Start_IT+0x8e>
 80046de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d104      	bne.n	80046f0 <HAL_TIM_IC_Start_IT+0x98>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	2a06      	cmp	r2, #6
 80046ee:	d05b      	beq.n	80047a8 <HAL_TIM_IC_Start_IT+0x150>
      __HAL_TIM_ENABLE(htim);
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	2000      	movs	r0, #0
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80046fc:	2904      	cmp	r1, #4
 80046fe:	d04c      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x142>
 8004700:	2908      	cmp	r1, #8
 8004702:	bf0b      	itete	eq
 8004704:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8004708:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800470c:	f890 2044 	ldrbeq.w	r2, [r0, #68]	; 0x44
 8004710:	f890 2045 	ldrbne.w	r2, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004714:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004716:	b2d3      	uxtb	r3, r2
 8004718:	e7a7      	b.n	800466a <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	2904      	cmp	r1, #4
 800471c:	d02a      	beq.n	8004774 <HAL_TIM_IC_Start_IT+0x11c>
 800471e:	2908      	cmp	r1, #8
 8004720:	d01c      	beq.n	800475c <HAL_TIM_IC_Start_IT+0x104>
 8004722:	2202      	movs	r2, #2
  switch (Channel)
 8004724:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	f88c 2041 	strb.w	r2, [ip, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	f88c 2045 	strb.w	r2, [ip, #69]	; 0x45
  switch (Channel)
 800472e:	2b08      	cmp	r3, #8
 8004730:	d8a0      	bhi.n	8004674 <HAL_TIM_IC_Start_IT+0x1c>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_TIM_IC_Start_IT+0xe0>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800477f 	.word	0x0800477f
 800473c:	08004675 	.word	0x08004675
 8004740:	08004675 	.word	0x08004675
 8004744:	08004675 	.word	0x08004675
 8004748:	08004767 	.word	0x08004767
 800474c:	08004675 	.word	0x08004675
 8004750:	08004675 	.word	0x08004675
 8004754:	08004675 	.word	0x08004675
 8004758:	0800478d 	.word	0x0800478d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475c:	2302      	movs	r3, #2
 800475e:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004762:	f88c 3044 	strb.w	r3, [ip, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004766:	f8dc 3000 	ldr.w	r3, [ip]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	f042 0208 	orr.w	r2, r2, #8
 8004770:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004772:	e78e      	b.n	8004692 <HAL_TIM_IC_Start_IT+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004774:	2302      	movs	r3, #2
 8004776:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	f88c 3043 	strb.w	r3, [ip, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800477e:	f8dc 3000 	ldr.w	r3, [ip]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	f042 0204 	orr.w	r2, r2, #4
 8004788:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 800478a:	e782      	b.n	8004692 <HAL_TIM_IC_Start_IT+0x3a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800478c:	f8dc 3000 	ldr.w	r3, [ip]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	f042 0210 	orr.w	r2, r2, #16
 8004796:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004798:	e77b      	b.n	8004692 <HAL_TIM_IC_Start_IT+0x3a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800479a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800479e:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047a2:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047a4:	b2d3      	uxtb	r3, r2
 80047a6:	e760      	b.n	800466a <HAL_TIM_IC_Start_IT+0x12>
 80047a8:	2000      	movs	r0, #0
 80047aa:	e762      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x1a>
 80047ac:	40010000 	.word	0x40010000

080047b0 <HAL_TIM_IC_ConfigChannel>:
{
 80047b0:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80047b2:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80047b6:	2801      	cmp	r0, #1
 80047b8:	f000 80d4 	beq.w	8004964 <HAL_TIM_IC_ConfigChannel+0x1b4>
 80047bc:	2001      	movs	r0, #1
{
 80047be:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80047c0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80047c4:	b15a      	cbz	r2, 80047de <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 80047c6:	2a04      	cmp	r2, #4
 80047c8:	d054      	beq.n	8004874 <HAL_TIM_IC_ConfigChannel+0xc4>
  else if (Channel == TIM_CHANNEL_3)
 80047ca:	2a08      	cmp	r2, #8
 80047cc:	f000 80a2 	beq.w	8004914 <HAL_TIM_IC_ConfigChannel+0x164>
  else if (Channel == TIM_CHANNEL_4)
 80047d0:	2a0c      	cmp	r2, #12
 80047d2:	d079      	beq.n	80048c8 <HAL_TIM_IC_ConfigChannel+0x118>
  __HAL_UNLOCK(htim);
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80047da:	bcf0      	pop	{r4, r5, r6, r7}
 80047dc:	4770      	bx	lr
    TIM_TI1_SetConfig(htim->Instance,
 80047de:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047e0:	f8df c184 	ldr.w	ip, [pc, #388]	; 8004968 <HAL_TIM_IC_ConfigChannel+0x1b8>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e4:	6a16      	ldr	r6, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 80047e6:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e8:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 80047ec:	e9d1 4500 	ldrd	r4, r5, [r1]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047f0:	4562      	cmp	r2, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f4:	6997      	ldr	r7, [r2, #24]
  tmpccer = TIMx->CCER;
 80047f6:	6a16      	ldr	r6, [r2, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047f8:	d01d      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 80047fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80047fe:	d01a      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004800:	f5ac 4c7c 	sub.w	ip, ip, #64512	; 0xfc00
 8004804:	4562      	cmp	r2, ip
 8004806:	d016      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004808:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800480c:	4562      	cmp	r2, ip
 800480e:	d012      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004810:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8004814:	4562      	cmp	r2, ip
 8004816:	d00e      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004818:	f50c 4c78 	add.w	ip, ip, #63488	; 0xf800
 800481c:	4562      	cmp	r2, ip
 800481e:	d00a      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004820:	f50c 5c70 	add.w	ip, ip, #15360	; 0x3c00
 8004824:	4562      	cmp	r2, ip
 8004826:	d006      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
 8004828:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 800482c:	4562      	cmp	r2, ip
 800482e:	d002      	beq.n	8004836 <HAL_TIM_IC_ConfigChannel+0x86>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004830:	f047 0c01 	orr.w	ip, r7, #1
 8004834:	e003      	b.n	800483e <HAL_TIM_IC_ConfigChannel+0x8e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004836:	f027 0c03 	bic.w	ip, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800483a:	ea45 0c0c 	orr.w	ip, r5, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800483e:	0100      	lsls	r0, r0, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004840:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004844:	b2c0      	uxtb	r0, r0
 8004846:	ea40 000c 	orr.w	r0, r0, ip
  TIMx->CCMR1 = tmpccmr1;
 800484a:	6190      	str	r0, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484c:	f026 050a 	bic.w	r5, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004850:	f004 000a 	and.w	r0, r4, #10
 8004854:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004856:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004858:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800485a:	688c      	ldr	r4, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800485c:	f020 000c 	bic.w	r0, r0, #12
 8004860:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004862:	6991      	ldr	r1, [r2, #24]
 8004864:	4321      	orrs	r1, r4
 8004866:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2000      	movs	r0, #0
}
 8004870:	bcf0      	pop	{r4, r5, r6, r7}
 8004872:	4770      	bx	lr
    TIM_TI2_SetConfig(htim->Instance,
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487a:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800487c:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004882:	f000 04a0 	and.w	r4, r0, #160	; 0xa0
    TIM_TI2_SetConfig(htim->Instance,
 8004886:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800488a:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 800488c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800488e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004892:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004896:	0300      	lsls	r0, r0, #12
 8004898:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800489e:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80048a0:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80048a2:	6191      	str	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a4:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048a8:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer;
 80048aa:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80048ac:	6994      	ldr	r4, [r2, #24]
 80048ae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80048b2:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048b4:	6991      	ldr	r1, [r2, #24]
 80048b6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80048ba:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	bcf0      	pop	{r4, r5, r6, r7}
 80048c6:	4770      	bx	lr
    TIM_TI4_SetConfig(htim->Instance,
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	e9d1 0600 	ldrd	r0, r6, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ce:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048d0:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048d2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048d6:	f400 4420 	and.w	r4, r0, #40960	; 0xa000
    TIM_TI4_SetConfig(htim->Instance,
 80048da:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048dc:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048de:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 80048e0:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048e2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048e6:	0300      	lsls	r0, r0, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048e8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048ec:	b280      	uxth	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048ee:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048f2:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 80048f4:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 80048f6:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048f8:	f420 4020 	bic.w	r0, r0, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048fc:	4320      	orrs	r0, r4
  TIMx->CCER = tmpccer ;
 80048fe:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004900:	69d4      	ldr	r4, [r2, #28]
 8004902:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8004906:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004908:	69d1      	ldr	r1, [r2, #28]
 800490a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004910:	61d1      	str	r1, [r2, #28]
 8004912:	e75f      	b.n	80047d4 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	e9d1 0400 	ldrd	r0, r4, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491a:	6a16      	ldr	r6, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800491c:	0200      	lsls	r0, r0, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491e:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004922:	f400 6520 	and.w	r5, r0, #2560	; 0xa00
    TIM_TI3_SetConfig(htim->Instance,
 8004926:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004928:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800492a:	688e      	ldr	r6, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 800492c:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800492e:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr2 |= TIM_ICSelection;
 8004932:	4321      	orrs	r1, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004934:	0100      	lsls	r0, r0, #4
 8004936:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004938:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800493c:	4301      	orrs	r1, r0
  tmpccer = TIMx->CCER;
 800493e:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCMR2 = tmpccmr2;
 8004940:	61d1      	str	r1, [r2, #28]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004942:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004946:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004948:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800494a:	69d4      	ldr	r4, [r2, #28]
 800494c:	f024 040c 	bic.w	r4, r4, #12
 8004950:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004952:	69d1      	ldr	r1, [r2, #28]
 8004954:	4331      	orrs	r1, r6
 8004956:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800495e:	2000      	movs	r0, #0
}
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004964:	2002      	movs	r0, #2
}
 8004966:	4770      	bx	lr
 8004968:	40010000 	.word	0x40010000

0800496c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800496c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d075      	beq.n	8004a60 <HAL_TIM_ConfigClockSource+0xf4>
 8004974:	4602      	mov	r2, r0
{
 8004976:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800497a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004980:	2001      	movs	r0, #1
 8004982:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004986:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004990:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004992:	680b      	ldr	r3, [r1, #0]
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d065      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0xf8>
 8004998:	d824      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x78>
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d07c      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x12c>
 800499e:	d94b      	bls.n	8004a38 <HAL_TIM_ConfigClockSource+0xcc>
 80049a0:	2b50      	cmp	r3, #80	; 0x50
 80049a2:	d117      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a4:	6848      	ldr	r0, [r1, #4]
 80049a6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80049a8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	6a23      	ldr	r3, [r4, #32]
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80049bc:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80049c2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80049c4:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80049c6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049cc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80049d2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80049d6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049dc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80049e0:	bc30      	pop	{r4, r5}
 80049e2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d038      	beq.n	8004a5c <HAL_TIM_ConfigClockSource+0xf0>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	d110      	bne.n	8004a12 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80049f4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f6:	432b      	orrs	r3, r5
 80049f8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fa:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004a02:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a04:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a0e:	60a3      	str	r3, [r4, #8]
      break;
 8004a10:	e7e0      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004a12:	2b70      	cmp	r3, #112	; 0x70
 8004a14:	d1de      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a16:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004a1a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1c:	432b      	orrs	r3, r5
 8004a1e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a24:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004a28:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a2a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004a2c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8004a34:	60a3      	str	r3, [r4, #8]
      break;
 8004a36:	e7cd      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d002      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0xd6>
 8004a3c:	d90a      	bls.n	8004a54 <HAL_TIM_ConfigClockSource+0xe8>
 8004a3e:	2b30      	cmp	r3, #48	; 0x30
 8004a40:	d1c8      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004a42:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a44:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004a50:	60a3      	str	r3, [r4, #8]
}
 8004a52:	e7bf      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004a54:	f033 0110 	bics.w	r1, r3, #16
 8004a58:	d1bc      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
 8004a5a:	e7f2      	b.n	8004a42 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e7b9      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004a60:	2002      	movs	r0, #2
}
 8004a62:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a64:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a66:	68cb      	ldr	r3, [r1, #12]
 8004a68:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6a:	f020 0010 	bic.w	r0, r0, #16
 8004a6e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a70:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a72:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a76:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004a7a:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7c:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004a86:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004a88:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004a94:	60a3      	str	r3, [r4, #8]
}
 8004a96:	e79d      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a98:	6848      	ldr	r0, [r1, #4]
 8004a9a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a9c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9e:	6a23      	ldr	r3, [r4, #32]
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004ab0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004ab6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004aba:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004ac6:	60a3      	str	r3, [r4, #8]
}
 8004ac8:	e784      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x68>
 8004aca:	bf00      	nop

08004acc <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004acc:	290c      	cmp	r1, #12
 8004ace:	d808      	bhi.n	8004ae2 <HAL_TIM_ReadCapturedValue+0x16>
 8004ad0:	e8df f001 	tbb	[pc, r1]
 8004ad4:	07070712 	.word	0x07070712
 8004ad8:	0707070f 	.word	0x0707070f
 8004adc:	0707070c 	.word	0x0707070c
 8004ae0:	09          	.byte	0x09
 8004ae1:	00          	.byte	0x00
 8004ae2:	2000      	movs	r0, #0
}
 8004ae4:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8004aea:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8004af0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8004af6:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop

08004b00 <HAL_TIM_OC_DelayElapsedCallback>:
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_TIM_TriggerCallback>:
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b0c:	6803      	ldr	r3, [r0, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	0791      	lsls	r1, r2, #30
{
 8004b12:	b510      	push	{r4, lr}
 8004b14:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b16:	d502      	bpl.n	8004b1e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	0792      	lsls	r2, r2, #30
 8004b1c:	d45f      	bmi.n	8004bde <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	0750      	lsls	r0, r2, #29
 8004b22:	d502      	bpl.n	8004b2a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	0751      	lsls	r1, r2, #29
 8004b28:	d446      	bmi.n	8004bb8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	0712      	lsls	r2, r2, #28
 8004b2e:	d502      	bpl.n	8004b36 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	0710      	lsls	r0, r2, #28
 8004b34:	d42e      	bmi.n	8004b94 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	06d2      	lsls	r2, r2, #27
 8004b3a:	d502      	bpl.n	8004b42 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	06d0      	lsls	r0, r2, #27
 8004b40:	d418      	bmi.n	8004b74 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	07d1      	lsls	r1, r2, #31
 8004b46:	d502      	bpl.n	8004b4e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	07d2      	lsls	r2, r2, #31
 8004b4c:	d45d      	bmi.n	8004c0a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	0610      	lsls	r0, r2, #24
 8004b52:	d502      	bpl.n	8004b5a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	0611      	lsls	r1, r2, #24
 8004b58:	d45f      	bmi.n	8004c1a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	0652      	lsls	r2, r2, #25
 8004b5e:	d502      	bpl.n	8004b66 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	0650      	lsls	r0, r2, #25
 8004b64:	d461      	bmi.n	8004c2a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	0691      	lsls	r1, r2, #26
 8004b6a:	d502      	bpl.n	8004b72 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	0692      	lsls	r2, r2, #26
 8004b70:	d443      	bmi.n	8004bfa <HAL_TIM_IRQHandler+0xee>
}
 8004b72:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b74:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b78:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004b84:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b86:	d064      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b88:	f7fc fcf6 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b90:	7722      	strb	r2, [r4, #28]
 8004b92:	e7d6      	b.n	8004b42 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b94:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b98:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b9a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	d152      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	f7ff ffab 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7ff ffaa 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bb2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	7722      	strb	r2, [r4, #28]
 8004bb6:	e7be      	b.n	8004b36 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bbe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bca:	d13c      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bcc:	f7ff ff98 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff ff97 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	7722      	strb	r2, [r4, #28]
 8004bdc:	e7a5      	b.n	8004b2a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bde:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	079b      	lsls	r3, r3, #30
 8004bec:	d025      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	f7fc fcc3 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	7722      	strb	r2, [r4, #28]
 8004bf8:	e791      	b.n	8004b1e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004bfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c00:	611a      	str	r2, [r3, #16]
}
 8004c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004c06:	f000 b86b 	b.w	8004ce0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c0a:	f06f 0201 	mvn.w	r2, #1
 8004c0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7fc fdf9 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	e799      	b.n	8004b4e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 f85f 	bl	8004ce4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	e797      	b.n	8004b5a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff ff69 	bl	8004b08 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	e795      	b.n	8004b66 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	f7ff ff61 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff ff60 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c44:	e7d5      	b.n	8004bf2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	f7fc fc97 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 8004c4a:	e7c4      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4c:	f7fc fc94 	bl	8001578 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e7ae      	b.n	8004bb0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	f7ff ff55 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff ff54 	bl	8004b04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c5c:	e796      	b.n	8004b8c <HAL_TIM_IRQHandler+0x80>
 8004c5e:	bf00      	nop

08004c60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d037      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c68:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6a:	2202      	movs	r2, #2
{
 8004c6c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004c72:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c74:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004c76:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01a      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d017      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c8c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00f      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004c9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004ca4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004cac:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004cb4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cbc:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004cc6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004cce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004cd2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004cd4:	4618      	mov	r0, r3
}
 8004cd6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004cd8:	2002      	movs	r0, #2
}
 8004cda:	4770      	bx	lr
 8004cdc:	40010000 	.word	0x40010000

08004ce0 <HAL_TIMEx_CommutCallback>:
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <HAL_TIMEx_BreakCallback>:
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f000 808f 	beq.w	8004e0c <HAL_UART_Init+0x124>
{
 8004cee:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8081 	beq.w	8004e02 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d00:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d02:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d10:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d12:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d14:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d16:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004d1a:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d1c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d1e:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d20:	4302      	orrs	r2, r0
 8004d22:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004d24:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d26:	4302      	orrs	r2, r0
 8004d28:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004d2a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004d2e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d32:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d3c:	4934      	ldr	r1, [pc, #208]	; (8004e10 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d42:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d44:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d46:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d48:	d035      	beq.n	8004db6 <HAL_UART_Init+0xce>
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <HAL_UART_Init+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d032      	beq.n	8004db6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe fdb2 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d54:	69e3      	ldr	r3, [r4, #28]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	d032      	beq.n	8004dc2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	2119      	movs	r1, #25
 8004d60:	009a      	lsls	r2, r3, #2
 8004d62:	fba0 0101 	umull	r0, r1, r0, r1
 8004d66:	0f9b      	lsrs	r3, r3, #30
 8004d68:	f7fb ff6e 	bl	8000c48 <__aeabi_uldivmod>
 8004d6c:	492a      	ldr	r1, [pc, #168]	; (8004e18 <HAL_UART_Init+0x130>)
 8004d6e:	fba1 3200 	umull	r3, r2, r1, r0
 8004d72:	0952      	lsrs	r2, r2, #5
 8004d74:	2564      	movs	r5, #100	; 0x64
 8004d76:	fb05 0012 	mls	r0, r5, r2, r0
 8004d7a:	0100      	lsls	r0, r0, #4
 8004d7c:	3032      	adds	r0, #50	; 0x32
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	fba1 1000 	umull	r1, r0, r1, r0
 8004d84:	0112      	lsls	r2, r2, #4
 8004d86:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8004d8a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d9a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004d9c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004daa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004db2:	4628      	mov	r0, r5
}
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004db6:	f7fe fd8f 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dba:	69e3      	ldr	r3, [r4, #28]
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc0:	d1cc      	bne.n	8004d5c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	2119      	movs	r1, #25
 8004dc6:	1892      	adds	r2, r2, r2
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	fba0 0101 	umull	r0, r1, r0, r1
 8004dd2:	f7fb ff39 	bl	8000c48 <__aeabi_uldivmod>
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_UART_Init+0x130>)
 8004dd8:	fba3 2100 	umull	r2, r1, r3, r0
 8004ddc:	094d      	lsrs	r5, r1, #5
 8004dde:	2264      	movs	r2, #100	; 0x64
 8004de0:	fb02 0215 	mls	r2, r2, r5, r0
 8004de4:	00d2      	lsls	r2, r2, #3
 8004de6:	3232      	adds	r2, #50	; 0x32
 8004de8:	fba3 3202 	umull	r3, r2, r3, r2
 8004dec:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004df0:	0912      	lsrs	r2, r2, #4
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004df8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004dfc:	440a      	add	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	e7c4      	b.n	8004d8c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004e02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004e06:	f7fd fb27 	bl	8002458 <HAL_UART_MspInit>
 8004e0a:	e779      	b.n	8004d00 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004e0c:	2001      	movs	r0, #1
}
 8004e0e:	4770      	bx	lr
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40011400 	.word	0x40011400
 8004e18:	51eb851f 	.word	0x51eb851f

08004e1c <HAL_UART_Transmit>:
{
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004e22:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004e26:	2820      	cmp	r0, #32
 8004e28:	d177      	bne.n	8004f1a <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8004e2a:	4689      	mov	r9, r1
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d040      	beq.n	8004eb2 <HAL_UART_Transmit+0x96>
 8004e30:	4614      	mov	r4, r2
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d03d      	beq.n	8004eb2 <HAL_UART_Transmit+0x96>
 8004e36:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8004e38:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d06c      	beq.n	8004f1a <HAL_UART_Transmit+0xfe>
 8004e40:	2301      	movs	r3, #1
 8004e42:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e50:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004e54:	f7fd fbde 	bl	8002614 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e58:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8004e5a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8004e60:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8004e62:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	d05c      	beq.n	8004f20 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8004e66:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8004e68:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8004e6a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8004e6c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d07e      	beq.n	8004f72 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e74:	682c      	ldr	r4, [r5, #0]
 8004e76:	1c72      	adds	r2, r6, #1
 8004e78:	d11e      	bne.n	8004eb8 <HAL_UART_Transmit+0x9c>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	0613      	lsls	r3, r2, #24
 8004e7e:	d5fc      	bpl.n	8004e7a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8004e80:	f1b9 0f00 	cmp.w	r9, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e86:	f819 3b01 	ldrb.w	r3, [r9], #1
 8004e8a:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8004e8c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e94:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ec      	bne.n	8004e76 <HAL_UART_Transmit+0x5a>
 8004e9c:	1c71      	adds	r1, r6, #1
 8004e9e:	d145      	bne.n	8004f2c <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	065a      	lsls	r2, r3, #25
 8004ea4:	d5fc      	bpl.n	8004ea0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8004eac:	2000      	movs	r0, #0
}
 8004eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8004eb2:	2001      	movs	r0, #1
}
 8004eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	0618      	lsls	r0, r3, #24
 8004ebc:	d4e0      	bmi.n	8004e80 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ebe:	b12e      	cbz	r6, 8004ecc <HAL_UART_Transmit+0xb0>
 8004ec0:	f7fd fba8 	bl	8002614 <HAL_GetTick>
 8004ec4:	1bc0      	subs	r0, r0, r7
 8004ec6:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec8:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eca:	d2d4      	bcs.n	8004e76 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	f104 030c 	add.w	r3, r4, #12
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	f104 010c 	add.w	r1, r4, #12
 8004edc:	e841 3200 	strex	r2, r3, [r1]
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d1f3      	bne.n	8004ecc <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	f104 0314 	add.w	r3, r4, #20
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	f104 0114 	add.w	r1, r4, #20
 8004ef4:	e841 3200 	strex	r2, r3, [r1]
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	d1f3      	bne.n	8004ee4 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004efc:	2320      	movs	r3, #32
 8004efe:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004f02:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004f06:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004f0a:	2003      	movs	r0, #3
}
 8004f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f10:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	e7b7      	b.n	8004e8a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004f1a:	2002      	movs	r0, #2
}
 8004f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f20:	692b      	ldr	r3, [r5, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d19f      	bne.n	8004e66 <HAL_UART_Transmit+0x4a>
 8004f26:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8004f28:	4699      	mov	r9, r3
 8004f2a:	e79c      	b.n	8004e66 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	065b      	lsls	r3, r3, #25
 8004f30:	d4b9      	bmi.n	8004ea6 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f32:	b12e      	cbz	r6, 8004f40 <HAL_UART_Transmit+0x124>
 8004f34:	f7fd fb6e 	bl	8002614 <HAL_GetTick>
 8004f38:	1bc0      	subs	r0, r0, r7
 8004f3a:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3c:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f3e:	d2ad      	bcs.n	8004e9c <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f104 030c 	add.w	r3, r4, #12
 8004f44:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	f104 010c 	add.w	r1, r4, #12
 8004f50:	e841 3200 	strex	r2, r3, [r1]
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	d1f3      	bne.n	8004f40 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f104 0314 	add.w	r3, r4, #20
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	f104 0114 	add.w	r1, r4, #20
 8004f68:	e841 3200 	strex	r2, r3, [r1]
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d1f3      	bne.n	8004f58 <HAL_UART_Transmit+0x13c>
 8004f70:	e7c4      	b.n	8004efc <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f72:	682c      	ldr	r4, [r5, #0]
 8004f74:	e792      	b.n	8004e9c <HAL_UART_Transmit+0x80>
 8004f76:	bf00      	nop

08004f78 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b410      	push	{r4}
 8004f7c:	f10d 0c08 	add.w	ip, sp, #8
 8004f80:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004f84:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8004f86:	9904      	ldr	r1, [sp, #16]
  tmpreg |= (Init.ClockEdge           |\
 8004f88:	4313      	orrs	r3, r2
             Init.ClockBypass         |\
 8004f8a:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8004f8c:	e9dd 4105 	ldrd	r4, r1, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004f90:	6842      	ldr	r2, [r0, #4]
             Init.ClockPowerSave      |\
 8004f92:	4323      	orrs	r3, r4
             Init.BusWide             |\
 8004f94:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8004f96:	9907      	ldr	r1, [sp, #28]

  return HAL_OK;
}
 8004f98:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004f9c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8004fa0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004fa2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	6043      	str	r3, [r0, #4]
}
 8004faa:	b004      	add	sp, #16
 8004fac:	2000      	movs	r0, #0
 8004fae:	4770      	bx	lr

08004fb0 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004fb0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop

08004fc4 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8004fc8:	2000      	movs	r0, #0
 8004fca:	4770      	bx	lr

08004fcc <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004fcc:	6800      	ldr	r0, [r0, #0]
}
 8004fce:	f000 0003 	and.w	r0, r0, #3
 8004fd2:	4770      	bx	lr

08004fd4 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fd4:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8004fd6:	5840      	ldr	r0, [r0, r1]
}  
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop

08004fdc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fdc:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004fde:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fe2:	688b      	ldr	r3, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 8004fe4:	6244      	str	r4, [r0, #36]	; 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fe6:	68cc      	ldr	r4, [r1, #12]
  SDIOx->DLEN = Data->DataLength;
 8004fe8:	6282      	str	r2, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fea:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 8004fec:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ff0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferDir   |\
 8004ff2:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ff4:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferMode  |\
 8004ff8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8004ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005002:	2000      	movs	r0, #0
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop

08005008 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005008:	4a4b      	ldr	r2, [pc, #300]	; (8005138 <SDMMC_CmdBlockLength+0x130>)
  SDIOx->ARG = Command->Argument;
 800500a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800500c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800500e:	494b      	ldr	r1, [pc, #300]	; (800513c <SDMMC_CmdBlockLength+0x134>)
 8005010:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005012:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005016:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800501a:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800501e:	0a52      	lsrs	r2, r2, #9
 8005020:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005024:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005028:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800502c:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 800502e:	1e53      	subs	r3, r2, #1
 8005030:	b14a      	cbz	r2, 8005046 <SDMMC_CmdBlockLength+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8005032:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005034:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005038:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800503c:	d001      	beq.n	8005042 <SDMMC_CmdBlockLength+0x3a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800503e:	0512      	lsls	r2, r2, #20
 8005040:	d505      	bpl.n	800504e <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	d1f5      	bne.n	8005032 <SDMMC_CmdBlockLength+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005046:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800504a:	4618      	mov	r0, r3
 800504c:	4770      	bx	lr
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800504e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005050:	075b      	lsls	r3, r3, #29
 8005052:	d43d      	bmi.n	80050d0 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005054:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005056:	f013 0301 	ands.w	r3, r3, #1
 800505a:	d134      	bne.n	80050c6 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800505c:	23c5      	movs	r3, #197	; 0xc5
 800505e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8005060:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b10      	cmp	r3, #16
 8005066:	d131      	bne.n	80050cc <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8005068:	6942      	ldr	r2, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800506a:	4b35      	ldr	r3, [pc, #212]	; (8005140 <SDMMC_CmdBlockLength+0x138>)
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0eb      	beq.n	800504a <SDMMC_CmdBlockLength+0x42>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005072:	2a00      	cmp	r2, #0
 8005074:	db2f      	blt.n	80050d6 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005076:	0050      	lsls	r0, r2, #1
 8005078:	d430      	bmi.n	80050dc <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800507a:	0091      	lsls	r1, r2, #2
 800507c:	d430      	bmi.n	80050e0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800507e:	00d0      	lsls	r0, r2, #3
 8005080:	d430      	bmi.n	80050e4 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005082:	0111      	lsls	r1, r2, #4
 8005084:	d431      	bmi.n	80050ea <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005086:	0150      	lsls	r0, r2, #5
 8005088:	d432      	bmi.n	80050f0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800508a:	01d1      	lsls	r1, r2, #7
 800508c:	d433      	bmi.n	80050f6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800508e:	0210      	lsls	r0, r2, #8
 8005090:	d434      	bmi.n	80050fc <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005092:	0251      	lsls	r1, r2, #9
 8005094:	d435      	bmi.n	8005102 <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005096:	0290      	lsls	r0, r2, #10
 8005098:	d43f      	bmi.n	800511a <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800509a:	02d1      	lsls	r1, r2, #11
 800509c:	d43a      	bmi.n	8005114 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800509e:	0350      	lsls	r0, r2, #13
 80050a0:	d435      	bmi.n	800510e <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050a2:	0391      	lsls	r1, r2, #14
 80050a4:	d430      	bmi.n	8005108 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050a6:	03d0      	lsls	r0, r2, #15
 80050a8:	d443      	bmi.n	8005132 <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050aa:	0411      	lsls	r1, r2, #16
 80050ac:	d43e      	bmi.n	800512c <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050ae:	0450      	lsls	r0, r2, #17
 80050b0:	d439      	bmi.n	8005126 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050b2:	0491      	lsls	r1, r2, #18
 80050b4:	d434      	bmi.n	8005120 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050b6:	f012 0f08 	tst.w	r2, #8
 80050ba:	bf14      	ite	ne
 80050bc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80050c0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80050c4:	e7c1      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050c6:	2201      	movs	r2, #1
 80050c8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050ca:	e7be      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e7bc      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050d0:	2304      	movs	r3, #4
 80050d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050d4:	e7b9      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	e7b6      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	e7b4      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	e7b2      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80050e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e8:	e7af      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80050ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ee:	e7ac      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	e7a9      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80050f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050fa:	e7a6      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005100:	e7a3      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005106:	e7a0      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005108:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800510c:	e79d      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800510e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005112:	e79a      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_CC_ERR;
 8005114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005118:	e797      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800511a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800511e:	e794      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8005120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005124:	e791      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005126:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800512a:	e78e      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800512c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005130:	e78b      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005132:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005136:	e788      	b.n	800504a <SDMMC_CmdBlockLength+0x42>
 8005138:	20000014 	.word	0x20000014
 800513c:	10624dd3 	.word	0x10624dd3
 8005140:	fdffe008 	.word	0xfdffe008

08005144 <SDMMC_CmdReadSingleBlock>:
  SDIOx->ARG = Command->Argument;
 8005144:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005146:	4a4c      	ldr	r2, [pc, #304]	; (8005278 <SDMMC_CmdReadSingleBlock+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005148:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800514a:	494c      	ldr	r1, [pc, #304]	; (800527c <SDMMC_CmdReadSingleBlock+0x138>)
 800514c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800514e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005152:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005156:	f023 030f 	bic.w	r3, r3, #15
 800515a:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800515e:	0a52      	lsrs	r2, r2, #9
 8005160:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005164:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005168:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800516c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800516e:	1e53      	subs	r3, r2, #1
 8005170:	b14a      	cbz	r2, 8005186 <SDMMC_CmdReadSingleBlock+0x42>
    sta_reg = SDIOx->STA;
 8005172:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005174:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005178:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800517c:	d001      	beq.n	8005182 <SDMMC_CmdReadSingleBlock+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800517e:	0512      	lsls	r2, r2, #20
 8005180:	d505      	bpl.n	800518e <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	d1f5      	bne.n	8005172 <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800518a:	4618      	mov	r0, r3
 800518c:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800518e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005190:	075b      	lsls	r3, r3, #29
 8005192:	d43d      	bmi.n	8005210 <SDMMC_CmdReadSingleBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005194:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005196:	f013 0301 	ands.w	r3, r3, #1
 800519a:	d134      	bne.n	8005206 <SDMMC_CmdReadSingleBlock+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800519c:	23c5      	movs	r3, #197	; 0xc5
 800519e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80051a0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b11      	cmp	r3, #17
 80051a6:	d131      	bne.n	800520c <SDMMC_CmdReadSingleBlock+0xc8>
  return (*(__IO uint32_t *) tmp);
 80051a8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80051aa:	4b35      	ldr	r3, [pc, #212]	; (8005280 <SDMMC_CmdReadSingleBlock+0x13c>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0eb      	beq.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80051b2:	2a00      	cmp	r2, #0
 80051b4:	db2f      	blt.n	8005216 <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80051b6:	0050      	lsls	r0, r2, #1
 80051b8:	d430      	bmi.n	800521c <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80051ba:	0091      	lsls	r1, r2, #2
 80051bc:	d430      	bmi.n	8005220 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80051be:	00d0      	lsls	r0, r2, #3
 80051c0:	d430      	bmi.n	8005224 <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80051c2:	0111      	lsls	r1, r2, #4
 80051c4:	d431      	bmi.n	800522a <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80051c6:	0150      	lsls	r0, r2, #5
 80051c8:	d432      	bmi.n	8005230 <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051ca:	01d1      	lsls	r1, r2, #7
 80051cc:	d433      	bmi.n	8005236 <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051ce:	0210      	lsls	r0, r2, #8
 80051d0:	d434      	bmi.n	800523c <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051d2:	0251      	lsls	r1, r2, #9
 80051d4:	d435      	bmi.n	8005242 <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051d6:	0290      	lsls	r0, r2, #10
 80051d8:	d43f      	bmi.n	800525a <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051da:	02d1      	lsls	r1, r2, #11
 80051dc:	d43a      	bmi.n	8005254 <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80051de:	0350      	lsls	r0, r2, #13
 80051e0:	d435      	bmi.n	800524e <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051e2:	0391      	lsls	r1, r2, #14
 80051e4:	d430      	bmi.n	8005248 <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80051e6:	03d0      	lsls	r0, r2, #15
 80051e8:	d443      	bmi.n	8005272 <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80051ea:	0411      	lsls	r1, r2, #16
 80051ec:	d43e      	bmi.n	800526c <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051ee:	0450      	lsls	r0, r2, #17
 80051f0:	d439      	bmi.n	8005266 <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051f2:	0491      	lsls	r1, r2, #18
 80051f4:	d434      	bmi.n	8005260 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051f6:	f012 0f08 	tst.w	r2, #8
 80051fa:	bf14      	ite	ne
 80051fc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005200:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005204:	e7c1      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005206:	2201      	movs	r2, #1
 8005208:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800520a:	e7be      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800520c:	2301      	movs	r3, #1
 800520e:	e7bc      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005210:	2304      	movs	r3, #4
 8005212:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005214:	e7b9      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800521a:	e7b6      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	e7b4      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	e7b2      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005228:	e7af      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800522a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522e:	e7ac      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005234:	e7a9      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800523a:	e7a6      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800523c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005240:	e7a3      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005246:	e7a0      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800524c:	e79d      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800524e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005252:	e79a      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_CC_ERR;
 8005254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005258:	e797      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800525a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800525e:	e794      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 8005260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005264:	e791      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005266:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800526a:	e78e      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800526c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005270:	e78b      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005272:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005276:	e788      	b.n	800518a <SDMMC_CmdReadSingleBlock+0x46>
 8005278:	20000014 	.word	0x20000014
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	fdffe008 	.word	0xfdffe008

08005284 <SDMMC_CmdReadMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8005284:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005286:	4a4c      	ldr	r2, [pc, #304]	; (80053b8 <SDMMC_CmdReadMultiBlock+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005288:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800528a:	494c      	ldr	r1, [pc, #304]	; (80053bc <SDMMC_CmdReadMultiBlock+0x138>)
 800528c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800528e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005292:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005296:	f023 030f 	bic.w	r3, r3, #15
 800529a:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800529e:	0a52      	lsrs	r2, r2, #9
 80052a0:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052a4:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052a8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052ac:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80052ae:	1e53      	subs	r3, r2, #1
 80052b0:	b14a      	cbz	r2, 80052c6 <SDMMC_CmdReadMultiBlock+0x42>
    sta_reg = SDIOx->STA;
 80052b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052b4:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 80052b8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052bc:	d001      	beq.n	80052c2 <SDMMC_CmdReadMultiBlock+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052be:	0512      	lsls	r2, r2, #20
 80052c0:	d505      	bpl.n	80052ce <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	d1f5      	bne.n	80052b2 <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80052c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052d0:	075b      	lsls	r3, r3, #29
 80052d2:	d43d      	bmi.n	8005350 <SDMMC_CmdReadMultiBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052d6:	f013 0301 	ands.w	r3, r3, #1
 80052da:	d134      	bne.n	8005346 <SDMMC_CmdReadMultiBlock+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052dc:	23c5      	movs	r3, #197	; 0xc5
 80052de:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80052e0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b12      	cmp	r3, #18
 80052e6:	d131      	bne.n	800534c <SDMMC_CmdReadMultiBlock+0xc8>
  return (*(__IO uint32_t *) tmp);
 80052e8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80052ea:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <SDMMC_CmdReadMultiBlock+0x13c>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0eb      	beq.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	db2f      	blt.n	8005356 <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80052f6:	0050      	lsls	r0, r2, #1
 80052f8:	d430      	bmi.n	800535c <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80052fa:	0091      	lsls	r1, r2, #2
 80052fc:	d430      	bmi.n	8005360 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80052fe:	00d0      	lsls	r0, r2, #3
 8005300:	d430      	bmi.n	8005364 <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005302:	0111      	lsls	r1, r2, #4
 8005304:	d431      	bmi.n	800536a <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005306:	0150      	lsls	r0, r2, #5
 8005308:	d432      	bmi.n	8005370 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800530a:	01d1      	lsls	r1, r2, #7
 800530c:	d433      	bmi.n	8005376 <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800530e:	0210      	lsls	r0, r2, #8
 8005310:	d434      	bmi.n	800537c <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005312:	0251      	lsls	r1, r2, #9
 8005314:	d435      	bmi.n	8005382 <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005316:	0290      	lsls	r0, r2, #10
 8005318:	d43f      	bmi.n	800539a <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800531a:	02d1      	lsls	r1, r2, #11
 800531c:	d43a      	bmi.n	8005394 <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800531e:	0350      	lsls	r0, r2, #13
 8005320:	d435      	bmi.n	800538e <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005322:	0391      	lsls	r1, r2, #14
 8005324:	d430      	bmi.n	8005388 <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005326:	03d0      	lsls	r0, r2, #15
 8005328:	d443      	bmi.n	80053b2 <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800532a:	0411      	lsls	r1, r2, #16
 800532c:	d43e      	bmi.n	80053ac <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800532e:	0450      	lsls	r0, r2, #17
 8005330:	d439      	bmi.n	80053a6 <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005332:	0491      	lsls	r1, r2, #18
 8005334:	d434      	bmi.n	80053a0 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005336:	f012 0f08 	tst.w	r2, #8
 800533a:	bf14      	ite	ne
 800533c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005340:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005344:	e7c1      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005346:	2201      	movs	r2, #1
 8005348:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800534a:	e7be      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800534c:	2301      	movs	r3, #1
 800534e:	e7bc      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005350:	2304      	movs	r3, #4
 8005352:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005354:	e7b9      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535a:	e7b6      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800535c:	2340      	movs	r3, #64	; 0x40
 800535e:	e7b4      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	e7b2      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005368:	e7af      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800536a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800536e:	e7ac      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005374:	e7a9      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800537a:	e7a6      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800537c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005380:	e7a3      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005386:	e7a0      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800538c:	e79d      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800538e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005392:	e79a      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_CC_ERR;
 8005394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005398:	e797      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800539a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800539e:	e794      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 80053a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053a4:	e791      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80053a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053aa:	e78e      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80053ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053b0:	e78b      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80053b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053b6:	e788      	b.n	80052ca <SDMMC_CmdReadMultiBlock+0x46>
 80053b8:	20000014 	.word	0x20000014
 80053bc:	10624dd3 	.word	0x10624dd3
 80053c0:	fdffe008 	.word	0xfdffe008

080053c4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053c4:	4a4b      	ldr	r2, [pc, #300]	; (80054f4 <SDMMC_CmdWriteSingleBlock+0x130>)
  SDIOx->ARG = Command->Argument;
 80053c6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053c8:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053ca:	494b      	ldr	r1, [pc, #300]	; (80054f8 <SDMMC_CmdWriteSingleBlock+0x134>)
 80053cc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053d2:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053d6:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053da:	0a52      	lsrs	r2, r2, #9
 80053dc:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053e0:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053e8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80053ea:	1e53      	subs	r3, r2, #1
 80053ec:	b14a      	cbz	r2, 8005402 <SDMMC_CmdWriteSingleBlock+0x3e>
    sta_reg = SDIOx->STA;
 80053ee:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053f0:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 80053f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053f8:	d001      	beq.n	80053fe <SDMMC_CmdWriteSingleBlock+0x3a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053fa:	0512      	lsls	r2, r2, #20
 80053fc:	d505      	bpl.n	800540a <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	d1f5      	bne.n	80053ee <SDMMC_CmdWriteSingleBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005406:	4618      	mov	r0, r3
 8005408:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800540a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800540c:	075b      	lsls	r3, r3, #29
 800540e:	d43d      	bmi.n	800548c <SDMMC_CmdWriteSingleBlock+0xc8>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005410:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005412:	f013 0301 	ands.w	r3, r3, #1
 8005416:	d134      	bne.n	8005482 <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005418:	23c5      	movs	r3, #197	; 0xc5
 800541a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800541c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b18      	cmp	r3, #24
 8005422:	d131      	bne.n	8005488 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8005424:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005426:	4b35      	ldr	r3, [pc, #212]	; (80054fc <SDMMC_CmdWriteSingleBlock+0x138>)
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0eb      	beq.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800542e:	2a00      	cmp	r2, #0
 8005430:	db2f      	blt.n	8005492 <SDMMC_CmdWriteSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005432:	0050      	lsls	r0, r2, #1
 8005434:	d430      	bmi.n	8005498 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005436:	0091      	lsls	r1, r2, #2
 8005438:	d430      	bmi.n	800549c <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800543a:	00d0      	lsls	r0, r2, #3
 800543c:	d430      	bmi.n	80054a0 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800543e:	0111      	lsls	r1, r2, #4
 8005440:	d431      	bmi.n	80054a6 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005442:	0150      	lsls	r0, r2, #5
 8005444:	d432      	bmi.n	80054ac <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005446:	01d1      	lsls	r1, r2, #7
 8005448:	d433      	bmi.n	80054b2 <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800544a:	0210      	lsls	r0, r2, #8
 800544c:	d434      	bmi.n	80054b8 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800544e:	0251      	lsls	r1, r2, #9
 8005450:	d435      	bmi.n	80054be <SDMMC_CmdWriteSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005452:	0290      	lsls	r0, r2, #10
 8005454:	d43f      	bmi.n	80054d6 <SDMMC_CmdWriteSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005456:	02d1      	lsls	r1, r2, #11
 8005458:	d43a      	bmi.n	80054d0 <SDMMC_CmdWriteSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800545a:	0350      	lsls	r0, r2, #13
 800545c:	d435      	bmi.n	80054ca <SDMMC_CmdWriteSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800545e:	0391      	lsls	r1, r2, #14
 8005460:	d430      	bmi.n	80054c4 <SDMMC_CmdWriteSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005462:	03d0      	lsls	r0, r2, #15
 8005464:	d443      	bmi.n	80054ee <SDMMC_CmdWriteSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005466:	0411      	lsls	r1, r2, #16
 8005468:	d43e      	bmi.n	80054e8 <SDMMC_CmdWriteSingleBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800546a:	0450      	lsls	r0, r2, #17
 800546c:	d439      	bmi.n	80054e2 <SDMMC_CmdWriteSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800546e:	0491      	lsls	r1, r2, #18
 8005470:	d434      	bmi.n	80054dc <SDMMC_CmdWriteSingleBlock+0x118>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005472:	f012 0f08 	tst.w	r2, #8
 8005476:	bf14      	ite	ne
 8005478:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800547c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005480:	e7c1      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005482:	2201      	movs	r2, #1
 8005484:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005486:	e7be      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005488:	2301      	movs	r3, #1
 800548a:	e7bc      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800548c:	2304      	movs	r3, #4
 800548e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005490:	e7b9      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005496:	e7b6      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	e7b4      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	e7b2      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80054a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a4:	e7af      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80054a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054aa:	e7ac      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b0:	e7a9      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054b6:	e7a6      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054bc:	e7a3      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054c2:	e7a0      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054c8:	e79d      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80054ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ce:	e79a      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_CC_ERR;
 80054d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d4:	e797      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054da:	e794      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80054dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054e0:	e791      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80054e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054e6:	e78e      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80054e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054ec:	e78b      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80054ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054f2:	e788      	b.n	8005406 <SDMMC_CmdWriteSingleBlock+0x42>
 80054f4:	20000014 	.word	0x20000014
 80054f8:	10624dd3 	.word	0x10624dd3
 80054fc:	fdffe008 	.word	0xfdffe008

08005500 <SDMMC_CmdWriteMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8005500:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005502:	4a4c      	ldr	r2, [pc, #304]	; (8005634 <SDMMC_CmdWriteMultiBlock+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005504:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005506:	494c      	ldr	r1, [pc, #304]	; (8005638 <SDMMC_CmdWriteMultiBlock+0x138>)
 8005508:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800550a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800550e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005512:	f023 030f 	bic.w	r3, r3, #15
 8005516:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800551a:	0a52      	lsrs	r2, r2, #9
 800551c:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005520:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005524:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005528:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800552a:	1e53      	subs	r3, r2, #1
 800552c:	b14a      	cbz	r2, 8005542 <SDMMC_CmdWriteMultiBlock+0x42>
    sta_reg = SDIOx->STA;
 800552e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005530:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005534:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005538:	d001      	beq.n	800553e <SDMMC_CmdWriteMultiBlock+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800553a:	0512      	lsls	r2, r2, #20
 800553c:	d505      	bpl.n	800554a <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	d1f5      	bne.n	800552e <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005546:	4618      	mov	r0, r3
 8005548:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800554a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800554c:	075b      	lsls	r3, r3, #29
 800554e:	d43d      	bmi.n	80055cc <SDMMC_CmdWriteMultiBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005550:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005552:	f013 0301 	ands.w	r3, r3, #1
 8005556:	d134      	bne.n	80055c2 <SDMMC_CmdWriteMultiBlock+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005558:	23c5      	movs	r3, #197	; 0xc5
 800555a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800555c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b19      	cmp	r3, #25
 8005562:	d131      	bne.n	80055c8 <SDMMC_CmdWriteMultiBlock+0xc8>
  return (*(__IO uint32_t *) tmp);
 8005564:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005566:	4b35      	ldr	r3, [pc, #212]	; (800563c <SDMMC_CmdWriteMultiBlock+0x13c>)
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0eb      	beq.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800556e:	2a00      	cmp	r2, #0
 8005570:	db2f      	blt.n	80055d2 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005572:	0050      	lsls	r0, r2, #1
 8005574:	d430      	bmi.n	80055d8 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005576:	0091      	lsls	r1, r2, #2
 8005578:	d430      	bmi.n	80055dc <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800557a:	00d0      	lsls	r0, r2, #3
 800557c:	d430      	bmi.n	80055e0 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800557e:	0111      	lsls	r1, r2, #4
 8005580:	d431      	bmi.n	80055e6 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005582:	0150      	lsls	r0, r2, #5
 8005584:	d432      	bmi.n	80055ec <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005586:	01d1      	lsls	r1, r2, #7
 8005588:	d433      	bmi.n	80055f2 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800558a:	0210      	lsls	r0, r2, #8
 800558c:	d434      	bmi.n	80055f8 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800558e:	0251      	lsls	r1, r2, #9
 8005590:	d435      	bmi.n	80055fe <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005592:	0290      	lsls	r0, r2, #10
 8005594:	d43f      	bmi.n	8005616 <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005596:	02d1      	lsls	r1, r2, #11
 8005598:	d43a      	bmi.n	8005610 <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800559a:	0350      	lsls	r0, r2, #13
 800559c:	d435      	bmi.n	800560a <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800559e:	0391      	lsls	r1, r2, #14
 80055a0:	d430      	bmi.n	8005604 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055a2:	03d0      	lsls	r0, r2, #15
 80055a4:	d443      	bmi.n	800562e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055a6:	0411      	lsls	r1, r2, #16
 80055a8:	d43e      	bmi.n	8005628 <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055aa:	0450      	lsls	r0, r2, #17
 80055ac:	d439      	bmi.n	8005622 <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055ae:	0491      	lsls	r1, r2, #18
 80055b0:	d434      	bmi.n	800561c <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055b2:	f012 0f08 	tst.w	r2, #8
 80055b6:	bf14      	ite	ne
 80055b8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80055bc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80055c0:	e7c1      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055c2:	2201      	movs	r2, #1
 80055c4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055c6:	e7be      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e7bc      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055cc:	2304      	movs	r3, #4
 80055ce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055d0:	e7b9      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d6:	e7b6      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	e7b4      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	e7b2      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e4:	e7af      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ea:	e7ac      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f0:	e7a9      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80055f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055f6:	e7a6      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055fc:	e7a3      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80055fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005602:	e7a0      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005608:	e79d      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800560a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800560e:	e79a      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_CC_ERR;
 8005610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005614:	e797      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800561a:	e794      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 800561c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005620:	e791      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005626:	e78e      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800562c:	e78b      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800562e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005632:	e788      	b.n	8005546 <SDMMC_CmdWriteMultiBlock+0x46>
 8005634:	20000014 	.word	0x20000014
 8005638:	10624dd3 	.word	0x10624dd3
 800563c:	fdffe008 	.word	0xfdffe008

08005640 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 8005640:	2300      	movs	r3, #0
{
 8005642:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005644:	4a4d      	ldr	r2, [pc, #308]	; (800577c <SDMMC_CmdStopTransfer+0x13c>)
  SDIOx->ARG = Command->Argument;
 8005646:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005648:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	4c4c      	ldr	r4, [pc, #304]	; (8005780 <SDMMC_CmdStopTransfer+0x140>)
 800564e:	494d      	ldr	r1, [pc, #308]	; (8005784 <SDMMC_CmdStopTransfer+0x144>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005650:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005654:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005658:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800565c:	f443 6389 	orr.w	r3, r3, #1096	; 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005660:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005662:	f043 0304 	orr.w	r3, r3, #4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005666:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800566a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800566c:	1e53      	subs	r3, r2, #1
 800566e:	b14a      	cbz	r2, 8005684 <SDMMC_CmdStopTransfer+0x44>
    sta_reg = SDIOx->STA;
 8005670:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005672:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005676:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800567a:	d001      	beq.n	8005680 <SDMMC_CmdStopTransfer+0x40>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800567c:	0512      	lsls	r2, r2, #20
 800567e:	d507      	bpl.n	8005690 <SDMMC_CmdStopTransfer+0x50>
    if (count-- == 0U)
 8005680:	1c59      	adds	r1, r3, #1
 8005682:	d1f5      	bne.n	8005670 <SDMMC_CmdStopTransfer+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8005684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005688:	4618      	mov	r0, r3
 800568a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568e:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005690:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005692:	075c      	lsls	r4, r3, #29
 8005694:	d43d      	bmi.n	8005712 <SDMMC_CmdStopTransfer+0xd2>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005696:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005698:	f013 0301 	ands.w	r3, r3, #1
 800569c:	d134      	bne.n	8005708 <SDMMC_CmdStopTransfer+0xc8>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800569e:	23c5      	movs	r3, #197	; 0xc5
 80056a0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80056a2:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d131      	bne.n	800570e <SDMMC_CmdStopTransfer+0xce>
  return (*(__IO uint32_t *) tmp);
 80056aa:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80056ac:	4b36      	ldr	r3, [pc, #216]	; (8005788 <SDMMC_CmdStopTransfer+0x148>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0e9      	beq.n	8005688 <SDMMC_CmdStopTransfer+0x48>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	db2f      	blt.n	8005718 <SDMMC_CmdStopTransfer+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80056b8:	0051      	lsls	r1, r2, #1
 80056ba:	d430      	bmi.n	800571e <SDMMC_CmdStopTransfer+0xde>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80056bc:	0094      	lsls	r4, r2, #2
 80056be:	d430      	bmi.n	8005722 <SDMMC_CmdStopTransfer+0xe2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80056c0:	00d0      	lsls	r0, r2, #3
 80056c2:	d430      	bmi.n	8005726 <SDMMC_CmdStopTransfer+0xe6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80056c4:	0111      	lsls	r1, r2, #4
 80056c6:	d431      	bmi.n	800572c <SDMMC_CmdStopTransfer+0xec>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80056c8:	0154      	lsls	r4, r2, #5
 80056ca:	d432      	bmi.n	8005732 <SDMMC_CmdStopTransfer+0xf2>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80056cc:	01d0      	lsls	r0, r2, #7
 80056ce:	d433      	bmi.n	8005738 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80056d0:	0211      	lsls	r1, r2, #8
 80056d2:	d434      	bmi.n	800573e <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056d4:	0254      	lsls	r4, r2, #9
 80056d6:	d435      	bmi.n	8005744 <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056d8:	0290      	lsls	r0, r2, #10
 80056da:	d43f      	bmi.n	800575c <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056dc:	02d1      	lsls	r1, r2, #11
 80056de:	d43a      	bmi.n	8005756 <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056e0:	0354      	lsls	r4, r2, #13
 80056e2:	d435      	bmi.n	8005750 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056e4:	0390      	lsls	r0, r2, #14
 80056e6:	d430      	bmi.n	800574a <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056e8:	03d1      	lsls	r1, r2, #15
 80056ea:	d443      	bmi.n	8005774 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80056ec:	0414      	lsls	r4, r2, #16
 80056ee:	d43e      	bmi.n	800576e <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80056f0:	0450      	lsls	r0, r2, #17
 80056f2:	d439      	bmi.n	8005768 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056f4:	0491      	lsls	r1, r2, #18
 80056f6:	d434      	bmi.n	8005762 <SDMMC_CmdStopTransfer+0x122>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056f8:	f012 0f08 	tst.w	r2, #8
 80056fc:	bf14      	ite	ne
 80056fe:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005702:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005706:	e7bf      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005708:	2201      	movs	r2, #1
 800570a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800570c:	e7bc      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800570e:	2301      	movs	r3, #1
 8005710:	e7ba      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005712:	2304      	movs	r3, #4
 8005714:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005716:	e7b7      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800571c:	e7b4      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	e7b2      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	e7b0      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800572a:	e7ad      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800572c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005730:	e7aa      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005736:	e7a7      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800573c:	e7a4      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800573e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005742:	e7a1      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005748:	e79e      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800574a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800574e:	e79b      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005754:	e798      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CC_ERR;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	e795      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800575c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005760:	e792      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_RESET;
 8005762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005766:	e78f      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005768:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800576c:	e78c      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800576e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005772:	e789      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005778:	e786      	b.n	8005688 <SDMMC_CmdStopTransfer+0x48>
 800577a:	bf00      	nop
 800577c:	20000014 	.word	0x20000014
 8005780:	10624dd3 	.word	0x10624dd3
 8005784:	05f5e100 	.word	0x05f5e100
 8005788:	fdffe008 	.word	0xfdffe008

0800578c <SDMMC_CmdSelDesel>:
  SDIOx->ARG = Command->Argument;
 800578c:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800578e:	4a4c      	ldr	r2, [pc, #304]	; (80058c0 <SDMMC_CmdSelDesel+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005790:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005792:	494c      	ldr	r1, [pc, #304]	; (80058c4 <SDMMC_CmdSelDesel+0x138>)
 8005794:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005796:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800579a:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800579e:	f023 030f 	bic.w	r3, r3, #15
 80057a2:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057a6:	0a52      	lsrs	r2, r2, #9
 80057a8:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80057ac:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057b0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80057b4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80057b6:	1e53      	subs	r3, r2, #1
 80057b8:	b14a      	cbz	r2, 80057ce <SDMMC_CmdSelDesel+0x42>
    sta_reg = SDIOx->STA;
 80057ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057bc:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 80057c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057c4:	d001      	beq.n	80057ca <SDMMC_CmdSelDesel+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057c6:	0512      	lsls	r2, r2, #20
 80057c8:	d505      	bpl.n	80057d6 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 80057ca:	1c59      	adds	r1, r3, #1
 80057cc:	d1f5      	bne.n	80057ba <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80057ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057d8:	075b      	lsls	r3, r3, #29
 80057da:	d43d      	bmi.n	8005858 <SDMMC_CmdSelDesel+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057de:	f013 0301 	ands.w	r3, r3, #1
 80057e2:	d134      	bne.n	800584e <SDMMC_CmdSelDesel+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057e4:	23c5      	movs	r3, #197	; 0xc5
 80057e6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80057e8:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b07      	cmp	r3, #7
 80057ee:	d131      	bne.n	8005854 <SDMMC_CmdSelDesel+0xc8>
  return (*(__IO uint32_t *) tmp);
 80057f0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80057f2:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <SDMMC_CmdSelDesel+0x13c>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0eb      	beq.n	80057d2 <SDMMC_CmdSelDesel+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	db2f      	blt.n	800585e <SDMMC_CmdSelDesel+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80057fe:	0050      	lsls	r0, r2, #1
 8005800:	d430      	bmi.n	8005864 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005802:	0091      	lsls	r1, r2, #2
 8005804:	d430      	bmi.n	8005868 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005806:	00d0      	lsls	r0, r2, #3
 8005808:	d430      	bmi.n	800586c <SDMMC_CmdSelDesel+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800580a:	0111      	lsls	r1, r2, #4
 800580c:	d431      	bmi.n	8005872 <SDMMC_CmdSelDesel+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800580e:	0150      	lsls	r0, r2, #5
 8005810:	d432      	bmi.n	8005878 <SDMMC_CmdSelDesel+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005812:	01d1      	lsls	r1, r2, #7
 8005814:	d433      	bmi.n	800587e <SDMMC_CmdSelDesel+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005816:	0210      	lsls	r0, r2, #8
 8005818:	d434      	bmi.n	8005884 <SDMMC_CmdSelDesel+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800581a:	0251      	lsls	r1, r2, #9
 800581c:	d435      	bmi.n	800588a <SDMMC_CmdSelDesel+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800581e:	0290      	lsls	r0, r2, #10
 8005820:	d43f      	bmi.n	80058a2 <SDMMC_CmdSelDesel+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005822:	02d1      	lsls	r1, r2, #11
 8005824:	d43a      	bmi.n	800589c <SDMMC_CmdSelDesel+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005826:	0350      	lsls	r0, r2, #13
 8005828:	d435      	bmi.n	8005896 <SDMMC_CmdSelDesel+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800582a:	0391      	lsls	r1, r2, #14
 800582c:	d430      	bmi.n	8005890 <SDMMC_CmdSelDesel+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800582e:	03d0      	lsls	r0, r2, #15
 8005830:	d443      	bmi.n	80058ba <SDMMC_CmdSelDesel+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005832:	0411      	lsls	r1, r2, #16
 8005834:	d43e      	bmi.n	80058b4 <SDMMC_CmdSelDesel+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005836:	0450      	lsls	r0, r2, #17
 8005838:	d439      	bmi.n	80058ae <SDMMC_CmdSelDesel+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800583a:	0491      	lsls	r1, r2, #18
 800583c:	d434      	bmi.n	80058a8 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800583e:	f012 0f08 	tst.w	r2, #8
 8005842:	bf14      	ite	ne
 8005844:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005848:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800584c:	e7c1      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800584e:	2201      	movs	r2, #1
 8005850:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005852:	e7be      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005854:	2301      	movs	r3, #1
 8005856:	e7bc      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005858:	2304      	movs	r3, #4
 800585a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800585c:	e7b9      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800585e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005862:	e7b6      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	e7b4      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	e7b2      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800586c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005870:	e7af      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	e7ac      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587c:	e7a9      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800587e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005882:	e7a6      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005888:	e7a3      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800588a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800588e:	e7a0      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005894:	e79d      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800589a:	e79a      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_CC_ERR;
 800589c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a0:	e797      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058a6:	e794      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 80058a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058ac:	e791      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80058ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058b2:	e78e      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80058b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058b8:	e78b      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80058ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058be:	e788      	b.n	80057d2 <SDMMC_CmdSelDesel+0x46>
 80058c0:	20000014 	.word	0x20000014
 80058c4:	10624dd3 	.word	0x10624dd3
 80058c8:	fdffe008 	.word	0xfdffe008

080058cc <SDMMC_CmdGoIdleState>:
  SDIOx->ARG = Command->Argument;
 80058cc:	2300      	movs	r3, #0
 80058ce:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <SDMMC_CmdGoIdleState+0x44>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058d2:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d4:	490f      	ldr	r1, [pc, #60]	; (8005914 <SDMMC_CmdGoIdleState+0x48>)
 80058d6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058d8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058dc:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058e0:	f022 020f 	bic.w	r2, r2, #15
 80058e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058e8:	0a5b      	lsrs	r3, r3, #9
 80058ea:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058ee:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	e002      	b.n	80058fc <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80058f8:	0612      	lsls	r2, r2, #24
 80058fa:	d404      	bmi.n	8005906 <SDMMC_CmdGoIdleState+0x3a>
    if (count-- == 0U)
 80058fc:	3b01      	subs	r3, #1
 80058fe:	d2fa      	bcs.n	80058f6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005900:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005904:	4770      	bx	lr
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005906:	23c5      	movs	r3, #197	; 0xc5
 8005908:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800590a:	2000      	movs	r0, #0
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000014 	.word	0x20000014
 8005914:	10624dd3 	.word	0x10624dd3

08005918 <SDMMC_CmdOperCond>:
  SDIOx->ARG = Command->Argument;
 8005918:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800591c:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <SDMMC_CmdOperCond+0x70>)
  SDIOx->ARG = Command->Argument;
 800591e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005920:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005922:	6812      	ldr	r2, [r2, #0]
{
 8005924:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005926:	4819      	ldr	r0, [pc, #100]	; (800598c <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005928:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800592c:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005930:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005934:	0a52      	lsrs	r2, r2, #9
 8005936:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800593a:	f443 6389 	orr.w	r3, r3, #1096	; 0x448
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800593e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005942:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8005944:	1e53      	subs	r3, r2, #1
 8005946:	b14a      	cbz	r2, 800595c <SDMMC_CmdOperCond+0x44>
    sta_reg = SDIOx->STA;
 8005948:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800594a:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 800594e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005952:	d001      	beq.n	8005958 <SDMMC_CmdOperCond+0x40>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005954:	0510      	lsls	r0, r2, #20
 8005956:	d504      	bpl.n	8005962 <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	d1f5      	bne.n	8005948 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800595c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005960:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005962:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005964:	075a      	lsls	r2, r3, #29
 8005966:	d40c      	bmi.n	8005982 <SDMMC_CmdOperCond+0x6a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005968:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800596a:	f010 0001 	ands.w	r0, r0, #1
 800596e:	d105      	bne.n	800597c <SDMMC_CmdOperCond+0x64>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005970:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005972:	065b      	lsls	r3, r3, #25
 8005974:	d5f4      	bpl.n	8005960 <SDMMC_CmdOperCond+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005976:	2340      	movs	r3, #64	; 0x40
 8005978:	638b      	str	r3, [r1, #56]	; 0x38
 800597a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800597c:	2301      	movs	r3, #1
 800597e:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005980:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005982:	2004      	movs	r0, #4
 8005984:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005986:	4770      	bx	lr
 8005988:	20000014 	.word	0x20000014
 800598c:	10624dd3 	.word	0x10624dd3

08005990 <SDMMC_CmdAppCommand>:
  SDIOx->ARG = Command->Argument;
 8005990:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005992:	4a4c      	ldr	r2, [pc, #304]	; (8005ac4 <SDMMC_CmdAppCommand+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005994:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005996:	494c      	ldr	r1, [pc, #304]	; (8005ac8 <SDMMC_CmdAppCommand+0x138>)
 8005998:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800599a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800599e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059a2:	f023 030f 	bic.w	r3, r3, #15
 80059a6:	f443 638e 	orr.w	r3, r3, #1136	; 0x470
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80059aa:	0a52      	lsrs	r2, r2, #9
 80059ac:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059b0:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80059b4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059b8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80059ba:	1e53      	subs	r3, r2, #1
 80059bc:	b14a      	cbz	r2, 80059d2 <SDMMC_CmdAppCommand+0x42>
    sta_reg = SDIOx->STA;
 80059be:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059c0:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 80059c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059c8:	d001      	beq.n	80059ce <SDMMC_CmdAppCommand+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ca:	0512      	lsls	r2, r2, #20
 80059cc:	d505      	bpl.n	80059da <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	d1f5      	bne.n	80059be <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80059d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059dc:	075b      	lsls	r3, r3, #29
 80059de:	d43d      	bmi.n	8005a5c <SDMMC_CmdAppCommand+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059e2:	f013 0301 	ands.w	r3, r3, #1
 80059e6:	d134      	bne.n	8005a52 <SDMMC_CmdAppCommand+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059e8:	23c5      	movs	r3, #197	; 0xc5
 80059ea:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80059ec:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b37      	cmp	r3, #55	; 0x37
 80059f2:	d131      	bne.n	8005a58 <SDMMC_CmdAppCommand+0xc8>
  return (*(__IO uint32_t *) tmp);
 80059f4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059f6:	4b35      	ldr	r3, [pc, #212]	; (8005acc <SDMMC_CmdAppCommand+0x13c>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0eb      	beq.n	80059d6 <SDMMC_CmdAppCommand+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	db2f      	blt.n	8005a62 <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a02:	0050      	lsls	r0, r2, #1
 8005a04:	d430      	bmi.n	8005a68 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a06:	0091      	lsls	r1, r2, #2
 8005a08:	d430      	bmi.n	8005a6c <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a0a:	00d0      	lsls	r0, r2, #3
 8005a0c:	d430      	bmi.n	8005a70 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a0e:	0111      	lsls	r1, r2, #4
 8005a10:	d431      	bmi.n	8005a76 <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a12:	0150      	lsls	r0, r2, #5
 8005a14:	d432      	bmi.n	8005a7c <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a16:	01d1      	lsls	r1, r2, #7
 8005a18:	d433      	bmi.n	8005a82 <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a1a:	0210      	lsls	r0, r2, #8
 8005a1c:	d434      	bmi.n	8005a88 <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a1e:	0251      	lsls	r1, r2, #9
 8005a20:	d435      	bmi.n	8005a8e <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a22:	0290      	lsls	r0, r2, #10
 8005a24:	d43f      	bmi.n	8005aa6 <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a26:	02d1      	lsls	r1, r2, #11
 8005a28:	d43a      	bmi.n	8005aa0 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a2a:	0350      	lsls	r0, r2, #13
 8005a2c:	d435      	bmi.n	8005a9a <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a2e:	0391      	lsls	r1, r2, #14
 8005a30:	d430      	bmi.n	8005a94 <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a32:	03d0      	lsls	r0, r2, #15
 8005a34:	d443      	bmi.n	8005abe <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a36:	0411      	lsls	r1, r2, #16
 8005a38:	d43e      	bmi.n	8005ab8 <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005a3a:	0450      	lsls	r0, r2, #17
 8005a3c:	d439      	bmi.n	8005ab2 <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005a3e:	0491      	lsls	r1, r2, #18
 8005a40:	d434      	bmi.n	8005aac <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a42:	f012 0f08 	tst.w	r2, #8
 8005a46:	bf14      	ite	ne
 8005a48:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005a4c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005a50:	e7c1      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a52:	2201      	movs	r2, #1
 8005a54:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a56:	e7be      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7bc      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a60:	e7b9      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a66:	e7b6      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	e7b4      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	e7b2      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a74:	e7af      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7a:	e7ac      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a80:	e7a9      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a86:	e7a6      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a8c:	e7a3      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a92:	e7a0      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a98:	e79d      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a9e:	e79a      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_CC_ERR;
 8005aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa4:	e797      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aaa:	e794      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 8005aac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ab0:	e791      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ab6:	e78e      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005abc:	e78b      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005abe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ac2:	e788      	b.n	80059d6 <SDMMC_CmdAppCommand+0x46>
 8005ac4:	20000014 	.word	0x20000014
 8005ac8:	10624dd3 	.word	0x10624dd3
 8005acc:	fdffe008 	.word	0xfdffe008

08005ad0 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005ad0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005ad4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  SDIOx->ARG = Command->Argument;
 8005ad8:	6081      	str	r1, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <SDMMC_CmdAppOperCommand+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005adc:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ade:	4917      	ldr	r1, [pc, #92]	; (8005b3c <SDMMC_CmdAppOperCommand+0x6c>)
 8005ae0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ae2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ae6:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005aea:	f023 030f 	bic.w	r3, r3, #15
 8005aee:	f443 638d 	orr.w	r3, r3, #1128	; 0x468
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005af2:	0a52      	lsrs	r2, r2, #9
 8005af4:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005af8:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005afc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b00:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8005b02:	1e53      	subs	r3, r2, #1
 8005b04:	b14a      	cbz	r2, 8005b1a <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDIOx->STA;
 8005b06:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b08:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005b0c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b10:	d001      	beq.n	8005b16 <SDMMC_CmdAppOperCommand+0x46>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b12:	0512      	lsls	r2, r2, #20
 8005b14:	d505      	bpl.n	8005b22 <SDMMC_CmdAppOperCommand+0x52>
    if (count-- == 0U)
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	d1f5      	bne.n	8005b06 <SDMMC_CmdAppOperCommand+0x36>
      return SDMMC_ERROR_TIMEOUT;
 8005b1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b24:	f013 0304 	ands.w	r3, r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b28:	bf15      	itete	ne
 8005b2a:	2304      	movne	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b2c:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b2e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b30:	6382      	streq	r2, [r0, #56]	; 0x38
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000014 	.word	0x20000014
 8005b3c:	10624dd3 	.word	0x10624dd3

08005b40 <SDMMC_CmdBusWidth>:
  SDIOx->ARG = Command->Argument;
 8005b40:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b42:	4a4c      	ldr	r2, [pc, #304]	; (8005c74 <SDMMC_CmdBusWidth+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b44:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b46:	494c      	ldr	r1, [pc, #304]	; (8005c78 <SDMMC_CmdBusWidth+0x138>)
 8005b48:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b4e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b52:	f023 030f 	bic.w	r3, r3, #15
 8005b56:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b5a:	0a52      	lsrs	r2, r2, #9
 8005b5c:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b60:	f043 0306 	orr.w	r3, r3, #6
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b64:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b68:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8005b6a:	1e53      	subs	r3, r2, #1
 8005b6c:	b14a      	cbz	r2, 8005b82 <SDMMC_CmdBusWidth+0x42>
    sta_reg = SDIOx->STA;
 8005b6e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b70:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005b74:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b78:	d001      	beq.n	8005b7e <SDMMC_CmdBusWidth+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b7a:	0512      	lsls	r2, r2, #20
 8005b7c:	d505      	bpl.n	8005b8a <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	d1f5      	bne.n	8005b6e <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005b82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b8c:	075b      	lsls	r3, r3, #29
 8005b8e:	d43d      	bmi.n	8005c0c <SDMMC_CmdBusWidth+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b92:	f013 0301 	ands.w	r3, r3, #1
 8005b96:	d134      	bne.n	8005c02 <SDMMC_CmdBusWidth+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b98:	23c5      	movs	r3, #197	; 0xc5
 8005b9a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8005b9c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b06      	cmp	r3, #6
 8005ba2:	d131      	bne.n	8005c08 <SDMMC_CmdBusWidth+0xc8>
  return (*(__IO uint32_t *) tmp);
 8005ba4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005ba6:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <SDMMC_CmdBusWidth+0x13c>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0eb      	beq.n	8005b86 <SDMMC_CmdBusWidth+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	db2f      	blt.n	8005c12 <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005bb2:	0050      	lsls	r0, r2, #1
 8005bb4:	d430      	bmi.n	8005c18 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005bb6:	0091      	lsls	r1, r2, #2
 8005bb8:	d430      	bmi.n	8005c1c <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005bba:	00d0      	lsls	r0, r2, #3
 8005bbc:	d430      	bmi.n	8005c20 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005bbe:	0111      	lsls	r1, r2, #4
 8005bc0:	d431      	bmi.n	8005c26 <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005bc2:	0150      	lsls	r0, r2, #5
 8005bc4:	d432      	bmi.n	8005c2c <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005bc6:	01d1      	lsls	r1, r2, #7
 8005bc8:	d433      	bmi.n	8005c32 <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005bca:	0210      	lsls	r0, r2, #8
 8005bcc:	d434      	bmi.n	8005c38 <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005bce:	0251      	lsls	r1, r2, #9
 8005bd0:	d435      	bmi.n	8005c3e <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005bd2:	0290      	lsls	r0, r2, #10
 8005bd4:	d43f      	bmi.n	8005c56 <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005bd6:	02d1      	lsls	r1, r2, #11
 8005bd8:	d43a      	bmi.n	8005c50 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005bda:	0350      	lsls	r0, r2, #13
 8005bdc:	d435      	bmi.n	8005c4a <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005bde:	0391      	lsls	r1, r2, #14
 8005be0:	d430      	bmi.n	8005c44 <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005be2:	03d0      	lsls	r0, r2, #15
 8005be4:	d443      	bmi.n	8005c6e <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005be6:	0411      	lsls	r1, r2, #16
 8005be8:	d43e      	bmi.n	8005c68 <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005bea:	0450      	lsls	r0, r2, #17
 8005bec:	d439      	bmi.n	8005c62 <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005bee:	0491      	lsls	r1, r2, #18
 8005bf0:	d434      	bmi.n	8005c5c <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005bf2:	f012 0f08 	tst.w	r2, #8
 8005bf6:	bf14      	ite	ne
 8005bf8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005bfc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005c00:	e7c1      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c02:	2201      	movs	r2, #1
 8005c04:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c06:	e7be      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e7bc      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c10:	e7b9      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c16:	e7b6      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c18:	2340      	movs	r3, #64	; 0x40
 8005c1a:	e7b4      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	e7b2      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c24:	e7af      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c2a:	e7ac      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c30:	e7a9      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c36:	e7a6      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c3c:	e7a3      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c42:	e7a0      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c48:	e79d      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c4e:	e79a      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_CC_ERR;
 8005c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c54:	e797      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c5a:	e794      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 8005c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c60:	e791      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c66:	e78e      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c6c:	e78b      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c72:	e788      	b.n	8005b86 <SDMMC_CmdBusWidth+0x46>
 8005c74:	20000014 	.word	0x20000014
 8005c78:	10624dd3 	.word	0x10624dd3
 8005c7c:	fdffe008 	.word	0xfdffe008

08005c80 <SDMMC_CmdSendSCR>:
  SDIOx->ARG = Command->Argument;
 8005c80:	2300      	movs	r3, #0
 8005c82:	6083      	str	r3, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c84:	4a4c      	ldr	r2, [pc, #304]	; (8005db8 <SDMMC_CmdSendSCR+0x138>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c86:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c88:	494c      	ldr	r1, [pc, #304]	; (8005dbc <SDMMC_CmdSendSCR+0x13c>)
 8005c8a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c90:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c94:	f023 030f 	bic.w	r3, r3, #15
 8005c98:	f443 638e 	orr.w	r3, r3, #1136	; 0x470
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c9c:	0a52      	lsrs	r2, r2, #9
 8005c9e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ca2:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005ca6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005caa:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8005cac:	1e53      	subs	r3, r2, #1
 8005cae:	b14a      	cbz	r2, 8005cc4 <SDMMC_CmdSendSCR+0x44>
    sta_reg = SDIOx->STA;
 8005cb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cb2:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005cb6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cba:	d001      	beq.n	8005cc0 <SDMMC_CmdSendSCR+0x40>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cbc:	0512      	lsls	r2, r2, #20
 8005cbe:	d505      	bpl.n	8005ccc <SDMMC_CmdSendSCR+0x4c>
    if (count-- == 0U)
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	d1f5      	bne.n	8005cb0 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8005cc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cce:	075b      	lsls	r3, r3, #29
 8005cd0:	d43d      	bmi.n	8005d4e <SDMMC_CmdSendSCR+0xce>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cd4:	f013 0301 	ands.w	r3, r3, #1
 8005cd8:	d134      	bne.n	8005d44 <SDMMC_CmdSendSCR+0xc4>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cda:	23c5      	movs	r3, #197	; 0xc5
 8005cdc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8005cde:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b33      	cmp	r3, #51	; 0x33
 8005ce4:	d131      	bne.n	8005d4a <SDMMC_CmdSendSCR+0xca>
  return (*(__IO uint32_t *) tmp);
 8005ce6:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005ce8:	4b35      	ldr	r3, [pc, #212]	; (8005dc0 <SDMMC_CmdSendSCR+0x140>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0eb      	beq.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	db2f      	blt.n	8005d54 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005cf4:	0050      	lsls	r0, r2, #1
 8005cf6:	d430      	bmi.n	8005d5a <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005cf8:	0091      	lsls	r1, r2, #2
 8005cfa:	d430      	bmi.n	8005d5e <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005cfc:	00d0      	lsls	r0, r2, #3
 8005cfe:	d430      	bmi.n	8005d62 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d00:	0111      	lsls	r1, r2, #4
 8005d02:	d431      	bmi.n	8005d68 <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005d04:	0150      	lsls	r0, r2, #5
 8005d06:	d432      	bmi.n	8005d6e <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005d08:	01d1      	lsls	r1, r2, #7
 8005d0a:	d433      	bmi.n	8005d74 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d0c:	0210      	lsls	r0, r2, #8
 8005d0e:	d434      	bmi.n	8005d7a <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d10:	0251      	lsls	r1, r2, #9
 8005d12:	d435      	bmi.n	8005d80 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d14:	0290      	lsls	r0, r2, #10
 8005d16:	d43f      	bmi.n	8005d98 <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d18:	02d1      	lsls	r1, r2, #11
 8005d1a:	d43a      	bmi.n	8005d92 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005d1c:	0350      	lsls	r0, r2, #13
 8005d1e:	d435      	bmi.n	8005d8c <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d20:	0391      	lsls	r1, r2, #14
 8005d22:	d430      	bmi.n	8005d86 <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d24:	03d0      	lsls	r0, r2, #15
 8005d26:	d443      	bmi.n	8005db0 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d28:	0411      	lsls	r1, r2, #16
 8005d2a:	d43e      	bmi.n	8005daa <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d2c:	0450      	lsls	r0, r2, #17
 8005d2e:	d439      	bmi.n	8005da4 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d30:	0491      	lsls	r1, r2, #18
 8005d32:	d434      	bmi.n	8005d9e <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d34:	f012 0f08 	tst.w	r2, #8
 8005d38:	bf14      	ite	ne
 8005d3a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005d3e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005d42:	e7c1      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d44:	2201      	movs	r2, #1
 8005d46:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d48:	e7be      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7bc      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d4e:	2304      	movs	r3, #4
 8005d50:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d52:	e7b9      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d58:	e7b6      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005d5a:	2340      	movs	r3, #64	; 0x40
 8005d5c:	e7b4      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	e7b2      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d66:	e7af      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6c:	e7ac      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d72:	e7a9      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d78:	e7a6      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d7e:	e7a3      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d84:	e7a0      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d8a:	e79d      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d90:	e79a      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_CC_ERR;
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	e797      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d9c:	e794      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_ERASE_RESET;
 8005d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005da2:	e791      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005da8:	e78e      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005daa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005dae:	e78b      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005db0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005db4:	e788      	b.n	8005cc8 <SDMMC_CmdSendSCR+0x48>
 8005db6:	bf00      	nop
 8005db8:	20000014 	.word	0x20000014
 8005dbc:	10624dd3 	.word	0x10624dd3
 8005dc0:	fdffe008 	.word	0xfdffe008

08005dc4 <SDMMC_CmdSendCID>:
  SDIOx->ARG = Command->Argument;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6083      	str	r3, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dca:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dcc:	6812      	ldr	r2, [r2, #0]
{
 8005dce:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dd0:	4817      	ldr	r0, [pc, #92]	; (8005e30 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dd2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dd6:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dda:	f023 030f 	bic.w	r3, r3, #15
 8005dde:	f443 6398 	orr.w	r3, r3, #1216	; 0x4c0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005de2:	0a52      	lsrs	r2, r2, #9
 8005de4:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005de8:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dec:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005df0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8005df2:	1e53      	subs	r3, r2, #1
 8005df4:	b14a      	cbz	r2, 8005e0a <SDMMC_CmdSendCID+0x46>
    sta_reg = SDIOx->STA;
 8005df6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005df8:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005dfc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e00:	d001      	beq.n	8005e06 <SDMMC_CmdSendCID+0x42>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e02:	0512      	lsls	r2, r2, #20
 8005e04:	d504      	bpl.n	8005e10 <SDMMC_CmdSendCID+0x4c>
    if (count-- == 0U)
 8005e06:	1c58      	adds	r0, r3, #1
 8005e08:	d1f5      	bne.n	8005df6 <SDMMC_CmdSendCID+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8005e0a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005e0e:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005e12:	075b      	lsls	r3, r3, #29
 8005e14:	d407      	bmi.n	8005e26 <SDMMC_CmdSendCID+0x62>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e16:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005e18:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e20:	23c5      	moveq	r3, #197	; 0xc5
 8005e22:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005e24:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e26:	2004      	movs	r0, #4
 8005e28:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2a:	4770      	bx	lr
 8005e2c:	20000014 	.word	0x20000014
 8005e30:	10624dd3 	.word	0x10624dd3

08005e34 <SDMMC_CmdSendCSD>:
  SDIOx->ARG = Command->Argument;
 8005e34:	6081      	str	r1, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e36:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <SDMMC_CmdSendCSD+0x70>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e38:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e3a:	491b      	ldr	r1, [pc, #108]	; (8005ea8 <SDMMC_CmdSendCSD+0x74>)
 8005e3c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e42:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e46:	f023 030f 	bic.w	r3, r3, #15
 8005e4a:	f443 6399 	orr.w	r3, r3, #1224	; 0x4c8
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e4e:	0a52      	lsrs	r2, r2, #9
 8005e50:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e54:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e58:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e5c:	60c3      	str	r3, [r0, #12]
{
 8005e5e:	4684      	mov	ip, r0
    if (count-- == 0U)
 8005e60:	1e53      	subs	r3, r2, #1
 8005e62:	b152      	cbz	r2, 8005e7a <SDMMC_CmdSendCSD+0x46>
    sta_reg = SDIOx->STA;
 8005e64:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e68:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005e6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e70:	d001      	beq.n	8005e76 <SDMMC_CmdSendCSD+0x42>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e72:	0512      	lsls	r2, r2, #20
 8005e74:	d504      	bpl.n	8005e80 <SDMMC_CmdSendCSD+0x4c>
    if (count-- == 0U)
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	d1f4      	bne.n	8005e64 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8005e7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005e7e:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e80:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8005e84:	075b      	lsls	r3, r3, #29
 8005e86:	d409      	bmi.n	8005e9c <SDMMC_CmdSendCSD+0x68>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e88:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8005e8c:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e94:	23c5      	moveq	r3, #197	; 0xc5
 8005e96:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005e9a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e9c:	2004      	movs	r0, #4
 8005e9e:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ea2:	4770      	bx	lr
 8005ea4:	20000014 	.word	0x20000014
 8005ea8:	10624dd3 	.word	0x10624dd3

08005eac <SDMMC_CmdSetRelAdd>:
  SDIOx->ARG = Command->Argument;
 8005eac:	2300      	movs	r3, #0
{
 8005eae:	b410      	push	{r4}
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <SDMMC_CmdSetRelAdd+0xa4>)
  SDIOx->ARG = Command->Argument;
 8005eb2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eb4:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4c26      	ldr	r4, [pc, #152]	; (8005f54 <SDMMC_CmdSetRelAdd+0xa8>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005ebe:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ec2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ec6:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005eca:	0a52      	lsrs	r2, r2, #9
 8005ecc:	f241 3c88 	movw	ip, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ed0:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ed4:	fb0c f202 	mul.w	r2, ip, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ed8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8005eda:	1e53      	subs	r3, r2, #1
 8005edc:	b14a      	cbz	r2, 8005ef2 <SDMMC_CmdSetRelAdd+0x46>
    sta_reg = SDIOx->STA;
 8005ede:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ee0:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005ee4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ee8:	d001      	beq.n	8005eee <SDMMC_CmdSetRelAdd+0x42>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eea:	0512      	lsls	r2, r2, #20
 8005eec:	d507      	bpl.n	8005efe <SDMMC_CmdSetRelAdd+0x52>
    if (count-- == 0U)
 8005eee:	1c5c      	adds	r4, r3, #1
 8005ef0:	d1f5      	bne.n	8005ede <SDMMC_CmdSetRelAdd+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8005ef2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efc:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f00:	075c      	lsls	r4, r3, #29
 8005f02:	d41c      	bmi.n	8005f3e <SDMMC_CmdSetRelAdd+0x92>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f06:	f013 0301 	ands.w	r3, r3, #1
 8005f0a:	d113      	bne.n	8005f34 <SDMMC_CmdSetRelAdd+0x88>
  return (uint8_t)(SDIOx->RESPCMD);
 8005f0c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d112      	bne.n	8005f3a <SDMMC_CmdSetRelAdd+0x8e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f14:	23c5      	movs	r3, #197	; 0xc5
 8005f16:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8005f18:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f1a:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8005f1e:	d014      	beq.n	8005f4a <SDMMC_CmdSetRelAdd+0x9e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f20:	0451      	lsls	r1, r2, #17
 8005f22:	d40f      	bmi.n	8005f44 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f24:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005f28:	bf14      	ite	ne
 8005f2a:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8005f2e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005f32:	e7e0      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f34:	2201      	movs	r2, #1
 8005f36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f38:	e7dd      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7db      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f3e:	2304      	movs	r3, #4
 8005f40:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f42:	e7d8      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f48:	e7d5      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f4a:	0c12      	lsrs	r2, r2, #16
 8005f4c:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8005f4e:	e7d2      	b.n	8005ef6 <SDMMC_CmdSetRelAdd+0x4a>
 8005f50:	20000014 	.word	0x20000014
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <SDMMC_CmdSendStatus>:
  SDIOx->ARG = Command->Argument;
 8005f58:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f5a:	4a4c      	ldr	r2, [pc, #304]	; (800608c <SDMMC_CmdSendStatus+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f5c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f5e:	494c      	ldr	r1, [pc, #304]	; (8006090 <SDMMC_CmdSendStatus+0x138>)
 8005f60:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f66:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f6a:	f023 030f 	bic.w	r3, r3, #15
 8005f6e:	f443 6389 	orr.w	r3, r3, #1096	; 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f72:	0a52      	lsrs	r2, r2, #9
 8005f74:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f78:	f043 0305 	orr.w	r3, r3, #5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005f7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f80:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8005f82:	1e53      	subs	r3, r2, #1
 8005f84:	b14a      	cbz	r2, 8005f9a <SDMMC_CmdSendStatus+0x42>
    sta_reg = SDIOx->STA;
 8005f86:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f88:	f012 0f45 	tst.w	r2, #69	; 0x45
    if (count-- == 0U)
 8005f8c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f90:	d001      	beq.n	8005f96 <SDMMC_CmdSendStatus+0x3e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f92:	0512      	lsls	r2, r2, #20
 8005f94:	d505      	bpl.n	8005fa2 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	d1f5      	bne.n	8005f86 <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8005f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fa4:	075b      	lsls	r3, r3, #29
 8005fa6:	d43d      	bmi.n	8006024 <SDMMC_CmdSendStatus+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005fa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005faa:	f013 0301 	ands.w	r3, r3, #1
 8005fae:	d134      	bne.n	800601a <SDMMC_CmdSendStatus+0xc2>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fb0:	23c5      	movs	r3, #197	; 0xc5
 8005fb2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8005fb4:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b0d      	cmp	r3, #13
 8005fba:	d131      	bne.n	8006020 <SDMMC_CmdSendStatus+0xc8>
  return (*(__IO uint32_t *) tmp);
 8005fbc:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005fbe:	4b35      	ldr	r3, [pc, #212]	; (8006094 <SDMMC_CmdSendStatus+0x13c>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0eb      	beq.n	8005f9e <SDMMC_CmdSendStatus+0x46>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	db2f      	blt.n	800602a <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005fca:	0050      	lsls	r0, r2, #1
 8005fcc:	d430      	bmi.n	8006030 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005fce:	0091      	lsls	r1, r2, #2
 8005fd0:	d430      	bmi.n	8006034 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005fd2:	00d0      	lsls	r0, r2, #3
 8005fd4:	d430      	bmi.n	8006038 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005fd6:	0111      	lsls	r1, r2, #4
 8005fd8:	d431      	bmi.n	800603e <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005fda:	0150      	lsls	r0, r2, #5
 8005fdc:	d432      	bmi.n	8006044 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005fde:	01d1      	lsls	r1, r2, #7
 8005fe0:	d433      	bmi.n	800604a <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005fe2:	0210      	lsls	r0, r2, #8
 8005fe4:	d434      	bmi.n	8006050 <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005fe6:	0251      	lsls	r1, r2, #9
 8005fe8:	d435      	bmi.n	8006056 <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005fea:	0290      	lsls	r0, r2, #10
 8005fec:	d43f      	bmi.n	800606e <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005fee:	02d1      	lsls	r1, r2, #11
 8005ff0:	d43a      	bmi.n	8006068 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ff2:	0350      	lsls	r0, r2, #13
 8005ff4:	d435      	bmi.n	8006062 <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005ff6:	0391      	lsls	r1, r2, #14
 8005ff8:	d430      	bmi.n	800605c <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ffa:	03d0      	lsls	r0, r2, #15
 8005ffc:	d443      	bmi.n	8006086 <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005ffe:	0411      	lsls	r1, r2, #16
 8006000:	d43e      	bmi.n	8006080 <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006002:	0450      	lsls	r0, r2, #17
 8006004:	d439      	bmi.n	800607a <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006006:	0491      	lsls	r1, r2, #18
 8006008:	d434      	bmi.n	8006074 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800600a:	f012 0f08 	tst.w	r2, #8
 800600e:	bf14      	ite	ne
 8006010:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006014:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006018:	e7c1      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800601a:	2201      	movs	r2, #1
 800601c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800601e:	e7be      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006020:	2301      	movs	r3, #1
 8006022:	e7bc      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006024:	2304      	movs	r3, #4
 8006026:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006028:	e7b9      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800602a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800602e:	e7b6      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	e7b4      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	e7b2      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800603c:	e7af      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800603e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006042:	e7ac      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006048:	e7a9      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800604a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800604e:	e7a6      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006054:	e7a3      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800605a:	e7a0      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800605c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006060:	e79d      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006066:	e79a      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CC_ERR;
 8006068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606c:	e797      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800606e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006072:	e794      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_ERASE_RESET;
 8006074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006078:	e791      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800607a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800607e:	e78e      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006084:	e78b      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006086:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800608a:	e788      	b.n	8005f9e <SDMMC_CmdSendStatus+0x46>
 800608c:	20000014 	.word	0x20000014
 8006090:	10624dd3 	.word	0x10624dd3
 8006094:	fdffe008 	.word	0xfdffe008

08006098 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006098:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800609a:	4903      	ldr	r1, [pc, #12]	; (80060a8 <MX_FATFS_Init+0x10>)
 800609c:	4803      	ldr	r0, [pc, #12]	; (80060ac <MX_FATFS_Init+0x14>)
 800609e:	f002 fbc1 	bl	8008824 <FATFS_LinkDriver>
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <MX_FATFS_Init+0x18>)
 80060a4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80060a6:	bd08      	pop	{r3, pc}
 80060a8:	200016c4 	.word	0x200016c4
 80060ac:	0800f900 	.word	0x0800f900
 80060b0:	200016c8 	.word	0x200016c8

080060b4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80060b4:	2000      	movs	r0, #0
 80060b6:	4770      	bx	lr

080060b8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80060b8:	b500      	push	{lr}
 80060ba:	b083      	sub	sp, #12
 80060bc:	4684      	mov	ip, r0
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4805      	ldr	r0, [pc, #20]	; (80060d8 <BSP_SD_ReadBlocks+0x20>)
 80060c2:	4613      	mov	r3, r2
 80060c4:	460a      	mov	r2, r1
 80060c6:	4661      	mov	r1, ip
 80060c8:	f7fd fc9c 	bl	8003a04 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80060cc:	3800      	subs	r0, #0
 80060ce:	bf18      	it	ne
 80060d0:	2001      	movne	r0, #1
 80060d2:	b003      	add	sp, #12
 80060d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80060d8:	20001520 	.word	0x20001520

080060dc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80060dc:	b500      	push	{lr}
 80060de:	b083      	sub	sp, #12
 80060e0:	4684      	mov	ip, r0
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4805      	ldr	r0, [pc, #20]	; (80060fc <BSP_SD_WriteBlocks+0x20>)
 80060e6:	4613      	mov	r3, r2
 80060e8:	460a      	mov	r2, r1
 80060ea:	4661      	mov	r1, ip
 80060ec:	f7fd fdba 	bl	8003c64 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80060f0:	3800      	subs	r0, #0
 80060f2:	bf18      	it	ne
 80060f4:	2001      	movne	r0, #1
 80060f6:	b003      	add	sp, #12
 80060f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060fc:	20001520 	.word	0x20001520

08006100 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006100:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006102:	4803      	ldr	r0, [pc, #12]	; (8006110 <BSP_SD_GetCardState+0x10>)
 8006104:	f7fe f93a 	bl	800437c <HAL_SD_GetCardState>
}
 8006108:	3804      	subs	r0, #4
 800610a:	bf18      	it	ne
 800610c:	2001      	movne	r0, #1
 800610e:	bd08      	pop	{r3, pc}
 8006110:	20001520 	.word	0x20001520

08006114 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006114:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006116:	4801      	ldr	r0, [pc, #4]	; (800611c <BSP_SD_GetCardInfo+0x8>)
 8006118:	f7fe b886 	b.w	8004228 <HAL_SD_GetCardInfo>
 800611c:	20001520 	.word	0x20001520

08006120 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006120:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8006122:	2301      	movs	r3, #1
 8006124:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006128:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800612c:	b002      	add	sp, #8
 800612e:	4770      	bx	lr

08006130 <BSP_SD_Init>:
{
 8006130:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006132:	f7ff fff5 	bl	8006120 <BSP_SD_IsDetected>
 8006136:	2801      	cmp	r0, #1
 8006138:	d001      	beq.n	800613e <BSP_SD_Init+0xe>
    return MSD_ERROR;
 800613a:	2001      	movs	r0, #1
}
 800613c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800613e:	4807      	ldr	r0, [pc, #28]	; (800615c <BSP_SD_Init+0x2c>)
 8006140:	f7fe f854 	bl	80041ec <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006144:	2800      	cmp	r0, #0
 8006146:	d1f9      	bne.n	800613c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800614c:	4803      	ldr	r0, [pc, #12]	; (800615c <BSP_SD_Init+0x2c>)
 800614e:	f7fe f87f 	bl	8004250 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8006152:	3800      	subs	r0, #0
 8006154:	bf18      	it	ne
 8006156:	2001      	movne	r0, #1
}
 8006158:	bd08      	pop	{r3, pc}
 800615a:	bf00      	nop
 800615c:	20001520 	.word	0x20001520

08006160 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006160:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8006162:	4c0a      	ldr	r4, [pc, #40]	; (800618c <SD_initialize+0x2c>)
 8006164:	2501      	movs	r5, #1
 8006166:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006168:	f7ff ffe2 	bl	8006130 <BSP_SD_Init>
 800616c:	b108      	cbz	r0, 8006172 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800616e:	7820      	ldrb	r0, [r4, #0]
}
 8006170:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8006172:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8006174:	f7ff ffc4 	bl	8006100 <BSP_SD_GetCardState>
 8006178:	b918      	cbnz	r0, 8006182 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800617a:	7823      	ldrb	r3, [r4, #0]
 800617c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006180:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006182:	7823      	ldrb	r3, [r4, #0]
 8006184:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8006186:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006188:	7820      	ldrb	r0, [r4, #0]
}
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000020 	.word	0x20000020

08006190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006190:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006192:	4c06      	ldr	r4, [pc, #24]	; (80061ac <SD_status+0x1c>)
 8006194:	2301      	movs	r3, #1
 8006196:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8006198:	f7ff ffb2 	bl	8006100 <BSP_SD_GetCardState>
 800619c:	b918      	cbnz	r0, 80061a6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800619e:	7823      	ldrb	r3, [r4, #0]
 80061a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061a4:	7023      	strb	r3, [r4, #0]
  return Stat;
 80061a6:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop
 80061ac:	20000020 	.word	0x20000020

080061b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80061b0:	b508      	push	{r3, lr}
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061bc:	f7ff ff7c 	bl	80060b8 <BSP_SD_ReadBlocks>
 80061c0:	b108      	cbz	r0, 80061c6 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 80061c2:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 80061c4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 80061c6:	f7ff ff9b 	bl	8006100 <BSP_SD_GetCardState>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d0fa      	beq.n	80061c4 <SD_read+0x14>
 80061ce:	f7ff ff97 	bl	8006100 <BSP_SD_GetCardState>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d1f7      	bne.n	80061c6 <SD_read+0x16>
 80061d6:	e7f5      	b.n	80061c4 <SD_read+0x14>

080061d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80061d8:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061da:	4b18      	ldr	r3, [pc, #96]	; (800623c <SD_ioctl+0x64>)
 80061dc:	7818      	ldrb	r0, [r3, #0]
 80061de:	f010 0401 	ands.w	r4, r0, #1
{
 80061e2:	b089      	sub	sp, #36	; 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061e4:	d106      	bne.n	80061f4 <SD_ioctl+0x1c>
 80061e6:	4615      	mov	r5, r2

  switch (cmd)
 80061e8:	2903      	cmp	r1, #3
 80061ea:	d824      	bhi.n	8006236 <SD_ioctl+0x5e>
 80061ec:	e8df f001 	tbb	[pc, r1]
 80061f0:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061f4:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80061f6:	4620      	mov	r0, r4
 80061f8:	b009      	add	sp, #36	; 0x24
 80061fa:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 80061fc:	460c      	mov	r4, r1
}
 80061fe:	4620      	mov	r0, r4
 8006200:	b009      	add	sp, #36	; 0x24
 8006202:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006204:	4668      	mov	r0, sp
 8006206:	f7ff ff85 	bl	8006114 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800620a:	9b06      	ldr	r3, [sp, #24]
 800620c:	602b      	str	r3, [r5, #0]
}
 800620e:	4620      	mov	r0, r4
 8006210:	b009      	add	sp, #36	; 0x24
 8006212:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006214:	4668      	mov	r0, sp
 8006216:	f7ff ff7d 	bl	8006114 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	802b      	strh	r3, [r5, #0]
}
 800621e:	4620      	mov	r0, r4
 8006220:	b009      	add	sp, #36	; 0x24
 8006222:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006224:	4668      	mov	r0, sp
 8006226:	f7ff ff75 	bl	8006114 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800622a:	9b07      	ldr	r3, [sp, #28]
}
 800622c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800622e:	0a5b      	lsrs	r3, r3, #9
 8006230:	602b      	str	r3, [r5, #0]
}
 8006232:	b009      	add	sp, #36	; 0x24
 8006234:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 8006236:	2404      	movs	r4, #4
 8006238:	e7dd      	b.n	80061f6 <SD_ioctl+0x1e>
 800623a:	bf00      	nop
 800623c:	20000020 	.word	0x20000020

08006240 <SD_write>:
{
 8006240:	b508      	push	{r3, lr}
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006246:	461a      	mov	r2, r3
 8006248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624c:	f7ff ff46 	bl	80060dc <BSP_SD_WriteBlocks>
 8006250:	b108      	cbz	r0, 8006256 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 8006252:	2001      	movs	r0, #1
}
 8006254:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006256:	f7ff ff53 	bl	8006100 <BSP_SD_GetCardState>
 800625a:	2800      	cmp	r0, #0
 800625c:	d0fa      	beq.n	8006254 <SD_write+0x14>
 800625e:	f7ff ff4f 	bl	8006100 <BSP_SD_GetCardState>
 8006262:	2800      	cmp	r0, #0
 8006264:	d1f7      	bne.n	8006256 <SD_write+0x16>
 8006266:	e7f5      	b.n	8006254 <SD_write+0x14>

08006268 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <disk_status+0x10>)
 800626a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800626e:	4403      	add	r3, r0
 8006270:	6852      	ldr	r2, [r2, #4]
 8006272:	7a18      	ldrb	r0, [r3, #8]
 8006274:	6853      	ldr	r3, [r2, #4]
 8006276:	4718      	bx	r3
 8006278:	200018f4 	.word	0x200018f4

0800627c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <disk_initialize+0x1c>)
 800627e:	5c1a      	ldrb	r2, [r3, r0]
 8006280:	b942      	cbnz	r2, 8006294 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006282:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 8006286:	2101      	movs	r1, #1
 8006288:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800628a:	6852      	ldr	r2, [r2, #4]
 800628c:	4418      	add	r0, r3
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	7a00      	ldrb	r0, [r0, #8]
 8006292:	4718      	bx	r3
  }
  return stat;
}
 8006294:	2000      	movs	r0, #0
 8006296:	4770      	bx	lr
 8006298:	200018f4 	.word	0x200018f4

0800629c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800629c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800629e:	4c05      	ldr	r4, [pc, #20]	; (80062b4 <disk_read+0x18>)
 80062a0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80062a4:	4404      	add	r4, r0
 80062a6:	686d      	ldr	r5, [r5, #4]
 80062a8:	7a20      	ldrb	r0, [r4, #8]
 80062aa:	68ac      	ldr	r4, [r5, #8]
 80062ac:	46a4      	mov	ip, r4
  return res;
}
 80062ae:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062b0:	4760      	bx	ip
 80062b2:	bf00      	nop
 80062b4:	200018f4 	.word	0x200018f4

080062b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062b8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062ba:	4c05      	ldr	r4, [pc, #20]	; (80062d0 <disk_write+0x18>)
 80062bc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80062c0:	4404      	add	r4, r0
 80062c2:	686d      	ldr	r5, [r5, #4]
 80062c4:	7a20      	ldrb	r0, [r4, #8]
 80062c6:	68ec      	ldr	r4, [r5, #12]
 80062c8:	46a4      	mov	ip, r4
  return res;
}
 80062ca:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062cc:	4760      	bx	ip
 80062ce:	bf00      	nop
 80062d0:	200018f4 	.word	0x200018f4

080062d4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <disk_ioctl+0x14>)
 80062d6:	eb03 0c00 	add.w	ip, r3, r0
 80062da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80062de:	f89c 0008 	ldrb.w	r0, [ip, #8]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	4718      	bx	r3
 80062e8:	200018f4 	.word	0x200018f4

080062ec <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80062ec:	4b2a      	ldr	r3, [pc, #168]	; (8006398 <inc_lock+0xac>)
{
 80062ee:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	6805      	ldr	r5, [r0, #0]
 80062f4:	4295      	cmp	r5, r2
 80062f6:	d01d      	beq.n	8006334 <inc_lock+0x48>
 80062f8:	691c      	ldr	r4, [r3, #16]
 80062fa:	42ac      	cmp	r4, r5
 80062fc:	d007      	beq.n	800630e <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d02e      	beq.n	8006360 <inc_lock+0x74>
 8006302:	2c00      	cmp	r4, #0
 8006304:	d044      	beq.n	8006390 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006306:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8006308:	4620      	mov	r0, r4
 800630a:	bcf0      	pop	{r4, r5, r6, r7}
 800630c:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800630e:	695e      	ldr	r6, [r3, #20]
 8006310:	6887      	ldr	r7, [r0, #8]
 8006312:	42be      	cmp	r6, r7
 8006314:	d1f3      	bne.n	80062fe <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 8006316:	699e      	ldr	r6, [r3, #24]
 8006318:	6947      	ldr	r7, [r0, #20]
 800631a:	42be      	cmp	r6, r7
 800631c:	d1ef      	bne.n	80062fe <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800631e:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006320:	b999      	cbnz	r1, 800634a <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006322:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 8006326:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800632a:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 800632c:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800632e:	1c4a      	adds	r2, r1, #1
 8006330:	b292      	uxth	r2, r2
 8006332:	e028      	b.n	8006386 <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 8006334:	6884      	ldr	r4, [r0, #8]
 8006336:	685e      	ldr	r6, [r3, #4]
 8006338:	42a6      	cmp	r6, r4
 800633a:	d1dd      	bne.n	80062f8 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800633c:	689c      	ldr	r4, [r3, #8]
 800633e:	6946      	ldr	r6, [r0, #20]
 8006340:	42a6      	cmp	r6, r4
 8006342:	d1d9      	bne.n	80062f8 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006344:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006346:	2900      	cmp	r1, #0
 8006348:	d0eb      	beq.n	8006322 <inc_lock+0x36>
 800634a:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 800634e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8006352:	8989      	ldrh	r1, [r1, #12]
 8006354:	2900      	cmp	r1, #0
 8006356:	d1d6      	bne.n	8006306 <inc_lock+0x1a>
	return i + 1;
 8006358:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800635a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800635e:	e012      	b.n	8006386 <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006360:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006362:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 8006364:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8006368:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800636c:	6942      	ldr	r2, [r0, #20]
 800636e:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 8006370:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 8006374:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800637e:	bf14      	ite	ne
 8006380:	f44f 7280 	movne.w	r2, #256	; 0x100
 8006384:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006386:	4463      	add	r3, ip
}
 8006388:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800638a:	819a      	strh	r2, [r3, #12]
}
 800638c:	bcf0      	pop	{r4, r5, r6, r7}
 800638e:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006390:	2402      	movs	r4, #2
 8006392:	2201      	movs	r2, #1
 8006394:	e7e5      	b.n	8006362 <inc_lock+0x76>
 8006396:	bf00      	nop
 8006398:	200016d0 	.word	0x200016d0

0800639c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800639c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800639e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80063a2:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063a4:	42b1      	cmp	r1, r6
{
 80063a6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80063a8:	70c3      	strb	r3, [r0, #3]
 80063aa:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80063ac:	d00c      	beq.n	80063c8 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80063ae:	460d      	mov	r5, r1
 80063b0:	460a      	mov	r2, r1
 80063b2:	7840      	ldrb	r0, [r0, #1]
 80063b4:	2301      	movs	r3, #1
 80063b6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80063ba:	f7ff ff6f 	bl	800629c <disk_read>
 80063be:	b110      	cbz	r0, 80063c6 <check_fs+0x2a>
			fs->winsect = sector;
 80063c0:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80063c2:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 80063c6:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80063c8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 80063cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d11a      	bne.n	800640a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80063d4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80063d8:	2be9      	cmp	r3, #233	; 0xe9
 80063da:	d007      	beq.n	80063ec <check_fs+0x50>
 80063dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063de:	4a0d      	ldr	r2, [pc, #52]	; (8006414 <check_fs+0x78>)
 80063e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d001      	beq.n	80063ec <check_fs+0x50>
	return 2;
 80063e8:	2002      	movs	r0, #2
}
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 80063ec:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80063f0:	4a09      	ldr	r2, [pc, #36]	; (8006418 <check_fs+0x7c>)
 80063f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 80063fa:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <check_fs+0x80>)
 8006400:	4298      	cmp	r0, r3
 8006402:	bf14      	ite	ne
 8006404:	2002      	movne	r0, #2
 8006406:	2000      	moveq	r0, #0
}
 8006408:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800640a:	2003      	movs	r0, #3
}
 800640c:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800640e:	2000      	movs	r0, #0
}
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	bf00      	nop
 8006414:	009000eb 	.word	0x009000eb
 8006418:	00544146 	.word	0x00544146
 800641c:	33544146 	.word	0x33544146

08006420 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006422:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006424:	b083      	sub	sp, #12
 8006426:	4604      	mov	r4, r0
 8006428:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800642a:	b973      	cbnz	r3, 800644a <move_window.part.0+0x2a>
 800642c:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006430:	462a      	mov	r2, r5
 8006432:	7860      	ldrb	r0, [r4, #1]
 8006434:	2301      	movs	r3, #1
 8006436:	f7ff ff31 	bl	800629c <disk_read>
				res = FR_DISK_ERR;
 800643a:	2800      	cmp	r0, #0
 800643c:	bf1c      	itt	ne
 800643e:	2001      	movne	r0, #1
 8006440:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 8006444:	6325      	str	r5, [r4, #48]	; 0x30
}
 8006446:	b003      	add	sp, #12
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800644a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800644c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8006450:	2301      	movs	r3, #1
 8006452:	7840      	ldrb	r0, [r0, #1]
 8006454:	9101      	str	r1, [sp, #4]
 8006456:	4632      	mov	r2, r6
 8006458:	f7ff ff2e 	bl	80062b8 <disk_write>
 800645c:	b9b8      	cbnz	r0, 800648e <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800645e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006460:	69e3      	ldr	r3, [r4, #28]
 8006462:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8006464:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006466:	1ab2      	subs	r2, r6, r2
 8006468:	429a      	cmp	r2, r3
 800646a:	d2e1      	bcs.n	8006430 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800646c:	78a7      	ldrb	r7, [r4, #2]
 800646e:	2f01      	cmp	r7, #1
 8006470:	d801      	bhi.n	8006476 <move_window.part.0+0x56>
 8006472:	e7dd      	b.n	8006430 <move_window.part.0+0x10>
					wsect += fs->fsize;
 8006474:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006476:	7860      	ldrb	r0, [r4, #1]
 8006478:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 800647a:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800647c:	4632      	mov	r2, r6
 800647e:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006480:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006482:	f7ff ff19 	bl	80062b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006486:	2f01      	cmp	r7, #1
 8006488:	9901      	ldr	r1, [sp, #4]
 800648a:	d1f3      	bne.n	8006474 <move_window.part.0+0x54>
 800648c:	e7d0      	b.n	8006430 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 800648e:	2001      	movs	r0, #1
}
 8006490:	b003      	add	sp, #12
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006494 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 8006498:	6804      	ldr	r4, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800649e:	b174      	cbz	r4, 80064be <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064a0:	7825      	ldrb	r5, [r4, #0]
 80064a2:	2d1f      	cmp	r5, #31
 80064a4:	d914      	bls.n	80064d0 <find_volume+0x3c>
 80064a6:	462b      	mov	r3, r5
 80064a8:	46a4      	mov	ip, r4
 80064aa:	e003      	b.n	80064b4 <find_volume+0x20>
 80064ac:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80064b0:	2b1f      	cmp	r3, #31
 80064b2:	d90d      	bls.n	80064d0 <find_volume+0x3c>
 80064b4:	2b3a      	cmp	r3, #58	; 0x3a
 80064b6:	d1f9      	bne.n	80064ac <find_volume+0x18>
			i = *tp++ - '0';
 80064b8:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064ba:	45a4      	cmp	ip, r4
 80064bc:	d003      	beq.n	80064c6 <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 80064be:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80064c6:	2d30      	cmp	r5, #48	; 0x30
 80064c8:	d1f9      	bne.n	80064be <find_volume+0x2a>
					*path = ++tt;
 80064ca:	f10c 0301 	add.w	r3, ip, #1
 80064ce:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80064d0:	4b9f      	ldr	r3, [pc, #636]	; (8006750 <find_volume+0x2bc>)
 80064d2:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	f000 80ce 	beq.w	8006676 <find_volume+0x1e2>
	*rfs = fs;							/* Return pointer to the file system object */
 80064da:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80064dc:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80064de:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80064e2:	b17b      	cbz	r3, 8006504 <find_volume+0x70>
		stat = disk_status(fs->drv);
 80064e4:	7868      	ldrb	r0, [r5, #1]
 80064e6:	f7ff febf 	bl	8006268 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80064ea:	07c1      	lsls	r1, r0, #31
 80064ec:	d40a      	bmi.n	8006504 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	f000 80b0 	beq.w	8006654 <find_volume+0x1c0>
 80064f4:	f010 0404 	ands.w	r4, r0, #4
 80064f8:	f000 80ac 	beq.w	8006654 <find_volume+0x1c0>
				return FR_WRITE_PROTECTED;
 80064fc:	240a      	movs	r4, #10
}
 80064fe:	4620      	mov	r0, r4
 8006500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006504:	2000      	movs	r0, #0
 8006506:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006508:	f7ff feb8 	bl	800627c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800650c:	07c2      	lsls	r2, r0, #31
 800650e:	f100 80a4 	bmi.w	800665a <find_volume+0x1c6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006512:	b10c      	cbz	r4, 8006518 <find_volume+0x84>
 8006514:	0743      	lsls	r3, r0, #29
 8006516:	d4f1      	bmi.n	80064fc <find_volume+0x68>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006518:	2100      	movs	r1, #0
 800651a:	4628      	mov	r0, r5
 800651c:	f7ff ff3e 	bl	800639c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006520:	2802      	cmp	r0, #2
 8006522:	d07c      	beq.n	800661e <find_volume+0x18a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006524:	2804      	cmp	r0, #4
 8006526:	f000 80a4 	beq.w	8006672 <find_volume+0x1de>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800652a:	2801      	cmp	r0, #1
	bsect = 0;
 800652c:	bf98      	it	ls
 800652e:	2400      	movls	r4, #0
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006530:	f200 808f 	bhi.w	8006652 <find_volume+0x1be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006534:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 8006538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653c:	f040 8089 	bne.w	8006652 <find_volume+0x1be>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006540:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006544:	b902      	cbnz	r2, 8006548 <find_volume+0xb4>
	rv = rv << 8 | ptr[0];
 8006546:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006548:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800654c:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800654e:	1e59      	subs	r1, r3, #1
 8006550:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006552:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006554:	d87d      	bhi.n	8006652 <find_volume+0x1be>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006556:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800655a:	b288      	uxth	r0, r1
 800655c:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800655e:	2800      	cmp	r0, #0
 8006560:	d077      	beq.n	8006652 <find_volume+0x1be>
 8006562:	1e48      	subs	r0, r1, #1
 8006564:	4208      	tst	r0, r1
 8006566:	d174      	bne.n	8006652 <find_volume+0x1be>
	rv = ptr[1];
 8006568:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800656c:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006570:	f01c 0f0f 	tst.w	ip, #15
 8006574:	d16d      	bne.n	8006652 <find_volume+0x1be>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006576:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800657a:	b900      	cbnz	r0, 800657e <find_volume+0xea>
	rv = rv << 8 | ptr[0];
 800657c:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 800657e:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006582:	2f00      	cmp	r7, #0
 8006584:	d065      	beq.n	8006652 <find_volume+0x1be>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006586:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800658a:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800658e:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006590:	42b0      	cmp	r0, r6
 8006592:	d35e      	bcc.n	8006652 <find_volume+0x1be>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006594:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006598:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800659a:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800659e:	d358      	bcc.n	8006652 <find_volume+0x1be>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065a0:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 80065a4:	4288      	cmp	r0, r1
 80065a6:	f200 8084 	bhi.w	80066b2 <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065aa:	f640 71f5 	movw	r1, #4085	; 0xff5
 80065ae:	4288      	cmp	r0, r1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065b0:	4427      	add	r7, r4
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065b2:	f100 0002 	add.w	r0, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80065b6:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 80065b8:	622c      	str	r4, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80065ba:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065bc:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065be:	626f      	str	r7, [r5, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065c0:	f200 8097 	bhi.w	80066f2 <find_volume+0x25e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80065c4:	f1bc 0f00 	cmp.w	ip, #0
 80065c8:	d043      	beq.n	8006652 <find_volume+0x1be>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80065ca:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065cc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80065d0:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80065d4:	62ab      	str	r3, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065d6:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 80065da:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80065dc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
 80065e0:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
 80065e4:	d335      	bcc.n	8006652 <find_volume+0x1be>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ea:	e9c5 2204 	strd	r2, r2, [r5, #16]
		fs->fsi_flag = 0x80;
 80065ee:	2180      	movs	r1, #128	; 0x80
 80065f0:	7129      	strb	r1, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80065f2:	4958      	ldr	r1, [pc, #352]	; (8006754 <find_volume+0x2c0>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065f4:	4a58      	ldr	r2, [pc, #352]	; (8006758 <find_volume+0x2c4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80065f6:	702b      	strb	r3, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80065f8:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065fa:	6810      	ldr	r0, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80065fc:	4c57      	ldr	r4, [pc, #348]	; (800675c <find_volume+0x2c8>)
 80065fe:	60ec      	str	r4, [r5, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8006600:	3301      	adds	r3, #1
 8006602:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006604:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 8006606:	800b      	strh	r3, [r1, #0]
 8006608:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800660a:	bf04      	itt	eq
 800660c:	2300      	moveq	r3, #0
 800660e:	6013      	streq	r3, [r2, #0]
 8006610:	6913      	ldr	r3, [r2, #16]
 8006612:	429d      	cmp	r5, r3
 8006614:	f04f 0400 	mov.w	r4, #0
 8006618:	d11c      	bne.n	8006654 <find_volume+0x1c0>
 800661a:	6114      	str	r4, [r2, #16]
 800661c:	e01a      	b.n	8006654 <find_volume+0x1c0>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800661e:	f895 41f6 	ldrb.w	r4, [r5, #502]	; 0x1f6
 8006622:	b10c      	cbz	r4, 8006628 <find_volume+0x194>
	rv = rv << 8 | ptr[0];
 8006624:	f8d5 41fa 	ldr.w	r4, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006628:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 800662c:	b32b      	cbz	r3, 800667a <find_volume+0x1e6>
	rv = rv << 8 | ptr[0];
 800662e:	f8d5 820a 	ldr.w	r8, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006632:	f895 7216 	ldrb.w	r7, [r5, #534]	; 0x216
 8006636:	b10f      	cbz	r7, 800663c <find_volume+0x1a8>
	rv = rv << 8 | ptr[0];
 8006638:	f8d5 721a 	ldr.w	r7, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800663c:	f895 6226 	ldrb.w	r6, [r5, #550]	; 0x226
 8006640:	b10e      	cbz	r6, 8006646 <find_volume+0x1b2>
	rv = rv << 8 | ptr[0];
 8006642:	f8d5 622a 	ldr.w	r6, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006646:	b9d4      	cbnz	r4, 800667e <find_volume+0x1ea>
 8006648:	f1b8 0f00 	cmp.w	r8, #0
 800664c:	d121      	bne.n	8006692 <find_volume+0x1fe>
 800664e:	bb47      	cbnz	r7, 80066a2 <find_volume+0x20e>
 8006650:	b93e      	cbnz	r6, 8006662 <find_volume+0x1ce>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006652:	240d      	movs	r4, #13
}
 8006654:	4620      	mov	r0, r4
 8006656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800665a:	2403      	movs	r4, #3
}
 800665c:	4620      	mov	r0, r4
 800665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff fe99 	bl	800639c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800666a:	2801      	cmp	r0, #1
 800666c:	d949      	bls.n	8006702 <find_volume+0x26e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800666e:	2804      	cmp	r0, #4
 8006670:	d1ef      	bne.n	8006652 <find_volume+0x1be>
 8006672:	2401      	movs	r4, #1
 8006674:	e7ee      	b.n	8006654 <find_volume+0x1c0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006676:	240c      	movs	r4, #12
 8006678:	e7ec      	b.n	8006654 <find_volume+0x1c0>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800667a:	4698      	mov	r8, r3
 800667c:	e7d9      	b.n	8006632 <find_volume+0x19e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800667e:	4621      	mov	r1, r4
 8006680:	4628      	mov	r0, r5
 8006682:	f7ff fe8b 	bl	800639c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006686:	2801      	cmp	r0, #1
 8006688:	f67f af54 	bls.w	8006534 <find_volume+0xa0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800668c:	f1b8 0f00 	cmp.w	r8, #0
 8006690:	d0dd      	beq.n	800664e <find_volume+0x1ba>
 8006692:	4641      	mov	r1, r8
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff fe81 	bl	800639c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800669a:	2801      	cmp	r0, #1
 800669c:	d8d7      	bhi.n	800664e <find_volume+0x1ba>
 800669e:	4644      	mov	r4, r8
 80066a0:	e748      	b.n	8006534 <find_volume+0xa0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80066a2:	4639      	mov	r1, r7
 80066a4:	4628      	mov	r0, r5
 80066a6:	f7ff fe79 	bl	800639c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066aa:	2801      	cmp	r0, #1
 80066ac:	d8d0      	bhi.n	8006650 <find_volume+0x1bc>
 80066ae:	463c      	mov	r4, r7
 80066b0:	e740      	b.n	8006534 <find_volume+0xa0>
	rv = rv << 8 | ptr[0];
 80066b2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 80066b6:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80066b8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80066ba:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 80066bc:	4426      	add	r6, r4
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80066be:	ea53 030c 	orrs.w	r3, r3, ip
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80066c2:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80066c4:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80066c6:	61a8      	str	r0, [r5, #24]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80066c8:	d1c3      	bne.n	8006652 <find_volume+0x1be>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80066ca:	0080      	lsls	r0, r0, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80066cc:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[0];
 80066d0:	6e29      	ldr	r1, [r5, #96]	; 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80066d2:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80066d4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 80066d8:	d3bb      	bcc.n	8006652 <find_volume+0x1be>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066da:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 80066e2:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066e4:	2a01      	cmp	r2, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066e6:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 80066ea:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066ec:	d00b      	beq.n	8006706 <find_volume+0x272>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80066ee:	2303      	movs	r3, #3
 80066f0:	e77f      	b.n	80065f2 <find_volume+0x15e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80066f2:	f1bc 0f00 	cmp.w	ip, #0
 80066f6:	d0ac      	beq.n	8006652 <find_volume+0x1be>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066f8:	443b      	add	r3, r7
 80066fa:	62ab      	str	r3, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066fc:	0040      	lsls	r0, r0, #1
 80066fe:	2302      	movs	r3, #2
 8006700:	e76c      	b.n	80065dc <find_volume+0x148>
 8006702:	4634      	mov	r4, r6
 8006704:	e716      	b.n	8006534 <find_volume+0xa0>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006706:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 8006708:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800670a:	4299      	cmp	r1, r3
 800670c:	d004      	beq.n	8006718 <find_volume+0x284>
 800670e:	4628      	mov	r0, r5
 8006710:	f7ff fe86 	bl	8006420 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006714:	2800      	cmp	r0, #0
 8006716:	d1ea      	bne.n	80066ee <find_volume+0x25a>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006718:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
 800671c:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8006720:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006722:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8006724:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006726:	d1e2      	bne.n	80066ee <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 8006728:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <find_volume+0x2cc>)
 800672c:	429a      	cmp	r2, r3
 800672e:	d1de      	bne.n	80066ee <find_volume+0x25a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006730:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8006734:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006738:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800673c:	3320      	adds	r3, #32
 800673e:	429a      	cmp	r2, r3
 8006740:	d1d5      	bne.n	80066ee <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 8006742:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006746:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800674a:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800674e:	e7ce      	b.n	80066ee <find_volume+0x25a>
 8006750:	200016cc 	.word	0x200016cc
 8006754:	200016f0 	.word	0x200016f0
 8006758:	200016d0 	.word	0x200016d0
 800675c:	200016f4 	.word	0x200016f4
 8006760:	41615252 	.word	0x41615252

08006764 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8006764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8006768:	7803      	ldrb	r3, [r0, #0]
 800676a:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800676c:	4604      	mov	r4, r0
 800676e:	460d      	mov	r5, r1
 8006770:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8006772:	d006      	beq.n	8006782 <put_fat.part.0+0x1e>
 8006774:	2b03      	cmp	r3, #3
 8006776:	d052      	beq.n	800681e <put_fat.part.0+0xba>
 8006778:	2b01      	cmp	r3, #1
 800677a:	d01b      	beq.n	80067b4 <put_fat.part.0+0x50>
 800677c:	2002      	movs	r0, #2
}
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006782:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006784:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006786:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800678a:	4299      	cmp	r1, r3
 800678c:	d003      	beq.n	8006796 <put_fat.part.0+0x32>
 800678e:	f7ff fe47 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 8006792:	2800      	cmp	r0, #0
 8006794:	d1f3      	bne.n	800677e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006796:	006d      	lsls	r5, r5, #1
 8006798:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800679c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80067a0:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80067a2:	555e      	strb	r6, [r3, r5]
 80067a4:	f3c6 2207 	ubfx	r2, r6, #8, #8
			fs->wflag = 1;
 80067a8:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80067aa:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 80067ac:	70e3      	strb	r3, [r4, #3]
			break;
 80067ae:	2000      	movs	r0, #0
}
 80067b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 80067b4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067bc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d003      	beq.n	80067cc <put_fat.part.0+0x68>
 80067c4:	f7ff fe2c 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d1d8      	bne.n	800677e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80067cc:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 80067ce:	f107 0801 	add.w	r8, r7, #1
 80067d2:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80067d6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80067da:	d542      	bpl.n	8006862 <put_fat.part.0+0xfe>
 80067dc:	f819 3007 	ldrb.w	r3, [r9, r7]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80067e8:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 80067ec:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80067f0:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067f4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80067f8:	4299      	cmp	r1, r3
 80067fa:	d004      	beq.n	8006806 <put_fat.part.0+0xa2>
 80067fc:	4620      	mov	r0, r4
 80067fe:	f7ff fe0f 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 8006802:	2800      	cmp	r0, #0
 8006804:	d1bb      	bne.n	800677e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8006806:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800680a:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800680c:	f3c6 1207 	ubfx	r2, r6, #4, #8
			fs->wflag = 1;
 8006810:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006812:	f888 2000 	strb.w	r2, [r8]
			fs->wflag = 1;
 8006816:	70e3      	strb	r3, [r4, #3]
			break;
 8006818:	2000      	movs	r0, #0
}
 800681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800681e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006820:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006822:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006826:	4299      	cmp	r1, r3
 8006828:	d003      	beq.n	8006832 <put_fat.part.0+0xce>
 800682a:	f7ff fdf9 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 800682e:	2800      	cmp	r0, #0
 8006830:	d1a5      	bne.n	800677e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006832:	00ad      	lsls	r5, r5, #2
 8006834:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006838:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800683c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 8006840:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006842:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006846:	1941      	adds	r1, r0, r5
 8006848:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800684a:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800684c:	5542      	strb	r2, [r0, r5]
 800684e:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006850:	708b      	strb	r3, [r1, #2]
 8006852:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 8006854:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8006856:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 8006858:	70ca      	strb	r2, [r1, #3]
			fs->wflag = 1;
 800685a:	70e3      	strb	r3, [r4, #3]
			break;
 800685c:	2000      	movs	r0, #0
}
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006862:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8006866:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006868:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800686a:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800686c:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800686e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006872:	4299      	cmp	r1, r3
 8006874:	d005      	beq.n	8006882 <put_fat.part.0+0x11e>
 8006876:	4620      	mov	r0, r4
 8006878:	f7ff fdd2 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 800687c:	2800      	cmp	r0, #0
 800687e:	f47f af7e 	bne.w	800677e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8006882:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8006886:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006888:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800688c:	f898 3000 	ldrb.w	r3, [r8]
 8006890:	f023 060f 	bic.w	r6, r3, #15
 8006894:	4332      	orrs	r2, r6
 8006896:	e7bb      	b.n	8006810 <put_fat.part.0+0xac>

08006898 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006898:	2901      	cmp	r1, #1
 800689a:	d90e      	bls.n	80068ba <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800689e:	6983      	ldr	r3, [r0, #24]
 80068a0:	4299      	cmp	r1, r3
 80068a2:	460c      	mov	r4, r1
 80068a4:	4605      	mov	r5, r0
 80068a6:	d206      	bcs.n	80068b6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 80068a8:	7803      	ldrb	r3, [r0, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d03e      	beq.n	800692c <get_fat.isra.0+0x94>
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d02b      	beq.n	800690a <get_fat.isra.0+0x72>
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d003      	beq.n	80068be <get_fat.isra.0+0x26>
 80068b6:	2001      	movs	r0, #1
}
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80068ba:	2001      	movs	r0, #1
}
 80068bc:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068be:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 80068c2:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068c6:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068ca:	4291      	cmp	r1, r2
 80068cc:	d004      	beq.n	80068d8 <get_fat.isra.0+0x40>
 80068ce:	f7ff fda7 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068d2:	bba0      	cbnz	r0, 800693e <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80068d8:	f3c7 0008 	ubfx	r0, r7, #0, #9
 80068dc:	3701      	adds	r7, #1
 80068de:	4428      	add	r0, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068e0:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068e4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80068e6:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80068ea:	d003      	beq.n	80068f4 <get_fat.isra.0+0x5c>
 80068ec:	4628      	mov	r0, r5
 80068ee:	f7ff fd97 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068f2:	bb20      	cbnz	r0, 800693e <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 80068f4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80068f8:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80068fa:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80068fc:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8006900:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006904:	d524      	bpl.n	8006950 <get_fat.isra.0+0xb8>
 8006906:	0900      	lsrs	r0, r0, #4
}
 8006908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800690a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800690c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800690e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006912:	4299      	cmp	r1, r3
 8006914:	d002      	beq.n	800691c <get_fat.isra.0+0x84>
 8006916:	f7ff fd83 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800691a:	b980      	cbnz	r0, 800693e <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800691c:	00a4      	lsls	r4, r4, #2
 800691e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006922:	4425      	add	r5, r4
 8006924:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006926:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800692c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800692e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006930:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006934:	4299      	cmp	r1, r3
 8006936:	d005      	beq.n	8006944 <get_fat.isra.0+0xac>
 8006938:	f7ff fd72 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800693c:	b110      	cbz	r0, 8006944 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800693e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006944:	0064      	lsls	r4, r4, #1
 8006946:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800694a:	4425      	add	r5, r4
 800694c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006950:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8006954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006956:	bf00      	nop

08006958 <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006958:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800695e:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006960:	b37b      	cbz	r3, 80069c2 <dir_next.constprop.0+0x6a>
 8006962:	3520      	adds	r5, #32
 8006964:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006968:	d22b      	bcs.n	80069c2 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800696a:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800696e:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006970:	4604      	mov	r4, r0
 8006972:	b137      	cbz	r7, 8006982 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006974:	3634      	adds	r6, #52	; 0x34
 8006976:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
 8006978:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800697a:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800697c:	2000      	movs	r0, #0
}
 800697e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dp->clust) {		/* Static table */
 8006982:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8006984:	3301      	adds	r3, #1
 8006986:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8006988:	b1f1      	cbz	r1, 80069c8 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800698a:	8973      	ldrh	r3, [r6, #10]
 800698c:	3b01      	subs	r3, #1
 800698e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8006992:	d1ef      	bne.n	8006974 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff ff7f 	bl	8006898 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800699a:	2801      	cmp	r0, #1
 800699c:	d91c      	bls.n	80069d8 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d01c      	beq.n	80069dc <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80069a2:	69b3      	ldr	r3, [r6, #24]
 80069a4:	4298      	cmp	r0, r3
 80069a6:	d213      	bcs.n	80069d0 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069a8:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80069aa:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80069ac:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069ae:	4298      	cmp	r0, r3
 80069b0:	d204      	bcs.n	80069bc <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 80069b2:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 80069b6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80069b8:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 80069bc:	f8c4 801c 	str.w	r8, [r4, #28]
 80069c0:	e7d8      	b.n	8006974 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069c2:	2004      	movs	r0, #4
}
 80069c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069c8:	8933      	ldrh	r3, [r6, #8]
 80069ca:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80069ce:	d8d1      	bhi.n	8006974 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61e3      	str	r3, [r4, #28]
 80069d4:	2004      	movs	r0, #4
 80069d6:	e7d2      	b.n	800697e <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80069d8:	2002      	movs	r0, #2
 80069da:	e7d0      	b.n	800697e <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80069dc:	2001      	movs	r0, #1
 80069de:	e7ce      	b.n	800697e <dir_next.constprop.0+0x26>

080069e0 <sync_fs>:
{
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069e2:	78c3      	ldrb	r3, [r0, #3]
{
 80069e4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069e6:	b95b      	cbnz	r3, 8006a00 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069e8:	7823      	ldrb	r3, [r4, #0]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d029      	beq.n	8006a42 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069ee:	2200      	movs	r2, #0
 80069f0:	7860      	ldrb	r0, [r4, #1]
 80069f2:	4611      	mov	r1, r2
 80069f4:	f7ff fc6e 	bl	80062d4 <disk_ioctl>
			res = FR_DISK_ERR;
 80069f8:	3800      	subs	r0, #0
 80069fa:	bf18      	it	ne
 80069fc:	2001      	movne	r0, #1
}
 80069fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8006a00:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a02:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8006a06:	2301      	movs	r3, #1
 8006a08:	7840      	ldrb	r0, [r0, #1]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7ff fc53 	bl	80062b8 <disk_write>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d150      	bne.n	8006ab8 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006a18:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 8006a1a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a1c:	1aaa      	subs	r2, r5, r2
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d2e2      	bcs.n	80069e8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a22:	78a6      	ldrb	r6, [r4, #2]
 8006a24:	2e01      	cmp	r6, #1
 8006a26:	d801      	bhi.n	8006a2c <sync_fs+0x4c>
 8006a28:	e7de      	b.n	80069e8 <sync_fs+0x8>
					wsect += fs->fsize;
 8006a2a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a2c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8006a2e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a30:	462a      	mov	r2, r5
 8006a32:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a34:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7ff fc3e 	bl	80062b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a3c:	2e01      	cmp	r6, #1
 8006a3e:	d1f4      	bne.n	8006a2a <sync_fs+0x4a>
 8006a40:	e7d2      	b.n	80069e8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a42:	7926      	ldrb	r6, [r4, #4]
 8006a44:	2e01      	cmp	r6, #1
 8006a46:	d1d2      	bne.n	80069ee <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8006a48:	f104 0734 	add.w	r7, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	2100      	movs	r1, #0
 8006a52:	4638      	mov	r0, r7
 8006a54:	f004 fb58 	bl	800b108 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8006a58:	4b18      	ldr	r3, [pc, #96]	; (8006abc <sync_fs+0xdc>)
 8006a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a5c:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a60:	6962      	ldr	r2, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a62:	6925      	ldr	r5, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a64:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8006a68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a6c:	3320      	adds	r3, #32
 8006a6e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8006a72:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006a74:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
 8006a78:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006a7a:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 8006a7c:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
 8006a80:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a82:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
 8006a86:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006a88:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 8006a8c:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8006a8e:	f884 0221 	strb.w	r0, [r4, #545]	; 0x221
 8006a92:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006a94:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006a96:	f8a4 1232 	strh.w	r1, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 8006a9a:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
 8006a9e:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006aa2:	4633      	mov	r3, r6
 8006aa4:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8006aa6:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006aa8:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 8006aaa:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006aae:	f7ff fc03 	bl	80062b8 <disk_write>
			fs->fsi_flag = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	7123      	strb	r3, [r4, #4]
 8006ab6:	e79a      	b.n	80069ee <sync_fs+0xe>
			res = FR_DISK_ERR;
 8006ab8:	2001      	movs	r0, #1
}
 8006aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006abc:	41615252 	.word	0x41615252

08006ac0 <create_chain>:
{
 8006ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8006ac4:	f8d0 8000 	ldr.w	r8, [r0]
{
 8006ac8:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 8006aca:	4689      	mov	r9, r1
 8006acc:	2900      	cmp	r1, #0
 8006ace:	f040 808b 	bne.w	8006be8 <create_chain+0x128>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ad2:	f8d8 6010 	ldr.w	r6, [r8, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ad6:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ada:	b9be      	cbnz	r6, 8006b0c <create_chain+0x4c>
 8006adc:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8006ade:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8006ae0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d316      	bcc.n	8006b14 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8006ae6:	2e01      	cmp	r6, #1
 8006ae8:	f000 808c 	beq.w	8006c04 <create_chain+0x144>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006aec:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 8006aee:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006af0:	69ab      	ldr	r3, [r5, #24]
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	d906      	bls.n	8006b04 <create_chain+0x44>
		switch (fs->fs_type) {
 8006af6:	782b      	ldrb	r3, [r5, #0]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d064      	beq.n	8006bc6 <create_chain+0x106>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d04f      	beq.n	8006ba0 <create_chain+0xe0>
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d00b      	beq.n	8006b1c <create_chain+0x5c>
 8006b04:	2401      	movs	r4, #1
}
 8006b06:	4620      	mov	r0, r4
 8006b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b0c:	42b3      	cmp	r3, r6
 8006b0e:	bf98      	it	ls
 8006b10:	2601      	movls	r6, #1
 8006b12:	e7e4      	b.n	8006ade <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b14:	2c01      	cmp	r4, #1
 8006b16:	683d      	ldr	r5, [r7, #0]
 8006b18:	d9f4      	bls.n	8006b04 <create_chain+0x44>
 8006b1a:	e7e9      	b.n	8006af0 <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 8006b20:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b24:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b28:	4291      	cmp	r1, r2
 8006b2a:	d005      	beq.n	8006b38 <create_chain+0x78>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f7ff fc77 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b32:	bb80      	cbnz	r0, 8006b96 <create_chain+0xd6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b36:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006b38:	f3cb 0008 	ubfx	r0, fp, #0, #9
 8006b3c:	f10b 0b01 	add.w	fp, fp, #1
 8006b40:	4428      	add	r0, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b42:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b46:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006b48:	f890 a034 	ldrb.w	sl, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b4c:	d003      	beq.n	8006b56 <create_chain+0x96>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f7ff fc66 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b54:	b9f8      	cbnz	r0, 8006b96 <create_chain+0xd6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b56:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 8006b5a:	445d      	add	r5, fp
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b5c:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b5e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8006b62:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b66:	d551      	bpl.n	8006c0c <create_chain+0x14c>
 8006b68:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8006b6a:	b133      	cbz	r3, 8006b7a <create_chain+0xba>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d0c9      	beq.n	8006b04 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d047      	beq.n	8006c04 <create_chain+0x144>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b74:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006b78:	e7b2      	b.n	8006ae0 <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006b7a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006b7e:	42a3      	cmp	r3, r4
 8006b80:	d9c0      	bls.n	8006b04 <create_chain+0x44>
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b86:	4621      	mov	r1, r4
 8006b88:	4640      	mov	r0, r8
 8006b8a:	f7ff fdeb 	bl	8006764 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d03f      	beq.n	8006c12 <create_chain+0x152>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b92:	2801      	cmp	r0, #1
 8006b94:	d1b6      	bne.n	8006b04 <create_chain+0x44>
 8006b96:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba0:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ba2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d004      	beq.n	8006bb6 <create_chain+0xf6>
 8006bac:	4628      	mov	r0, r5
 8006bae:	f7ff fc37 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d1ef      	bne.n	8006b96 <create_chain+0xd6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006bb6:	00a3      	lsls	r3, r4, #2
 8006bb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006bbc:	441d      	add	r5, r3
 8006bbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006bc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 8006bc4:	e7d1      	b.n	8006b6a <create_chain+0xaa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bca:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	d004      	beq.n	8006bdc <create_chain+0x11c>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7ff fc24 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1dc      	bne.n	8006b96 <create_chain+0xd6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bdc:	0063      	lsls	r3, r4, #1
 8006bde:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006be2:	441d      	add	r5, r3
 8006be4:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 8006be6:	e7c0      	b.n	8006b6a <create_chain+0xaa>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006be8:	4640      	mov	r0, r8
 8006bea:	f7ff fe55 	bl	8006898 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bee:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006bf0:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bf2:	d987      	bls.n	8006b04 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bf4:	1c41      	adds	r1, r0, #1
 8006bf6:	d0ce      	beq.n	8006b96 <create_chain+0xd6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bf8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	d882      	bhi.n	8006b06 <create_chain+0x46>
 8006c00:	464e      	mov	r6, r9
 8006c02:	e76c      	b.n	8006ade <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 8006c04:	2400      	movs	r4, #0
}
 8006c06:	4620      	mov	r0, r4
 8006c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c10:	e7ab      	b.n	8006b6a <create_chain+0xaa>
		if (res == FR_OK && clst != 0) {
 8006c12:	f1b9 0f00 	cmp.w	r9, #0
 8006c16:	d00f      	beq.n	8006c38 <create_chain+0x178>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c18:	f1b9 0f01 	cmp.w	r9, #1
 8006c1c:	f43f af72 	beq.w	8006b04 <create_chain+0x44>
 8006c20:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006c24:	4599      	cmp	r9, r3
 8006c26:	f4bf af6d 	bcs.w	8006b04 <create_chain+0x44>
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f7ff fd98 	bl	8006764 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1ac      	bne.n	8006b92 <create_chain+0xd2>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c38:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8006c3c:	3b02      	subs	r3, #2
 8006c3e:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 8006c40:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c44:	d802      	bhi.n	8006c4c <create_chain+0x18c>
 8006c46:	3a01      	subs	r2, #1
 8006c48:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8006c4c:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	f888 3004 	strb.w	r3, [r8, #4]
 8006c58:	e755      	b.n	8006b06 <create_chain+0x46>
 8006c5a:	bf00      	nop

08006c5c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006c60:	d274      	bcs.n	8006d4c <dir_sdi+0xf0>
 8006c62:	06ca      	lsls	r2, r1, #27
{
 8006c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c6a:	d151      	bne.n	8006d10 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c6c:	6885      	ldr	r5, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8006c6e:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8006c72:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c74:	4606      	mov	r6, r0
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	d04d      	beq.n	8006d16 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c7a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c7e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c82:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c86:	f0c0 808e 	bcc.w	8006da6 <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c8a:	2d01      	cmp	r5, #1
 8006c8c:	d040      	beq.n	8006d10 <dir_sdi+0xb4>
 8006c8e:	4647      	mov	r7, r8
 8006c90:	e03b      	b.n	8006d0a <dir_sdi+0xae>
		switch (fs->fs_type) {
 8006c92:	783b      	ldrb	r3, [r7, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d073      	beq.n	8006d80 <dir_sdi+0x124>
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d05f      	beq.n	8006d5c <dir_sdi+0x100>
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d137      	bne.n	8006d10 <dir_sdi+0xb4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 8006ca4:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ca8:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cac:	4291      	cmp	r1, r2
 8006cae:	d006      	beq.n	8006cbe <dir_sdi+0x62>
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff fbb5 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d172      	bne.n	8006da0 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8006cbe:	f3ca 0008 	ubfx	r0, sl, #0, #9
 8006cc2:	f10a 0a01 	add.w	sl, sl, #1
 8006cc6:	4438      	add	r0, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cc8:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ccc:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8006cce:	f890 b034 	ldrb.w	fp, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cd2:	d004      	beq.n	8006cde <dir_sdi+0x82>
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff fba3 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d160      	bne.n	8006da0 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006cde:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8006ce2:	4457      	add	r7, sl
 8006ce4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ce8:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006cec:	07eb      	lsls	r3, r5, #31
 8006cee:	d568      	bpl.n	8006dc2 <dir_sdi+0x166>
 8006cf0:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006cf4:	2d01      	cmp	r5, #1
 8006cf6:	d90b      	bls.n	8006d10 <dir_sdi+0xb4>
 8006cf8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	d907      	bls.n	8006d10 <dir_sdi+0xb4>
			ofs -= csz;
 8006d00:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d04:	45a1      	cmp	r9, r4
 8006d06:	d850      	bhi.n	8006daa <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d08:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	d8c0      	bhi.n	8006c92 <dir_sdi+0x36>
		switch (fs->fs_type) {
 8006d10:	2002      	movs	r0, #2
}
 8006d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006d16:	f898 3000 	ldrb.w	r3, [r8]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d818      	bhi.n	8006d50 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d1e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006d22:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8006d26:	d9f3      	bls.n	8006d10 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8006d28:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8006d2c:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8006d2e:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	d0ed      	beq.n	8006d10 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d34:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8006d38:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d3c:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d40:	4443      	add	r3, r8
 8006d42:	e9c6 2307 	strd	r2, r3, [r6, #28]
	return FR_OK;
 8006d46:	2000      	movs	r0, #0
}
 8006d48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8006d4c:	2002      	movs	r0, #2
}
 8006d4e:	4770      	bx	lr
		clst = fs->dirbase;
 8006d50:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0e2      	beq.n	8006d1e <dir_sdi+0xc2>
 8006d58:	461d      	mov	r5, r3
 8006d5a:	e78e      	b.n	8006c7a <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d60:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d003      	beq.n	8006d70 <dir_sdi+0x114>
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fb59 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d6e:	b9b8      	cbnz	r0, 8006da0 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d70:	00ad      	lsls	r5, r5, #2
 8006d72:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8006d76:	442f      	add	r7, r5
 8006d78:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d7a:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8006d7e:	e7b9      	b.n	8006cf4 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d84:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d003      	beq.n	8006d94 <dir_sdi+0x138>
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7ff fb47 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d92:	b928      	cbnz	r0, 8006da0 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d94:	006d      	lsls	r5, r5, #1
 8006d96:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8006d9a:	442f      	add	r7, r5
 8006d9c:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8006d9e:	e7a9      	b.n	8006cf4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006da0:	2001      	movs	r0, #1
}
 8006da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006da6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006daa:	3b02      	subs	r3, #2
	clst -= 2;
 8006dac:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006dae:	4299      	cmp	r1, r3
 8006db0:	d20a      	bcs.n	8006dc8 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8006db2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006db6:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8006dba:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8006dbe:	61f2      	str	r2, [r6, #28]
 8006dc0:	e7b5      	b.n	8006d2e <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006dc2:	f3cb 050b 	ubfx	r5, fp, #0, #12
 8006dc6:	e795      	b.n	8006cf4 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8006dc8:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 8006dca:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006dce:	e79f      	b.n	8006d10 <dir_sdi+0xb4>

08006dd0 <dir_find>:
{
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006dd4:	2100      	movs	r1, #0
{
 8006dd6:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8006dd8:	6806      	ldr	r6, [r0, #0]
{
 8006dda:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ddc:	f7ff ff3e 	bl	8006c5c <dir_sdi>
	if (res != FR_OK) return res;
 8006de0:	4681      	mov	r9, r0
 8006de2:	b9e0      	cbnz	r0, 8006e1e <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de8:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = move_window(fs, dp->sect);
 8006dec:	69e7      	ldr	r7, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006dee:	6323      	str	r3, [r4, #48]	; 0x30
 8006df0:	46c1      	mov	r9, r8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006df2:	f64f 7bff 	movw	fp, #65535	; 0xffff
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006df6:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8006df8:	42bd      	cmp	r5, r7
 8006dfa:	d015      	beq.n	8006e28 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006dfc:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006dfe:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 809b 	bne.w	8006f3e <dir_find+0x16e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e08:	7870      	ldrb	r0, [r6, #1]
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	f7ff fa45 	bl	800629c <disk_read>
 8006e12:	b140      	cbz	r0, 8006e26 <dir_find+0x56>
			fs->winsect = sector;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e18:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8006e1a:	f04f 0901 	mov.w	r9, #1
}
 8006e1e:	4648      	mov	r0, r9
 8006e20:	b005      	add	sp, #20
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8006e26:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8006e28:	6a25      	ldr	r5, [r4, #32]
 8006e2a:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	d03d      	beq.n	8006eac <dir_find+0xdc>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e30:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006e32:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e34:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8006e38:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006e3a:	d004      	beq.n	8006e46 <dir_find+0x76>
 8006e3c:	0712      	lsls	r2, r2, #28
 8006e3e:	d53b      	bpl.n	8006eb8 <dir_find+0xe8>
 8006e40:	2b0f      	cmp	r3, #15
 8006e42:	f000 80a6 	beq.w	8006f92 <dir_find+0x1c2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e4c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e50:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e52:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e54:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e56:	b34f      	cbz	r7, 8006eac <dir_find+0xdc>
 8006e58:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006e5c:	d226      	bcs.n	8006eac <dir_find+0xdc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e5e:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8006e62:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e64:	b93a      	cbnz	r2, 8006e76 <dir_find+0xa6>
		if (!dp->clust) {		/* Static table */
 8006e66:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8006e68:	3701      	adds	r7, #1
 8006e6a:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8006e6c:	b941      	cbnz	r1, 8006e80 <dir_find+0xb0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e6e:	8919      	ldrh	r1, [r3, #8]
 8006e70:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8006e74:	d918      	bls.n	8006ea8 <dir_find+0xd8>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e76:	3334      	adds	r3, #52	; 0x34
 8006e78:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 8006e7a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e7c:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8006e7e:	e7ba      	b.n	8006df6 <dir_find+0x26>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e80:	8958      	ldrh	r0, [r3, #10]
 8006e82:	3801      	subs	r0, #1
 8006e84:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8006e88:	d1f5      	bne.n	8006e76 <dir_find+0xa6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	9201      	str	r2, [sp, #4]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	f7ff fd02 	bl	8006898 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e94:	2801      	cmp	r0, #1
 8006e96:	f240 8123 	bls.w	80070e0 <dir_find+0x310>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d0bd      	beq.n	8006e1a <dir_find+0x4a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e9e:	9b00      	ldr	r3, [sp, #0]
 8006ea0:	6999      	ldr	r1, [r3, #24]
 8006ea2:	4288      	cmp	r0, r1
 8006ea4:	f0c0 810e 	bcc.w	80070c4 <dir_find+0x2f4>
				dp->sect = 0; return FR_NO_FILE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61e3      	str	r3, [r4, #28]
 8006eac:	f04f 0904 	mov.w	r9, #4
}
 8006eb0:	4648      	mov	r0, r9
 8006eb2:	b005      	add	sp, #20
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d06a      	beq.n	8006f92 <dir_find+0x1c2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ebc:	f1b9 0f00 	cmp.w	r9, #0
 8006ec0:	f000 80b6 	beq.w	8007030 <dir_find+0x260>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ec4:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 8006ec8:	f019 0901 	ands.w	r9, r9, #1
 8006ecc:	d1bb      	bne.n	8006e46 <dir_find+0x76>
	} while (--cnt && r == 0);
 8006ece:	782a      	ldrb	r2, [r5, #0]
 8006ed0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d1b6      	bne.n	8006e46 <dir_find+0x76>
 8006ed8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006edc:	786b      	ldrb	r3, [r5, #1]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d1b1      	bne.n	8006e46 <dir_find+0x76>
 8006ee2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8006ee6:	78ab      	ldrb	r3, [r5, #2]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1ac      	bne.n	8006e46 <dir_find+0x76>
 8006eec:	78ea      	ldrb	r2, [r5, #3]
 8006eee:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d1a7      	bne.n	8006e46 <dir_find+0x76>
 8006ef6:	792a      	ldrb	r2, [r5, #4]
 8006ef8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1a2      	bne.n	8006e46 <dir_find+0x76>
 8006f00:	796a      	ldrb	r2, [r5, #5]
 8006f02:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d19d      	bne.n	8006e46 <dir_find+0x76>
 8006f0a:	79aa      	ldrb	r2, [r5, #6]
 8006f0c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d198      	bne.n	8006e46 <dir_find+0x76>
 8006f14:	79ea      	ldrb	r2, [r5, #7]
 8006f16:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d193      	bne.n	8006e46 <dir_find+0x76>
 8006f1e:	7a2a      	ldrb	r2, [r5, #8]
 8006f20:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d18e      	bne.n	8006e46 <dir_find+0x76>
 8006f28:	7a6a      	ldrb	r2, [r5, #9]
 8006f2a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d189      	bne.n	8006e46 <dir_find+0x76>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f32:	7aaa      	ldrb	r2, [r5, #10]
 8006f34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d184      	bne.n	8006e46 <dir_find+0x76>
 8006f3c:	e76f      	b.n	8006e1e <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f3e:	7870      	ldrb	r0, [r6, #1]
 8006f40:	9100      	str	r1, [sp, #0]
 8006f42:	2301      	movs	r3, #1
 8006f44:	462a      	mov	r2, r5
 8006f46:	f7ff f9b7 	bl	80062b8 <disk_write>
 8006f4a:	9900      	ldr	r1, [sp, #0]
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f47f af64 	bne.w	8006e1a <dir_find+0x4a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f52:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8006f54:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f56:	1aea      	subs	r2, r5, r3
 8006f58:	69f3      	ldr	r3, [r6, #28]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	f4bf af54 	bcs.w	8006e08 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f60:	f896 a002 	ldrb.w	sl, [r6, #2]
 8006f64:	f1ba 0f01 	cmp.w	sl, #1
 8006f68:	f67f af4e 	bls.w	8006e08 <dir_find+0x38>
 8006f6c:	9400      	str	r4, [sp, #0]
 8006f6e:	460c      	mov	r4, r1
 8006f70:	e000      	b.n	8006f74 <dir_find+0x1a4>
					wsect += fs->fsize;
 8006f72:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f74:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8006f76:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f78:	462a      	mov	r2, r5
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4621      	mov	r1, r4
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f82:	f7ff f999 	bl	80062b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f86:	f1ba 0f01 	cmp.w	sl, #1
 8006f8a:	d1f2      	bne.n	8006f72 <dir_find+0x1a2>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	9c00      	ldr	r4, [sp, #0]
 8006f90:	e73a      	b.n	8006e08 <dir_find+0x38>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006f92:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af5a 	bmi.w	8006e50 <dir_find+0x80>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006f9c:	0678      	lsls	r0, r7, #25
 8006f9e:	d542      	bpl.n	8007026 <dir_find+0x256>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006fa0:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 8006fa2:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006fa6:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006fa8:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006fac:	7b6b      	ldrb	r3, [r5, #13]
 8006fae:	4543      	cmp	r3, r8
 8006fb0:	d13b      	bne.n	800702a <dir_find+0x25a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006fb2:	8b6b      	ldrh	r3, [r5, #26]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d138      	bne.n	800702a <dir_find+0x25a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006fb8:	f895 9000 	ldrb.w	r9, [r5]
 8006fbc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 800710c <dir_find+0x33c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006fc0:	9702      	str	r7, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006fc2:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 8006fc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006fca:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8006fce:	eb09 0983 	add.w	r9, r9, r3, lsl #2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006fd2:	68f3      	ldr	r3, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006fd4:	9401      	str	r4, [sp, #4]
 8006fd6:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006fd8:	9303      	str	r3, [sp, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006fda:	f10a 010d 	add.w	r1, sl, #13
 8006fde:	9600      	str	r6, [sp, #0]
 8006fe0:	462f      	mov	r7, r5
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	461c      	mov	r4, r3
 8006fe6:	e012      	b.n	800700e <dir_find+0x23e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006fe8:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8006fec:	4628      	mov	r0, r5
 8006fee:	d815      	bhi.n	800701c <dir_find+0x24c>
 8006ff0:	f001 fc5a 	bl	80088a8 <ff_wtoupper>
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	f834 0019 	ldrh.w	r0, [r4, r9, lsl #1]
 8006ffa:	f001 fc55 	bl	80088a8 <ff_wtoupper>
 8006ffe:	4286      	cmp	r6, r0
 8007000:	f109 0901 	add.w	r9, r9, #1
 8007004:	d10a      	bne.n	800701c <dir_find+0x24c>
 8007006:	4940      	ldr	r1, [pc, #256]	; (8007108 <dir_find+0x338>)
 8007008:	4628      	mov	r0, r5
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800700a:	4551      	cmp	r1, sl
 800700c:	d06b      	beq.n	80070e6 <dir_find+0x316>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800700e:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8007012:	5afd      	ldrh	r5, [r7, r3]
		if (wc) {
 8007014:	2800      	cmp	r0, #0
 8007016:	d1e7      	bne.n	8006fe8 <dir_find+0x218>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007018:	455d      	cmp	r5, fp
 800701a:	d0f6      	beq.n	800700a <dir_find+0x23a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800701c:	e9dd 6400 	ldrd	r6, r4, [sp]
 8007020:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007024:	e714      	b.n	8006e50 <dir_find+0x80>
 8007026:	45b9      	cmp	r9, r7
 8007028:	d0c0      	beq.n	8006fac <dir_find+0x1dc>
 800702a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800702e:	e70f      	b.n	8006e50 <dir_find+0x80>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007030:	782a      	ldrb	r2, [r5, #0]
 8007032:	7869      	ldrb	r1, [r5, #1]
 8007034:	01d3      	lsls	r3, r2, #7
 8007036:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800703a:	185a      	adds	r2, r3, r1
 800703c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007040:	78a9      	ldrb	r1, [r5, #2]
 8007042:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007046:	fa51 f383 	uxtab	r3, r1, r3
 800704a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800704e:	78e9      	ldrb	r1, [r5, #3]
 8007050:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007054:	fa51 f382 	uxtab	r3, r1, r2
 8007058:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800705c:	7929      	ldrb	r1, [r5, #4]
 800705e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8007062:	fa51 f282 	uxtab	r2, r1, r2
 8007066:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800706a:	7969      	ldrb	r1, [r5, #5]
 800706c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007070:	fa51 f283 	uxtab	r2, r1, r3
 8007074:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007078:	79a9      	ldrb	r1, [r5, #6]
 800707a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800707e:	fa51 f383 	uxtab	r3, r1, r3
 8007082:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007086:	79e9      	ldrb	r1, [r5, #7]
 8007088:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800708c:	fa51 f382 	uxtab	r3, r1, r2
 8007090:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8007094:	7a29      	ldrb	r1, [r5, #8]
 8007096:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800709a:	fa51 f282 	uxtab	r2, r1, r2
 800709e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80070a2:	7a69      	ldrb	r1, [r5, #9]
 80070a4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80070a8:	fa51 f283 	uxtab	r2, r1, r3
 80070ac:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80070b0:	7aa9      	ldrb	r1, [r5, #10]
 80070b2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80070b6:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4598      	cmp	r8, r3
 80070be:	f47f af01 	bne.w	8006ec4 <dir_find+0xf4>
 80070c2:	e6ac      	b.n	8006e1e <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070c4:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80070c6:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80070c8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070ca:	4288      	cmp	r0, r1
	return clst * fs->csize + fs->database;
 80070cc:	bf3c      	itt	cc
 80070ce:	8959      	ldrhcc	r1, [r3, #10]
 80070d0:	6adf      	ldrcc	r7, [r3, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070d2:	9a01      	ldr	r2, [sp, #4]
	return clst * fs->csize + fs->database;
 80070d4:	bf34      	ite	cc
 80070d6:	fb00 7701 	mlacc	r7, r0, r1, r7
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070da:	4617      	movcs	r7, r2
				dp->sect = clust2sect(fs, clst);
 80070dc:	61e7      	str	r7, [r4, #28]
 80070de:	e6ca      	b.n	8006e76 <dir_find+0xa6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80070e0:	f04f 0902 	mov.w	r9, #2
 80070e4:	e69b      	b.n	8006e1e <dir_find+0x4e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80070e6:	463d      	mov	r5, r7
 80070e8:	9e00      	ldr	r6, [sp, #0]
 80070ea:	782b      	ldrb	r3, [r5, #0]
 80070ec:	9f02      	ldr	r7, [sp, #8]
 80070ee:	9c01      	ldr	r4, [sp, #4]
 80070f0:	0659      	lsls	r1, r3, #25
 80070f2:	d505      	bpl.n	8007100 <dir_find+0x330>
 80070f4:	b120      	cbz	r0, 8007100 <dir_find+0x330>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d194      	bne.n	800702a <dir_find+0x25a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007100:	3f01      	subs	r7, #1
 8007102:	fa5f f987 	uxtb.w	r9, r7
 8007106:	e6a3      	b.n	8006e50 <dir_find+0x80>
 8007108:	0800f9b5 	.word	0x0800f9b5
 800710c:	0800f9a8 	.word	0x0800f9a8

08007110 <follow_path>:
{
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007114:	6803      	ldr	r3, [r0, #0]
{
 8007116:	b083      	sub	sp, #12
 8007118:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 800711a:	461a      	mov	r2, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800711c:	460e      	mov	r6, r1
 800711e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007122:	2b2f      	cmp	r3, #47	; 0x2f
 8007124:	d0fa      	beq.n	800711c <follow_path+0xc>
 8007126:	2b5c      	cmp	r3, #92	; 0x5c
 8007128:	d0f8      	beq.n	800711c <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800712a:	2100      	movs	r1, #0
 800712c:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800712e:	7833      	ldrb	r3, [r6, #0]
 8007130:	2b1f      	cmp	r3, #31
 8007132:	f240 8124 	bls.w	800737e <follow_path+0x26e>
 8007136:	4690      	mov	r8, r2
		if (w < ' ') break;				/* Break if end of the path name */
 8007138:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800713a:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
 800713e:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8007140:	d941      	bls.n	80071c6 <follow_path+0xb6>
 8007142:	f1a9 0502 	sub.w	r5, r9, #2
 8007146:	46b3      	mov	fp, r6
 8007148:	46aa      	mov	sl, r5
		w = p[si++];					/* Get a character */
 800714a:	2401      	movs	r4, #1
 800714c:	e009      	b.n	8007162 <follow_path+0x52>
		lfn[di++] = w;					/* Store the Unicode character */
 800714e:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8007152:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8007156:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8007158:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800715c:	f240 80ec 	bls.w	8007338 <follow_path+0x228>
		w = p[si++];					/* Get a character */
 8007160:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007162:	282f      	cmp	r0, #47	; 0x2f
 8007164:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8007168:	d017      	beq.n	800719a <follow_path+0x8a>
 800716a:	285c      	cmp	r0, #92	; 0x5c
 800716c:	d015      	beq.n	800719a <follow_path+0x8a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800716e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8007172:	d00e      	beq.n	8007192 <follow_path+0x82>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007174:	2101      	movs	r1, #1
 8007176:	f001 fb79 	bl	800886c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800717a:	b150      	cbz	r0, 8007192 <follow_path+0x82>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800717c:	287f      	cmp	r0, #127	; 0x7f
 800717e:	d8e6      	bhi.n	800714e <follow_path+0x3e>
 8007180:	4a93      	ldr	r2, [pc, #588]	; (80073d0 <follow_path+0x2c0>)
	while (*str && *str != chr) str++;
 8007182:	2322      	movs	r3, #34	; 0x22
 8007184:	e003      	b.n	800718e <follow_path+0x7e>
 8007186:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0df      	beq.n	800714e <follow_path+0x3e>
 800718e:	4298      	cmp	r0, r3
 8007190:	d1f9      	bne.n	8007186 <follow_path+0x76>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007192:	2006      	movs	r0, #6
}
 8007194:	b003      	add	sp, #12
 8007196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	4434      	add	r4, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800719c:	7822      	ldrb	r2, [r4, #0]
 800719e:	2a2f      	cmp	r2, #47	; 0x2f
 80071a0:	4626      	mov	r6, r4
 80071a2:	f104 0401 	add.w	r4, r4, #1
 80071a6:	d0f9      	beq.n	800719c <follow_path+0x8c>
 80071a8:	2a5c      	cmp	r2, #92	; 0x5c
 80071aa:	d0f7      	beq.n	800719c <follow_path+0x8c>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071ac:	b15b      	cbz	r3, 80071c6 <follow_path+0xb6>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	eb09 0143 	add.w	r1, r9, r3, lsl #1
		w = lfn[di - 1];
 80071b6:	f831 2d02 	ldrh.w	r2, [r1, #-2]!
		if (w != ' ' && w != '.') break;
 80071ba:	2a20      	cmp	r2, #32
 80071bc:	d001      	beq.n	80071c2 <follow_path+0xb2>
 80071be:	2a2e      	cmp	r2, #46	; 0x2e
 80071c0:	d105      	bne.n	80071ce <follow_path+0xbe>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071c2:	3b01      	subs	r3, #1
 80071c4:	d1f7      	bne.n	80071b6 <follow_path+0xa6>
	lfn[di] = 0;						/* LFN is created */
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8a9 3000 	strh.w	r3, [r9]
 80071cc:	e7e1      	b.n	8007192 <follow_path+0x82>
		*d++ = (BYTE)val;
 80071ce:	2220      	movs	r2, #32
 80071d0:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80071d4:	2400      	movs	r4, #0
 80071d6:	f829 4013 	strh.w	r4, [r9, r3, lsl #1]
		*d++ = (BYTE)val;
 80071da:	6279      	str	r1, [r7, #36]	; 0x24
 80071dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80071de:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80071e2:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80071e6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
	} while (--cnt);
 80071ea:	e000      	b.n	80071ee <follow_path+0xde>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80071ec:	3401      	adds	r4, #1
 80071ee:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 80071f2:	2820      	cmp	r0, #32
 80071f4:	d0fa      	beq.n	80071ec <follow_path+0xdc>
 80071f6:	282e      	cmp	r0, #46	; 0x2e
 80071f8:	d0f8      	beq.n	80071ec <follow_path+0xdc>
	if (si) cf |= NS_LOSS | NS_LFN;
 80071fa:	b10c      	cbz	r4, 8007200 <follow_path+0xf0>
 80071fc:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007200:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 8007204:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8007208:	292e      	cmp	r1, #46	; 0x2e
 800720a:	d001      	beq.n	8007210 <follow_path+0x100>
 800720c:	3b01      	subs	r3, #1
 800720e:	d1f9      	bne.n	8007204 <follow_path+0xf4>
		w = lfn[si++];					/* Get an LFN character */
 8007210:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8007212:	2800      	cmp	r0, #0
 8007214:	d043      	beq.n	800729e <follow_path+0x18e>
 8007216:	2500      	movs	r5, #0
 8007218:	f04f 0b08 	mov.w	fp, #8
 800721c:	462a      	mov	r2, r5
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800721e:	2820      	cmp	r0, #32
 8007220:	d05e      	beq.n	80072e0 <follow_path+0x1d0>
 8007222:	282e      	cmp	r0, #46	; 0x2e
 8007224:	d060      	beq.n	80072e8 <follow_path+0x1d8>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007226:	4593      	cmp	fp, r2
 8007228:	d96a      	bls.n	8007300 <follow_path+0x1f0>
 800722a:	42a3      	cmp	r3, r4
 800722c:	d05e      	beq.n	80072ec <follow_path+0x1dc>
		if (w >= 0x80) {				/* Non ASCII character */
 800722e:	287f      	cmp	r0, #127	; 0x7f
 8007230:	f200 8090 	bhi.w	8007354 <follow_path+0x244>
	while (*str && *str != chr) str++;
 8007234:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80073d8 <follow_path+0x2c8>
 8007238:	212b      	movs	r1, #43	; 0x2b
 800723a:	e004      	b.n	8007246 <follow_path+0x136>
 800723c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8007240:	2900      	cmp	r1, #0
 8007242:	f000 80a5 	beq.w	8007390 <follow_path+0x280>
 8007246:	4281      	cmp	r1, r0
 8007248:	d1f8      	bne.n	800723c <follow_path+0x12c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800724a:	f04a 0a03 	orr.w	sl, sl, #3
 800724e:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007250:	4621      	mov	r1, r4
 8007252:	18bc      	adds	r4, r7, r2
 8007254:	3201      	adds	r2, #1
 8007256:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800725a:	f839 0011 	ldrh.w	r0, [r9, r1, lsl #1]
 800725e:	1c4c      	adds	r4, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8007260:	2800      	cmp	r0, #0
 8007262:	d1dc      	bne.n	800721e <follow_path+0x10e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007268:	2be5      	cmp	r3, #229	; 0xe5
 800726a:	bf04      	itt	eq
 800726c:	2305      	moveq	r3, #5
 800726e:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8007272:	f1bb 0f08 	cmp.w	fp, #8
 8007276:	d064      	beq.n	8007342 <follow_path+0x232>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007278:	f005 030c 	and.w	r3, r5, #12
 800727c:	2b0c      	cmp	r3, #12
 800727e:	d048      	beq.n	8007312 <follow_path+0x202>
 8007280:	f005 0503 	and.w	r5, r5, #3
 8007284:	2d03      	cmp	r5, #3
 8007286:	d044      	beq.n	8007312 <follow_path+0x202>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007288:	f01a 0f02 	tst.w	sl, #2
 800728c:	d107      	bne.n	800729e <follow_path+0x18e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800728e:	2d01      	cmp	r5, #1
 8007290:	bf08      	it	eq
 8007292:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007296:	2b04      	cmp	r3, #4
 8007298:	bf08      	it	eq
 800729a:	f04a 0a08 	orreq.w	sl, sl, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800729e:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff fd94 	bl	8006dd0 <dir_find>
			ns = dp->fn[NSFLAG];
 80072a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d13b      	bne.n	8007328 <follow_path+0x218>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072b0:	075a      	lsls	r2, r3, #29
 80072b2:	f53f af6f 	bmi.w	8007194 <follow_path+0x84>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072b6:	79bb      	ldrb	r3, [r7, #6]
 80072b8:	06db      	lsls	r3, r3, #27
 80072ba:	d57a      	bpl.n	80073b2 <follow_path+0x2a2>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072bc:	697a      	ldr	r2, [r7, #20]
	if (fs->fs_type == FS_FAT32) {
 80072be:	f898 1000 	ldrb.w	r1, [r8]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c6:	f108 0334 	add.w	r3, r8, #52	; 0x34
 80072ca:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 80072cc:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80072ce:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80072d0:	bf04      	itt	eq
 80072d2:	8a9b      	ldrheq	r3, [r3, #20]
 80072d4:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072d8:	60ba      	str	r2, [r7, #8]
		w = p[si++];					/* Get a character */
 80072da:	7833      	ldrb	r3, [r6, #0]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80072dc:	683a      	ldr	r2, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072de:	e72b      	b.n	8007138 <follow_path+0x28>
			cf |= NS_LOSS | NS_LFN; continue;
 80072e0:	f04a 0a03 	orr.w	sl, sl, #3
 80072e4:	4621      	mov	r1, r4
 80072e6:	e7b8      	b.n	800725a <follow_path+0x14a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d1f9      	bne.n	80072e0 <follow_path+0x1d0>
			if (ni == 11) {				/* Long extension */
 80072ec:	f1bb 0f0b 	cmp.w	fp, #11
 80072f0:	d063      	beq.n	80073ba <follow_path+0x2aa>
			b <<= 2; continue;
 80072f2:	00ad      	lsls	r5, r5, #2
 80072f4:	b2ed      	uxtb	r5, r5
 80072f6:	4619      	mov	r1, r3
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80072f8:	f04f 0b0b 	mov.w	fp, #11
 80072fc:	2208      	movs	r2, #8
			b <<= 2; continue;
 80072fe:	e7ac      	b.n	800725a <follow_path+0x14a>
			if (ni == 11) {				/* Long extension */
 8007300:	f1bb 0f0b 	cmp.w	fp, #11
 8007304:	d059      	beq.n	80073ba <follow_path+0x2aa>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007306:	42a3      	cmp	r3, r4
 8007308:	d0f3      	beq.n	80072f2 <follow_path+0x1e2>
 800730a:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 800730e:	d3a9      	bcc.n	8007264 <follow_path+0x154>
 8007310:	e7ef      	b.n	80072f2 <follow_path+0x1e2>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007312:	f04a 0a02 	orr.w	sl, sl, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007316:	f887 a02f 	strb.w	sl, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800731a:	4638      	mov	r0, r7
 800731c:	f7ff fd58 	bl	8006dd0 <dir_find>
			ns = dp->fn[NSFLAG];
 8007320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007324:	2800      	cmp	r0, #0
 8007326:	d0c3      	beq.n	80072b0 <follow_path+0x1a0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007328:	2804      	cmp	r0, #4
 800732a:	f47f af33 	bne.w	8007194 <follow_path+0x84>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800732e:	f013 0f04 	tst.w	r3, #4
 8007332:	bf08      	it	eq
 8007334:	2005      	moveq	r0, #5
 8007336:	e72d      	b.n	8007194 <follow_path+0x84>
	*path = &p[si];						/* Return pointer to the next segment */
 8007338:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800733a:	f04f 0a04 	mov.w	sl, #4
	*path = &p[si];						/* Return pointer to the next segment */
 800733e:	4623      	mov	r3, r4
 8007340:	e737      	b.n	80071b2 <follow_path+0xa2>
	if (ni == 8) b <<= 2;
 8007342:	00ab      	lsls	r3, r5, #2
 8007344:	f003 030c 	and.w	r3, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007348:	2b0c      	cmp	r3, #12
 800734a:	d0e2      	beq.n	8007312 <follow_path+0x202>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800734c:	f01a 0f02 	tst.w	sl, #2
 8007350:	d0a1      	beq.n	8007296 <follow_path+0x186>
 8007352:	e7a4      	b.n	800729e <follow_path+0x18e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007354:	2100      	movs	r1, #0
 8007356:	e9cd 2300 	strd	r2, r3, [sp]
 800735a:	f001 fa87 	bl	800886c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800735e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007362:	b148      	cbz	r0, 8007378 <follow_path+0x268>
 8007364:	491b      	ldr	r1, [pc, #108]	; (80073d4 <follow_path+0x2c4>)
 8007366:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8007368:	f04a 0a02 	orr.w	sl, sl, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800736c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007370:	2800      	cmp	r0, #0
 8007372:	f43f af6a 	beq.w	800724a <follow_path+0x13a>
 8007376:	e75d      	b.n	8007234 <follow_path+0x124>
			cf |= NS_LFN;				/* Force create LFN entry */
 8007378:	f04a 0a02 	orr.w	sl, sl, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800737c:	e765      	b.n	800724a <follow_path+0x13a>
		dp->fn[NSFLAG] = NS_NONAME;
 800737e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8007380:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8007382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8007386:	b003      	add	sp, #12
 8007388:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800738c:	f7ff bc66 	b.w	8006c5c <dir_sdi>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007390:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8007394:	2919      	cmp	r1, #25
 8007396:	d803      	bhi.n	80073a0 <follow_path+0x290>
					b |= 2;
 8007398:	f045 0502 	orr.w	r5, r5, #2
		dp->fn[i++] = (BYTE)w;
 800739c:	b2c0      	uxtb	r0, r0
 800739e:	e757      	b.n	8007250 <follow_path+0x140>
					if (IsLower(w)) {	/* ASCII small capital */
 80073a0:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80073a4:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80073a6:	bf9c      	itt	ls
 80073a8:	3820      	subls	r0, #32
 80073aa:	f045 0501 	orrls.w	r5, r5, #1
		dp->fn[i++] = (BYTE)w;
 80073ae:	b2c0      	uxtb	r0, r0
 80073b0:	e74e      	b.n	8007250 <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073b2:	2005      	movs	r0, #5
}
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073be:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 80073c0:	f04a 0a03 	orr.w	sl, sl, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073c4:	f47f af58 	bne.w	8007278 <follow_path+0x168>
 80073c8:	2305      	movs	r3, #5
 80073ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80073ce:	e753      	b.n	8007278 <follow_path+0x168>
 80073d0:	0800f914 	.word	0x0800f914
 80073d4:	0800f928 	.word	0x0800f928
 80073d8:	0800f920 	.word	0x0800f920

080073dc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80073dc:	2901      	cmp	r1, #1
{
 80073de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80073e2:	6806      	ldr	r6, [r0, #0]
{
 80073e4:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80073e6:	d90f      	bls.n	8007408 <remove_chain+0x2c>
 80073e8:	69b3      	ldr	r3, [r6, #24]
 80073ea:	428b      	cmp	r3, r1
 80073ec:	d90c      	bls.n	8007408 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80073ee:	4605      	mov	r5, r0
 80073f0:	4611      	mov	r1, r2
 80073f2:	b962      	cbnz	r2, 800740e <remove_chain+0x32>
 80073f4:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	d906      	bls.n	8007408 <remove_chain+0x2c>
		switch (fs->fs_type) {
 80073fa:	783b      	ldrb	r3, [r7, #0]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d072      	beq.n	80074e6 <remove_chain+0x10a>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d05d      	beq.n	80074c0 <remove_chain+0xe4>
 8007404:	2b01      	cmp	r3, #1
 8007406:	d010      	beq.n	800742a <remove_chain+0x4e>
 8007408:	2002      	movs	r0, #2
}
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800740e:	2a01      	cmp	r2, #1
 8007410:	d0fa      	beq.n	8007408 <remove_chain+0x2c>
 8007412:	4293      	cmp	r3, r2
 8007414:	d9f8      	bls.n	8007408 <remove_chain+0x2c>
 8007416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff f9a2 	bl	8006764 <put_fat.part.0>
		if (res != FR_OK) return res;
 8007420:	2800      	cmp	r0, #0
 8007422:	d1f2      	bne.n	800740a <remove_chain+0x2e>
 8007424:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	e7e5      	b.n	80073f6 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			bc = (UINT)clst; bc += bc / 2;
 800742e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007432:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007436:	4291      	cmp	r1, r2
 8007438:	d006      	beq.n	8007448 <remove_chain+0x6c>
 800743a:	4638      	mov	r0, r7
 800743c:	f7fe fff0 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007440:	2800      	cmp	r0, #0
 8007442:	d161      	bne.n	8007508 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8007448:	f3c8 0008 	ubfx	r0, r8, #0, #9
 800744c:	f108 0801 	add.w	r8, r8, #1
 8007450:	4438      	add	r0, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007452:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007456:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8007458:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800745c:	d004      	beq.n	8007468 <remove_chain+0x8c>
 800745e:	4638      	mov	r0, r7
 8007460:	f7fe ffde 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007464:	2800      	cmp	r0, #0
 8007466:	d14f      	bne.n	8007508 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007468:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800746c:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800746e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007470:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8007474:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007478:	d548      	bpl.n	800750c <remove_chain+0x130>
 800747a:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 800747e:	f1b8 0f00 	cmp.w	r8, #0
 8007482:	d046      	beq.n	8007512 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007484:	f1b8 0f01 	cmp.w	r8, #1
 8007488:	d0be      	beq.n	8007408 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800748a:	69b3      	ldr	r3, [r6, #24]
 800748c:	42a3      	cmp	r3, r4
 800748e:	d9bb      	bls.n	8007408 <remove_chain+0x2c>
 8007490:	2200      	movs	r2, #0
 8007492:	4621      	mov	r1, r4
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff f965 	bl	8006764 <put_fat.part.0>
			if (res != FR_OK) return res;
 800749a:	2800      	cmp	r0, #0
 800749c:	d1b5      	bne.n	800740a <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800749e:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 80074a2:	1e91      	subs	r1, r2, #2
 80074a4:	428b      	cmp	r3, r1
 80074a6:	d205      	bcs.n	80074b4 <remove_chain+0xd8>
			fs->free_clst++;
 80074a8:	3301      	adds	r3, #1
 80074aa:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 80074ac:	7933      	ldrb	r3, [r6, #4]
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80074b4:	4542      	cmp	r2, r8
 80074b6:	d92c      	bls.n	8007512 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074b8:	682f      	ldr	r7, [r5, #0]
 80074ba:	4644      	mov	r4, r8
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	e79a      	b.n	80073f6 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074c4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d003      	beq.n	80074d4 <remove_chain+0xf8>
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7fe ffa7 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074d2:	b9c8      	cbnz	r0, 8007508 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074d4:	00a3      	lsls	r3, r4, #2
 80074d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80074da:	441f      	add	r7, r3
 80074dc:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074e0:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 80074e4:	e7cb      	b.n	800747e <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074ea:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80074ee:	4299      	cmp	r1, r3
 80074f0:	d003      	beq.n	80074fa <remove_chain+0x11e>
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7fe ff94 	bl	8006420 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074f8:	b930      	cbnz	r0, 8007508 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074fa:	0063      	lsls	r3, r4, #1
 80074fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007500:	441f      	add	r7, r3
 8007502:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8007506:	e7ba      	b.n	800747e <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007508:	2001      	movs	r0, #1
 800750a:	e77e      	b.n	800740a <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800750c:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8007510:	e7b5      	b.n	800747e <remove_chain+0xa2>
	return FR_OK;
 8007512:	2000      	movs	r0, #0
 8007514:	e779      	b.n	800740a <remove_chain+0x2e>
 8007516:	bf00      	nop

08007518 <dir_register>:
{
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800751c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8007520:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007522:	930a      	str	r3, [sp, #40]	; 0x28
 8007524:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
 8007528:	f040 834d 	bne.w	8007bc6 <dir_register+0x6ae>
	FATFS *fs = dp->obj.fs;
 800752c:	6802      	ldr	r2, [r0, #0]
 800752e:	9201      	str	r2, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007530:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8007534:	f8bc 7000 	ldrh.w	r7, [ip]
 8007538:	4682      	mov	sl, r0
 800753a:	b137      	cbz	r7, 800754a <dir_register+0x32>
 800753c:	461f      	mov	r7, r3
 800753e:	4663      	mov	r3, ip
 8007540:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8007544:	3701      	adds	r7, #1
 8007546:	2a00      	cmp	r2, #0
 8007548:	d1fa      	bne.n	8007540 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 800754a:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
 800754e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007552:	ab12      	add	r3, sp, #72	; 0x48
 8007554:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755a:	07da      	lsls	r2, r3, #31
 800755c:	f100 8095 	bmi.w	800768a <dir_register+0x172>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007560:	f013 0302 	ands.w	r3, r3, #2
 8007564:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007568:	f000 828d 	beq.w	8007a86 <dir_register+0x56e>
 800756c:	4a74      	ldr	r2, [pc, #464]	; (8007740 <dir_register+0x228>)
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 800757a:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800757c:	3301      	adds	r3, #1
	res = dir_sdi(dp, 0);
 800757e:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007580:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8007582:	f7ff fb6b 	bl	8006c5c <dir_sdi>
	if (res == FR_OK) {
 8007586:	4683      	mov	fp, r0
 8007588:	2800      	cmp	r0, #0
 800758a:	f040 8287 	bne.w	8007a9c <dir_register+0x584>
			res = move_window(fs, dp->sect);
 800758e:	f8da 101c 	ldr.w	r1, [sl, #28]
						fs->wflag = 1;
 8007592:	9006      	str	r0, [sp, #24]
		n = 0;
 8007594:	4680      	mov	r8, r0
 8007596:	e027      	b.n	80075e8 <dir_register+0xd0>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007598:	b3ab      	cbz	r3, 8007606 <dir_register+0xee>
				n = 0;					/* Not a blank entry. Restart to search */
 800759a:	f04f 0800 	mov.w	r8, #0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800759e:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80075a2:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80075a6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80075a8:	2900      	cmp	r1, #0
 80075aa:	f000 827a 	beq.w	8007aa2 <dir_register+0x58a>
 80075ae:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80075b2:	f080 8276 	bcs.w	8007aa2 <dir_register+0x58a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80075b6:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80075ba:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80075be:	b967      	cbnz	r7, 80075da <dir_register+0xc2>
		if (!dp->clust) {		/* Static table */
 80075c0:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
 80075c4:	3101      	adds	r1, #1
 80075c6:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 82c1 	bne.w	8007b52 <dir_register+0x63a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80075d0:	8922      	ldrh	r2, [r4, #8]
 80075d2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 80075d6:	f240 83b0 	bls.w	8007d3a <dir_register+0x822>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075da:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075de:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
 80075e0:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075e4:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80075e8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80075ec:	428b      	cmp	r3, r1
 80075ee:	d005      	beq.n	80075fc <dir_register+0xe4>
 80075f0:	4648      	mov	r0, r9
 80075f2:	f7fe ff15 	bl	8006420 <move_window.part.0>
			if (res != FR_OK) break;
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f040 83a2 	bne.w	8007d40 <dir_register+0x828>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80075fc:	f8da 3020 	ldr.w	r3, [sl, #32]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2be5      	cmp	r3, #229	; 0xe5
 8007604:	d1c8      	bne.n	8007598 <dir_register+0x80>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	f108 0801 	add.w	r8, r8, #1
 800760c:	4543      	cmp	r3, r8
 800760e:	d1c6      	bne.n	800759e <dir_register+0x86>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 82e0 	bne.w	8007bdc <dir_register+0x6c4>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800761c:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
 800761e:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	4299      	cmp	r1, r3
 8007626:	d005      	beq.n	8007634 <dir_register+0x11c>
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	f7fe fef9 	bl	8006420 <move_window.part.0>
		if (res == FR_OK) {
 800762e:	2800      	cmp	r0, #0
 8007630:	f040 82cf 	bne.w	8007bd2 <dir_register+0x6ba>
		*d++ = (BYTE)val;
 8007634:	2220      	movs	r2, #32
 8007636:	f8da 0020 	ldr.w	r0, [sl, #32]
 800763a:	2100      	movs	r1, #0
 800763c:	f003 fd64 	bl	800b108 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007640:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007644:	f10a 0225 	add.w	r2, sl, #37	; 0x25
 8007648:	1a9a      	subs	r2, r3, r2
 800764a:	2a02      	cmp	r2, #2
 800764c:	f240 8496 	bls.w	8007f7c <dir_register+0xa64>
			*d++ = *s++;
 8007650:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 8007660:	721a      	strb	r2, [r3, #8]
 8007662:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8007666:	725a      	strb	r2, [r3, #9]
 8007668:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 800766c:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800766e:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8007672:	f8da 1020 	ldr.w	r1, [sl, #32]
 8007676:	f003 0318 	and.w	r3, r3, #24
 800767a:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	2201      	movs	r2, #1
}
 8007680:	4658      	mov	r0, fp
			fs->wflag = 1;
 8007682:	70da      	strb	r2, [r3, #3]
}
 8007684:	b013      	add	sp, #76	; 0x4c
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800768a:	2340      	movs	r3, #64	; 0x40
 800768c:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
			*d++ = *s++;
 8007690:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 800769a:	9306      	str	r3, [sp, #24]
 800769c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80076a0:	9305      	str	r3, [sp, #20]
 80076a2:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80076b2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80076bc:	9307      	str	r3, [sp, #28]
 80076be:	9209      	str	r2, [sp, #36]	; 0x24
 80076c0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80076c4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80076c8:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
 80076cc:	4c1d      	ldr	r4, [pc, #116]	; (8007744 <dir_register+0x22c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80076ce:	970b      	str	r7, [sp, #44]	; 0x2c
		for (n = 1; n < 100; n++) {
 80076d0:	2601      	movs	r6, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80076d2:	f04f 0920 	mov.w	r9, #32
 80076d6:	4617      	mov	r7, r2
 80076d8:	469b      	mov	fp, r3
 80076da:	4661      	mov	r1, ip
			*d++ = *s++;
 80076dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076de:	f88a 302c 	strb.w	r3, [sl, #44]	; 0x2c
 80076e2:	9b04      	ldr	r3, [sp, #16]
 80076e4:	f88a 702d 	strb.w	r7, [sl, #45]	; 0x2d
 80076e8:	2200      	movs	r2, #0
 80076ea:	f363 0207 	bfi	r2, r3, #0, #8
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
 80076f4:	f363 220f 	bfi	r2, r3, #8, #8
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	f363 4217 	bfi	r2, r3, #16, #8
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	f363 621f 	bfi	r2, r3, #24, #8
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800770a:	2200      	movs	r2, #0
 800770c:	f363 0207 	bfi	r2, r3, #0, #8
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	f363 220f 	bfi	r2, r3, #8, #8
 8007716:	9b07      	ldr	r3, [sp, #28]
 8007718:	f363 4217 	bfi	r2, r3, #16, #8
 800771c:	f36b 621f 	bfi	r2, fp, #24, #8
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007720:	2e05      	cmp	r6, #5
			*d++ = *s++;
 8007722:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007726:	f240 812a 	bls.w	800797e <dir_register+0x466>
		while (*lfn) {	/* Create a CRC */
 800772a:	880a      	ldrh	r2, [r1, #0]
 800772c:	2a00      	cmp	r2, #0
 800772e:	f000 8126 	beq.w	800797e <dir_register+0x466>
				sr = (sr << 1) + (wc & 1);
 8007732:	f002 0e01 	and.w	lr, r2, #1
 8007736:	468c      	mov	ip, r1
 8007738:	eb0e 0e46 	add.w	lr, lr, r6, lsl #1
				wc >>= 1;
 800773c:	0850      	lsrs	r0, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800773e:	e00d      	b.n	800775c <dir_register+0x244>
 8007740:	4ec4ec4f 	.word	0x4ec4ec4f
 8007744:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 8007748:	f002 0e01 	and.w	lr, r2, #1
 800774c:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007750:	040b      	lsls	r3, r1, #16
				wc >>= 1;
 8007752:	ea4f 0052 	mov.w	r0, r2, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007756:	bf48      	it	mi
 8007758:	ea8e 0e04 	eormi.w	lr, lr, r4
				sr = (sr << 1) + (wc & 1);
 800775c:	f000 0101 	and.w	r1, r0, #1
 8007760:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
 8007764:	0893      	lsrs	r3, r2, #2
				if (sr & 0x10000) sr ^= 0x11021;
 8007766:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800776a:	bf18      	it	ne
 800776c:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 8007776:	08d0      	lsrs	r0, r2, #3
				if (sr & 0x10000) sr ^= 0x11021;
 8007778:	0409      	lsls	r1, r1, #16
 800777a:	bf48      	it	mi
 800777c:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800777e:	f000 0001 	and.w	r0, r0, #1
 8007782:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 8007786:	0911      	lsrs	r1, r2, #4
				if (sr & 0x10000) sr ^= 0x11021;
 8007788:	041b      	lsls	r3, r3, #16
 800778a:	bf48      	it	mi
 800778c:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800778e:	f001 0101 	and.w	r1, r1, #1
 8007792:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8007796:	0953      	lsrs	r3, r2, #5
				if (sr & 0x10000) sr ^= 0x11021;
 8007798:	0400      	lsls	r0, r0, #16
 800779a:	bf48      	it	mi
 800779c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 80077a6:	0990      	lsrs	r0, r2, #6
				if (sr & 0x10000) sr ^= 0x11021;
 80077a8:	0409      	lsls	r1, r1, #16
 80077aa:	bf48      	it	mi
 80077ac:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80077ae:	f000 0001 	and.w	r0, r0, #1
 80077b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 80077b6:	09d1      	lsrs	r1, r2, #7
				if (sr & 0x10000) sr ^= 0x11021;
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	bf48      	it	mi
 80077bc:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80077be:	f001 0101 	and.w	r1, r1, #1
 80077c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 80077c6:	0a13      	lsrs	r3, r2, #8
				if (sr & 0x10000) sr ^= 0x11021;
 80077c8:	0400      	lsls	r0, r0, #16
 80077ca:	bf48      	it	mi
 80077cc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 80077d6:	0a50      	lsrs	r0, r2, #9
				if (sr & 0x10000) sr ^= 0x11021;
 80077d8:	0409      	lsls	r1, r1, #16
 80077da:	bf48      	it	mi
 80077dc:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80077de:	f000 0001 	and.w	r0, r0, #1
 80077e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 80077e6:	0a91      	lsrs	r1, r2, #10
				if (sr & 0x10000) sr ^= 0x11021;
 80077e8:	041b      	lsls	r3, r3, #16
 80077ea:	bf48      	it	mi
 80077ec:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80077ee:	f001 0101 	and.w	r1, r1, #1
 80077f2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 80077f6:	0ad3      	lsrs	r3, r2, #11
				if (sr & 0x10000) sr ^= 0x11021;
 80077f8:	0400      	lsls	r0, r0, #16
 80077fa:	bf48      	it	mi
 80077fc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 8007806:	0b10      	lsrs	r0, r2, #12
				if (sr & 0x10000) sr ^= 0x11021;
 8007808:	0409      	lsls	r1, r1, #16
 800780a:	bf48      	it	mi
 800780c:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800780e:	f000 0001 	and.w	r0, r0, #1
 8007812:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				wc >>= 1;
 8007816:	0b51      	lsrs	r1, r2, #13
				if (sr & 0x10000) sr ^= 0x11021;
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	bf48      	it	mi
 800781c:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800781e:	f001 0101 	and.w	r1, r1, #1
 8007822:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				wc >>= 1;
 8007826:	0b93      	lsrs	r3, r2, #14
				if (sr & 0x10000) sr ^= 0x11021;
 8007828:	0400      	lsls	r0, r0, #16
 800782a:	bf48      	it	mi
 800782c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007836:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007838:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800783c:	bf48      	it	mi
 800783e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8007840:	eb02 0143 	add.w	r1, r2, r3, lsl #1
		while (*lfn) {	/* Create a CRC */
 8007844:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8007848:	0418      	lsls	r0, r3, #16
 800784a:	bf48      	it	mi
 800784c:	4061      	eormi	r1, r4
		while (*lfn) {	/* Create a CRC */
 800784e:	2a00      	cmp	r2, #0
 8007850:	f47f af7a 	bne.w	8007748 <dir_register+0x230>
		c = (BYTE)((seq % 16) + '0');
 8007854:	f001 000f 	and.w	r0, r1, #15
 8007858:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800785c:	2a39      	cmp	r2, #57	; 0x39
 800785e:	bf88      	it	hi
 8007860:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8007864:	290f      	cmp	r1, #15
		ns[i--] = c;
 8007866:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		seq /= 16;
 800786a:	ea4f 1011 	mov.w	r0, r1, lsr #4
	} while (seq);
 800786e:	f240 8155 	bls.w	8007b1c <dir_register+0x604>
		c = (BYTE)((seq % 16) + '0');
 8007872:	f000 0c0f 	and.w	ip, r0, #15
 8007876:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 800787a:	2a39      	cmp	r2, #57	; 0x39
 800787c:	bf88      	it	hi
 800787e:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 8007882:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007884:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		seq /= 16;
 8007888:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	} while (seq);
 800788c:	f240 814c 	bls.w	8007b28 <dir_register+0x610>
		c = (BYTE)((seq % 16) + '0');
 8007890:	f00c 000f 	and.w	r0, ip, #15
 8007894:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007898:	2a39      	cmp	r2, #57	; 0x39
 800789a:	bf88      	it	hi
 800789c:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80078a0:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 80078a4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		seq /= 16;
 80078a8:	ea4f 3011 	mov.w	r0, r1, lsr #12
	} while (seq);
 80078ac:	f240 814b 	bls.w	8007b46 <dir_register+0x62e>
		c = (BYTE)((seq % 16) + '0');
 80078b0:	f000 0c0f 	and.w	ip, r0, #15
 80078b4:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 80078b8:	2a39      	cmp	r2, #57	; 0x39
 80078ba:	bf88      	it	hi
 80078bc:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 80078c0:	280f      	cmp	r0, #15
		ns[i--] = c;
 80078c2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		seq /= 16;
 80078c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	} while (seq);
 80078ca:	f240 816a 	bls.w	8007ba2 <dir_register+0x68a>
		c = (BYTE)((seq % 16) + '0');
 80078ce:	f00c 000f 	and.w	r0, ip, #15
 80078d2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80078d6:	2a39      	cmp	r2, #57	; 0x39
 80078d8:	bf88      	it	hi
 80078da:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80078de:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 80078e2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
		seq /= 16;
 80078e6:	ea4f 5011 	mov.w	r0, r1, lsr #20
	} while (seq);
 80078ea:	f240 8160 	bls.w	8007bae <dir_register+0x696>
		c = (BYTE)((seq % 16) + '0');
 80078ee:	f000 0c0f 	and.w	ip, r0, #15
 80078f2:	f10c 0230 	add.w	r2, ip, #48	; 0x30
		if (c > '9') c += 7;
 80078f6:	2a39      	cmp	r2, #57	; 0x39
 80078f8:	bf88      	it	hi
 80078fa:	f10c 0237 	addhi.w	r2, ip, #55	; 0x37
	} while (seq);
 80078fe:	280f      	cmp	r0, #15
		ns[i--] = c;
 8007900:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		seq /= 16;
 8007904:	ea4f 6111 	mov.w	r1, r1, lsr #24
	} while (seq);
 8007908:	f240 8157 	bls.w	8007bba <dir_register+0x6a2>
		c = (BYTE)((seq % 16) + '0');
 800790c:	f001 000f 	and.w	r0, r1, #15
 8007910:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007914:	2a39      	cmp	r2, #57	; 0x39
 8007916:	bf88      	it	hi
 8007918:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800791c:	290f      	cmp	r1, #15
		ns[i--] = c;
 800791e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8007922:	f240 8107 	bls.w	8007b34 <dir_register+0x61c>
		ns[i--] = c;
 8007926:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800792a:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800792e:	2200      	movs	r2, #0
 8007930:	e002      	b.n	8007938 <dir_register+0x420>
 8007932:	3201      	adds	r2, #1
 8007934:	4562      	cmp	r2, ip
 8007936:	d003      	beq.n	8007940 <dir_register+0x428>
 8007938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800793c:	2b20      	cmp	r3, #32
 800793e:	d1f8      	bne.n	8007932 <dir_register+0x41a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007940:	f1bc 0f07 	cmp.w	ip, #7
 8007944:	d91d      	bls.n	8007982 <dir_register+0x46a>
 8007946:	1c50      	adds	r0, r2, #1
	} while (j < 8);
 8007948:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800794a:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
 800794e:	d80a      	bhi.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007950:	1c42      	adds	r2, r0, #1
 8007952:	2a08      	cmp	r2, #8
 8007954:	f04f 0120 	mov.w	r1, #32
 8007958:	f1c0 0208 	rsb	r2, r0, #8
 800795c:	bf88      	it	hi
 800795e:	2201      	movhi	r2, #1
 8007960:	4428      	add	r0, r5
 8007962:	f003 fbd1 	bl	800b108 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007966:	4650      	mov	r0, sl
 8007968:	f7ff fa32 	bl	8006dd0 <dir_find>
			if (res != FR_OK) break;
 800796c:	2800      	cmp	r0, #0
 800796e:	d17d      	bne.n	8007a6c <dir_register+0x554>
		for (n = 1; n < 100; n++) {
 8007970:	3601      	adds	r6, #1
 8007972:	2e64      	cmp	r6, #100	; 0x64
 8007974:	f000 8095 	beq.w	8007aa2 <dir_register+0x58a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	68d9      	ldr	r1, [r3, #12]
 800797c:	e6ae      	b.n	80076dc <dir_register+0x1c4>
 800797e:	4631      	mov	r1, r6
 8007980:	e768      	b.n	8007854 <dir_register+0x33c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007982:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8007986:	eb0d 0103 	add.w	r1, sp, r3
 800798a:	f10c 0c01 	add.w	ip, ip, #1
 800798e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007992:	54a9      	strb	r1, [r5, r2]
 8007994:	3201      	adds	r2, #1
	} while (j < 8);
 8007996:	2a07      	cmp	r2, #7
 8007998:	d8e5      	bhi.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800799a:	f1bc 0f08 	cmp.w	ip, #8
 800799e:	f000 8086 	beq.w	8007aae <dir_register+0x596>
 80079a2:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 80079a6:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 80079aa:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079ac:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80079b0:	54a9      	strb	r1, [r5, r2]
 80079b2:	f102 0001 	add.w	r0, r2, #1
 80079b6:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 80079ba:	d0d4      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079bc:	2908      	cmp	r1, #8
 80079be:	d07e      	beq.n	8007abe <dir_register+0x5a6>
 80079c0:	f10c 0349 	add.w	r3, ip, #73	; 0x49
 80079c4:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 80079c8:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079ca:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80079ce:	5429      	strb	r1, [r5, r0]
 80079d0:	f10c 0102 	add.w	r1, ip, #2
 80079d4:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 80079d8:	d0c5      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079da:	2908      	cmp	r1, #8
 80079dc:	d077      	beq.n	8007ace <dir_register+0x5b6>
 80079de:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
 80079e2:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 80079e6:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079e8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80079ec:	5429      	strb	r1, [r5, r0]
 80079ee:	f10c 0103 	add.w	r1, ip, #3
 80079f2:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 80079f6:	d0b6      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80079f8:	2908      	cmp	r1, #8
 80079fa:	d070      	beq.n	8007ade <dir_register+0x5c6>
 80079fc:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
 8007a00:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007a04:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a06:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007a0a:	5429      	strb	r1, [r5, r0]
 8007a0c:	f10c 0104 	add.w	r1, ip, #4
 8007a10:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8007a14:	d0a7      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a16:	2908      	cmp	r1, #8
 8007a18:	d069      	beq.n	8007aee <dir_register+0x5d6>
 8007a1a:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
 8007a1e:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007a22:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a24:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007a28:	5429      	strb	r1, [r5, r0]
 8007a2a:	f10c 0105 	add.w	r1, ip, #5
 8007a2e:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8007a32:	d098      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a34:	2908      	cmp	r1, #8
 8007a36:	d062      	beq.n	8007afe <dir_register+0x5e6>
 8007a38:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
 8007a3c:	eb0d 0103 	add.w	r1, sp, r3
	} while (j < 8);
 8007a40:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a42:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8007a46:	5429      	strb	r1, [r5, r0]
 8007a48:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8007a4c:	d08b      	beq.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a4e:	f1bc 0f01 	cmp.w	ip, #1
 8007a52:	d15c      	bne.n	8007b0e <dir_register+0x5f6>
 8007a54:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8007a58:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
 8007a5a:	2906      	cmp	r1, #6
 8007a5c:	d183      	bne.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a5e:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007a62:	4650      	mov	r0, sl
 8007a64:	f7ff f9b4 	bl	8006dd0 <dir_find>
			if (res != FR_OK) break;
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d081      	beq.n	8007970 <dir_register+0x458>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a6c:	2804      	cmp	r0, #4
 8007a6e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007a70:	4683      	mov	fp, r0
 8007a72:	d118      	bne.n	8007aa6 <dir_register+0x58e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a76:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a7a:	f013 0302 	ands.w	r3, r3, #2
	FATFS *fs = dp->obj.fs;
 8007a7e:	f8da 9000 	ldr.w	r9, [sl]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a82:	f47f ad73 	bne.w	800756c <dir_register+0x54>
 8007a86:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 8007a88:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a8a:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8007a8c:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a8e:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8007a90:	f7ff f8e4 	bl	8006c5c <dir_sdi>
	if (res == FR_OK) {
 8007a94:	4683      	mov	fp, r0
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f ad79 	beq.w	800758e <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a9c:	f1bb 0f04 	cmp.w	fp, #4
 8007aa0:	d101      	bne.n	8007aa6 <dir_register+0x58e>
 8007aa2:	f04f 0b07 	mov.w	fp, #7
}
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	b013      	add	sp, #76	; 0x4c
 8007aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8007aae:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ab0:	f805 9002 	strb.w	r9, [r5, r2]
 8007ab4:	f102 0001 	add.w	r0, r2, #1
	} while (j < 8);
 8007ab8:	f47f af4a 	bne.w	8007950 <dir_register+0x438>
 8007abc:	e753      	b.n	8007966 <dir_register+0x44e>
 8007abe:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ac0:	f805 9000 	strb.w	r9, [r5, r0]
 8007ac4:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8007ac8:	f47f af42 	bne.w	8007950 <dir_register+0x438>
 8007acc:	e74b      	b.n	8007966 <dir_register+0x44e>
 8007ace:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ad0:	f805 9000 	strb.w	r9, [r5, r0]
 8007ad4:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8007ad8:	f47f af3a 	bne.w	8007950 <dir_register+0x438>
 8007adc:	e743      	b.n	8007966 <dir_register+0x44e>
 8007ade:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ae0:	f805 9000 	strb.w	r9, [r5, r0]
 8007ae4:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8007ae8:	f47f af32 	bne.w	8007950 <dir_register+0x438>
 8007aec:	e73b      	b.n	8007966 <dir_register+0x44e>
 8007aee:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007af0:	f805 9000 	strb.w	r9, [r5, r0]
 8007af4:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8007af8:	f47f af2a 	bne.w	8007950 <dir_register+0x438>
 8007afc:	e733      	b.n	8007966 <dir_register+0x44e>
 8007afe:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b00:	f805 9000 	strb.w	r9, [r5, r0]
 8007b04:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8007b08:	f47f af22 	bne.w	8007950 <dir_register+0x438>
 8007b0c:	e72b      	b.n	8007966 <dir_register+0x44e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b0e:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	f47f af27 	bne.w	8007966 <dir_register+0x44e>
 8007b18:	2007      	movs	r0, #7
 8007b1a:	e719      	b.n	8007950 <dir_register+0x438>
	ns[i] = '~';
 8007b1c:	227e      	movs	r2, #126	; 0x7e
 8007b1e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		ns[i--] = c;
 8007b22:	f04f 0c06 	mov.w	ip, #6
 8007b26:	e700      	b.n	800792a <dir_register+0x412>
	ns[i] = '~';
 8007b28:	227e      	movs	r2, #126	; 0x7e
 8007b2a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		ns[i--] = c;
 8007b2e:	f04f 0c05 	mov.w	ip, #5
 8007b32:	e6fa      	b.n	800792a <dir_register+0x412>
	ns[i] = '~';
 8007b34:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b36:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8007b3a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b3e:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8007b42:	4662      	mov	r2, ip
 8007b44:	e72d      	b.n	80079a2 <dir_register+0x48a>
	ns[i] = '~';
 8007b46:	227e      	movs	r2, #126	; 0x7e
 8007b48:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		ns[i--] = c;
 8007b4c:	f04f 0c04 	mov.w	ip, #4
 8007b50:	e6eb      	b.n	800792a <dir_register+0x412>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b52:	8962      	ldrh	r2, [r4, #10]
 8007b54:	3a01      	subs	r2, #1
 8007b56:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8007b5a:	f47f ad3e 	bne.w	80075da <dir_register+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4620      	mov	r0, r4
 8007b62:	f7fe fe99 	bl	8006898 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b66:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b68:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b6a:	f240 8221 	bls.w	8007fb0 <dir_register+0xa98>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b6e:	1c42      	adds	r2, r0, #1
 8007b70:	f000 80dd 	beq.w	8007d2e <dir_register+0x816>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b74:	69a3      	ldr	r3, [r4, #24]
 8007b76:	4298      	cmp	r0, r3
 8007b78:	4602      	mov	r2, r0
 8007b7a:	f080 80e3 	bcs.w	8007d44 <dir_register+0x82c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b7e:	3b02      	subs	r3, #2
	clst -= 2;
 8007b80:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b84:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b88:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
 8007b8a:	bf3c      	itt	cc
 8007b8c:	8963      	ldrhcc	r3, [r4, #10]
 8007b8e:	6ae1      	ldrcc	r1, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b90:	f8ca 2018 	str.w	r2, [sl, #24]
	return clst * fs->csize + fs->database;
 8007b94:	bf34      	ite	cc
 8007b96:	fb0b 1103 	mlacc	r1, fp, r3, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b9a:	2100      	movcs	r1, #0
				dp->sect = clust2sect(fs, clst);
 8007b9c:	f8ca 101c 	str.w	r1, [sl, #28]
 8007ba0:	e51d      	b.n	80075de <dir_register+0xc6>
	ns[i] = '~';
 8007ba2:	227e      	movs	r2, #126	; 0x7e
 8007ba4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
		ns[i--] = c;
 8007ba8:	f04f 0c03 	mov.w	ip, #3
 8007bac:	e6bd      	b.n	800792a <dir_register+0x412>
	ns[i] = '~';
 8007bae:	227e      	movs	r2, #126	; 0x7e
 8007bb0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		ns[i--] = c;
 8007bb4:	f04f 0c02 	mov.w	ip, #2
 8007bb8:	e6b7      	b.n	800792a <dir_register+0x412>
	ns[i] = '~';
 8007bba:	227e      	movs	r2, #126	; 0x7e
 8007bbc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
		ns[i--] = c;
 8007bc0:	f04f 0c01 	mov.w	ip, #1
 8007bc4:	e6b1      	b.n	800792a <dir_register+0x412>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007bc6:	f04f 0b06 	mov.w	fp, #6
}
 8007bca:	4658      	mov	r0, fp
 8007bcc:	b013      	add	sp, #76	; 0x4c
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	4683      	mov	fp, r0
 8007bd4:	4658      	mov	r0, fp
 8007bd6:	b013      	add	sp, #76	; 0x4c
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007bdc:	f8da 1014 	ldr.w	r1, [sl, #20]
 8007be0:	4650      	mov	r0, sl
 8007be2:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8007be6:	f7ff f839 	bl	8006c5c <dir_sdi>
		if (res == FR_OK) {
 8007bea:	4606      	mov	r6, r0
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 8105 	bne.w	8007dfc <dir_register+0x8e4>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007bf2:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8007bf6:	f89a 1025 	ldrb.w	r1, [sl, #37]	; 0x25
	*ptr++ = (BYTE)val; val >>= 8;
 8007bfa:	9f01      	ldr	r7, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007bfc:	01d3      	lsls	r3, r2, #7
 8007bfe:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8007c02:	185a      	adds	r2, r3, r1
 8007c04:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c08:	f89a 1026 	ldrb.w	r1, [sl, #38]	; 0x26
 8007c0c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c10:	fa51 f283 	uxtab	r2, r1, r3
 8007c14:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c18:	f89a 1027 	ldrb.w	r1, [sl, #39]	; 0x27
 8007c1c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c20:	fa51 f283 	uxtab	r2, r1, r3
 8007c24:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c28:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8007c2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c30:	fa51 f283 	uxtab	r2, r1, r3
 8007c34:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c38:	f89a 1029 	ldrb.w	r1, [sl, #41]	; 0x29
 8007c3c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c40:	fa51 f283 	uxtab	r2, r1, r3
 8007c44:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c48:	f89a 102a 	ldrb.w	r1, [sl, #42]	; 0x2a
 8007c4c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c50:	fa51 f283 	uxtab	r2, r1, r3
 8007c54:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c58:	f89a 102b 	ldrb.w	r1, [sl, #43]	; 0x2b
 8007c5c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c60:	fa51 f283 	uxtab	r2, r1, r3
 8007c64:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c68:	f89a 102c 	ldrb.w	r1, [sl, #44]	; 0x2c
 8007c6c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c70:	fa51 f283 	uxtab	r2, r1, r3
 8007c74:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007c78:	f89a 102d 	ldrb.w	r1, [sl, #45]	; 0x2d
 8007c7c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007c80:	fa51 f383 	uxtab	r3, r1, r3
 8007c84:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8007c88:	f3c3 0546 	ubfx	r5, r3, #1, #7
 8007c8c:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
 8007c90:	fa52 f585 	uxtab	r5, r2, r5
 8007c94:	b2ed      	uxtb	r5, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007c96:	f04f 080f 	mov.w	r8, #15
	*ptr++ = (BYTE)val; val >>= 8;
 8007c9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
				res = move_window(fs, dp->sect);
 8007c9e:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	d004      	beq.n	8007cb2 <dir_register+0x79a>
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7fe fbb9 	bl	8006420 <move_window.part.0>
				if (res != FR_OK) break;
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d18f      	bne.n	8007bd2 <dir_register+0x6ba>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007cb2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8007cb6:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007cba:	1e42      	subs	r2, r0, #1
 8007cbc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8007cc0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007cc4:	68f9      	ldr	r1, [r7, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007cc6:	735d      	strb	r5, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007cc8:	f883 800b 	strb.w	r8, [r3, #11]
	dir[LDIR_Type] = 0;
 8007ccc:	731e      	strb	r6, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cce:	769e      	strb	r6, [r3, #26]
	*ptr++ = (BYTE)val;
 8007cd0:	76de      	strb	r6, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007cd2:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cd6:	f883 c001 	strb.w	ip, [r3, #1]
 8007cda:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007cde:	f883 e002 	strb.w	lr, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007ce2:	ea4f 0e42 	mov.w	lr, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007ce6:	f1bc 0f00 	cmp.w	ip, #0
 8007cea:	f040 8089 	bne.w	8007e00 <dir_register+0x8e8>
	*ptr++ = (BYTE)val; val >>= 8;
 8007cee:	f8a3 4003 	strh.w	r4, [r3, #3]
 8007cf2:	f8a3 4005 	strh.w	r4, [r3, #5]
 8007cf6:	f8a3 4007 	strh.w	r4, [r3, #7]
 8007cfa:	f8a3 4009 	strh.w	r4, [r3, #9]
 8007cfe:	81dc      	strh	r4, [r3, #14]
 8007d00:	821c      	strh	r4, [r3, #16]
 8007d02:	825c      	strh	r4, [r3, #18]
 8007d04:	829c      	strh	r4, [r3, #20]
 8007d06:	82dc      	strh	r4, [r3, #22]
 8007d08:	831c      	strh	r4, [r3, #24]
 8007d0a:	839c      	strh	r4, [r3, #28]
 8007d0c:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007d0e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007d12:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	70fb      	strb	r3, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007d18:	4650      	mov	r0, sl
 8007d1a:	f7fe fe1d 	bl	8006958 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f47f af57 	bne.w	8007bd2 <dir_register+0x6ba>
 8007d24:	9b02      	ldr	r3, [sp, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	d1b8      	bne.n	8007c9e <dir_register+0x786>
 8007d2c:	e476      	b.n	800761c <dir_register+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d2e:	f04f 0b01 	mov.w	fp, #1
}
 8007d32:	4658      	mov	r0, fp
 8007d34:	b013      	add	sp, #76	; 0x4c
 8007d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 8007d3a:	f8ca 301c 	str.w	r3, [sl, #28]
 8007d3e:	e6b0      	b.n	8007aa2 <dir_register+0x58a>
 8007d40:	4683      	mov	fp, r0
 8007d42:	e6ab      	b.n	8007a9c <dir_register+0x584>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d44:	f8da 1018 	ldr.w	r1, [sl, #24]
 8007d48:	4650      	mov	r0, sl
 8007d4a:	f7fe feb9 	bl	8006ac0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d4e:	4603      	mov	r3, r0
 8007d50:	9004      	str	r0, [sp, #16]
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f43f aea5 	beq.w	8007aa2 <dir_register+0x58a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d58:	2801      	cmp	r0, #1
 8007d5a:	f000 8129 	beq.w	8007fb0 <dir_register+0xa98>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d5e:	3301      	adds	r3, #1
 8007d60:	d0e5      	beq.n	8007d2e <dir_register+0x816>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d62:	78e3      	ldrb	r3, [r4, #3]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 812f 	bne.w	8007fc8 <dir_register+0xab0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d6a:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8007d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d72:	2100      	movs	r1, #0
 8007d74:	4630      	mov	r0, r6
 8007d76:	f003 f9c7 	bl	800b108 <memset>
	clst -= 2;
 8007d7a:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d7c:	69a3      	ldr	r3, [r4, #24]
	return clst * fs->csize + fs->database;
 8007d7e:	8961      	ldrh	r1, [r4, #10]
	clst -= 2;
 8007d80:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d84:	3b02      	subs	r3, #2
 8007d86:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
 8007d88:	bf36      	itet	cc
 8007d8a:	6ae2      	ldrcc	r2, [r4, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d8c:	2200      	movcs	r2, #0
	return clst * fs->csize + fs->database;
 8007d8e:	fb0b 2201 	mlacc	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d92:	6322      	str	r2, [r4, #48]	; 0x30
 8007d94:	2900      	cmp	r1, #0
 8007d96:	f000 8114 	beq.w	8007fc2 <dir_register+0xaaa>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e9cd 5707 	strd	r5, r7, [sp, #28]
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	4637      	mov	r7, r6
 8007da4:	4616      	mov	r6, r2
						fs->wflag = 1;
 8007da6:	f04f 0301 	mov.w	r3, #1
 8007daa:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007dac:	7860      	ldrb	r0, [r4, #1]
 8007dae:	2301      	movs	r3, #1
 8007db0:	4632      	mov	r2, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7fe fa80 	bl	80062b8 <disk_write>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1b8      	bne.n	8007d2e <dir_register+0x816>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 8007dbe:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dc0:	1af0      	subs	r0, r6, r3
 8007dc2:	69e3      	ldr	r3, [r4, #28]
 8007dc4:	4298      	cmp	r0, r3
 8007dc6:	d20e      	bcs.n	8007de6 <dir_register+0x8ce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dc8:	78a5      	ldrb	r5, [r4, #2]
 8007dca:	2d01      	cmp	r5, #1
 8007dcc:	d801      	bhi.n	8007dd2 <dir_register+0x8ba>
 8007dce:	e00a      	b.n	8007de6 <dir_register+0x8ce>
					wsect += fs->fsize;
 8007dd0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dd2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8007dd4:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dda:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7fe fa6b 	bl	80062b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007de2:	2d01      	cmp	r5, #1
 8007de4:	d1f4      	bne.n	8007dd0 <dir_register+0x8b8>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007dea:	8965      	ldrh	r5, [r4, #10]
 8007dec:	1c50      	adds	r0, r2, #1
 8007dee:	1c5e      	adds	r6, r3, #1
 8007df0:	42a8      	cmp	r0, r5
 8007df2:	6326      	str	r6, [r4, #48]	; 0x30
 8007df4:	f080 80df 	bcs.w	8007fb6 <dir_register+0xa9e>
 8007df8:	9005      	str	r0, [sp, #20]
 8007dfa:	e7d4      	b.n	8007da6 <dir_register+0x88e>
 8007dfc:	4683      	mov	fp, r0
 8007dfe:	e652      	b.n	8007aa6 <dir_register+0x58e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e00:	45a4      	cmp	ip, r4
 8007e02:	f43f af74 	beq.w	8007cee <dir_register+0x7d6>
 8007e06:	3201      	adds	r2, #1
 8007e08:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8007e0c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e10:	70da      	strb	r2, [r3, #3]
 8007e12:	ea4f 2912 	mov.w	r9, r2, lsr #8
	*ptr++ = (BYTE)val;
 8007e16:	f883 9004 	strb.w	r9, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	f43f af69 	beq.w	8007cf2 <dir_register+0x7da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e20:	42a2      	cmp	r2, r4
 8007e22:	f43f af66 	beq.w	8007cf2 <dir_register+0x7da>
 8007e26:	eb01 020c 	add.w	r2, r1, ip
 8007e2a:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e2e:	f883 c005 	strb.w	ip, [r3, #5]
 8007e32:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007e36:	f883 9006 	strb.w	r9, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e3a:	f1bc 0f00 	cmp.w	ip, #0
 8007e3e:	f43f af5a 	beq.w	8007cf6 <dir_register+0x7de>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e42:	45a4      	cmp	ip, r4
 8007e44:	f43f af57 	beq.w	8007cf6 <dir_register+0x7de>
 8007e48:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e4c:	f883 c007 	strb.w	ip, [r3, #7]
 8007e50:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007e54:	f883 9008 	strb.w	r9, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e58:	f1bc 0f00 	cmp.w	ip, #0
 8007e5c:	f43f af4d 	beq.w	8007cfa <dir_register+0x7e2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e60:	45a4      	cmp	ip, r4
 8007e62:	f43f af4a 	beq.w	8007cfa <dir_register+0x7e2>
 8007e66:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e6a:	f883 c009 	strb.w	ip, [r3, #9]
 8007e6e:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007e72:	f883 900a 	strb.w	r9, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e76:	f1bc 0f00 	cmp.w	ip, #0
 8007e7a:	f43f af40 	beq.w	8007cfe <dir_register+0x7e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e7e:	45a4      	cmp	ip, r4
 8007e80:	f43f af3d 	beq.w	8007cfe <dir_register+0x7e6>
 8007e84:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e88:	f883 c00e 	strb.w	ip, [r3, #14]
 8007e8c:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007e90:	f883 900f 	strb.w	r9, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007e94:	f1bc 0f00 	cmp.w	ip, #0
 8007e98:	f43f af32 	beq.w	8007d00 <dir_register+0x7e8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007e9c:	45a4      	cmp	ip, r4
 8007e9e:	f43f af2f 	beq.w	8007d00 <dir_register+0x7e8>
 8007ea2:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ea6:	f883 c010 	strb.w	ip, [r3, #16]
 8007eaa:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007eae:	f883 9011 	strb.w	r9, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007eb2:	f1bc 0f00 	cmp.w	ip, #0
 8007eb6:	f43f af24 	beq.w	8007d02 <dir_register+0x7ea>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007eba:	45a4      	cmp	ip, r4
 8007ebc:	f43f af21 	beq.w	8007d02 <dir_register+0x7ea>
 8007ec0:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ec4:	f883 c012 	strb.w	ip, [r3, #18]
 8007ec8:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007ecc:	f883 9013 	strb.w	r9, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007ed0:	f1bc 0f00 	cmp.w	ip, #0
 8007ed4:	f43f af16 	beq.w	8007d04 <dir_register+0x7ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007ed8:	45a4      	cmp	ip, r4
 8007eda:	f43f af13 	beq.w	8007d04 <dir_register+0x7ec>
 8007ede:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ee2:	f883 c014 	strb.w	ip, [r3, #20]
 8007ee6:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007eea:	f883 9015 	strb.w	r9, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007eee:	f1bc 0f00 	cmp.w	ip, #0
 8007ef2:	f43f af08 	beq.w	8007d06 <dir_register+0x7ee>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007ef6:	45a4      	cmp	ip, r4
 8007ef8:	f43f af05 	beq.w	8007d06 <dir_register+0x7ee>
 8007efc:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f00:	f883 c016 	strb.w	ip, [r3, #22]
 8007f04:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007f08:	f883 9017 	strb.w	r9, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f0c:	f1bc 0f00 	cmp.w	ip, #0
 8007f10:	f43f aefa 	beq.w	8007d08 <dir_register+0x7f0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f14:	45a4      	cmp	ip, r4
 8007f16:	f43f aef7 	beq.w	8007d08 <dir_register+0x7f0>
 8007f1a:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f1e:	f883 c018 	strb.w	ip, [r3, #24]
 8007f22:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007f26:	f883 9019 	strb.w	r9, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f2a:	f1bc 0f00 	cmp.w	ip, #0
 8007f2e:	f43f aeec 	beq.w	8007d0a <dir_register+0x7f2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f32:	45a4      	cmp	ip, r4
 8007f34:	f43f aee9 	beq.w	8007d0a <dir_register+0x7f2>
 8007f38:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f3c:	f883 c01c 	strb.w	ip, [r3, #28]
 8007f40:	ea4f 291c 	mov.w	r9, ip, lsr #8
	*ptr++ = (BYTE)val;
 8007f44:	f883 901d 	strb.w	r9, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f48:	f1bc 0f00 	cmp.w	ip, #0
 8007f4c:	f43f aede 	beq.w	8007d0c <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f50:	45a4      	cmp	ip, r4
 8007f52:	f43f aedb 	beq.w	8007d0c <dir_register+0x7f4>
 8007f56:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f58:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f5a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8007f60:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f62:	fa1f fc8c 	uxth.w	ip, ip
 8007f66:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007f6a:	4594      	cmp	ip, r2
 8007f6c:	f63f aecf 	bhi.w	8007d0e <dir_register+0x7f6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007f70:	4471      	add	r1, lr
 8007f72:	8b4a      	ldrh	r2, [r1, #26]
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	f47f aecc 	bne.w	8007d12 <dir_register+0x7fa>
 8007f7a:	e6c8      	b.n	8007d0e <dir_register+0x7f6>
			*d++ = *s++;
 8007f7c:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 8007f86:	705a      	strb	r2, [r3, #1]
 8007f88:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 8007f8c:	709a      	strb	r2, [r3, #2]
 8007f8e:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8007f92:	70da      	strb	r2, [r3, #3]
 8007f94:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8007f98:	711a      	strb	r2, [r3, #4]
 8007f9a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8007f9e:	715a      	strb	r2, [r3, #5]
 8007fa0:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 8007fa4:	719a      	strb	r2, [r3, #6]
 8007fa6:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 8007faa:	71da      	strb	r2, [r3, #7]
 8007fac:	f7ff bb56 	b.w	800765c <dir_register+0x144>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007fb0:	f04f 0b02 	mov.w	fp, #2
 8007fb4:	e577      	b.n	8007aa6 <dir_register+0x58e>
					fs->winsect -= n;							/* Restore window offset */
 8007fb6:	1a9a      	subs	r2, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fb8:	69a3      	ldr	r3, [r4, #24]
					fs->winsect -= n;							/* Restore window offset */
 8007fba:	9d07      	ldr	r5, [sp, #28]
 8007fbc:	463e      	mov	r6, r7
 8007fbe:	9f08      	ldr	r7, [sp, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fc0:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8007fc2:	6322      	str	r2, [r4, #48]	; 0x30
 8007fc4:	9a04      	ldr	r2, [sp, #16]
 8007fc6:	e5df      	b.n	8007b88 <dir_register+0x670>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007fc8:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 8007fcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007fce:	7860      	ldrb	r0, [r4, #1]
 8007fd0:	9205      	str	r2, [sp, #20]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	f7fe f96f 	bl	80062b8 <disk_write>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f47f aea7 	bne.w	8007d2e <dir_register+0x816>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe2:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 8007fe4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007fe6:	1ad1      	subs	r1, r2, r3
 8007fe8:	69e3      	ldr	r3, [r4, #28]
 8007fea:	4299      	cmp	r1, r3
 8007fec:	f4bf aebf 	bcs.w	8007d6e <dir_register+0x856>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ff0:	f894 b002 	ldrb.w	fp, [r4, #2]
 8007ff4:	f1bb 0f01 	cmp.w	fp, #1
 8007ff8:	f67f aeb9 	bls.w	8007d6e <dir_register+0x856>
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	462e      	mov	r6, r5
 8008000:	4625      	mov	r5, r4
 8008002:	4614      	mov	r4, r2
 8008004:	e000      	b.n	8008008 <dir_register+0xaf0>
					wsect += fs->fsize;
 8008006:	69eb      	ldr	r3, [r5, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008008:	7868      	ldrb	r0, [r5, #1]
 800800a:	9105      	str	r1, [sp, #20]
					wsect += fs->fsize;
 800800c:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800800e:	4622      	mov	r2, r4
 8008010:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8008016:	f7fe f94f 	bl	80062b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800801a:	f1bb 0f01 	cmp.w	fp, #1
 800801e:	9905      	ldr	r1, [sp, #20]
 8008020:	d1f1      	bne.n	8008006 <dir_register+0xaee>
 8008022:	462c      	mov	r4, r5
 8008024:	4635      	mov	r5, r6
 8008026:	460e      	mov	r6, r1
 8008028:	e6a1      	b.n	8007d6e <dir_register+0x856>
 800802a:	bf00      	nop

0800802c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800802c:	b510      	push	{r4, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8008034:	b181      	cbz	r1, 8008058 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008036:	f891 c000 	ldrb.w	ip, [r1]
 800803a:	f1bc 0f1f 	cmp.w	ip, #31
 800803e:	d911      	bls.n	8008064 <f_mount+0x38>
 8008040:	4663      	mov	r3, ip
 8008042:	4608      	mov	r0, r1
 8008044:	e003      	b.n	800804e <f_mount+0x22>
 8008046:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800804a:	2b1f      	cmp	r3, #31
 800804c:	d90a      	bls.n	8008064 <f_mount+0x38>
 800804e:	2b3a      	cmp	r3, #58	; 0x3a
 8008050:	d1f9      	bne.n	8008046 <f_mount+0x1a>
			i = *tp++ - '0';
 8008052:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008054:	4288      	cmp	r0, r1
 8008056:	d002      	beq.n	800805e <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8008058:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800805a:	b002      	add	sp, #8
 800805c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800805e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008062:	d1f9      	bne.n	8008058 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008064:	4910      	ldr	r1, [pc, #64]	; (80080a8 <f_mount+0x7c>)
 8008066:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8008068:	b163      	cbz	r3, 8008084 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800806a:	4810      	ldr	r0, [pc, #64]	; (80080ac <f_mount+0x80>)
 800806c:	6804      	ldr	r4, [r0, #0]
 800806e:	42a3      	cmp	r3, r4
 8008070:	bf04      	itt	eq
 8008072:	2400      	moveq	r4, #0
 8008074:	6004      	streq	r4, [r0, #0]
 8008076:	6904      	ldr	r4, [r0, #16]
 8008078:	429c      	cmp	r4, r3
 800807a:	bf04      	itt	eq
 800807c:	2400      	moveq	r4, #0
 800807e:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8008080:	2000      	movs	r0, #0
 8008082:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	b15b      	cbz	r3, 80080a0 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8008088:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800808a:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 800808c:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 800808e:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008090:	d1e3      	bne.n	800805a <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008092:	4602      	mov	r2, r0
 8008094:	a901      	add	r1, sp, #4
 8008096:	4668      	mov	r0, sp
 8008098:	f7fe f9fc 	bl	8006494 <find_volume>
}
 800809c:	b002      	add	sp, #8
 800809e:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080a0:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80080a2:	600b      	str	r3, [r1, #0]
}
 80080a4:	b002      	add	sp, #8
 80080a6:	bd10      	pop	{r4, pc}
 80080a8:	200016cc 	.word	0x200016cc
 80080ac:	200016d0 	.word	0x200016d0

080080b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	b090      	sub	sp, #64	; 0x40
 80080b6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f000 809b 	beq.w	80081f4 <f_open+0x144>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80080be:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80080c2:	4616      	mov	r6, r2
 80080c4:	4604      	mov	r4, r0
 80080c6:	463a      	mov	r2, r7
 80080c8:	a902      	add	r1, sp, #8
 80080ca:	a801      	add	r0, sp, #4
 80080cc:	f7fe f9e2 	bl	8006494 <find_volume>
	if (res == FR_OK) {
 80080d0:	4605      	mov	r5, r0
 80080d2:	b128      	cbz	r0, 80080e0 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80080d4:	2300      	movs	r3, #0
 80080d6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80080d8:	4628      	mov	r0, r5
 80080da:	b010      	add	sp, #64	; 0x40
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 80080e0:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 80080e2:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80080e4:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80080e6:	a803      	add	r0, sp, #12
 80080e8:	f7ff f812 	bl	8007110 <follow_path>
		if (res == FR_OK) {
 80080ec:	b9f8      	cbnz	r0, 800812e <f_open+0x7e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080ee:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f2c0 8085 	blt.w	8008202 <f_open+0x152>
		if (Files[i].fs) {	/* Existing entry */
 80080f8:	4ba2      	ldr	r3, [pc, #648]	; (8008384 <f_open+0x2d4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80080fa:	9803      	ldr	r0, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 80080fc:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 8008100:	f8dd c014 	ldr.w	ip, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 8008104:	f8dd e020 	ldr.w	lr, [sp, #32]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008108:	f027 0201 	bic.w	r2, r7, #1
 800810c:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 800810e:	f1b8 0f00 	cmp.w	r8, #0
 8008112:	f000 80f9 	beq.w	8008308 <f_open+0x258>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008116:	4580      	cmp	r8, r0
 8008118:	d075      	beq.n	8008206 <f_open+0x156>
		if (Files[i].fs) {	/* Existing entry */
 800811a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800811e:	f1b8 0f00 	cmp.w	r8, #0
 8008122:	f000 8087 	beq.w	8008234 <f_open+0x184>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008126:	4580      	cmp	r8, r0
 8008128:	d075      	beq.n	8008216 <f_open+0x166>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800812a:	2512      	movs	r5, #18
 800812c:	e7d2      	b.n	80080d4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800812e:	f016 0f1c 	tst.w	r6, #28
 8008132:	d064      	beq.n	80081fe <f_open+0x14e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008134:	2804      	cmp	r0, #4
 8008136:	d162      	bne.n	80081fe <f_open+0x14e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008138:	4b92      	ldr	r3, [pc, #584]	; (8008384 <f_open+0x2d4>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	b112      	cbz	r2, 8008144 <f_open+0x94>
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f2      	bne.n	800812a <f_open+0x7a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008144:	a803      	add	r0, sp, #12
 8008146:	f7ff f9e7 	bl	8007518 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800814a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800814e:	2800      	cmp	r0, #0
 8008150:	d155      	bne.n	80081fe <f_open+0x14e>
				dw = GET_FATTIME();
 8008152:	f7fd ffaf 	bl	80060b4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008158:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800815a:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800815e:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8008162:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008164:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8008166:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8008168:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800816a:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800816c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800816e:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 8008170:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8008172:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008174:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008178:	9b02      	ldr	r3, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800817a:	2120      	movs	r1, #32
 800817c:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 800817e:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8008182:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008184:	bf08      	it	eq
 8008186:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8008188:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800818a:	bf08      	it	eq
 800818c:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008190:	2100      	movs	r1, #0
 8008192:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8008194:	7818      	ldrb	r0, [r3, #0]
 8008196:	2803      	cmp	r0, #3
 8008198:	d100      	bne.n	800819c <f_open+0xec>
	*ptr++ = (BYTE)val; val >>= 8;
 800819a:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800819c:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800819e:	2200      	movs	r2, #0
 80081a0:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 80081a2:	2101      	movs	r1, #1
 80081a4:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80081a6:	b19e      	cbz	r6, 80081d0 <f_open+0x120>
						res = remove_chain(&dj.obj, cl, 0);
 80081a8:	4631      	mov	r1, r6
 80081aa:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 80081ac:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80081b0:	f7ff f914 	bl	80073dc <remove_chain>
						if (res == FR_OK) {
 80081b4:	bb18      	cbnz	r0, 80081fe <f_open+0x14e>
							res = move_window(fs, dw);
 80081b6:	9b02      	ldr	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	4590      	cmp	r8, r2
 80081bc:	f000 80dd 	beq.w	800837a <f_open+0x2ca>
 80081c0:	4618      	mov	r0, r3
 80081c2:	4641      	mov	r1, r8
 80081c4:	f7fe f92c 	bl	8006420 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	3e01      	subs	r6, #1
 80081cc:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80081ce:	b9b0      	cbnz	r0, 80081fe <f_open+0x14e>
				mode |= FA_MODIFIED;
 80081d0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081d4:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081dc:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 80081de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e0:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081e2:	bf18      	it	ne
 80081e4:	2101      	movne	r1, #1
 80081e6:	a803      	add	r0, sp, #12
 80081e8:	f7fe f880 	bl	80062ec <inc_lock>
 80081ec:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80081ee:	bb68      	cbnz	r0, 800824c <f_open+0x19c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80081f0:	2502      	movs	r5, #2
 80081f2:	e76f      	b.n	80080d4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80081f4:	2509      	movs	r5, #9
}
 80081f6:	4628      	mov	r0, r5
 80081f8:	b010      	add	sp, #64	; 0x40
 80081fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fe:	4605      	mov	r5, r0
 8008200:	e768      	b.n	80080d4 <f_open+0x24>
				res = FR_INVALID_NAME;
 8008202:	2506      	movs	r5, #6
 8008204:	e766      	b.n	80080d4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008206:	6858      	ldr	r0, [r3, #4]
 8008208:	4560      	cmp	r0, ip
 800820a:	f000 80ae 	beq.w	800836a <f_open+0x2ba>
		if (Files[i].fs) {	/* Existing entry */
 800820e:	6918      	ldr	r0, [r3, #16]
 8008210:	b180      	cbz	r0, 8008234 <f_open+0x184>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008212:	4540      	cmp	r0, r8
 8008214:	d189      	bne.n	800812a <f_open+0x7a>
 8008216:	6958      	ldr	r0, [r3, #20]
 8008218:	4560      	cmp	r0, ip
 800821a:	d186      	bne.n	800812a <f_open+0x7a>
				Files[i].clu == dp->obj.sclust &&
 800821c:	6998      	ldr	r0, [r3, #24]
 800821e:	4570      	cmp	r0, lr
 8008220:	d183      	bne.n	800812a <f_open+0x7a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008222:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008224:	2a00      	cmp	r2, #0
 8008226:	d166      	bne.n	80082f6 <f_open+0x246>
 8008228:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800822c:	899b      	ldrh	r3, [r3, #12]
 800822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008232:	d060      	beq.n	80082f6 <f_open+0x246>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008234:	f016 0f1c 	tst.w	r6, #28
 8008238:	d04b      	beq.n	80082d2 <f_open+0x222>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800823a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800823e:	f013 0f11 	tst.w	r3, #17
 8008242:	d15f      	bne.n	8008304 <f_open+0x254>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008244:	0773      	lsls	r3, r6, #29
 8008246:	d558      	bpl.n	80082fa <f_open+0x24a>
 8008248:	2508      	movs	r5, #8
 800824a:	e743      	b.n	80080d4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800824c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8008252:	f898 2000 	ldrb.w	r2, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 8008256:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8008258:	2a03      	cmp	r2, #3
 800825a:	d102      	bne.n	8008262 <f_open+0x1b2>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800825c:	8a9a      	ldrh	r2, [r3, #20]
 800825e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008262:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8008264:	f8d3 901c 	ldr.w	r9, [r3, #28]
			fp->obj.id = fs->id;
 8008268:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800826c:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008270:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008272:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8008276:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008278:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 800827c:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800827e:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8008280:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008282:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008284:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8008286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828a:	4650      	mov	r0, sl
 800828c:	f002 ff3c 	bl	800b108 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008290:	06bf      	lsls	r7, r7, #26
 8008292:	f57f af21 	bpl.w	80080d8 <f_open+0x28>
 8008296:	f1b9 0f00 	cmp.w	r9, #0
 800829a:	f43f af1d 	beq.w	80080d8 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800829e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082a2:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082a6:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082aa:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082ae:	d806      	bhi.n	80082be <f_open+0x20e>
 80082b0:	e03a      	b.n	8008328 <f_open+0x278>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082b2:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082b4:	eba9 0907 	sub.w	r9, r9, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082b8:	d01b      	beq.n	80082f2 <f_open+0x242>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082ba:	454f      	cmp	r7, r9
 80082bc:	d234      	bcs.n	8008328 <f_open+0x278>
					clst = get_fat(&fp->obj, clst);
 80082be:	4631      	mov	r1, r6
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	f7fe fae9 	bl	8006898 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80082c6:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80082c8:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80082ca:	d8f2      	bhi.n	80082b2 <f_open+0x202>
 80082cc:	2502      	movs	r5, #2
				fp->clust = clst;
 80082ce:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082d0:	e700      	b.n	80080d4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082d2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80082d6:	06d9      	lsls	r1, r3, #27
 80082d8:	d424      	bmi.n	8008324 <f_open+0x274>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082da:	07b1      	lsls	r1, r6, #30
 80082dc:	d501      	bpl.n	80082e2 <f_open+0x232>
 80082de:	07db      	lsls	r3, r3, #31
 80082e0:	d410      	bmi.n	8008304 <f_open+0x254>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082e2:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082e6:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	f47f af71 	bne.w	80081d0 <f_open+0x120>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ee:	4611      	mov	r1, r2
 80082f0:	e772      	b.n	80081d8 <f_open+0x128>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082f2:	2501      	movs	r5, #1
 80082f4:	e7eb      	b.n	80082ce <f_open+0x21e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082f6:	2510      	movs	r5, #16
 80082f8:	e6ec      	b.n	80080d4 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082fa:	0730      	lsls	r0, r6, #28
 80082fc:	f53f af29 	bmi.w	8008152 <f_open+0xa2>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008300:	9b02      	ldr	r3, [sp, #8]
 8008302:	e769      	b.n	80081d8 <f_open+0x128>
						res = FR_DENIED;
 8008304:	2507      	movs	r5, #7
 8008306:	e6e5      	b.n	80080d4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8008308:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800830c:	f1b8 0f00 	cmp.w	r8, #0
 8008310:	d090      	beq.n	8008234 <f_open+0x184>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008312:	4540      	cmp	r0, r8
 8008314:	d18e      	bne.n	8008234 <f_open+0x184>
 8008316:	6958      	ldr	r0, [r3, #20]
 8008318:	4560      	cmp	r0, ip
 800831a:	d18b      	bne.n	8008234 <f_open+0x184>
				Files[i].clu == dp->obj.sclust &&
 800831c:	6998      	ldr	r0, [r3, #24]
 800831e:	4570      	cmp	r0, lr
 8008320:	d188      	bne.n	8008234 <f_open+0x184>
 8008322:	e77e      	b.n	8008222 <f_open+0x172>
					res = FR_NO_FILE;
 8008324:	2504      	movs	r5, #4
 8008326:	e6d5      	b.n	80080d4 <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008328:	f3c9 0308 	ubfx	r3, r9, #0, #9
				fp->clust = clst;
 800832c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800832e:	2b00      	cmp	r3, #0
 8008330:	f43f aed2 	beq.w	80080d8 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008334:	9902      	ldr	r1, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008336:	698b      	ldr	r3, [r1, #24]
	clst -= 2;
 8008338:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800833a:	3b02      	subs	r3, #2
 800833c:	429e      	cmp	r6, r3
 800833e:	f4bf af57 	bcs.w	80081f0 <f_open+0x140>
	return clst * fs->csize + fs->database;
 8008342:	894a      	ldrh	r2, [r1, #10]
 8008344:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008346:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800834a:	2a00      	cmp	r2, #0
 800834c:	f43f af50 	beq.w	80081f0 <f_open+0x140>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008350:	eb02 2259 	add.w	r2, r2, r9, lsr #9
 8008354:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008356:	7848      	ldrb	r0, [r1, #1]
 8008358:	2301      	movs	r3, #1
 800835a:	4651      	mov	r1, sl
 800835c:	f7fd ff9e 	bl	800629c <disk_read>
 8008360:	2800      	cmp	r0, #0
 8008362:	f43f aeb9 	beq.w	80080d8 <f_open+0x28>
 8008366:	2501      	movs	r5, #1
 8008368:	e6b4      	b.n	80080d4 <f_open+0x24>
				Files[i].clu == dp->obj.sclust &&
 800836a:	6898      	ldr	r0, [r3, #8]
 800836c:	4570      	cmp	r0, lr
 800836e:	d007      	beq.n	8008380 <f_open+0x2d0>
		if (Files[i].fs) {	/* Existing entry */
 8008370:	6918      	ldr	r0, [r3, #16]
 8008372:	2800      	cmp	r0, #0
 8008374:	f47f aed7 	bne.w	8008126 <f_open+0x76>
 8008378:	e75c      	b.n	8008234 <f_open+0x184>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800837a:	3e01      	subs	r6, #1
 800837c:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 800837e:	e727      	b.n	80081d0 <f_open+0x120>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008380:	4628      	mov	r0, r5
 8008382:	e74f      	b.n	8008224 <f_open+0x174>
 8008384:	200016d0 	.word	0x200016d0

08008388 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800838e:	2300      	movs	r3, #0
{
 8008390:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8008392:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008394:	b150      	cbz	r0, 80083ac <f_write+0x24>
 8008396:	6803      	ldr	r3, [r0, #0]
 8008398:	4604      	mov	r4, r0
 800839a:	b13b      	cbz	r3, 80083ac <f_write+0x24>
 800839c:	4616      	mov	r6, r2
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	b122      	cbz	r2, 80083ac <f_write+0x24>
 80083a2:	88da      	ldrh	r2, [r3, #6]
 80083a4:	460d      	mov	r5, r1
 80083a6:	8881      	ldrh	r1, [r0, #4]
 80083a8:	4291      	cmp	r1, r2
 80083aa:	d005      	beq.n	80083b8 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80083ac:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80083b0:	4640      	mov	r0, r8
 80083b2:	b005      	add	sp, #20
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80083b8:	7858      	ldrb	r0, [r3, #1]
 80083ba:	f7fd ff55 	bl	8006268 <disk_status>
 80083be:	07c0      	lsls	r0, r0, #31
 80083c0:	d4f4      	bmi.n	80083ac <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	d1f1      	bne.n	80083b0 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80083cc:	7d22      	ldrb	r2, [r4, #20]
 80083ce:	0791      	lsls	r1, r2, #30
 80083d0:	f140 80f5 	bpl.w	80085be <f_write+0x236>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80083d4:	69a3      	ldr	r3, [r4, #24]
 80083d6:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80083d8:	bf28      	it	cs
 80083da:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 80083dc:	2e00      	cmp	r6, #0
 80083de:	d068      	beq.n	80084b2 <f_write+0x12a>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083e0:	46a2      	mov	sl, r4
 80083e2:	f504 720c 	add.w	r2, r4, #560	; 0x230
 80083e6:	f85a 9b30 	ldr.w	r9, [sl], #48
 80083ea:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	d16d      	bne.n	80084d0 <f_write+0x148>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083f4:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 80083f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 80083fc:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008400:	ea4f 2253 	mov.w	r2, r3, lsr #9
			if (csect == 0) {				/* On the cluster boundary? */
 8008404:	d110      	bne.n	8008428 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008406:	2b00      	cmp	r3, #0
 8008408:	f040 80a2 	bne.w	8008550 <f_write+0x1c8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800840c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800840e:	2800      	cmp	r0, #0
 8008410:	f000 80e0 	beq.w	80085d4 <f_write+0x24c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008414:	2801      	cmp	r0, #1
 8008416:	f000 8093 	beq.w	8008540 <f_write+0x1b8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	f000 80bd 	beq.w	800859a <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008420:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8008422:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008424:	b903      	cbnz	r3, 8008428 <f_write+0xa0>
 8008426:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008428:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f2c0 80a7 	blt.w	8008580 <f_write+0x1f8>
	clst -= 2;
 8008432:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008434:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8008438:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800843a:	3b02      	subs	r3, #2
 800843c:	429a      	cmp	r2, r3
 800843e:	d27f      	bcs.n	8008540 <f_write+0x1b8>
	return clst * fs->csize + fs->database;
 8008440:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8008444:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8008448:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800844c:	2a00      	cmp	r2, #0
 800844e:	d077      	beq.n	8008540 <f_write+0x1b8>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008450:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8008454:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008456:	d330      	bcc.n	80084ba <f_write+0x132>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008458:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
 800845c:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800845e:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008462:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8008466:	bf88      	it	hi
 8008468:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800846c:	4629      	mov	r1, r5
 800846e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008472:	f7fd ff21 	bl	80062b8 <disk_write>
 8008476:	2800      	cmp	r0, #0
 8008478:	f040 808f 	bne.w	800859a <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800847c:	6a21      	ldr	r1, [r4, #32]
 800847e:	9a02      	ldr	r2, [sp, #8]
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	1a8a      	subs	r2, r1, r2
 8008484:	429a      	cmp	r2, r3
 8008486:	f0c0 80b9 	bcc.w	80085fc <f_write+0x274>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800848a:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800848e:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008492:	69a3      	ldr	r3, [r4, #24]
 8008494:	4615      	mov	r5, r2
 8008496:	68e2      	ldr	r2, [r4, #12]
 8008498:	4463      	add	r3, ip
 800849a:	429a      	cmp	r2, r3
 800849c:	bf38      	it	cc
 800849e:	461a      	movcc	r2, r3
 80084a0:	60e2      	str	r2, [r4, #12]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	61a3      	str	r3, [r4, #24]
 80084a6:	4462      	add	r2, ip
	for ( ;  btw;							/* Repeat until all data written */
 80084a8:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80084ac:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80084ae:	d19d      	bne.n	80083ec <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80084b0:	7d22      	ldrb	r2, [r4, #20]
 80084b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084b6:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80084b8:	e77a      	b.n	80083b0 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084ba:	6a23      	ldr	r3, [r4, #32]
 80084bc:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 80084be:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084c0:	d003      	beq.n	80084ca <f_write+0x142>
 80084c2:	68e1      	ldr	r1, [r4, #12]
 80084c4:	428b      	cmp	r3, r1
 80084c6:	f0c0 808d 	bcc.w	80085e4 <f_write+0x25c>
			fp->sect = sect;
 80084ca:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d0:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80084d4:	eb0a 0302 	add.w	r3, sl, r2
 80084d8:	1c6a      	adds	r2, r5, #1
 80084da:	45b4      	cmp	ip, r6
 80084dc:	eba3 0202 	sub.w	r2, r3, r2
 80084e0:	bf28      	it	cs
 80084e2:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084e4:	2a02      	cmp	r2, #2
 80084e6:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 80084ea:	d95e      	bls.n	80085aa <f_write+0x222>
 80084ec:	f1bb 0f07 	cmp.w	fp, #7
 80084f0:	d95b      	bls.n	80085aa <f_write+0x222>
 80084f2:	f02c 0e03 	bic.w	lr, ip, #3
 80084f6:	449e      	add	lr, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	4629      	mov	r1, r5
			*d++ = *s++;
 80084fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8008500:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8008504:	4572      	cmp	r2, lr
 8008506:	d1f9      	bne.n	80084fc <f_write+0x174>
 8008508:	f02c 0103 	bic.w	r1, ip, #3
 800850c:	458c      	cmp	ip, r1
 800850e:	eb03 0001 	add.w	r0, r3, r1
 8008512:	eb05 0201 	add.w	r2, r5, r1
 8008516:	d00e      	beq.n	8008536 <f_write+0x1ae>
			*d++ = *s++;
 8008518:	f815 e001 	ldrb.w	lr, [r5, r1]
 800851c:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8008520:	ebbb 0101 	subs.w	r1, fp, r1
 8008524:	d005      	beq.n	8008532 <f_write+0x1aa>
			*d++ = *s++;
 8008526:	7853      	ldrb	r3, [r2, #1]
 8008528:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 800852a:	2901      	cmp	r1, #1
			*d++ = *s++;
 800852c:	bf1c      	itt	ne
 800852e:	7893      	ldrbne	r3, [r2, #2]
 8008530:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8008532:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8008536:	7d23      	ldrb	r3, [r4, #20]
 8008538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800853c:	7523      	strb	r3, [r4, #20]
 800853e:	e7a8      	b.n	8008492 <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008540:	f04f 0802 	mov.w	r8, #2
}
 8008544:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008546:	f884 8015 	strb.w	r8, [r4, #21]
}
 800854a:	b005      	add	sp, #20
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8008550:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008552:	2900      	cmp	r1, #0
 8008554:	d036      	beq.n	80085c4 <f_write+0x23c>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	895b      	ldrh	r3, [r3, #10]
 800855a:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800855e:	684a      	ldr	r2, [r1, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008560:	3104      	adds	r1, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008562:	b92a      	cbnz	r2, 8008570 <f_write+0x1e8>
 8008564:	e7a4      	b.n	80084b0 <f_write+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 8008566:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008568:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800856c:	2a00      	cmp	r2, #0
 800856e:	d09f      	beq.n	80084b0 <f_write+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 8008570:	4293      	cmp	r3, r2
 8008572:	d2f8      	bcs.n	8008566 <f_write+0x1de>
	return cl + *tbl;	/* Return the cluster number */
 8008574:	6848      	ldr	r0, [r1, #4]
 8008576:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008578:	2800      	cmp	r0, #0
 800857a:	f47f af4b 	bne.w	8008414 <f_write+0x8c>
 800857e:	e797      	b.n	80084b0 <f_write+0x128>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008580:	6a22      	ldr	r2, [r4, #32]
 8008582:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008586:	2301      	movs	r3, #1
 8008588:	4651      	mov	r1, sl
 800858a:	f7fd fe95 	bl	80062b8 <disk_write>
 800858e:	b920      	cbnz	r0, 800859a <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008590:	7d23      	ldrb	r3, [r4, #20]
 8008592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008596:	7523      	strb	r3, [r4, #20]
 8008598:	e74b      	b.n	8008432 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800859a:	f04f 0801 	mov.w	r8, #1
}
 800859e:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085a0:	f884 8015 	strb.w	r8, [r4, #21]
}
 80085a4:	b005      	add	sp, #20
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	3b01      	subs	r3, #1
 80085ac:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 80085b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80085b4:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 80085b8:	4295      	cmp	r5, r2
 80085ba:	d1f9      	bne.n	80085b0 <f_write+0x228>
 80085bc:	e7bb      	b.n	8008536 <f_write+0x1ae>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80085be:	f04f 0807 	mov.w	r8, #7
 80085c2:	e6f5      	b.n	80083b0 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80085c4:	69e1      	ldr	r1, [r4, #28]
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7fe fa7a 	bl	8006ac0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f47f af21 	bne.w	8008414 <f_write+0x8c>
 80085d2:	e76d      	b.n	80084b0 <f_write+0x128>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085d4:	4659      	mov	r1, fp
 80085d6:	4620      	mov	r0, r4
 80085d8:	f7fe fa72 	bl	8006ac0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085dc:	2800      	cmp	r0, #0
 80085de:	f47f af19 	bne.w	8008414 <f_write+0x8c>
 80085e2:	e765      	b.n	80084b0 <f_write+0x128>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80085e4:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085e8:	9202      	str	r2, [sp, #8]
 80085ea:	2301      	movs	r3, #1
 80085ec:	4651      	mov	r1, sl
 80085ee:	f7fd fe55 	bl	800629c <disk_read>
				fp->fptr < fp->obj.objsize &&
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d1d1      	bne.n	800859a <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085f6:	69a3      	ldr	r3, [r4, #24]
 80085f8:	9a02      	ldr	r2, [sp, #8]
 80085fa:	e766      	b.n	80084ca <f_write+0x142>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085fc:	eb05 2142 	add.w	r1, r5, r2, lsl #9
 8008600:	3101      	adds	r1, #1
 8008602:	ebaa 0101 	sub.w	r1, sl, r1
 8008606:	2902      	cmp	r1, #2
 8008608:	eb05 2242 	add.w	r2, r5, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800860c:	d90d      	bls.n	800862a <f_write+0x2a2>
 800860e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008612:	4651      	mov	r1, sl
			*d++ = *s++;
 8008614:	f852 0b04 	ldr.w	r0, [r2], #4
 8008618:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 800861c:	4561      	cmp	r1, ip
 800861e:	d1f9      	bne.n	8008614 <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008620:	7d22      	ldrb	r2, [r4, #20]
 8008622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008626:	7522      	strb	r2, [r4, #20]
 8008628:	e72f      	b.n	800848a <f_write+0x102>
 800862a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 800862e:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8008632:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008636:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800863a:	4594      	cmp	ip, r2
 800863c:	d1f9      	bne.n	8008632 <f_write+0x2aa>
 800863e:	e7ef      	b.n	8008620 <f_write+0x298>

08008640 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008640:	b158      	cbz	r0, 800865a <f_close+0x1a>
 8008642:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008648:	b12b      	cbz	r3, 8008656 <f_close+0x16>
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	b11a      	cbz	r2, 8008656 <f_close+0x16>
 800864e:	8881      	ldrh	r1, [r0, #4]
 8008650:	88da      	ldrh	r2, [r3, #6]
 8008652:	4291      	cmp	r1, r2
 8008654:	d003      	beq.n	800865e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8008656:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008658:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800865a:	2009      	movs	r0, #9
}
 800865c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800865e:	7858      	ldrb	r0, [r3, #1]
 8008660:	f7fd fe02 	bl	8006268 <disk_status>
 8008664:	07c1      	lsls	r1, r0, #31
 8008666:	d4f6      	bmi.n	8008656 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008668:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800866a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800866c:	065a      	lsls	r2, r3, #25
 800866e:	d53c      	bpl.n	80086ea <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008670:	061b      	lsls	r3, r3, #24
 8008672:	d45d      	bmi.n	8008730 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8008674:	f7fd fd1e 	bl	80060b4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8008678:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800867a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800867c:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 800867e:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008680:	d004      	beq.n	800868c <f_close+0x4c>
 8008682:	4628      	mov	r0, r5
 8008684:	f7fd fecc 	bl	8006420 <move_window.part.0>
				if (res == FR_OK) {
 8008688:	2800      	cmp	r0, #0
 800868a:	d1e5      	bne.n	8008658 <f_close+0x18>
					dir = fp->dir_ptr;
 800868c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800868e:	7ad3      	ldrb	r3, [r2, #11]
 8008690:	f043 0320 	orr.w	r3, r3, #32
 8008694:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800869a:	7693      	strb	r3, [r2, #26]
 800869c:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 80086a0:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 80086a2:	7809      	ldrb	r1, [r1, #0]
 80086a4:	2903      	cmp	r1, #3
 80086a6:	d103      	bne.n	80086b0 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80086a8:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80086aa:	7513      	strb	r3, [r2, #20]
 80086ac:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80086ae:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086b0:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80086b2:	7713      	strb	r3, [r2, #28]
 80086b4:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80086b6:	7751      	strb	r1, [r2, #29]
 80086b8:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80086ba:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 80086bc:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 80086be:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80086c0:	75d3      	strb	r3, [r2, #23]
 80086c2:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80086c4:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80086c6:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80086c8:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80086ca:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80086cc:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 80086ce:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80086d0:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 80086d2:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086d4:	4628      	mov	r0, r5
					fs->wflag = 1;
 80086d6:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086d8:	f7fe f982 	bl	80069e0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086dc:	7d23      	ldrb	r3, [r4, #20]
 80086de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e2:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1b7      	bne.n	8008658 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	d0b3      	beq.n	8008656 <f_close+0x16>
 80086ee:	782b      	ldrb	r3, [r5, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0b0      	beq.n	8008656 <f_close+0x16>
 80086f4:	88a2      	ldrh	r2, [r4, #4]
 80086f6:	88eb      	ldrh	r3, [r5, #6]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d1ac      	bne.n	8008656 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086fc:	7868      	ldrb	r0, [r5, #1]
 80086fe:	f7fd fdb3 	bl	8006268 <disk_status>
 8008702:	f010 0001 	ands.w	r0, r0, #1
 8008706:	d1a6      	bne.n	8008656 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b01      	cmp	r3, #1
 800870e:	d81c      	bhi.n	800874a <f_close+0x10a>
		n = Files[i].ctr;
 8008710:	4912      	ldr	r1, [pc, #72]	; (800875c <f_close+0x11c>)
 8008712:	011d      	lsls	r5, r3, #4
 8008714:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8008718:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800871a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800871e:	d016      	beq.n	800874e <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008720:	b1b2      	cbz	r2, 8008750 <f_close+0x110>
 8008722:	3a01      	subs	r2, #1
 8008724:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8008726:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008728:	b192      	cbz	r2, 8008750 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 800872a:	2300      	movs	r3, #0
 800872c:	6023      	str	r3, [r4, #0]
}
 800872e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008730:	6a22      	ldr	r2, [r4, #32]
 8008732:	7868      	ldrb	r0, [r5, #1]
 8008734:	2301      	movs	r3, #1
 8008736:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800873a:	f7fd fdbd 	bl	80062b8 <disk_write>
 800873e:	b950      	cbnz	r0, 8008756 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008740:	7d23      	ldrb	r3, [r4, #20]
 8008742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008746:	7523      	strb	r3, [r4, #20]
 8008748:	e794      	b.n	8008674 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800874a:	2002      	movs	r0, #2
}
 800874c:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800874e:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008750:	2300      	movs	r3, #0
 8008752:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8008754:	e7e9      	b.n	800872a <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008756:	2001      	movs	r0, #1
}
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	bf00      	nop
 800875c:	200016d0 	.word	0x200016d0

08008760 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008762:	b095      	sub	sp, #84	; 0x54
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008764:	7804      	ldrb	r4, [r0, #0]
	pb->nchr = pb->idx = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800876c:	9303      	str	r3, [sp, #12]
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800876e:	2c00      	cmp	r4, #0
 8008770:	d054      	beq.n	800881c <f_puts+0xbc>
 8008772:	4606      	mov	r6, r0
	pb->buf[i++] = (BYTE)c;
 8008774:	270d      	movs	r7, #13
 8008776:	e007      	b.n	8008788 <f_puts+0x28>
	pb->nchr++;
 8008778:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 800877a:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 800877c:	3301      	adds	r3, #1
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	462b      	mov	r3, r5
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008782:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8008786:	b34c      	cbz	r4, 80087dc <f_puts+0x7c>
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008788:	2c0a      	cmp	r4, #10
 800878a:	d016      	beq.n	80087ba <f_puts+0x5a>
	pb->buf[i++] = (BYTE)c;
 800878c:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 8008790:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8008792:	446a      	add	r2, sp
 8008794:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8008798:	dbf3      	blt.n	8008782 <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800879a:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 800879c:	f802 4c40 	strb.w	r4, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80087a0:	ddea      	ble.n	8008778 <f_puts+0x18>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80087a2:	462a      	mov	r2, r5
 80087a4:	466b      	mov	r3, sp
 80087a6:	9801      	ldr	r0, [sp, #4]
 80087a8:	a904      	add	r1, sp, #16
 80087aa:	f7ff fded 	bl	8008388 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80087ae:	9b00      	ldr	r3, [sp, #0]
 80087b0:	1b5d      	subs	r5, r3, r5
 80087b2:	bf18      	it	ne
 80087b4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80087b8:	e7de      	b.n	8008778 <f_puts+0x18>
	pb->buf[i++] = (BYTE)c;
 80087ba:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 80087be:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 80087c0:	446a      	add	r2, sp
 80087c2:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 80087c6:	dbdc      	blt.n	8008782 <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80087c8:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80087ca:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80087ce:	dc15      	bgt.n	80087fc <f_puts+0x9c>
	pb->nchr++;
 80087d0:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 80087d2:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 80087d4:	3301      	adds	r3, #1
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	462b      	mov	r3, r5
 80087da:	e7d7      	b.n	800878c <f_puts+0x2c>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80087dc:	2b00      	cmp	r3, #0
 80087de:	db19      	blt.n	8008814 <f_puts+0xb4>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80087e0:	9801      	ldr	r0, [sp, #4]
 80087e2:	461a      	mov	r2, r3
 80087e4:	466b      	mov	r3, sp
 80087e6:	a904      	add	r1, sp, #16
 80087e8:	f7ff fdce 	bl	8008388 <f_write>
 80087ec:	b990      	cbnz	r0, 8008814 <f_puts+0xb4>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80087ee:	9a02      	ldr	r2, [sp, #8]
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d10e      	bne.n	8008814 <f_puts+0xb4>
 80087f6:	9803      	ldr	r0, [sp, #12]
	return putc_flush(&pb);
}
 80087f8:	b015      	add	sp, #84	; 0x54
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80087fc:	466b      	mov	r3, sp
 80087fe:	462a      	mov	r2, r5
 8008800:	9801      	ldr	r0, [sp, #4]
 8008802:	a904      	add	r1, sp, #16
 8008804:	f7ff fdc0 	bl	8008388 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	1b5d      	subs	r5, r3, r5
 800880c:	bf18      	it	ne
 800880e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008812:	e7dd      	b.n	80087d0 <f_puts+0x70>
	return EOF;
 8008814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008818:	b015      	add	sp, #84	; 0x54
 800881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881c:	4608      	mov	r0, r1
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800881e:	4622      	mov	r2, r4
 8008820:	e7e0      	b.n	80087e4 <f_puts+0x84>
 8008822:	bf00      	nop

08008824 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008824:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8008826:	4b10      	ldr	r3, [pc, #64]	; (8008868 <FATFS_LinkDriver+0x44>)
 8008828:	7a5c      	ldrb	r4, [r3, #9]
 800882a:	b9cc      	cbnz	r4, 8008860 <FATFS_LinkDriver+0x3c>
 800882c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800882e:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8008832:	7a5c      	ldrb	r4, [r3, #9]
 8008834:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8008836:	7a5c      	ldrb	r4, [r3, #9]
 8008838:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800883c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800883e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8008840:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8008842:	441c      	add	r4, r3
 8008844:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8008846:	1c54      	adds	r4, r2, #1
 8008848:	b2e4      	uxtb	r4, r4
 800884a:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800884c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800884e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8008850:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 8008852:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8008854:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8008856:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800885a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800885c:	70c8      	strb	r0, [r1, #3]
}
 800885e:	4770      	bx	lr
  uint8_t ret = 1;
 8008860:	2001      	movs	r0, #1
}
 8008862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	200018f4 	.word	0x200018f4

0800886c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800886c:	287f      	cmp	r0, #127	; 0x7f
 800886e:	d913      	bls.n	8008898 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008870:	b979      	cbnz	r1, 8008892 <ff_convert+0x26>
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <ff_convert+0x38>)
 8008874:	e001      	b.n	800887a <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008876:	2980      	cmp	r1, #128	; 0x80
 8008878:	d00d      	beq.n	8008896 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800887a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800887e:	4282      	cmp	r2, r0
 8008880:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8008884:	f101 0101 	add.w	r1, r1, #1
				if (chr == Tbl[c]) break;
 8008888:	d1f5      	bne.n	8008876 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800888a:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 800888e:	b280      	uxth	r0, r0
 8008890:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008892:	28ff      	cmp	r0, #255	; 0xff
 8008894:	d901      	bls.n	800889a <ff_convert+0x2e>
 8008896:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8008898:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800889a:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <ff_convert+0x38>)
 800889c:	3880      	subs	r0, #128	; 0x80
 800889e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80088a2:	4770      	bx	lr
 80088a4:	0800f9b8 	.word	0x0800f9b8

080088a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80088a8:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <ff_wtoupper+0x94>)
 80088ac:	4a24      	ldr	r2, [pc, #144]	; (8008940 <ff_wtoupper+0x98>)
 80088ae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80088b2:	bf28      	it	cs
 80088b4:	4613      	movcs	r3, r2
 80088b6:	3304      	adds	r3, #4
 80088b8:	e00d      	b.n	80088d6 <ff_wtoupper+0x2e>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 80088ba:	4288      	cmp	r0, r1
 80088bc:	d310      	bcc.n	80088e0 <ff_wtoupper+0x38>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088be:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80088c2:	fa5f fc82 	uxtb.w	ip, r2
		if (chr < bc + nc) {	/* In the block? */
 80088c6:	eb0c 0e01 	add.w	lr, ip, r1
 80088ca:	4570      	cmp	r0, lr
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088cc:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 80088d0:	db07      	blt.n	80088e2 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80088d2:	3304      	adds	r3, #4
 80088d4:	b172      	cbz	r2, 80088f4 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80088d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80088da:	461c      	mov	r4, r3
 80088dc:	2900      	cmp	r1, #0
 80088de:	d1ec      	bne.n	80088ba <ff_wtoupper+0x12>
	}

	return chr;
}
 80088e0:	bd10      	pop	{r4, pc}
			switch (cmd) {
 80088e2:	2a08      	cmp	r2, #8
 80088e4:	d8fc      	bhi.n	80088e0 <ff_wtoupper+0x38>
 80088e6:	e8df f002 	tbb	[pc, r2]
 80088ea:	100c      	.short	0x100c
 80088ec:	1f1c1916 	.word	0x1f1c1916
 80088f0:	2522      	.short	0x2522
 80088f2:	08          	.byte	0x08
 80088f3:	00          	.byte	0x00
		if (!cmd) p += nc;
 80088f4:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 80088f8:	e7dd      	b.n	80088b6 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80088fa:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80088fe:	b280      	uxth	r0, r0
}
 8008900:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008902:	1a41      	subs	r1, r0, r1
 8008904:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8008908:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800890a:	1a43      	subs	r3, r0, r1
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	1ac0      	subs	r0, r0, r3
 8008912:	b280      	uxth	r0, r0
}
 8008914:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8008916:	3810      	subs	r0, #16
 8008918:	b280      	uxth	r0, r0
}
 800891a:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800891c:	3820      	subs	r0, #32
 800891e:	b280      	uxth	r0, r0
}
 8008920:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008922:	3830      	subs	r0, #48	; 0x30
 8008924:	b280      	uxth	r0, r0
}
 8008926:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008928:	381a      	subs	r0, #26
 800892a:	b280      	uxth	r0, r0
}
 800892c:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800892e:	3008      	adds	r0, #8
 8008930:	b280      	uxth	r0, r0
}
 8008932:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8008934:	3850      	subs	r0, #80	; 0x50
 8008936:	b280      	uxth	r0, r0
}
 8008938:	bd10      	pop	{r4, pc}
 800893a:	bf00      	nop
 800893c:	0800fab8 	.word	0x0800fab8
 8008940:	0800fcac 	.word	0x0800fcac

08008944 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8008944:	f000 ba52 	b.w	8008dec <ai_platform_network_get_error>

08008948 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8008948:	b108      	cbz	r0, 800894e <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 800894a:	f000 bac3 	b.w	8008ed4 <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800894e:	4802      	ldr	r0, [pc, #8]	; (8008958 <ai_network_inputs_get+0x10>)
 8008950:	4b02      	ldr	r3, [pc, #8]	; (800895c <ai_network_inputs_get+0x14>)
 8008952:	6003      	str	r3, [r0, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8008954:	f000 babe 	b.w	8008ed4 <ai_platform_inputs_get>
 8008958:	2000059c 	.word	0x2000059c
 800895c:	a1c00100 	.word	0xa1c00100

08008960 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8008960:	b108      	cbz	r0, 8008966 <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008962:	f000 bb8d 	b.w	8009080 <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008966:	4802      	ldr	r0, [pc, #8]	; (8008970 <ai_network_outputs_get+0x10>)
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <ai_network_outputs_get+0x14>)
 800896a:	6003      	str	r3, [r0, #0]
  return ai_platform_outputs_get(network, n_buffer);
 800896c:	f000 bb88 	b.w	8009080 <ai_platform_outputs_get>
 8008970:	2000059c 	.word	0x2000059c
 8008974:	a1c00100 	.word	0xa1c00100

08008978 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	4606      	mov	r6, r0
 800897e:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008980:	f000 fd24 	bl	80093cc <ai_platform_network_init>
  if (!net_ctx) return false;
 8008984:	4604      	mov	r4, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	d073      	beq.n	8008a72 <ai_network_init+0xfa>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800898a:	4f41      	ldr	r7, [pc, #260]	; (8008a90 <ai_network_init+0x118>)
 800898c:	462a      	mov	r2, r5
 800898e:	2101      	movs	r1, #1
 8008990:	4638      	mov	r0, r7
 8008992:	f000 f961 	bl	8008c58 <ai_platform_get_weights_map>
 8008996:	4680      	mov	r8, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d06c      	beq.n	8008a76 <ai_network_init+0xfe>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800899c:	f8df e120 	ldr.w	lr, [pc, #288]	; 8008ac0 <ai_network_init+0x148>
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80089a0:	683b      	ldr	r3, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80089a2:	f8de 2000 	ldr.w	r2, [lr]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80089a6:	4f3b      	ldr	r7, [pc, #236]	; (8008a94 <ai_network_init+0x11c>)
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80089a8:	483b      	ldr	r0, [pc, #236]	; (8008a98 <ai_network_init+0x120>)
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80089aa:	493c      	ldr	r1, [pc, #240]	; (8008a9c <ai_network_init+0x124>)
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80089ac:	f8df a114 	ldr.w	sl, [pc, #276]	; 8008ac4 <ai_network_init+0x14c>
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80089b0:	f8df c114 	ldr.w	ip, [pc, #276]	; 8008ac8 <ai_network_init+0x150>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80089b4:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80089b8:	683a      	ldr	r2, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80089ba:	f8ce 9000 	str.w	r9, [lr]
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80089be:	e9ce 3302 	strd	r3, r3, [lr, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80089c2:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80089c6:	6802      	ldr	r2, [r0, #0]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80089c8:	f8c7 e000 	str.w	lr, [r7]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80089cc:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80089d0:	680a      	ldr	r2, [r1, #0]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80089d2:	f8c0 e000 	str.w	lr, [r0]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80089d6:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80089da:	f8da 2000 	ldr.w	r2, [sl]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80089de:	f8c1 e000 	str.w	lr, [r1]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80089e2:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80089e6:	f8dc 2000 	ldr.w	r2, [ip]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80089ea:	f8ca e000 	str.w	lr, [sl]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80089ee:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
 80089f2:	f8cc e000 	str.w	lr, [ip]
    dense_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 256);
 80089f6:	f503 7e80 	add.w	lr, r3, #256	; 0x100
    dense_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 80089fa:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    dense_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1536);
 80089fe:	f503 67c0 	add.w	r7, r3, #1536	; 0x600
    dense_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1536);
 8008a02:	e9c0 7702 	strd	r7, r7, [r0, #8]
    dense_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 1556);
 8008a06:	f203 6014 	addw	r0, r3, #1556	; 0x614
    dense_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1556);
 8008a0a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2068);
 8008a0e:	f603 0114 	addw	r1, r3, #2068	; 0x814
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2324);
 8008a12:	f603 1314 	addw	r3, r3, #2324	; 0x914
    dense_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2068);
 8008a16:	e9ca 1102 	strd	r1, r1, [sl, #8]
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2324);
 8008a1a:	e9cc 3302 	strd	r3, r3, [ip, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8008a1e:	4f20      	ldr	r7, [pc, #128]	; (8008aa0 <ai_network_init+0x128>)
 8008a20:	462a      	mov	r2, r5
 8008a22:	2101      	movs	r1, #1
 8008a24:	4638      	mov	r0, r7
 8008a26:	f000 f96b 	bl	8008d00 <ai_platform_get_activations_map>
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	b348      	cbz	r0, 8008a82 <ai_network_init+0x10a>
    serving_default_dense_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 248);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <ai_network_init+0x12c>)
 8008a32:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 8008a36:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8008a3a:	491b      	ldr	r1, [pc, #108]	; (8008aa8 <ai_network_init+0x130>)
 8008a3c:	f503 7280 	add.w	r2, r3, #256	; 0x100
    dense_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8008a40:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8008a44:	4919      	ldr	r1, [pc, #100]	; (8008aac <ai_network_init+0x134>)
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8008a46:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008a4a:	4919      	ldr	r1, [pc, #100]	; (8008ab0 <ai_network_init+0x138>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008a4c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8008a50:	4918      	ldr	r1, [pc, #96]	; (8008ab4 <ai_network_init+0x13c>)
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8008a52:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008a56:	4a18      	ldr	r2, [pc, #96]	; (8008ab8 <ai_network_init+0x140>)
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008a58:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8008a5c:	4a17      	ldr	r2, [pc, #92]	; (8008abc <ai_network_init+0x144>)
 8008a5e:	3314      	adds	r3, #20
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8008a60:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 fd9f 	bl	80095a8 <ai_platform_network_post_init>
 8008a6a:	4028      	ands	r0, r5
 8008a6c:	ea08 0000 	and.w	r0, r8, r0
 8008a70:	b2c0      	uxtb	r0, r0

  return ok;
}
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008a76:	2212      	movs	r2, #18
 8008a78:	2130      	movs	r1, #48	; 0x30
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fa24 	bl	8008ec8 <ai_platform_network_set_error>
  return false;
 8008a80:	e7cd      	b.n	8008a1e <ai_network_init+0xa6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008a82:	2213      	movs	r2, #19
 8008a84:	4620      	mov	r0, r4
 8008a86:	2130      	movs	r1, #48	; 0x30
 8008a88:	f000 fa1e 	bl	8008ec8 <ai_platform_network_set_error>
  return false;
 8008a8c:	e7ea      	b.n	8008a64 <ai_network_init+0xec>
 8008a8e:	bf00      	nop
 8008a90:	20001990 	.word	0x20001990
 8008a94:	2000058c 	.word	0x2000058c
 8008a98:	20000518 	.word	0x20000518
 8008a9c:	2000044c 	.word	0x2000044c
 8008aa0:	2000198c 	.word	0x2000198c
 8008aa4:	200006e8 	.word	0x200006e8
 8008aa8:	20000420 	.word	0x20000420
 8008aac:	20000624 	.word	0x20000624
 8008ab0:	200004c0 	.word	0x200004c0
 8008ab4:	20000670 	.word	0x20000670
 8008ab8:	20000560 	.word	0x20000560
 8008abc:	200006bc 	.word	0x200006bc
 8008ac0:	20000478 	.word	0x20000478
 8008ac4:	200003d8 	.word	0x200003d8
 8008ac8:	200004ec 	.word	0x200004ec

08008acc <ai_network_create_and_init>:
{
 8008acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2405      	movs	r4, #5
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	9400      	str	r4, [sp, #0]
{
 8008ada:	4689      	mov	r9, r1
 8008adc:	4615      	mov	r5, r2
  return ai_platform_network_create(
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4a25      	ldr	r2, [pc, #148]	; (8008b78 <ai_network_create_and_init+0xac>)
 8008ae2:	2301      	movs	r3, #1
{
 8008ae4:	4606      	mov	r6, r0
  return ai_platform_network_create(
 8008ae6:	f000 fb9b 	bl	8009220 <ai_platform_network_create>
    if (err.type != AI_ERROR_NONE)
 8008aea:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 8008aee:	d002      	beq.n	8008af6 <ai_network_create_and_init+0x2a>
}
 8008af0:	b011      	add	sp, #68	; 0x44
 8008af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_network_data_params_get(&params) != true) {
 8008af6:	4607      	mov	r7, r0
 8008af8:	a802      	add	r0, sp, #8
 8008afa:	f000 f841 	bl	8008b80 <ai_network_data_params_get>
 8008afe:	b3b0      	cbz	r0, 8008b6e <ai_network_create_and_init+0xa2>
    if (activations) {
 8008b00:	f1b9 0f00 	cmp.w	r9, #0
 8008b04:	d010      	beq.n	8008b28 <ai_network_create_and_init+0x5c>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008b06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008b0a:	b16b      	cbz	r3, 8008b28 <ai_network_create_and_init+0x5c>
 8008b0c:	f1a9 0904 	sub.w	r9, r9, #4
 8008b10:	4644      	mov	r4, r8
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008b12:	4621      	mov	r1, r4
 8008b14:	f859 2f04 	ldr.w	r2, [r9, #4]!
 8008b18:	a805      	add	r0, sp, #20
 8008b1a:	f000 f889 	bl	8008c30 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008b1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008b22:	3401      	adds	r4, #1
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	dcf4      	bgt.n	8008b12 <ai_network_create_and_init+0x46>
    if (weights) {
 8008b28:	b17d      	cbz	r5, 8008b4a <ai_network_create_and_init+0x7e>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008b2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008b2e:	b163      	cbz	r3, 8008b4a <ai_network_create_and_init+0x7e>
 8008b30:	3d04      	subs	r5, #4
 8008b32:	2400      	movs	r4, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008b34:	4621      	mov	r1, r4
 8008b36:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8008b3a:	a803      	add	r0, sp, #12
 8008b3c:	f000 f878 	bl	8008c30 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008b40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008b44:	3401      	adds	r4, #1
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	dcf4      	bgt.n	8008b34 <ai_network_create_and_init+0x68>
    if (ai_network_init(*network, &params) != true) {
 8008b4a:	6830      	ldr	r0, [r6, #0]
 8008b4c:	a902      	add	r1, sp, #8
 8008b4e:	f7ff ff13 	bl	8008978 <ai_network_init>
 8008b52:	b128      	cbz	r0, 8008b60 <ai_network_create_and_init+0x94>
    return err;
 8008b54:	f368 0707 	bfi	r7, r8, #0, #8
 8008b58:	4638      	mov	r0, r7
}
 8008b5a:	b011      	add	sp, #68	; 0x44
 8008b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8008b60:	6830      	ldr	r0, [r6, #0]
 8008b62:	f000 f943 	bl	8008dec <ai_platform_network_get_error>
 8008b66:	fa5f f880 	uxtb.w	r8, r0
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	e7f2      	b.n	8008b54 <ai_network_create_and_init+0x88>
 8008b6e:	6830      	ldr	r0, [r6, #0]
 8008b70:	f000 f93c 	bl	8008dec <ai_platform_network_get_error>
        return err;
 8008b74:	e7bc      	b.n	8008af0 <ai_network_create_and_init+0x24>
 8008b76:	bf00      	nop
 8008b78:	2000059c 	.word	0x2000059c

08008b7c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8008b7c:	f000 bd9c 	b.w	80096b8 <ai_platform_network_process>

08008b80 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8008b80:	4603      	mov	r3, r0
 8008b82:	b198      	cbz	r0, 8008bac <ai_network_data_params_get+0x2c>
{
 8008b84:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 8008b86:	4c0a      	ldr	r4, [pc, #40]	; (8008bb0 <ai_network_data_params_get+0x30>)
 8008b88:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 8008b8c:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 8008b8e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008b90:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 8008b92:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8008b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b9a:	ac02      	add	r4, sp, #8
 8008b9c:	e884 0003 	stmia.w	r4, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f900 	bl	8008da8 <ai_platform_bind_network_params>
}
 8008ba8:	b004      	add	sp, #16
 8008baa:	bd10      	pop	{r4, pc}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	0800f800 	.word	0x0800f800

08008bb4 <ai_buffer_get_size>:
 8008bb4:	b378      	cbz	r0, 8008c16 <ai_buffer_get_size+0x62>
 8008bb6:	b410      	push	{r4}
 8008bb8:	6803      	ldr	r3, [r0, #0]
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <ai_buffer_get_size+0x64>)
 8008bbc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008bc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d01e      	beq.n	8008c06 <ai_buffer_get_size+0x52>
 8008bc8:	6984      	ldr	r4, [r0, #24]
 8008bca:	6862      	ldr	r2, [r4, #4]
 8008bcc:	7d03      	ldrb	r3, [r0, #20]
 8008bce:	6941      	ldr	r1, [r0, #20]
 8008bd0:	f1a3 0301 	sub.w	r3, r3, #1
 8008bd4:	fab3 f383 	clz	r3, r3
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008bde:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8008be2:	da0b      	bge.n	8008bfc <ai_buffer_get_size+0x48>
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d102      	bne.n	8008bee <ai_buffer_get_size+0x3a>
 8008be8:	2802      	cmp	r0, #2
 8008bea:	d007      	beq.n	8008bfc <ai_buffer_get_size+0x48>
 8008bec:	2302      	movs	r3, #2
 8008bee:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	4298      	cmp	r0, r3
 8008bf6:	fb01 f202 	mul.w	r2, r1, r2
 8008bfa:	d1f3      	bne.n	8008be4 <ai_buffer_get_size+0x30>
 8008bfc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	2900      	cmp	r1, #0
 8008c08:	d0de      	beq.n	8008bc8 <ai_buffer_get_size+0x14>
 8008c0a:	6984      	ldr	r4, [r0, #24]
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	331f      	adds	r3, #31
 8008c10:	f023 021f 	bic.w	r2, r3, #31
 8008c14:	e7da      	b.n	8008bcc <ai_buffer_get_size+0x18>
 8008c16:	4770      	bx	lr
 8008c18:	000400c0 	.word	0x000400c0

08008c1c <ai_buffer_array_sane>:
 8008c1c:	b138      	cbz	r0, 8008c2e <ai_buffer_array_sane+0x12>
 8008c1e:	6843      	ldr	r3, [r0, #4]
 8008c20:	b123      	cbz	r3, 8008c2c <ai_buffer_array_sane+0x10>
 8008c22:	8840      	ldrh	r0, [r0, #2]
 8008c24:	3800      	subs	r0, #0
 8008c26:	bf18      	it	ne
 8008c28:	2001      	movne	r0, #1
 8008c2a:	4770      	bx	lr
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4770      	bx	lr

08008c30 <ai_buffer_array_item_set_address>:
 8008c30:	b150      	cbz	r0, 8008c48 <ai_buffer_array_item_set_address+0x18>
 8008c32:	6843      	ldr	r3, [r0, #4]
 8008c34:	b14b      	cbz	r3, 8008c4a <ai_buffer_array_item_set_address+0x1a>
 8008c36:	8840      	ldrh	r0, [r0, #2]
 8008c38:	b900      	cbnz	r0, 8008c3c <ai_buffer_array_item_set_address+0xc>
 8008c3a:	4770      	bx	lr
 8008c3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008c40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008c44:	2001      	movs	r0, #1
 8008c46:	604a      	str	r2, [r1, #4]
 8008c48:	4770      	bx	lr
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop

08008c50 <_ai_platform_acquire_crc>:
 8008c50:	2001      	movs	r0, #1
 8008c52:	4770      	bx	lr

08008c54 <_ai_platform_release_crc>:
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <ai_platform_get_weights_map>:
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	d037      	beq.n	8008ccc <ai_platform_get_weights_map+0x74>
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	b1a0      	cbz	r0, 8008c8c <ai_platform_get_weights_map+0x34>
 8008c62:	460f      	mov	r7, r1
 8008c64:	b191      	cbz	r1, 8008c8c <ai_platform_get_weights_map+0x34>
 8008c66:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <ai_platform_get_weights_map+0xa4>)
 8008c68:	6810      	ldr	r0, [r2, #0]
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	4615      	mov	r5, r2
 8008c6e:	d00f      	beq.n	8008c90 <ai_platform_get_weights_map+0x38>
 8008c70:	6855      	ldr	r5, [r2, #4]
 8008c72:	b15d      	cbz	r5, 8008c8c <ai_platform_get_weights_map+0x34>
 8008c74:	682e      	ldr	r6, [r5, #0]
 8008c76:	429e      	cmp	r6, r3
 8008c78:	d02a      	beq.n	8008cd0 <ai_platform_get_weights_map+0x78>
 8008c7a:	f1a1 0001 	sub.w	r0, r1, #1
 8008c7e:	6025      	str	r5, [r4, #0]
 8008c80:	fab0 f080 	clz	r0, r0
 8008c84:	0940      	lsrs	r0, r0, #5
 8008c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c88:	42a7      	cmp	r7, r4
 8008c8a:	d034      	beq.n	8008cf6 <ai_platform_get_weights_map+0x9e>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c90:	1d10      	adds	r0, r2, #4
 8008c92:	f7ff ffc3 	bl	8008c1c <ai_buffer_array_sane>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0f8      	beq.n	8008c8c <ai_platform_get_weights_map+0x34>
 8008c9a:	88eb      	ldrh	r3, [r5, #6]
 8008c9c:	429f      	cmp	r7, r3
 8008c9e:	d1f5      	bne.n	8008c8c <ai_platform_get_weights_map+0x34>
 8008ca0:	f04f 0e00 	mov.w	lr, #0
 8008ca4:	1f23      	subs	r3, r4, #4
 8008ca6:	4670      	mov	r0, lr
 8008ca8:	68aa      	ldr	r2, [r5, #8]
 8008caa:	eb02 0c0e 	add.w	ip, r2, lr
 8008cae:	f10e 0e1c 	add.w	lr, lr, #28
 8008cb2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008cb6:	b124      	cbz	r4, 8008cc2 <ai_platform_get_weights_map+0x6a>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	4287      	cmp	r7, r0
 8008cbc:	f843 4f04 	str.w	r4, [r3, #4]!
 8008cc0:	d1f2      	bne.n	8008ca8 <ai_platform_get_weights_map+0x50>
 8008cc2:	1a38      	subs	r0, r7, r0
 8008cc4:	fab0 f080 	clz	r0, r0
 8008cc8:	0940      	lsrs	r0, r0, #5
 8008cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ccc:	2000      	movs	r0, #0
 8008cce:	4770      	bx	lr
 8008cd0:	1f23      	subs	r3, r4, #4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	e000      	b.n	8008cda <ai_platform_get_weights_map+0x82>
 8008cd8:	4614      	mov	r4, r2
 8008cda:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008cde:	42b2      	cmp	r2, r6
 8008ce0:	d0d2      	beq.n	8008c88 <ai_platform_get_weights_map+0x30>
 8008ce2:	f843 2f04 	str.w	r2, [r3, #4]!
 8008ce6:	1c62      	adds	r2, r4, #1
 8008ce8:	4297      	cmp	r7, r2
 8008cea:	d1f5      	bne.n	8008cd8 <ai_platform_get_weights_map+0x80>
 8008cec:	3402      	adds	r4, #2
 8008cee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008cf2:	42b3      	cmp	r3, r6
 8008cf4:	d1ca      	bne.n	8008c8c <ai_platform_get_weights_map+0x34>
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	a1facade 	.word	0xa1facade

08008d00 <ai_platform_get_activations_map>:
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d038      	beq.n	8008d76 <ai_platform_get_activations_map+0x76>
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	b1a0      	cbz	r0, 8008d34 <ai_platform_get_activations_map+0x34>
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	b191      	cbz	r1, 8008d34 <ai_platform_get_activations_map+0x34>
 8008d0e:	4b25      	ldr	r3, [pc, #148]	; (8008da4 <ai_platform_get_activations_map+0xa4>)
 8008d10:	6810      	ldr	r0, [r2, #0]
 8008d12:	4298      	cmp	r0, r3
 8008d14:	4615      	mov	r5, r2
 8008d16:	d00f      	beq.n	8008d38 <ai_platform_get_activations_map+0x38>
 8008d18:	6a15      	ldr	r5, [r2, #32]
 8008d1a:	b15d      	cbz	r5, 8008d34 <ai_platform_get_activations_map+0x34>
 8008d1c:	682e      	ldr	r6, [r5, #0]
 8008d1e:	429e      	cmp	r6, r3
 8008d20:	d02b      	beq.n	8008d7a <ai_platform_get_activations_map+0x7a>
 8008d22:	f1a1 0001 	sub.w	r0, r1, #1
 8008d26:	6025      	str	r5, [r4, #0]
 8008d28:	fab0 f080 	clz	r0, r0
 8008d2c:	0940      	lsrs	r0, r0, #5
 8008d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d30:	42a7      	cmp	r7, r4
 8008d32:	d035      	beq.n	8008da0 <ai_platform_get_activations_map+0xa0>
 8008d34:	2000      	movs	r0, #0
 8008d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d38:	f102 000c 	add.w	r0, r2, #12
 8008d3c:	f7ff ff6e 	bl	8008c1c <ai_buffer_array_sane>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d0f7      	beq.n	8008d34 <ai_platform_get_activations_map+0x34>
 8008d44:	89eb      	ldrh	r3, [r5, #14]
 8008d46:	429f      	cmp	r7, r3
 8008d48:	d1f4      	bne.n	8008d34 <ai_platform_get_activations_map+0x34>
 8008d4a:	f04f 0e00 	mov.w	lr, #0
 8008d4e:	1f23      	subs	r3, r4, #4
 8008d50:	4670      	mov	r0, lr
 8008d52:	692a      	ldr	r2, [r5, #16]
 8008d54:	eb02 0c0e 	add.w	ip, r2, lr
 8008d58:	f10e 0e1c 	add.w	lr, lr, #28
 8008d5c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008d60:	b124      	cbz	r4, 8008d6c <ai_platform_get_activations_map+0x6c>
 8008d62:	3001      	adds	r0, #1
 8008d64:	4287      	cmp	r7, r0
 8008d66:	f843 4f04 	str.w	r4, [r3, #4]!
 8008d6a:	d1f2      	bne.n	8008d52 <ai_platform_get_activations_map+0x52>
 8008d6c:	1a38      	subs	r0, r7, r0
 8008d6e:	fab0 f080 	clz	r0, r0
 8008d72:	0940      	lsrs	r0, r0, #5
 8008d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d76:	2000      	movs	r0, #0
 8008d78:	4770      	bx	lr
 8008d7a:	1f23      	subs	r3, r4, #4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	2400      	movs	r4, #0
 8008d80:	e000      	b.n	8008d84 <ai_platform_get_activations_map+0x84>
 8008d82:	4614      	mov	r4, r2
 8008d84:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008d88:	42b2      	cmp	r2, r6
 8008d8a:	d0d1      	beq.n	8008d30 <ai_platform_get_activations_map+0x30>
 8008d8c:	f843 2f04 	str.w	r2, [r3, #4]!
 8008d90:	1c62      	adds	r2, r4, #1
 8008d92:	4297      	cmp	r7, r2
 8008d94:	d1f5      	bne.n	8008d82 <ai_platform_get_activations_map+0x82>
 8008d96:	3402      	adds	r4, #2
 8008d98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	d1c9      	bne.n	8008d34 <ai_platform_get_activations_map+0x34>
 8008da0:	2001      	movs	r0, #1
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da4:	a1facade 	.word	0xa1facade

08008da8 <ai_platform_bind_network_params>:
 8008da8:	b1a0      	cbz	r0, 8008dd4 <ai_platform_bind_network_params+0x2c>
 8008daa:	b1b1      	cbz	r1, 8008dda <ai_platform_bind_network_params+0x32>
 8008dac:	b1c2      	cbz	r2, 8008de0 <ai_platform_bind_network_params+0x38>
 8008dae:	b410      	push	{r4}
 8008db0:	4603      	mov	r3, r0
 8008db2:	4c0d      	ldr	r4, [pc, #52]	; (8008de8 <ai_platform_bind_network_params+0x40>)
 8008db4:	f843 4b04 	str.w	r4, [r3], #4
 8008db8:	f100 0c0c 	add.w	ip, r0, #12
 8008dbc:	c903      	ldmia	r1, {r0, r1}
 8008dbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8008dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	4770      	bx	lr
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	4770      	bx	lr
 8008de0:	4613      	mov	r3, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	a1facade 	.word	0xa1facade

08008dec <ai_platform_network_get_error>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	b1f0      	cbz	r0, 8008e2e <ai_platform_network_get_error+0x42>
 8008df0:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <ai_platform_network_get_error+0xc4>)
 8008df2:	6802      	ldr	r2, [r0, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	4604      	mov	r4, r0
 8008df8:	d119      	bne.n	8008e2e <ai_platform_network_get_error+0x42>
 8008dfa:	f7ff ff29 	bl	8008c50 <_ai_platform_acquire_crc>
 8008dfe:	4b2d      	ldr	r3, [pc, #180]	; (8008eb4 <ai_platform_network_get_error+0xc8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e0a:	d03c      	beq.n	8008e86 <ai_platform_network_get_error+0x9a>
 8008e0c:	4a2a      	ldr	r2, [pc, #168]	; (8008eb8 <ai_platform_network_get_error+0xcc>)
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1fb      	bne.n	8008e14 <ai_platform_network_get_error+0x28>
 8008e1c:	4b27      	ldr	r3, [pc, #156]	; (8008ebc <ai_platform_network_get_error+0xd0>)
 8008e1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008e22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e26:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <ai_platform_network_get_error+0xd4>)
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d038      	beq.n	8008e9e <ai_platform_network_get_error+0xb2>
 8008e2c:	e7fe      	b.n	8008e2c <ai_platform_network_get_error+0x40>
 8008e2e:	f7ff ff0f 	bl	8008c50 <_ai_platform_acquire_crc>
 8008e32:	4b20      	ldr	r3, [pc, #128]	; (8008eb4 <ai_platform_network_get_error+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3e:	d010      	beq.n	8008e62 <ai_platform_network_get_error+0x76>
 8008e40:	4a1d      	ldr	r2, [pc, #116]	; (8008eb8 <ai_platform_network_get_error+0xcc>)
 8008e42:	2301      	movs	r3, #1
 8008e44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1fb      	bne.n	8008e48 <ai_platform_network_get_error+0x5c>
 8008e50:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <ai_platform_network_get_error+0xd0>)
 8008e52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008e56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e5a:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <ai_platform_network_get_error+0xd4>)
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d00d      	beq.n	8008e7c <ai_platform_network_get_error+0x90>
 8008e60:	e7fe      	b.n	8008e60 <ai_platform_network_get_error+0x74>
 8008e62:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <ai_platform_network_get_error+0xd8>)
 8008e64:	2301      	movs	r3, #1
 8008e66:	6093      	str	r3, [r2, #8]
 8008e68:	6893      	ldr	r3, [r2, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1fc      	bne.n	8008e68 <ai_platform_network_get_error+0x7c>
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <ai_platform_network_get_error+0xd0>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <ai_platform_network_get_error+0xd4>)
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d000      	beq.n	8008e7c <ai_platform_network_get_error+0x90>
 8008e7a:	e7fe      	b.n	8008e7a <ai_platform_network_get_error+0x8e>
 8008e7c:	f7ff feea 	bl	8008c54 <_ai_platform_release_crc>
 8008e80:	f241 0010 	movw	r0, #4112	; 0x1010
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	4a0f      	ldr	r2, [pc, #60]	; (8008ec4 <ai_platform_network_get_error+0xd8>)
 8008e88:	2301      	movs	r3, #1
 8008e8a:	6093      	str	r3, [r2, #8]
 8008e8c:	6893      	ldr	r3, [r2, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1fc      	bne.n	8008e8c <ai_platform_network_get_error+0xa0>
 8008e92:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <ai_platform_network_get_error+0xd0>)
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	6812      	ldr	r2, [r2, #0]
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <ai_platform_network_get_error+0xd4>)
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d107      	bne.n	8008eae <ai_platform_network_get_error+0xc2>
 8008e9e:	f7ff fed9 	bl	8008c54 <_ai_platform_release_crc>
 8008ea2:	f104 0010 	add.w	r0, r4, #16
 8008ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eaa:	f000 be8d 	b.w	8009bc8 <core_get_error>
 8008eae:	e7fe      	b.n	8008eae <ai_platform_network_get_error+0xc2>
 8008eb0:	a1c00100 	.word	0xa1c00100
 8008eb4:	e0042000 	.word	0xe0042000
 8008eb8:	58024000 	.word	0x58024000
 8008ebc:	f407a5c2 	.word	0xf407a5c2
 8008ec0:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ec4:	40023000 	.word	0x40023000

08008ec8 <ai_platform_network_set_error>:
 8008ec8:	b110      	cbz	r0, 8008ed0 <ai_platform_network_set_error+0x8>
 8008eca:	3010      	adds	r0, #16
 8008ecc:	f000 be82 	b.w	8009bd4 <core_set_error>
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop

08008ed4 <ai_platform_inputs_get>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	9102      	str	r1, [sp, #8]
 8008edc:	b1f0      	cbz	r0, 8008f1c <ai_platform_inputs_get+0x48>
 8008ede:	4b62      	ldr	r3, [pc, #392]	; (8009068 <ai_platform_inputs_get+0x194>)
 8008ee0:	6802      	ldr	r2, [r0, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	d119      	bne.n	8008f1c <ai_platform_inputs_get+0x48>
 8008ee8:	f7ff feb2 	bl	8008c50 <_ai_platform_acquire_crc>
 8008eec:	4b5f      	ldr	r3, [pc, #380]	; (800906c <ai_platform_inputs_get+0x198>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef8:	d03d      	beq.n	8008f76 <ai_platform_inputs_get+0xa2>
 8008efa:	4a5d      	ldr	r2, [pc, #372]	; (8009070 <ai_platform_inputs_get+0x19c>)
 8008efc:	2301      	movs	r3, #1
 8008efe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f02:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1fb      	bne.n	8008f02 <ai_platform_inputs_get+0x2e>
 8008f0a:	4b5a      	ldr	r3, [pc, #360]	; (8009074 <ai_platform_inputs_get+0x1a0>)
 8008f0c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008f10:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f14:	4b58      	ldr	r3, [pc, #352]	; (8009078 <ai_platform_inputs_get+0x1a4>)
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d039      	beq.n	8008f8e <ai_platform_inputs_get+0xba>
 8008f1a:	e7fe      	b.n	8008f1a <ai_platform_inputs_get+0x46>
 8008f1c:	f7ff fe98 	bl	8008c50 <_ai_platform_acquire_crc>
 8008f20:	4b52      	ldr	r3, [pc, #328]	; (800906c <ai_platform_inputs_get+0x198>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2c:	d010      	beq.n	8008f50 <ai_platform_inputs_get+0x7c>
 8008f2e:	4a50      	ldr	r2, [pc, #320]	; (8009070 <ai_platform_inputs_get+0x19c>)
 8008f30:	2301      	movs	r3, #1
 8008f32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1fb      	bne.n	8008f36 <ai_platform_inputs_get+0x62>
 8008f3e:	4b4d      	ldr	r3, [pc, #308]	; (8009074 <ai_platform_inputs_get+0x1a0>)
 8008f40:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008f44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f48:	4b4b      	ldr	r3, [pc, #300]	; (8009078 <ai_platform_inputs_get+0x1a4>)
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d00d      	beq.n	8008f6a <ai_platform_inputs_get+0x96>
 8008f4e:	e7fe      	b.n	8008f4e <ai_platform_inputs_get+0x7a>
 8008f50:	4a4a      	ldr	r2, [pc, #296]	; (800907c <ai_platform_inputs_get+0x1a8>)
 8008f52:	2301      	movs	r3, #1
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	6893      	ldr	r3, [r2, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1fc      	bne.n	8008f56 <ai_platform_inputs_get+0x82>
 8008f5c:	4b45      	ldr	r3, [pc, #276]	; (8009074 <ai_platform_inputs_get+0x1a0>)
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	4b45      	ldr	r3, [pc, #276]	; (8009078 <ai_platform_inputs_get+0x1a4>)
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d000      	beq.n	8008f6a <ai_platform_inputs_get+0x96>
 8008f68:	e7fe      	b.n	8008f68 <ai_platform_inputs_get+0x94>
 8008f6a:	f7ff fe73 	bl	8008c54 <_ai_platform_release_crc>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	b005      	add	sp, #20
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	4a41      	ldr	r2, [pc, #260]	; (800907c <ai_platform_inputs_get+0x1a8>)
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6093      	str	r3, [r2, #8]
 8008f7c:	6893      	ldr	r3, [r2, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1fc      	bne.n	8008f7c <ai_platform_inputs_get+0xa8>
 8008f82:	4b3c      	ldr	r3, [pc, #240]	; (8009074 <ai_platform_inputs_get+0x1a0>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	6812      	ldr	r2, [r2, #0]
 8008f88:	4b3b      	ldr	r3, [pc, #236]	; (8009078 <ai_platform_inputs_get+0x1a4>)
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d155      	bne.n	800903a <ai_platform_inputs_get+0x166>
 8008f8e:	f7ff fe61 	bl	8008c54 <_ai_platform_release_crc>
 8008f92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d051      	beq.n	800903c <ai_platform_inputs_get+0x168>
 8008f98:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8008f9c:	f1ba 0f00 	cmp.w	sl, #0
 8008fa0:	d04c      	beq.n	800903c <ai_platform_inputs_get+0x168>
 8008fa2:	f04f 0b00 	mov.w	fp, #0
 8008fa6:	465d      	mov	r5, fp
 8008fa8:	9703      	str	r7, [sp, #12]
 8008faa:	e016      	b.n	8008fda <ai_platform_inputs_get+0x106>
 8008fac:	9901      	ldr	r1, [sp, #4]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	507b      	str	r3, [r7, r1]
 8008fb2:	69b1      	ldr	r1, [r6, #24]
 8008fb4:	6849      	ldr	r1, [r1, #4]
 8008fb6:	6121      	str	r1, [r4, #16]
 8008fb8:	f04f 0301 	mov.w	r3, #1
 8008fbc:	7523      	strb	r3, [r4, #20]
 8008fbe:	e9c4 c200 	strd	ip, r2, [r4]
 8008fc2:	6962      	ldr	r2, [r4, #20]
 8008fc4:	60a0      	str	r0, [r4, #8]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f369 221f 	bfi	r2, r9, #8, #24
 8008fcc:	f8c4 8018 	str.w	r8, [r4, #24]
 8008fd0:	60e3      	str	r3, [r4, #12]
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	f10b 0b1c 	add.w	fp, fp, #28
 8008fd8:	6162      	str	r2, [r4, #20]
 8008fda:	f8ba 3000 	ldrh.w	r3, [sl]
 8008fde:	42ab      	cmp	r3, r5
 8008fe0:	b2aa      	uxth	r2, r5
 8008fe2:	d93a      	bls.n	800905a <ai_platform_inputs_get+0x186>
 8008fe4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008fe8:	00e9      	lsls	r1, r5, #3
 8008fea:	9101      	str	r1, [sp, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d034      	beq.n	800905a <ai_platform_inputs_get+0x186>
 8008ff0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	d030      	beq.n	800905a <ai_platform_inputs_get+0x186>
 8008ff8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008ffc:	69b2      	ldr	r2, [r6, #24]
 8008ffe:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009002:	6810      	ldr	r0, [r2, #0]
 8009004:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009008:	68b3      	ldr	r3, [r6, #8]
 800900a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800900e:	f001 fc2d 	bl	800a86c <ai_array_to_buffer_fmt>
 8009012:	69b1      	ldr	r1, [r6, #24]
 8009014:	4684      	mov	ip, r0
 8009016:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800901a:	688a      	ldr	r2, [r1, #8]
 800901c:	445c      	add	r4, fp
 800901e:	2800      	cmp	r0, #0
 8009020:	d0c8      	beq.n	8008fb4 <ai_platform_inputs_get+0xe0>
 8009022:	2100      	movs	r1, #0
 8009024:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8009028:	6831      	ldr	r1, [r6, #0]
 800902a:	6041      	str	r1, [r0, #4]
 800902c:	b111      	cbz	r1, 8009034 <ai_platform_inputs_get+0x160>
 800902e:	8849      	ldrh	r1, [r1, #2]
 8009030:	2900      	cmp	r1, #0
 8009032:	d1bb      	bne.n	8008fac <ai_platform_inputs_get+0xd8>
 8009034:	69b1      	ldr	r1, [r6, #24]
 8009036:	2000      	movs	r0, #0
 8009038:	e7bc      	b.n	8008fb4 <ai_platform_inputs_get+0xe0>
 800903a:	e7fe      	b.n	800903a <ai_platform_inputs_get+0x166>
 800903c:	2218      	movs	r2, #24
 800903e:	2111      	movs	r1, #17
 8009040:	f107 0010 	add.w	r0, r7, #16
 8009044:	f000 fdc6 	bl	8009bd4 <core_set_error>
 8009048:	2200      	movs	r2, #0
 800904a:	4610      	mov	r0, r2
 800904c:	9b02      	ldr	r3, [sp, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d08e      	beq.n	8008f70 <ai_platform_inputs_get+0x9c>
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	b005      	add	sp, #20
 8009056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905a:	9f03      	ldr	r7, [sp, #12]
 800905c:	2a00      	cmp	r2, #0
 800905e:	d0ed      	beq.n	800903c <ai_platform_inputs_get+0x168>
 8009060:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009064:	6858      	ldr	r0, [r3, #4]
 8009066:	e7f1      	b.n	800904c <ai_platform_inputs_get+0x178>
 8009068:	a1c00100 	.word	0xa1c00100
 800906c:	e0042000 	.word	0xe0042000
 8009070:	58024000 	.word	0x58024000
 8009074:	f407a5c2 	.word	0xf407a5c2
 8009078:	b5e8b5cd 	.word	0xb5e8b5cd
 800907c:	40023000 	.word	0x40023000

08009080 <ai_platform_outputs_get>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	b085      	sub	sp, #20
 8009086:	9102      	str	r1, [sp, #8]
 8009088:	b1f0      	cbz	r0, 80090c8 <ai_platform_outputs_get+0x48>
 800908a:	4b5f      	ldr	r3, [pc, #380]	; (8009208 <ai_platform_outputs_get+0x188>)
 800908c:	6802      	ldr	r2, [r0, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	4607      	mov	r7, r0
 8009092:	d119      	bne.n	80090c8 <ai_platform_outputs_get+0x48>
 8009094:	f7ff fddc 	bl	8008c50 <_ai_platform_acquire_crc>
 8009098:	4b5c      	ldr	r3, [pc, #368]	; (800920c <ai_platform_outputs_get+0x18c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a4:	d03d      	beq.n	8009122 <ai_platform_outputs_get+0xa2>
 80090a6:	4a5a      	ldr	r2, [pc, #360]	; (8009210 <ai_platform_outputs_get+0x190>)
 80090a8:	2301      	movs	r3, #1
 80090aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80090ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1fb      	bne.n	80090ae <ai_platform_outputs_get+0x2e>
 80090b6:	4b57      	ldr	r3, [pc, #348]	; (8009214 <ai_platform_outputs_get+0x194>)
 80090b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80090bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80090c0:	4b55      	ldr	r3, [pc, #340]	; (8009218 <ai_platform_outputs_get+0x198>)
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d039      	beq.n	800913a <ai_platform_outputs_get+0xba>
 80090c6:	e7fe      	b.n	80090c6 <ai_platform_outputs_get+0x46>
 80090c8:	f7ff fdc2 	bl	8008c50 <_ai_platform_acquire_crc>
 80090cc:	4b4f      	ldr	r3, [pc, #316]	; (800920c <ai_platform_outputs_get+0x18c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d8:	d010      	beq.n	80090fc <ai_platform_outputs_get+0x7c>
 80090da:	4a4d      	ldr	r2, [pc, #308]	; (8009210 <ai_platform_outputs_get+0x190>)
 80090dc:	2301      	movs	r3, #1
 80090de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80090e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1fb      	bne.n	80090e2 <ai_platform_outputs_get+0x62>
 80090ea:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <ai_platform_outputs_get+0x194>)
 80090ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80090f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80090f4:	4b48      	ldr	r3, [pc, #288]	; (8009218 <ai_platform_outputs_get+0x198>)
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d00d      	beq.n	8009116 <ai_platform_outputs_get+0x96>
 80090fa:	e7fe      	b.n	80090fa <ai_platform_outputs_get+0x7a>
 80090fc:	4a47      	ldr	r2, [pc, #284]	; (800921c <ai_platform_outputs_get+0x19c>)
 80090fe:	2301      	movs	r3, #1
 8009100:	6093      	str	r3, [r2, #8]
 8009102:	6893      	ldr	r3, [r2, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1fc      	bne.n	8009102 <ai_platform_outputs_get+0x82>
 8009108:	4b42      	ldr	r3, [pc, #264]	; (8009214 <ai_platform_outputs_get+0x194>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	4b42      	ldr	r3, [pc, #264]	; (8009218 <ai_platform_outputs_get+0x198>)
 8009110:	429a      	cmp	r2, r3
 8009112:	d000      	beq.n	8009116 <ai_platform_outputs_get+0x96>
 8009114:	e7fe      	b.n	8009114 <ai_platform_outputs_get+0x94>
 8009116:	f7ff fd9d 	bl	8008c54 <_ai_platform_release_crc>
 800911a:	2000      	movs	r0, #0
 800911c:	b005      	add	sp, #20
 800911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009122:	4a3e      	ldr	r2, [pc, #248]	; (800921c <ai_platform_outputs_get+0x19c>)
 8009124:	2301      	movs	r3, #1
 8009126:	6093      	str	r3, [r2, #8]
 8009128:	6893      	ldr	r3, [r2, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1fc      	bne.n	8009128 <ai_platform_outputs_get+0xa8>
 800912e:	4b39      	ldr	r3, [pc, #228]	; (8009214 <ai_platform_outputs_get+0x194>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	4b38      	ldr	r3, [pc, #224]	; (8009218 <ai_platform_outputs_get+0x198>)
 8009136:	429a      	cmp	r2, r3
 8009138:	d150      	bne.n	80091dc <ai_platform_outputs_get+0x15c>
 800913a:	f7ff fd8b 	bl	8008c54 <_ai_platform_release_crc>
 800913e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d958      	bls.n	80091f6 <ai_platform_outputs_get+0x176>
 8009144:	f04f 0b00 	mov.w	fp, #0
 8009148:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800914c:	9703      	str	r7, [sp, #12]
 800914e:	465d      	mov	r5, fp
 8009150:	e016      	b.n	8009180 <ai_platform_outputs_get+0x100>
 8009152:	9901      	ldr	r1, [sp, #4]
 8009154:	2301      	movs	r3, #1
 8009156:	507b      	str	r3, [r7, r1]
 8009158:	69b1      	ldr	r1, [r6, #24]
 800915a:	6849      	ldr	r1, [r1, #4]
 800915c:	6121      	str	r1, [r4, #16]
 800915e:	f04f 0301 	mov.w	r3, #1
 8009162:	7523      	strb	r3, [r4, #20]
 8009164:	e9c4 c200 	strd	ip, r2, [r4]
 8009168:	6962      	ldr	r2, [r4, #20]
 800916a:	60a0      	str	r0, [r4, #8]
 800916c:	2300      	movs	r3, #0
 800916e:	f369 221f 	bfi	r2, r9, #8, #24
 8009172:	f8c4 8018 	str.w	r8, [r4, #24]
 8009176:	60e3      	str	r3, [r4, #12]
 8009178:	3501      	adds	r5, #1
 800917a:	f10b 0b1c 	add.w	fp, fp, #28
 800917e:	6162      	str	r2, [r4, #20]
 8009180:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009184:	42ab      	cmp	r3, r5
 8009186:	b2aa      	uxth	r2, r5
 8009188:	d929      	bls.n	80091de <ai_platform_outputs_get+0x15e>
 800918a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800918e:	00e9      	lsls	r1, r5, #3
 8009190:	9101      	str	r1, [sp, #4]
 8009192:	b323      	cbz	r3, 80091de <ai_platform_outputs_get+0x15e>
 8009194:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009198:	b30e      	cbz	r6, 80091de <ai_platform_outputs_get+0x15e>
 800919a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800919e:	69b2      	ldr	r2, [r6, #24]
 80091a0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80091a4:	6810      	ldr	r0, [r2, #0]
 80091a6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80091aa:	68b3      	ldr	r3, [r6, #8]
 80091ac:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80091b0:	f001 fb5c 	bl	800a86c <ai_array_to_buffer_fmt>
 80091b4:	69b1      	ldr	r1, [r6, #24]
 80091b6:	4684      	mov	ip, r0
 80091b8:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80091bc:	688a      	ldr	r2, [r1, #8]
 80091be:	445c      	add	r4, fp
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0ca      	beq.n	800915a <ai_platform_outputs_get+0xda>
 80091c4:	2100      	movs	r1, #0
 80091c6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80091ca:	6831      	ldr	r1, [r6, #0]
 80091cc:	6041      	str	r1, [r0, #4]
 80091ce:	b111      	cbz	r1, 80091d6 <ai_platform_outputs_get+0x156>
 80091d0:	8849      	ldrh	r1, [r1, #2]
 80091d2:	2900      	cmp	r1, #0
 80091d4:	d1bd      	bne.n	8009152 <ai_platform_outputs_get+0xd2>
 80091d6:	69b1      	ldr	r1, [r6, #24]
 80091d8:	2000      	movs	r0, #0
 80091da:	e7be      	b.n	800915a <ai_platform_outputs_get+0xda>
 80091dc:	e7fe      	b.n	80091dc <ai_platform_outputs_get+0x15c>
 80091de:	9f03      	ldr	r7, [sp, #12]
 80091e0:	b14a      	cbz	r2, 80091f6 <ai_platform_outputs_get+0x176>
 80091e2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80091e6:	6858      	ldr	r0, [r3, #4]
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d096      	beq.n	800911c <ai_platform_outputs_get+0x9c>
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	b005      	add	sp, #20
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	2218      	movs	r2, #24
 80091f8:	2111      	movs	r1, #17
 80091fa:	f107 0010 	add.w	r0, r7, #16
 80091fe:	f000 fce9 	bl	8009bd4 <core_set_error>
 8009202:	2200      	movs	r2, #0
 8009204:	4610      	mov	r0, r2
 8009206:	e7ef      	b.n	80091e8 <ai_platform_outputs_get+0x168>
 8009208:	a1c00100 	.word	0xa1c00100
 800920c:	e0042000 	.word	0xe0042000
 8009210:	58024000 	.word	0x58024000
 8009214:	f407a5c2 	.word	0xf407a5c2
 8009218:	b5e8b5cd 	.word	0xb5e8b5cd
 800921c:	40023000 	.word	0x40023000

08009220 <ai_platform_network_create>:
 8009220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009224:	b083      	sub	sp, #12
 8009226:	4606      	mov	r6, r0
 8009228:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800922c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009230:	4615      	mov	r5, r2
 8009232:	461f      	mov	r7, r3
 8009234:	f7ff fd0c 	bl	8008c50 <_ai_platform_acquire_crc>
 8009238:	b188      	cbz	r0, 800925e <ai_platform_network_create+0x3e>
 800923a:	4a5d      	ldr	r2, [pc, #372]	; (80093b0 <ai_platform_network_create+0x190>)
 800923c:	6812      	ldr	r2, [r2, #0]
 800923e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009242:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009246:	4603      	mov	r3, r0
 8009248:	d00e      	beq.n	8009268 <ai_platform_network_create+0x48>
 800924a:	4a5a      	ldr	r2, [pc, #360]	; (80093b4 <ai_platform_network_create+0x194>)
 800924c:	2118      	movs	r1, #24
 800924e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009252:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009256:	2918      	cmp	r1, #24
 8009258:	d018      	beq.n	800928c <ai_platform_network_create+0x6c>
 800925a:	f7ff fcfb 	bl	8008c54 <_ai_platform_release_crc>
 800925e:	f244 1033 	movw	r0, #16691	; 0x4133
 8009262:	b003      	add	sp, #12
 8009264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009268:	4a53      	ldr	r2, [pc, #332]	; (80093b8 <ai_platform_network_create+0x198>)
 800926a:	2101      	movs	r1, #1
 800926c:	6091      	str	r1, [r2, #8]
 800926e:	2114      	movs	r1, #20
 8009270:	e001      	b.n	8009276 <ai_platform_network_create+0x56>
 8009272:	3901      	subs	r1, #1
 8009274:	d002      	beq.n	800927c <ai_platform_network_create+0x5c>
 8009276:	6894      	ldr	r4, [r2, #8]
 8009278:	2c00      	cmp	r4, #0
 800927a:	d1fa      	bne.n	8009272 <ai_platform_network_create+0x52>
 800927c:	4a4e      	ldr	r2, [pc, #312]	; (80093b8 <ai_platform_network_create+0x198>)
 800927e:	6891      	ldr	r1, [r2, #8]
 8009280:	b911      	cbnz	r1, 8009288 <ai_platform_network_create+0x68>
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	3201      	adds	r2, #1
 8009286:	d008      	beq.n	800929a <ai_platform_network_create+0x7a>
 8009288:	4618      	mov	r0, r3
 800928a:	e7e6      	b.n	800925a <ai_platform_network_create+0x3a>
 800928c:	2101      	movs	r1, #1
 800928e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009292:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009296:	2900      	cmp	r1, #0
 8009298:	d1fb      	bne.n	8009292 <ai_platform_network_create+0x72>
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fcda 	bl	8008c54 <_ai_platform_release_crc>
 80092a0:	f7ff fcd6 	bl	8008c50 <_ai_platform_acquire_crc>
 80092a4:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <ai_platform_network_create+0x190>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b0:	d010      	beq.n	80092d4 <ai_platform_network_create+0xb4>
 80092b2:	4b40      	ldr	r3, [pc, #256]	; (80093b4 <ai_platform_network_create+0x194>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80092ba:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80092be:	2900      	cmp	r1, #0
 80092c0:	d1fb      	bne.n	80092ba <ai_platform_network_create+0x9a>
 80092c2:	4a3e      	ldr	r2, [pc, #248]	; (80093bc <ai_platform_network_create+0x19c>)
 80092c4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80092c8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80092cc:	4b3c      	ldr	r3, [pc, #240]	; (80093c0 <ai_platform_network_create+0x1a0>)
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d00c      	beq.n	80092ec <ai_platform_network_create+0xcc>
 80092d2:	e7fe      	b.n	80092d2 <ai_platform_network_create+0xb2>
 80092d4:	4a38      	ldr	r2, [pc, #224]	; (80093b8 <ai_platform_network_create+0x198>)
 80092d6:	2301      	movs	r3, #1
 80092d8:	6093      	str	r3, [r2, #8]
 80092da:	6893      	ldr	r3, [r2, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1fc      	bne.n	80092da <ai_platform_network_create+0xba>
 80092e0:	4b36      	ldr	r3, [pc, #216]	; (80093bc <ai_platform_network_create+0x19c>)
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <ai_platform_network_create+0x1a0>)
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d122      	bne.n	8009332 <ai_platform_network_create+0x112>
 80092ec:	f7ff fcb2 	bl	8008c54 <_ai_platform_release_crc>
 80092f0:	b38e      	cbz	r6, 8009356 <ai_platform_network_create+0x136>
 80092f2:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <ai_platform_network_create+0x1a4>)
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	6035      	str	r5, [r6, #0]
 80092f8:	f000 fc64 	bl	8009bc4 <core_init>
 80092fc:	b1d0      	cbz	r0, 8009334 <ai_platform_network_create+0x114>
 80092fe:	f7ff fca7 	bl	8008c50 <_ai_platform_acquire_crc>
 8009302:	4b2b      	ldr	r3, [pc, #172]	; (80093b0 <ai_platform_network_create+0x190>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800930a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800930e:	d025      	beq.n	800935c <ai_platform_network_create+0x13c>
 8009310:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <ai_platform_network_create+0x194>)
 8009312:	2301      	movs	r3, #1
 8009314:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009318:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1fb      	bne.n	8009318 <ai_platform_network_create+0xf8>
 8009320:	4b26      	ldr	r3, [pc, #152]	; (80093bc <ai_platform_network_create+0x19c>)
 8009322:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009326:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800932a:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <ai_platform_network_create+0x1a0>)
 800932c:	429a      	cmp	r2, r3
 800932e:	d022      	beq.n	8009376 <ai_platform_network_create+0x156>
 8009330:	e7fe      	b.n	8009330 <ai_platform_network_create+0x110>
 8009332:	e7fe      	b.n	8009332 <ai_platform_network_create+0x112>
 8009334:	2430      	movs	r4, #48	; 0x30
 8009336:	2300      	movs	r3, #0
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	2610      	movs	r6, #16
 800933c:	464a      	mov	r2, r9
 800933e:	4641      	mov	r1, r8
 8009340:	4638      	mov	r0, r7
 8009342:	f001 fa75 	bl	800a830 <ai_version_get>
 8009346:	4603      	mov	r3, r0
 8009348:	2000      	movs	r0, #0
 800934a:	f364 0007 	bfi	r0, r4, #0, #8
 800934e:	64ab      	str	r3, [r5, #72]	; 0x48
 8009350:	f366 201f 	bfi	r0, r6, #8, #24
 8009354:	e785      	b.n	8009262 <ai_platform_network_create+0x42>
 8009356:	f241 0010 	movw	r0, #4112	; 0x1010
 800935a:	e782      	b.n	8009262 <ai_platform_network_create+0x42>
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <ai_platform_network_create+0x198>)
 800935e:	2301      	movs	r3, #1
 8009360:	6093      	str	r3, [r2, #8]
 8009362:	6893      	ldr	r3, [r2, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1fc      	bne.n	8009362 <ai_platform_network_create+0x142>
 8009368:	4b14      	ldr	r3, [pc, #80]	; (80093bc <ai_platform_network_create+0x19c>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <ai_platform_network_create+0x1a0>)
 8009370:	429a      	cmp	r2, r3
 8009372:	d000      	beq.n	8009376 <ai_platform_network_create+0x156>
 8009374:	e7fe      	b.n	8009374 <ai_platform_network_create+0x154>
 8009376:	f7ff fc6d 	bl	8008c54 <_ai_platform_release_crc>
 800937a:	2200      	movs	r2, #0
 800937c:	4641      	mov	r1, r8
 800937e:	4638      	mov	r0, r7
 8009380:	f001 fa56 	bl	800a830 <ai_version_get>
 8009384:	2200      	movs	r2, #0
 8009386:	4604      	mov	r4, r0
 8009388:	2105      	movs	r1, #5
 800938a:	2001      	movs	r0, #1
 800938c:	f001 fa50 	bl	800a830 <ai_version_get>
 8009390:	4284      	cmp	r4, r0
 8009392:	d001      	beq.n	8009398 <ai_platform_network_create+0x178>
 8009394:	2401      	movs	r4, #1
 8009396:	e7ce      	b.n	8009336 <ai_platform_network_create+0x116>
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <ai_platform_network_create+0x1a8>)
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	a801      	add	r0, sp, #4
 800939e:	f001 f88d 	bl	800a4bc <ai_check_custom_types>
 80093a2:	b110      	cbz	r0, 80093aa <ai_platform_network_create+0x18a>
 80093a4:	2600      	movs	r6, #0
 80093a6:	4634      	mov	r4, r6
 80093a8:	e7c8      	b.n	800933c <ai_platform_network_create+0x11c>
 80093aa:	2402      	movs	r4, #2
 80093ac:	e7c3      	b.n	8009336 <ai_platform_network_create+0x116>
 80093ae:	bf00      	nop
 80093b0:	e0042000 	.word	0xe0042000
 80093b4:	58024000 	.word	0x58024000
 80093b8:	40023000 	.word	0x40023000
 80093bc:	f407a5c2 	.word	0xf407a5c2
 80093c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80093c4:	a1c00100 	.word	0xa1c00100
 80093c8:	84048403 	.word	0x84048403

080093cc <ai_platform_network_init>:
 80093cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d0:	b1f8      	cbz	r0, 8009412 <ai_platform_network_init+0x46>
 80093d2:	4b6e      	ldr	r3, [pc, #440]	; (800958c <ai_platform_network_init+0x1c0>)
 80093d4:	6802      	ldr	r2, [r0, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	4604      	mov	r4, r0
 80093da:	d11a      	bne.n	8009412 <ai_platform_network_init+0x46>
 80093dc:	460e      	mov	r6, r1
 80093de:	f7ff fc37 	bl	8008c50 <_ai_platform_acquire_crc>
 80093e2:	4b6b      	ldr	r3, [pc, #428]	; (8009590 <ai_platform_network_init+0x1c4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ee:	d03d      	beq.n	800946c <ai_platform_network_init+0xa0>
 80093f0:	4a68      	ldr	r2, [pc, #416]	; (8009594 <ai_platform_network_init+0x1c8>)
 80093f2:	2301      	movs	r3, #1
 80093f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80093f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1fb      	bne.n	80093f8 <ai_platform_network_init+0x2c>
 8009400:	4b65      	ldr	r3, [pc, #404]	; (8009598 <ai_platform_network_init+0x1cc>)
 8009402:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009406:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800940a:	4b64      	ldr	r3, [pc, #400]	; (800959c <ai_platform_network_init+0x1d0>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d039      	beq.n	8009484 <ai_platform_network_init+0xb8>
 8009410:	e7fe      	b.n	8009410 <ai_platform_network_init+0x44>
 8009412:	f7ff fc1d 	bl	8008c50 <_ai_platform_acquire_crc>
 8009416:	4b5e      	ldr	r3, [pc, #376]	; (8009590 <ai_platform_network_init+0x1c4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800941e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009422:	d010      	beq.n	8009446 <ai_platform_network_init+0x7a>
 8009424:	4a5b      	ldr	r2, [pc, #364]	; (8009594 <ai_platform_network_init+0x1c8>)
 8009426:	2301      	movs	r3, #1
 8009428:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800942c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1fb      	bne.n	800942c <ai_platform_network_init+0x60>
 8009434:	4b58      	ldr	r3, [pc, #352]	; (8009598 <ai_platform_network_init+0x1cc>)
 8009436:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800943a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800943e:	4b57      	ldr	r3, [pc, #348]	; (800959c <ai_platform_network_init+0x1d0>)
 8009440:	429a      	cmp	r2, r3
 8009442:	d00d      	beq.n	8009460 <ai_platform_network_init+0x94>
 8009444:	e7fe      	b.n	8009444 <ai_platform_network_init+0x78>
 8009446:	4a56      	ldr	r2, [pc, #344]	; (80095a0 <ai_platform_network_init+0x1d4>)
 8009448:	2301      	movs	r3, #1
 800944a:	6093      	str	r3, [r2, #8]
 800944c:	6893      	ldr	r3, [r2, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1fc      	bne.n	800944c <ai_platform_network_init+0x80>
 8009452:	4b51      	ldr	r3, [pc, #324]	; (8009598 <ai_platform_network_init+0x1cc>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	6812      	ldr	r2, [r2, #0]
 8009458:	4b50      	ldr	r3, [pc, #320]	; (800959c <ai_platform_network_init+0x1d0>)
 800945a:	429a      	cmp	r2, r3
 800945c:	d000      	beq.n	8009460 <ai_platform_network_init+0x94>
 800945e:	e7fe      	b.n	800945e <ai_platform_network_init+0x92>
 8009460:	f7ff fbf8 	bl	8008c54 <_ai_platform_release_crc>
 8009464:	2600      	movs	r6, #0
 8009466:	4630      	mov	r0, r6
 8009468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946c:	4a4c      	ldr	r2, [pc, #304]	; (80095a0 <ai_platform_network_init+0x1d4>)
 800946e:	2301      	movs	r3, #1
 8009470:	6093      	str	r3, [r2, #8]
 8009472:	6893      	ldr	r3, [r2, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1fc      	bne.n	8009472 <ai_platform_network_init+0xa6>
 8009478:	4b47      	ldr	r3, [pc, #284]	; (8009598 <ai_platform_network_init+0x1cc>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	4b47      	ldr	r3, [pc, #284]	; (800959c <ai_platform_network_init+0x1d0>)
 8009480:	429a      	cmp	r2, r3
 8009482:	d11c      	bne.n	80094be <ai_platform_network_init+0xf2>
 8009484:	f7ff fbe6 	bl	8008c54 <_ai_platform_release_crc>
 8009488:	2e00      	cmp	r6, #0
 800948a:	d06f      	beq.n	800956c <ai_platform_network_init+0x1a0>
 800948c:	4b45      	ldr	r3, [pc, #276]	; (80095a4 <ai_platform_network_init+0x1d8>)
 800948e:	6832      	ldr	r2, [r6, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d115      	bne.n	80094c0 <ai_platform_network_init+0xf4>
 8009494:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009498:	6933      	ldr	r3, [r6, #16]
 800949a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800949e:	89f7      	ldrh	r7, [r6, #14]
 80094a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094a2:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80094a6:	2303      	movs	r3, #3
 80094a8:	84e7      	strh	r7, [r4, #38]	; 0x26
 80094aa:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80094ae:	60e3      	str	r3, [r4, #12]
 80094b0:	4620      	mov	r0, r4
 80094b2:	4626      	mov	r6, r4
 80094b4:	f001 f82c 	bl	800a510 <ai_layers_init_all>
 80094b8:	4630      	mov	r0, r6
 80094ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094be:	e7fe      	b.n	80094be <ai_platform_network_init+0xf2>
 80094c0:	2101      	movs	r1, #1
 80094c2:	4630      	mov	r0, r6
 80094c4:	4635      	mov	r5, r6
 80094c6:	6876      	ldr	r6, [r6, #4]
 80094c8:	f7ff fb74 	bl	8008bb4 <ai_buffer_get_size>
 80094cc:	f105 081c 	add.w	r8, r5, #28
 80094d0:	4681      	mov	r9, r0
 80094d2:	2101      	movs	r1, #1
 80094d4:	4640      	mov	r0, r8
 80094d6:	6a2f      	ldr	r7, [r5, #32]
 80094d8:	f7ff fb6c 	bl	8008bb4 <ai_buffer_get_size>
 80094dc:	f1b9 0f00 	cmp.w	r9, #0
 80094e0:	d025      	beq.n	800952e <ai_platform_network_init+0x162>
 80094e2:	2201      	movs	r2, #1
 80094e4:	4696      	mov	lr, r2
 80094e6:	bb30      	cbnz	r0, 8009536 <ai_platform_network_init+0x16a>
 80094e8:	4680      	mov	r8, r0
 80094ea:	4607      	mov	r7, r0
 80094ec:	b376      	cbz	r6, 800954c <ai_platform_network_init+0x180>
 80094ee:	8be3      	ldrh	r3, [r4, #30]
 80094f0:	4573      	cmp	r3, lr
 80094f2:	d323      	bcc.n	800953c <ai_platform_network_init+0x170>
 80094f4:	b142      	cbz	r2, 8009508 <ai_platform_network_init+0x13c>
 80094f6:	46ac      	mov	ip, r5
 80094f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094fc:	6a25      	ldr	r5, [r4, #32]
 80094fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009500:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009504:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009508:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800950a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800950e:	2600      	movs	r6, #0
 8009510:	42bb      	cmp	r3, r7
 8009512:	83a6      	strh	r6, [r4, #28]
 8009514:	d323      	bcc.n	800955e <ai_platform_network_init+0x192>
 8009516:	b37f      	cbz	r7, 8009578 <ai_platform_network_init+0x1ac>
 8009518:	46c4      	mov	ip, r8
 800951a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800951e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009522:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009526:	46b6      	mov	lr, r6
 8009528:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800952c:	e7bb      	b.n	80094a6 <ai_platform_network_init+0xda>
 800952e:	464a      	mov	r2, r9
 8009530:	46ce      	mov	lr, r9
 8009532:	464d      	mov	r5, r9
 8009534:	e7d7      	b.n	80094e6 <ai_platform_network_init+0x11a>
 8009536:	b30f      	cbz	r7, 800957c <ai_platform_network_init+0x1b0>
 8009538:	2701      	movs	r7, #1
 800953a:	e7d7      	b.n	80094ec <ai_platform_network_init+0x120>
 800953c:	2212      	movs	r2, #18
 800953e:	2116      	movs	r1, #22
 8009540:	f104 0010 	add.w	r0, r4, #16
 8009544:	f000 fb46 	bl	8009bd4 <core_set_error>
 8009548:	2600      	movs	r6, #0
 800954a:	e78c      	b.n	8009466 <ai_platform_network_init+0x9a>
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	d0cd      	beq.n	80094ee <ai_platform_network_init+0x122>
 8009552:	2110      	movs	r1, #16
 8009554:	2212      	movs	r2, #18
 8009556:	1860      	adds	r0, r4, r1
 8009558:	f000 fb3c 	bl	8009bd4 <core_set_error>
 800955c:	e783      	b.n	8009466 <ai_platform_network_init+0x9a>
 800955e:	2213      	movs	r2, #19
 8009560:	2116      	movs	r1, #22
 8009562:	f104 0010 	add.w	r0, r4, #16
 8009566:	f000 fb35 	bl	8009bd4 <core_set_error>
 800956a:	e77c      	b.n	8009466 <ai_platform_network_init+0x9a>
 800956c:	2110      	movs	r1, #16
 800956e:	2211      	movs	r2, #17
 8009570:	1860      	adds	r0, r4, r1
 8009572:	f000 fb2f 	bl	8009bd4 <core_set_error>
 8009576:	e776      	b.n	8009466 <ai_platform_network_init+0x9a>
 8009578:	46be      	mov	lr, r7
 800957a:	e794      	b.n	80094a6 <ai_platform_network_init+0xda>
 800957c:	2110      	movs	r1, #16
 800957e:	2213      	movs	r2, #19
 8009580:	1860      	adds	r0, r4, r1
 8009582:	f000 fb27 	bl	8009bd4 <core_set_error>
 8009586:	463e      	mov	r6, r7
 8009588:	e76d      	b.n	8009466 <ai_platform_network_init+0x9a>
 800958a:	bf00      	nop
 800958c:	a1c00100 	.word	0xa1c00100
 8009590:	e0042000 	.word	0xe0042000
 8009594:	58024000 	.word	0x58024000
 8009598:	f407a5c2 	.word	0xf407a5c2
 800959c:	b5e8b5cd 	.word	0xb5e8b5cd
 80095a0:	40023000 	.word	0x40023000
 80095a4:	a1facade 	.word	0xa1facade

080095a8 <ai_platform_network_post_init>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	b1f0      	cbz	r0, 80095ea <ai_platform_network_post_init+0x42>
 80095ac:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <ai_platform_network_post_init+0xf8>)
 80095ae:	6802      	ldr	r2, [r0, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	4604      	mov	r4, r0
 80095b4:	d119      	bne.n	80095ea <ai_platform_network_post_init+0x42>
 80095b6:	f7ff fb4b 	bl	8008c50 <_ai_platform_acquire_crc>
 80095ba:	4b3a      	ldr	r3, [pc, #232]	; (80096a4 <ai_platform_network_post_init+0xfc>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095c6:	d03b      	beq.n	8009640 <ai_platform_network_post_init+0x98>
 80095c8:	4a37      	ldr	r2, [pc, #220]	; (80096a8 <ai_platform_network_post_init+0x100>)
 80095ca:	2301      	movs	r3, #1
 80095cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1fb      	bne.n	80095d0 <ai_platform_network_post_init+0x28>
 80095d8:	4b34      	ldr	r3, [pc, #208]	; (80096ac <ai_platform_network_post_init+0x104>)
 80095da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095e2:	4b33      	ldr	r3, [pc, #204]	; (80096b0 <ai_platform_network_post_init+0x108>)
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d037      	beq.n	8009658 <ai_platform_network_post_init+0xb0>
 80095e8:	e7fe      	b.n	80095e8 <ai_platform_network_post_init+0x40>
 80095ea:	f7ff fb31 	bl	8008c50 <_ai_platform_acquire_crc>
 80095ee:	4b2d      	ldr	r3, [pc, #180]	; (80096a4 <ai_platform_network_post_init+0xfc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095fa:	d010      	beq.n	800961e <ai_platform_network_post_init+0x76>
 80095fc:	4a2a      	ldr	r2, [pc, #168]	; (80096a8 <ai_platform_network_post_init+0x100>)
 80095fe:	2301      	movs	r3, #1
 8009600:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009604:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1fb      	bne.n	8009604 <ai_platform_network_post_init+0x5c>
 800960c:	4b27      	ldr	r3, [pc, #156]	; (80096ac <ai_platform_network_post_init+0x104>)
 800960e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009612:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009616:	4b26      	ldr	r3, [pc, #152]	; (80096b0 <ai_platform_network_post_init+0x108>)
 8009618:	429a      	cmp	r2, r3
 800961a:	d00d      	beq.n	8009638 <ai_platform_network_post_init+0x90>
 800961c:	e7fe      	b.n	800961c <ai_platform_network_post_init+0x74>
 800961e:	4a25      	ldr	r2, [pc, #148]	; (80096b4 <ai_platform_network_post_init+0x10c>)
 8009620:	2301      	movs	r3, #1
 8009622:	6093      	str	r3, [r2, #8]
 8009624:	6893      	ldr	r3, [r2, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1fc      	bne.n	8009624 <ai_platform_network_post_init+0x7c>
 800962a:	4b20      	ldr	r3, [pc, #128]	; (80096ac <ai_platform_network_post_init+0x104>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <ai_platform_network_post_init+0x108>)
 8009632:	429a      	cmp	r2, r3
 8009634:	d000      	beq.n	8009638 <ai_platform_network_post_init+0x90>
 8009636:	e7fe      	b.n	8009636 <ai_platform_network_post_init+0x8e>
 8009638:	f7ff fb0c 	bl	8008c54 <_ai_platform_release_crc>
 800963c:	2000      	movs	r0, #0
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	4a1c      	ldr	r2, [pc, #112]	; (80096b4 <ai_platform_network_post_init+0x10c>)
 8009642:	2301      	movs	r3, #1
 8009644:	6093      	str	r3, [r2, #8]
 8009646:	6893      	ldr	r3, [r2, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1fc      	bne.n	8009646 <ai_platform_network_post_init+0x9e>
 800964c:	4b17      	ldr	r3, [pc, #92]	; (80096ac <ai_platform_network_post_init+0x104>)
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	6812      	ldr	r2, [r2, #0]
 8009652:	4b17      	ldr	r3, [pc, #92]	; (80096b0 <ai_platform_network_post_init+0x108>)
 8009654:	429a      	cmp	r2, r3
 8009656:	d11a      	bne.n	800968e <ai_platform_network_post_init+0xe6>
 8009658:	f7ff fafc 	bl	8008c54 <_ai_platform_release_crc>
 800965c:	68e3      	ldr	r3, [r4, #12]
 800965e:	f013 0502 	ands.w	r5, r3, #2
 8009662:	d015      	beq.n	8009690 <ai_platform_network_post_init+0xe8>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 ff61 	bl	800a52c <ai_layers_post_init_all>
 800966a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800966c:	b16b      	cbz	r3, 800968a <ai_platform_network_post_init+0xe2>
 800966e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009670:	e007      	b.n	8009682 <ai_platform_network_post_init+0xda>
 8009672:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009676:	4798      	blx	r3
 8009678:	692b      	ldr	r3, [r5, #16]
 800967a:	42ab      	cmp	r3, r5
 800967c:	d005      	beq.n	800968a <ai_platform_network_post_init+0xe2>
 800967e:	b123      	cbz	r3, 800968a <ai_platform_network_post_init+0xe2>
 8009680:	461d      	mov	r5, r3
 8009682:	4629      	mov	r1, r5
 8009684:	2000      	movs	r0, #0
 8009686:	2d00      	cmp	r5, #0
 8009688:	d1f3      	bne.n	8009672 <ai_platform_network_post_init+0xca>
 800968a:	2001      	movs	r0, #1
 800968c:	bd38      	pop	{r3, r4, r5, pc}
 800968e:	e7fe      	b.n	800968e <ai_platform_network_post_init+0xe6>
 8009690:	2210      	movs	r2, #16
 8009692:	2111      	movs	r1, #17
 8009694:	18a0      	adds	r0, r4, r2
 8009696:	f000 fa9d 	bl	8009bd4 <core_set_error>
 800969a:	4628      	mov	r0, r5
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	a1c00100 	.word	0xa1c00100
 80096a4:	e0042000 	.word	0xe0042000
 80096a8:	58024000 	.word	0x58024000
 80096ac:	f407a5c2 	.word	0xf407a5c2
 80096b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80096b4:	40023000 	.word	0x40023000

080096b8 <ai_platform_network_process>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	460e      	mov	r6, r1
 80096be:	b085      	sub	sp, #20
 80096c0:	4693      	mov	fp, r2
 80096c2:	4605      	mov	r5, r0
 80096c4:	b120      	cbz	r0, 80096d0 <ai_platform_network_process+0x18>
 80096c6:	4bb8      	ldr	r3, [pc, #736]	; (80099a8 <ai_platform_network_process+0x2f0>)
 80096c8:	6802      	ldr	r2, [r0, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	bf18      	it	ne
 80096ce:	2500      	movne	r5, #0
 80096d0:	f7ff fabe 	bl	8008c50 <_ai_platform_acquire_crc>
 80096d4:	4bb5      	ldr	r3, [pc, #724]	; (80099ac <ai_platform_network_process+0x2f4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e0:	d010      	beq.n	8009704 <ai_platform_network_process+0x4c>
 80096e2:	4ab3      	ldr	r2, [pc, #716]	; (80099b0 <ai_platform_network_process+0x2f8>)
 80096e4:	2301      	movs	r3, #1
 80096e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1fb      	bne.n	80096ea <ai_platform_network_process+0x32>
 80096f2:	4bb0      	ldr	r3, [pc, #704]	; (80099b4 <ai_platform_network_process+0x2fc>)
 80096f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80096f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80096fc:	4bae      	ldr	r3, [pc, #696]	; (80099b8 <ai_platform_network_process+0x300>)
 80096fe:	429a      	cmp	r2, r3
 8009700:	d00d      	beq.n	800971e <ai_platform_network_process+0x66>
 8009702:	e7fe      	b.n	8009702 <ai_platform_network_process+0x4a>
 8009704:	4aad      	ldr	r2, [pc, #692]	; (80099bc <ai_platform_network_process+0x304>)
 8009706:	2301      	movs	r3, #1
 8009708:	6093      	str	r3, [r2, #8]
 800970a:	6893      	ldr	r3, [r2, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1fc      	bne.n	800970a <ai_platform_network_process+0x52>
 8009710:	4ba8      	ldr	r3, [pc, #672]	; (80099b4 <ai_platform_network_process+0x2fc>)
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	4ba8      	ldr	r3, [pc, #672]	; (80099b8 <ai_platform_network_process+0x300>)
 8009718:	429a      	cmp	r2, r3
 800971a:	f040 812c 	bne.w	8009976 <ai_platform_network_process+0x2be>
 800971e:	f7ff fa99 	bl	8008c54 <_ai_platform_release_crc>
 8009722:	2d00      	cmp	r5, #0
 8009724:	f000 8154 	beq.w	80099d0 <ai_platform_network_process+0x318>
 8009728:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8124 	beq.w	8009978 <ai_platform_network_process+0x2c0>
 8009730:	68eb      	ldr	r3, [r5, #12]
 8009732:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	2700      	movs	r7, #0
 800973c:	2b03      	cmp	r3, #3
 800973e:	616f      	str	r7, [r5, #20]
 8009740:	f040 813e 	bne.w	80099c0 <ai_platform_network_process+0x308>
 8009744:	2e00      	cmp	r6, #0
 8009746:	f000 811d 	beq.w	8009984 <ai_platform_network_process+0x2cc>
 800974a:	f1ba 0f00 	cmp.w	sl, #0
 800974e:	f000 8119 	beq.w	8009984 <ai_platform_network_process+0x2cc>
 8009752:	f8ba 3000 	ldrh.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 8114 	beq.w	8009984 <ai_platform_network_process+0x2cc>
 800975c:	69b3      	ldr	r3, [r6, #24]
 800975e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009768:	f8da 3004 	ldr.w	r3, [sl, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d072      	beq.n	8009856 <ai_platform_network_process+0x19e>
 8009770:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009774:	2c00      	cmp	r4, #0
 8009776:	d06e      	beq.n	8009856 <ai_platform_network_process+0x19e>
 8009778:	f8da 3008 	ldr.w	r3, [sl, #8]
 800977c:	f8d3 9000 	ldr.w	r9, [r3]
 8009780:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8009784:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009788:	f000 81e0 	beq.w	8009b4c <ai_platform_network_process+0x494>
 800978c:	69a3      	ldr	r3, [r4, #24]
 800978e:	2101      	movs	r1, #1
 8009790:	4630      	mov	r0, r6
 8009792:	685d      	ldr	r5, [r3, #4]
 8009794:	f7ff fa0e 	bl	8008bb4 <ai_buffer_get_size>
 8009798:	4285      	cmp	r5, r0
 800979a:	f0c0 811b 	bcc.w	80099d4 <ai_platform_network_process+0x31c>
 800979e:	68e0      	ldr	r0, [r4, #12]
 80097a0:	69b1      	ldr	r1, [r6, #24]
 80097a2:	68c2      	ldr	r2, [r0, #12]
 80097a4:	68cb      	ldr	r3, [r1, #12]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	f040 8114 	bne.w	80099d4 <ai_platform_network_process+0x31c>
 80097ac:	6882      	ldr	r2, [r0, #8]
 80097ae:	688b      	ldr	r3, [r1, #8]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	f040 810f 	bne.w	80099d4 <ai_platform_network_process+0x31c>
 80097b6:	6842      	ldr	r2, [r0, #4]
 80097b8:	684b      	ldr	r3, [r1, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	f040 810a 	bne.w	80099d4 <ai_platform_network_process+0x31c>
 80097c0:	69a3      	ldr	r3, [r4, #24]
 80097c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097c6:	f001 f8e5 	bl	800a994 <ai_array_get_data_byte_size>
 80097ca:	4605      	mov	r5, r0
 80097cc:	4620      	mov	r0, r4
 80097ce:	f001 f835 	bl	800a83c <get_tensor_byte_size>
 80097d2:	4285      	cmp	r5, r0
 80097d4:	f0c0 80fe 	bcc.w	80099d4 <ai_platform_network_process+0x31c>
 80097d8:	69a3      	ldr	r3, [r4, #24]
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	f001 f846 	bl	800a86c <ai_array_to_buffer_fmt>
 80097e0:	6833      	ldr	r3, [r6, #0]
 80097e2:	4058      	eors	r0, r3
 80097e4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80097e8:	f040 81bb 	bne.w	8009b62 <ai_platform_network_process+0x4aa>
 80097ec:	6873      	ldr	r3, [r6, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 81ae 	beq.w	8009b50 <ai_platform_network_process+0x498>
 80097f4:	69b3      	ldr	r3, [r6, #24]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 819e 	beq.w	8009b3a <ai_platform_network_process+0x482>
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	bf38      	it	cc
 8009804:	461a      	movcc	r2, r3
 8009806:	4620      	mov	r0, r4
 8009808:	9201      	str	r2, [sp, #4]
 800980a:	f001 f817 	bl	800a83c <get_tensor_byte_size>
 800980e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009812:	69b3      	ldr	r3, [r6, #24]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	fb00 f303 	mul.w	r3, r0, r3
 800981a:	f8c8 300c 	str.w	r3, [r8, #12]
 800981e:	6871      	ldr	r1, [r6, #4]
 8009820:	f8c8 1004 	str.w	r1, [r8, #4]
 8009824:	440b      	add	r3, r1
 8009826:	f849 300b 	str.w	r3, [r9, fp]
 800982a:	69a0      	ldr	r0, [r4, #24]
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	009a      	lsls	r2, r3, #2
 8009830:	f107 0701 	add.w	r7, r7, #1
 8009834:	f106 061c 	add.w	r6, r6, #28
 8009838:	f100 80af 	bmi.w	800999a <ai_platform_network_process+0x2e2>
 800983c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	4419      	add	r1, r3
 8009844:	6081      	str	r1, [r0, #8]
 8009846:	69a3      	ldr	r3, [r4, #24]
 8009848:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009852:	42bb      	cmp	r3, r7
 8009854:	d888      	bhi.n	8009768 <ai_platform_network_process+0xb0>
 8009856:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800985a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800985c:	f1bb 0f00 	cmp.w	fp, #0
 8009860:	f000 8188 	beq.w	8009b74 <ai_platform_network_process+0x4bc>
 8009864:	2a01      	cmp	r2, #1
 8009866:	f240 8160 	bls.w	8009b2a <ai_platform_network_process+0x472>
 800986a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800986e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 8159 	beq.w	8009b2a <ai_platform_network_process+0x472>
 8009878:	465e      	mov	r6, fp
 800987a:	2700      	movs	r7, #0
 800987c:	462c      	mov	r4, r5
 800987e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 80b4 	beq.w	80099f0 <ai_platform_network_process+0x338>
 8009888:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800988c:	2d00      	cmp	r5, #0
 800988e:	f000 80af 	beq.w	80099f0 <ai_platform_network_process+0x338>
 8009892:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009896:	f8d3 8000 	ldr.w	r8, [r3]
 800989a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800989e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80098a2:	f000 8173 	beq.w	8009b8c <ai_platform_network_process+0x4d4>
 80098a6:	69ab      	ldr	r3, [r5, #24]
 80098a8:	2101      	movs	r1, #1
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff f980 	bl	8008bb4 <ai_buffer_get_size>
 80098b4:	9b02      	ldr	r3, [sp, #8]
 80098b6:	4283      	cmp	r3, r0
 80098b8:	f0c0 8136 	bcc.w	8009b28 <ai_platform_network_process+0x470>
 80098bc:	68e8      	ldr	r0, [r5, #12]
 80098be:	69b1      	ldr	r1, [r6, #24]
 80098c0:	68c2      	ldr	r2, [r0, #12]
 80098c2:	68cb      	ldr	r3, [r1, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	f040 812f 	bne.w	8009b28 <ai_platform_network_process+0x470>
 80098ca:	6882      	ldr	r2, [r0, #8]
 80098cc:	688b      	ldr	r3, [r1, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	f040 812a 	bne.w	8009b28 <ai_platform_network_process+0x470>
 80098d4:	6842      	ldr	r2, [r0, #4]
 80098d6:	684b      	ldr	r3, [r1, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	f040 8125 	bne.w	8009b28 <ai_platform_network_process+0x470>
 80098de:	69ab      	ldr	r3, [r5, #24]
 80098e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098e4:	f001 f856 	bl	800a994 <ai_array_get_data_byte_size>
 80098e8:	9002      	str	r0, [sp, #8]
 80098ea:	4628      	mov	r0, r5
 80098ec:	f000 ffa6 	bl	800a83c <get_tensor_byte_size>
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	4283      	cmp	r3, r0
 80098f4:	f0c0 8118 	bcc.w	8009b28 <ai_platform_network_process+0x470>
 80098f8:	69ab      	ldr	r3, [r5, #24]
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	f000 ffb6 	bl	800a86c <ai_array_to_buffer_fmt>
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	4058      	eors	r0, r3
 8009904:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009908:	f040 8138 	bne.w	8009b7c <ai_platform_network_process+0x4c4>
 800990c:	6873      	ldr	r3, [r6, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 814f 	beq.w	8009bb2 <ai_platform_network_process+0x4fa>
 8009914:	69b3      	ldr	r3, [r6, #24]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8141 	beq.w	8009ba0 <ai_platform_network_process+0x4e8>
 800991e:	9a01      	ldr	r2, [sp, #4]
 8009920:	429a      	cmp	r2, r3
 8009922:	bf38      	it	cc
 8009924:	461a      	movcc	r2, r3
 8009926:	4628      	mov	r0, r5
 8009928:	9201      	str	r2, [sp, #4]
 800992a:	f000 ff87 	bl	800a83c <get_tensor_byte_size>
 800992e:	f8ca 0008 	str.w	r0, [sl, #8]
 8009932:	69b3      	ldr	r3, [r6, #24]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	fb00 f303 	mul.w	r3, r0, r3
 800993a:	f8ca 300c 	str.w	r3, [sl, #12]
 800993e:	6871      	ldr	r1, [r6, #4]
 8009940:	f8ca 1004 	str.w	r1, [sl, #4]
 8009944:	440b      	add	r3, r1
 8009946:	f848 300b 	str.w	r3, [r8, fp]
 800994a:	69a8      	ldr	r0, [r5, #24]
 800994c:	6803      	ldr	r3, [r0, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	f107 0701 	add.w	r7, r7, #1
 8009954:	f106 061c 	add.w	r6, r6, #28
 8009958:	d445      	bmi.n	80099e6 <ai_platform_network_process+0x32e>
 800995a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800995e:	1a9b      	subs	r3, r3, r2
 8009960:	4419      	add	r1, r3
 8009962:	6081      	str	r1, [r0, #8]
 8009964:	69ab      	ldr	r3, [r5, #24]
 8009966:	f8da 2004 	ldr.w	r2, [sl, #4]
 800996a:	60da      	str	r2, [r3, #12]
 800996c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009970:	429f      	cmp	r7, r3
 8009972:	d384      	bcc.n	800987e <ai_platform_network_process+0x1c6>
 8009974:	e03c      	b.n	80099f0 <ai_platform_network_process+0x338>
 8009976:	e7fe      	b.n	8009976 <ai_platform_network_process+0x2be>
 8009978:	68ea      	ldr	r2, [r5, #12]
 800997a:	616b      	str	r3, [r5, #20]
 800997c:	f002 0203 	and.w	r2, r2, #3
 8009980:	2a03      	cmp	r2, #3
 8009982:	d11d      	bne.n	80099c0 <ai_platform_network_process+0x308>
 8009984:	2217      	movs	r2, #23
 8009986:	2112      	movs	r1, #18
 8009988:	f105 0010 	add.w	r0, r5, #16
 800998c:	f000 f922 	bl	8009bd4 <core_set_error>
 8009990:	2400      	movs	r4, #0
 8009992:	4620      	mov	r0, r4
 8009994:	b005      	add	sp, #20
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	f8ba 3000 	ldrh.w	r3, [sl]
 800999e:	429f      	cmp	r7, r3
 80099a0:	f4ff aee2 	bcc.w	8009768 <ai_platform_network_process+0xb0>
 80099a4:	e757      	b.n	8009856 <ai_platform_network_process+0x19e>
 80099a6:	bf00      	nop
 80099a8:	a1c00100 	.word	0xa1c00100
 80099ac:	e0042000 	.word	0xe0042000
 80099b0:	58024000 	.word	0x58024000
 80099b4:	f407a5c2 	.word	0xf407a5c2
 80099b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80099bc:	40023000 	.word	0x40023000
 80099c0:	2230      	movs	r2, #48	; 0x30
 80099c2:	2111      	movs	r1, #17
 80099c4:	f105 0010 	add.w	r0, r5, #16
 80099c8:	f000 f904 	bl	8009bd4 <core_set_error>
 80099cc:	2400      	movs	r4, #0
 80099ce:	e7e0      	b.n	8009992 <ai_platform_network_process+0x2da>
 80099d0:	462c      	mov	r4, r5
 80099d2:	e7de      	b.n	8009992 <ai_platform_network_process+0x2da>
 80099d4:	9d02      	ldr	r5, [sp, #8]
 80099d6:	2218      	movs	r2, #24
 80099d8:	2112      	movs	r1, #18
 80099da:	f105 0010 	add.w	r0, r5, #16
 80099de:	f000 f8f9 	bl	8009bd4 <core_set_error>
 80099e2:	2400      	movs	r4, #0
 80099e4:	e7d5      	b.n	8009992 <ai_platform_network_process+0x2da>
 80099e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80099ea:	429f      	cmp	r7, r3
 80099ec:	f4ff af47 	bcc.w	800987e <ai_platform_network_process+0x1c6>
 80099f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80099f4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80099f6:	82a3      	strh	r3, [r4, #20]
 80099f8:	4625      	mov	r5, r4
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	f040 808e 	bne.w	8009b1c <ai_platform_network_process+0x464>
 8009a00:	4616      	mov	r6, r2
 8009a02:	4617      	mov	r7, r2
 8009a04:	8aec      	ldrh	r4, [r5, #22]
 8009a06:	429c      	cmp	r4, r3
 8009a08:	bf38      	it	cc
 8009a0a:	46ab      	movcc	fp, r5
 8009a0c:	d2c1      	bcs.n	8009992 <ai_platform_network_process+0x2da>
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	d030      	beq.n	8009a74 <ai_platform_network_process+0x3bc>
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	e014      	b.n	8009a42 <ai_platform_network_process+0x38a>
 8009a18:	6882      	ldr	r2, [r0, #8]
 8009a1a:	68c5      	ldr	r5, [r0, #12]
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	1b52      	subs	r2, r2, r5
 8009a20:	4413      	add	r3, r2
 8009a22:	6083      	str	r3, [r0, #8]
 8009a24:	698b      	ldr	r3, [r1, #24]
 8009a26:	6862      	ldr	r2, [r4, #4]
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009a2e:	f859 200a 	ldr.w	r2, [r9, sl]
 8009a32:	440b      	add	r3, r1
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bf24      	itt	cs
 8009a38:	68e3      	ldrcs	r3, [r4, #12]
 8009a3a:	1ad3      	subcs	r3, r2, r3
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	f108 0801 	add.w	r8, r8, #1
 8009a42:	8833      	ldrh	r3, [r6, #0]
 8009a44:	4543      	cmp	r3, r8
 8009a46:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009a4a:	d913      	bls.n	8009a74 <ai_platform_network_process+0x3bc>
 8009a4c:	6873      	ldr	r3, [r6, #4]
 8009a4e:	b18b      	cbz	r3, 8009a74 <ai_platform_network_process+0x3bc>
 8009a50:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009a54:	b171      	cbz	r1, 8009a74 <ai_platform_network_process+0x3bc>
 8009a56:	6988      	ldr	r0, [r1, #24]
 8009a58:	68b2      	ldr	r2, [r6, #8]
 8009a5a:	6803      	ldr	r3, [r0, #0]
 8009a5c:	f8d2 9000 	ldr.w	r9, [r2]
 8009a60:	009d      	lsls	r5, r3, #2
 8009a62:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009a66:	d5d7      	bpl.n	8009a18 <ai_platform_network_process+0x360>
 8009a68:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8009a6c:	6880      	ldr	r0, [r0, #8]
 8009a6e:	f001 fb3d 	bl	800b0ec <memcpy>
 8009a72:	e7da      	b.n	8009a2a <ai_platform_network_process+0x372>
 8009a74:	4658      	mov	r0, fp
 8009a76:	f000 fd6d 	bl	800a554 <ai_layers_forward_all>
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	d03f      	beq.n	8009afe <ai_platform_network_process+0x446>
 8009a7e:	2400      	movs	r4, #0
 8009a80:	e016      	b.n	8009ab0 <ai_platform_network_process+0x3f8>
 8009a82:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009a86:	f859 100a 	ldr.w	r1, [r9, sl]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf24      	itt	cs
 8009a90:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009a94:	1acb      	subcs	r3, r1, r3
 8009a96:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a9a:	6981      	ldr	r1, [r0, #24]
 8009a9c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009aa0:	1b52      	subs	r2, r2, r5
 8009aa2:	4413      	add	r3, r2
 8009aa4:	608b      	str	r3, [r1, #8]
 8009aa6:	6983      	ldr	r3, [r0, #24]
 8009aa8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	3401      	adds	r4, #1
 8009ab0:	883b      	ldrh	r3, [r7, #0]
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	d923      	bls.n	8009afe <ai_platform_network_process+0x446>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	b30b      	cbz	r3, 8009afe <ai_platform_network_process+0x446>
 8009aba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009abe:	b1f0      	cbz	r0, 8009afe <ai_platform_network_process+0x446>
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	6983      	ldr	r3, [r0, #24]
 8009ac4:	f8d2 9000 	ldr.w	r9, [r2]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009ad0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009ad4:	d5d5      	bpl.n	8009a82 <ai_platform_network_process+0x3ca>
 8009ad6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009ada:	6899      	ldr	r1, [r3, #8]
 8009adc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ae0:	f001 fb04 	bl	800b0ec <memcpy>
 8009ae4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009ae8:	f859 200a 	ldr.w	r2, [r9, sl]
 8009aec:	440b      	add	r3, r1
 8009aee:	4293      	cmp	r3, r2
 8009af0:	bf24      	itt	cs
 8009af2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009af6:	1ad3      	subcs	r3, r2, r3
 8009af8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009afc:	e7d7      	b.n	8009aae <ai_platform_network_process+0x3f6>
 8009afe:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009b02:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009b06:	3401      	adds	r4, #1
 8009b08:	b2a4      	uxth	r4, r4
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009b10:	f63f af7d 	bhi.w	8009a0e <ai_platform_network_process+0x356>
 8009b14:	4620      	mov	r0, r4
 8009b16:	b005      	add	sp, #20
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	2a01      	cmp	r2, #1
 8009b1e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009b20:	d03c      	beq.n	8009b9c <ai_platform_network_process+0x4e4>
 8009b22:	f106 070c 	add.w	r7, r6, #12
 8009b26:	e76d      	b.n	8009a04 <ai_platform_network_process+0x34c>
 8009b28:	4625      	mov	r5, r4
 8009b2a:	2218      	movs	r2, #24
 8009b2c:	2113      	movs	r1, #19
 8009b2e:	f105 0010 	add.w	r0, r5, #16
 8009b32:	f000 f84f 	bl	8009bd4 <core_set_error>
 8009b36:	2400      	movs	r4, #0
 8009b38:	e72b      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b3a:	9d02      	ldr	r5, [sp, #8]
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	2221      	movs	r2, #33	; 0x21
 8009b40:	2112      	movs	r1, #18
 8009b42:	f105 0010 	add.w	r0, r5, #16
 8009b46:	f000 f845 	bl	8009bd4 <core_set_error>
 8009b4a:	e722      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b4c:	9d02      	ldr	r5, [sp, #8]
 8009b4e:	e719      	b.n	8009984 <ai_platform_network_process+0x2cc>
 8009b50:	9d02      	ldr	r5, [sp, #8]
 8009b52:	4604      	mov	r4, r0
 8009b54:	2217      	movs	r2, #23
 8009b56:	2112      	movs	r1, #18
 8009b58:	f105 0010 	add.w	r0, r5, #16
 8009b5c:	f000 f83a 	bl	8009bd4 <core_set_error>
 8009b60:	e717      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b62:	9d02      	ldr	r5, [sp, #8]
 8009b64:	2219      	movs	r2, #25
 8009b66:	2112      	movs	r1, #18
 8009b68:	f105 0010 	add.w	r0, r5, #16
 8009b6c:	f000 f832 	bl	8009bd4 <core_set_error>
 8009b70:	2400      	movs	r4, #0
 8009b72:	e70e      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009b78:	82ab      	strh	r3, [r5, #20]
 8009b7a:	e73e      	b.n	80099fa <ai_platform_network_process+0x342>
 8009b7c:	f104 0010 	add.w	r0, r4, #16
 8009b80:	2219      	movs	r2, #25
 8009b82:	2113      	movs	r1, #19
 8009b84:	f000 f826 	bl	8009bd4 <core_set_error>
 8009b88:	2400      	movs	r4, #0
 8009b8a:	e702      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b8c:	f104 0010 	add.w	r0, r4, #16
 8009b90:	2217      	movs	r2, #23
 8009b92:	2113      	movs	r1, #19
 8009b94:	f000 f81e 	bl	8009bd4 <core_set_error>
 8009b98:	4654      	mov	r4, sl
 8009b9a:	e6fa      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009b9c:	2700      	movs	r7, #0
 8009b9e:	e731      	b.n	8009a04 <ai_platform_network_process+0x34c>
 8009ba0:	4625      	mov	r5, r4
 8009ba2:	2221      	movs	r2, #33	; 0x21
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	2113      	movs	r1, #19
 8009ba8:	f105 0010 	add.w	r0, r5, #16
 8009bac:	f000 f812 	bl	8009bd4 <core_set_error>
 8009bb0:	e6ef      	b.n	8009992 <ai_platform_network_process+0x2da>
 8009bb2:	4625      	mov	r5, r4
 8009bb4:	2217      	movs	r2, #23
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	2113      	movs	r1, #19
 8009bba:	f105 0010 	add.w	r0, r5, #16
 8009bbe:	f000 f809 	bl	8009bd4 <core_set_error>
 8009bc2:	e6e6      	b.n	8009992 <ai_platform_network_process+0x2da>

08009bc4 <core_init>:
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	4770      	bx	lr

08009bc8 <core_get_error>:
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2200      	movs	r2, #0
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop

08009bd4 <core_set_error>:
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	7800      	ldrb	r0, [r0, #0]
 8009bd8:	b108      	cbz	r0, 8009bde <core_set_error+0xa>
 8009bda:	2000      	movs	r0, #0
 8009bdc:	4770      	bx	lr
 8009bde:	7019      	strb	r1, [r3, #0]
 8009be0:	6819      	ldr	r1, [r3, #0]
 8009be2:	f362 211f 	bfi	r1, r2, #8, #24
 8009be6:	2001      	movs	r0, #1
 8009be8:	6019      	str	r1, [r3, #0]
 8009bea:	4770      	bx	lr

08009bec <forward_dense>:
 8009bec:	6983      	ldr	r3, [r0, #24]
 8009bee:	881a      	ldrh	r2, [r3, #0]
 8009bf0:	2a00      	cmp	r2, #0
 8009bf2:	f000 8181 	beq.w	8009ef8 <forward_dense+0x30c>
 8009bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	ed2d 8b02 	vpush	{d8}
 8009bfe:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009c02:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009c06:	b095      	sub	sp, #84	; 0x54
 8009c08:	b105      	cbz	r5, 8009c0c <forward_dense+0x20>
 8009c0a:	682d      	ldr	r5, [r5, #0]
 8009c0c:	2a01      	cmp	r2, #1
 8009c0e:	f000 828f 	beq.w	800a130 <forward_dense+0x544>
 8009c12:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009c16:	b106      	cbz	r6, 8009c1a <forward_dense+0x2e>
 8009c18:	6836      	ldr	r6, [r6, #0]
 8009c1a:	2a02      	cmp	r2, #2
 8009c1c:	f000 816e 	beq.w	8009efc <forward_dense+0x310>
 8009c20:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8274 	beq.w	800a114 <forward_dense+0x528>
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8009c32:	6809      	ldr	r1, [r1, #0]
 8009c34:	910d      	str	r1, [sp, #52]	; 0x34
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	f240 826e 	bls.w	800a118 <forward_dense+0x52c>
 8009c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c42:	460b      	mov	r3, r1
 8009c44:	68e8      	ldr	r0, [r5, #12]
 8009c46:	68f7      	ldr	r7, [r6, #12]
 8009c48:	6840      	ldr	r0, [r0, #4]
 8009c4a:	6999      	ldr	r1, [r3, #24]
 8009c4c:	9013      	str	r0, [sp, #76]	; 0x4c
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	680b      	ldr	r3, [r1, #0]
 8009c52:	9012      	str	r0, [sp, #72]	; 0x48
 8009c54:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8009c58:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009c5c:	fb00 f404 	mul.w	r4, r0, r4
 8009c60:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8009c64:	fa4e f000 	asr.w	r0, lr, r0
 8009c68:	2a03      	cmp	r2, #3
 8009c6a:	9010      	str	r0, [sp, #64]	; 0x40
 8009c6c:	f000 825d 	beq.w	800a12a <forward_dense+0x53e>
 8009c70:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009c74:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	f000 8246 	beq.w	800a10a <forward_dense+0x51e>
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	f000 8242 	beq.w	800a10a <forward_dense+0x51e>
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009c8c:	f000 822c 	beq.w	800a0e8 <forward_dense+0x4fc>
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	f000 8229 	beq.w	800a0e8 <forward_dense+0x4fc>
 8009c96:	f04f 0b00 	mov.w	fp, #0
 8009c9a:	69b2      	ldr	r2, [r6, #24]
 8009c9c:	69ab      	ldr	r3, [r5, #24]
 8009c9e:	6891      	ldr	r1, [r2, #8]
 8009ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	6952      	ldr	r2, [r2, #20]
 8009ca6:	9106      	str	r1, [sp, #24]
 8009ca8:	fb07 f404 	mul.w	r4, r7, r4
 8009cac:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cb2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009cb6:	4281      	cmp	r1, r0
 8009cb8:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8009cbc:	900e      	str	r0, [sp, #56]	; 0x38
 8009cbe:	940c      	str	r4, [sp, #48]	; 0x30
 8009cc0:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8009cc4:	f080 8113 	bcs.w	8009eee <forward_dense+0x302>
 8009cc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009cca:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8009f18 <forward_dense+0x32c>
 8009cce:	f021 0201 	bic.w	r2, r1, #1
 8009cd2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009cd6:	9204      	str	r2, [sp, #16]
 8009cd8:	f001 0201 	and.w	r2, r1, #1
 8009cdc:	08c8      	lsrs	r0, r1, #3
 8009cde:	9208      	str	r2, [sp, #32]
 8009ce0:	008a      	lsls	r2, r1, #2
 8009ce2:	f001 0a07 	and.w	sl, r1, #7
 8009ce6:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ce8:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8009cec:	3320      	adds	r3, #32
 8009cee:	465c      	mov	r4, fp
 8009cf0:	9007      	str	r0, [sp, #28]
 8009cf2:	46cb      	mov	fp, r9
 8009cf4:	9205      	str	r2, [sp, #20]
 8009cf6:	9302      	str	r3, [sp, #8]
 8009cf8:	46c1      	mov	r9, r8
 8009cfa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	9b02      	ldr	r3, [sp, #8]
 8009d06:	3b20      	subs	r3, #32
 8009d08:	930a      	str	r3, [sp, #40]	; 0x28
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	b10b      	cbz	r3, 8009d12 <forward_dense+0x126>
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2c00      	cmp	r4, #0
 8009d14:	f000 81da 	beq.w	800a0cc <forward_dense+0x4e0>
 8009d18:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d1a:	2904      	cmp	r1, #4
 8009d1c:	9906      	ldr	r1, [sp, #24]
 8009d1e:	f000 80fd 	beq.w	8009f1c <forward_dense+0x330>
 8009d22:	4549      	cmp	r1, r9
 8009d24:	f080 80d2 	bcs.w	8009ecc <forward_dense+0x2e0>
 8009d28:	460f      	mov	r7, r1
 8009d2a:	9907      	ldr	r1, [sp, #28]
 8009d2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d30:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009d34:	1c4e      	adds	r6, r1, #1
 8009d36:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009d3a:	4694      	mov	ip, r2
 8009d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d3e:	468e      	mov	lr, r1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 80de 	beq.w	8009f02 <forward_dense+0x316>
 8009d46:	ecf3 2a01 	vldmia	r3!, {s5}
 8009d4a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009f18 <forward_dense+0x32c>
 8009d4e:	f1be 0f00 	cmp.w	lr, #0
 8009d52:	f000 80de 	beq.w	8009f12 <forward_dense+0x326>
 8009d56:	f10c 0108 	add.w	r1, ip, #8
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009d60:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8009d64:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8009d68:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8009d6c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8009d70:	ed10 5a04 	vldr	s10, [r0, #-16]
 8009d74:	ed50 5a03 	vldr	s11, [r0, #-12]
 8009d78:	ed10 6a02 	vldr	s12, [r0, #-8]
 8009d7c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8009d80:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d84:	edd5 7a00 	vldr	s15, [r5]
 8009d88:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8009d8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d90:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009d94:	ed95 3a00 	vldr	s6, [r5]
 8009d98:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8009d9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009da0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009da4:	3108      	adds	r1, #8
 8009da6:	edd5 3a00 	vldr	s7, [r5]
 8009daa:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009dae:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009db2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009db6:	3020      	adds	r0, #32
 8009db8:	ed95 4a00 	vldr	s8, [r5]
 8009dbc:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009dc0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009dc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dc8:	edd5 4a00 	vldr	s9, [r5]
 8009dcc:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009dd0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009dd4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dd8:	ed95 5a00 	vldr	s10, [r5]
 8009ddc:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009de0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009de4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009de8:	edd5 5a00 	vldr	s11, [r5]
 8009dec:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8009df0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009df4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009df8:	428e      	cmp	r6, r1
 8009dfa:	ed95 6a00 	vldr	s12, [r5]
 8009dfe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e06:	d1a9      	bne.n	8009d5c <forward_dense+0x170>
 8009e08:	f1a6 0108 	sub.w	r1, r6, #8
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	d04a      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e12:	780d      	ldrb	r5, [r1, #0]
 8009e14:	edd0 6a00 	vldr	s13, [r0]
 8009e18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e1c:	edd5 7a00 	vldr	s15, [r5]
 8009e20:	2a01      	cmp	r2, #1
 8009e22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e26:	d03f      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e28:	784d      	ldrb	r5, [r1, #1]
 8009e2a:	edd0 6a01 	vldr	s13, [r0, #4]
 8009e2e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e32:	edd5 7a00 	vldr	s15, [r5]
 8009e36:	2a02      	cmp	r2, #2
 8009e38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e3c:	d034      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e3e:	788d      	ldrb	r5, [r1, #2]
 8009e40:	edd0 6a02 	vldr	s13, [r0, #8]
 8009e44:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e48:	edd5 7a00 	vldr	s15, [r5]
 8009e4c:	2a03      	cmp	r2, #3
 8009e4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e52:	d029      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e54:	78cd      	ldrb	r5, [r1, #3]
 8009e56:	edd0 6a03 	vldr	s13, [r0, #12]
 8009e5a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e5e:	edd5 7a00 	vldr	s15, [r5]
 8009e62:	2a04      	cmp	r2, #4
 8009e64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e68:	d01e      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e6a:	790d      	ldrb	r5, [r1, #4]
 8009e6c:	edd0 6a04 	vldr	s13, [r0, #16]
 8009e70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e74:	edd5 7a00 	vldr	s15, [r5]
 8009e78:	2a05      	cmp	r2, #5
 8009e7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e7e:	d013      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e80:	794d      	ldrb	r5, [r1, #5]
 8009e82:	edd0 6a05 	vldr	s13, [r0, #20]
 8009e86:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009e8a:	edd5 7a00 	vldr	s15, [r5]
 8009e8e:	2a06      	cmp	r2, #6
 8009e90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e94:	d008      	beq.n	8009ea8 <forward_dense+0x2bc>
 8009e96:	7989      	ldrb	r1, [r1, #6]
 8009e98:	edd0 7a06 	vldr	s15, [r0, #24]
 8009e9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009ea0:	edd1 6a00 	vldr	s13, [r1]
 8009ea4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ea8:	44dc      	add	ip, fp
 8009eaa:	445e      	add	r6, fp
 8009eac:	ee32 7a87 	vadd.f32	s14, s5, s14
 8009eb0:	eca7 7a01 	vstmia	r7!, {s14}
 8009eb4:	454f      	cmp	r7, r9
 8009eb6:	f4ff af43 	bcc.w	8009d40 <forward_dense+0x154>
 8009eba:	9a06      	ldr	r2, [sp, #24]
 8009ebc:	eba9 0302 	sub.w	r3, r9, r2
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	18d3      	adds	r3, r2, r3
 8009eca:	9306      	str	r3, [sp, #24]
 8009ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ece:	9a05      	ldr	r2, [sp, #20]
 8009ed0:	4499      	add	r9, r3
 8009ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed4:	441a      	add	r2, r3
 8009ed6:	9205      	str	r2, [sp, #20]
 8009ed8:	9a02      	ldr	r2, [sp, #8]
 8009eda:	441a      	add	r2, r3
 8009edc:	9202      	str	r2, [sp, #8]
 8009ede:	9a04      	ldr	r2, [sp, #16]
 8009ee0:	441a      	add	r2, r3
 8009ee2:	9204      	str	r2, [sp, #16]
 8009ee4:	9b06      	ldr	r3, [sp, #24]
 8009ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	f4ff af08 	bcc.w	8009cfe <forward_dense+0x112>
 8009eee:	b015      	add	sp, #84	; 0x54
 8009ef0:	ecbd 8b02 	vpop	{d8}
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	6853      	ldr	r3, [r2, #4]
 8009efa:	deff      	udf	#255	; 0xff
 8009efc:	2300      	movs	r3, #0
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	deff      	udf	#255	; 0xff
 8009f02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009f18 <forward_dense+0x32c>
 8009f06:	eef0 2a48 	vmov.f32	s5, s16
 8009f0a:	f1be 0f00 	cmp.w	lr, #0
 8009f0e:	f47f af22 	bne.w	8009d56 <forward_dense+0x16a>
 8009f12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f14:	4661      	mov	r1, ip
 8009f16:	e77a      	b.n	8009e0e <forward_dense+0x222>
 8009f18:	00000000 	.word	0x00000000
 8009f1c:	4549      	cmp	r1, r9
 8009f1e:	d2d5      	bcs.n	8009ecc <forward_dense+0x2e0>
 8009f20:	9807      	ldr	r0, [sp, #28]
 8009f22:	9103      	str	r1, [sp, #12]
 8009f24:	9904      	ldr	r1, [sp, #16]
 8009f26:	f100 0c01 	add.w	ip, r0, #1
 8009f2a:	3901      	subs	r1, #1
 8009f2c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009f30:	9109      	str	r1, [sp, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80b2 	beq.w	800a09c <forward_dense+0x4b0>
 8009f38:	9907      	ldr	r1, [sp, #28]
 8009f3a:	ecf3 2a01 	vldmia	r3!, {s5}
 8009f3e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8009f18 <forward_dense+0x32c>
 8009f42:	2900      	cmp	r1, #0
 8009f44:	f000 80b2 	beq.w	800a0ac <forward_dense+0x4c0>
 8009f48:	9902      	ldr	r1, [sp, #8]
 8009f4a:	1d10      	adds	r0, r2, #4
 8009f4c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8009f50:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8009f54:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8009f58:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8009f5c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8009f60:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8009f64:	ed11 5a04 	vldr	s10, [r1, #-16]
 8009f68:	ed51 5a03 	vldr	s11, [r1, #-12]
 8009f6c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8009f70:	ed51 6a01 	vldr	s13, [r1, #-4]
 8009f74:	f006 070f 	and.w	r7, r6, #15
 8009f78:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009f7c:	edd7 7a00 	vldr	s15, [r7]
 8009f80:	0936      	lsrs	r6, r6, #4
 8009f82:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009f86:	ed96 3a00 	vldr	s6, [r6]
 8009f8a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8009f8e:	092e      	lsrs	r6, r5, #4
 8009f90:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009f94:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009f98:	f005 050f 	and.w	r5, r5, #15
 8009f9c:	edd6 3a00 	vldr	s7, [r6]
 8009fa0:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8009fa4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009fa8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fac:	0937      	lsrs	r7, r6, #4
 8009fae:	ed95 4a00 	vldr	s8, [r5]
 8009fb2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8009fb6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fba:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009fbe:	f006 060f 	and.w	r6, r6, #15
 8009fc2:	edd7 4a00 	vldr	s9, [r7]
 8009fc6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009fca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009fce:	3004      	adds	r0, #4
 8009fd0:	ed96 5a00 	vldr	s10, [r6]
 8009fd4:	092e      	lsrs	r6, r5, #4
 8009fd6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009fda:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009fde:	f005 050f 	and.w	r5, r5, #15
 8009fe2:	edd6 5a00 	vldr	s11, [r6]
 8009fe6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009fea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009fee:	4584      	cmp	ip, r0
 8009ff0:	ed95 6a00 	vldr	s12, [r5]
 8009ff4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009ff8:	f101 0120 	add.w	r1, r1, #32
 8009ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a000:	d1a4      	bne.n	8009f4c <forward_dense+0x360>
 800a002:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a006:	f1ac 0804 	sub.w	r8, ip, #4
 800a00a:	9904      	ldr	r1, [sp, #16]
 800a00c:	458e      	cmp	lr, r1
 800a00e:	d22a      	bcs.n	800a066 <forward_dense+0x47a>
 800a010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a012:	eba1 070e 	sub.w	r7, r1, lr
 800a016:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800a01a:	f10e 0008 	add.w	r0, lr, #8
 800a01e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800a022:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a026:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a02a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a02e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a032:	f001 050f 	and.w	r5, r1, #15
 800a036:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a03a:	edd5 7a00 	vldr	s15, [r5]
 800a03e:	0909      	lsrs	r1, r1, #4
 800a040:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a044:	ed91 6a00 	vldr	s12, [r1]
 800a048:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a04c:	42b7      	cmp	r7, r6
 800a04e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a052:	f100 0008 	add.w	r0, r0, #8
 800a056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a05a:	d1e4      	bne.n	800a026 <forward_dense+0x43a>
 800a05c:	f10a 0a01 	add.w	sl, sl, #1
 800a060:	44d0      	add	r8, sl
 800a062:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a066:	9908      	ldr	r1, [sp, #32]
 800a068:	b321      	cbz	r1, 800a0b4 <forward_dense+0x4c8>
 800a06a:	f898 1000 	ldrb.w	r1, [r8]
 800a06e:	edde 7a00 	vldr	s15, [lr]
 800a072:	0909      	lsrs	r1, r1, #4
 800a074:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a078:	edd1 6a00 	vldr	s13, [r1]
 800a07c:	9903      	ldr	r1, [sp, #12]
 800a07e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a082:	445a      	add	r2, fp
 800a084:	44dc      	add	ip, fp
 800a086:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a08a:	ece1 2a01 	vstmia	r1!, {s5}
 800a08e:	4589      	cmp	r9, r1
 800a090:	9103      	str	r1, [sp, #12]
 800a092:	f67f af12 	bls.w	8009eba <forward_dense+0x2ce>
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f af4e 	bne.w	8009f38 <forward_dense+0x34c>
 800a09c:	9907      	ldr	r1, [sp, #28]
 800a09e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8009f18 <forward_dense+0x32c>
 800a0a2:	eef0 2a48 	vmov.f32	s5, s16
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	f47f af4e 	bne.w	8009f48 <forward_dense+0x35c>
 800a0ac:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800a0b0:	4690      	mov	r8, r2
 800a0b2:	e7aa      	b.n	800a00a <forward_dense+0x41e>
 800a0b4:	9903      	ldr	r1, [sp, #12]
 800a0b6:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a0ba:	445a      	add	r2, fp
 800a0bc:	eca1 7a01 	vstmia	r1!, {s14}
 800a0c0:	4549      	cmp	r1, r9
 800a0c2:	9103      	str	r1, [sp, #12]
 800a0c4:	44dc      	add	ip, fp
 800a0c6:	f4ff af34 	bcc.w	8009f32 <forward_dense+0x346>
 800a0ca:	e6f6      	b.n	8009eba <forward_dense+0x2ce>
 800a0cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a0ce:	9d06      	ldr	r5, [sp, #24]
 800a0d0:	9101      	str	r1, [sp, #4]
 800a0d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a0d4:	9100      	str	r1, [sp, #0]
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0da:	f000 fa85 	bl	800a5e8 <lite_dense_if32of32wf32>
 800a0de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	4413      	add	r3, r2
 800a0e4:	9306      	str	r3, [sp, #24]
 800a0e6:	e6f1      	b.n	8009ecc <forward_dense+0x2e0>
 800a0e8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	d016      	beq.n	800a120 <forward_dense+0x534>
 800a0f2:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a0f6:	f000 fc25 	bl	800a944 <ai_array_get_byte_size>
 800a0fa:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800a0fe:	4602      	mov	r2, r0
 800a100:	4641      	mov	r1, r8
 800a102:	4658      	mov	r0, fp
 800a104:	f000 fff2 	bl	800b0ec <memcpy>
 800a108:	e5c7      	b.n	8009c9a <forward_dense+0xae>
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d00a      	beq.n	800a124 <forward_dense+0x538>
 800a10e:	f04f 0900 	mov.w	r9, #0
 800a112:	e5bd      	b.n	8009c90 <forward_dense+0xa4>
 800a114:	930d      	str	r3, [sp, #52]	; 0x34
 800a116:	e595      	b.n	8009c44 <forward_dense+0x58>
 800a118:	2300      	movs	r3, #0
 800a11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a11c:	460b      	mov	r3, r1
 800a11e:	e591      	b.n	8009c44 <forward_dense+0x58>
 800a120:	46c3      	mov	fp, r8
 800a122:	e5ba      	b.n	8009c9a <forward_dense+0xae>
 800a124:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a128:	e5b7      	b.n	8009c9a <forward_dense+0xae>
 800a12a:	2300      	movs	r3, #0
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	deff      	udf	#255	; 0xff
 800a130:	2300      	movs	r3, #0
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	deff      	udf	#255	; 0xff
 800a136:	bf00      	nop

0800a138 <forward_relu>:
 800a138:	6982      	ldr	r2, [r0, #24]
 800a13a:	8813      	ldrh	r3, [r2, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d05b      	beq.n	800a1f8 <forward_relu+0xc0>
 800a140:	6851      	ldr	r1, [r2, #4]
 800a142:	684a      	ldr	r2, [r1, #4]
 800a144:	b102      	cbz	r2, 800a148 <forward_relu+0x10>
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	f000 8123 	beq.w	800a394 <forward_relu+0x25c>
 800a14e:	b470      	push	{r4, r5, r6}
 800a150:	6909      	ldr	r1, [r1, #16]
 800a152:	b101      	cbz	r1, 800a156 <forward_relu+0x1e>
 800a154:	6809      	ldr	r1, [r1, #0]
 800a156:	69c6      	ldr	r6, [r0, #28]
 800a158:	2e00      	cmp	r6, #0
 800a15a:	f000 8097 	beq.w	800a28c <forward_relu+0x154>
 800a15e:	6873      	ldr	r3, [r6, #4]
 800a160:	6988      	ldr	r0, [r1, #24]
 800a162:	6991      	ldr	r1, [r2, #24]
 800a164:	2b01      	cmp	r3, #1
 800a166:	f000 80c1 	beq.w	800a2ec <forward_relu+0x1b4>
 800a16a:	6893      	ldr	r3, [r2, #8]
 800a16c:	6880      	ldr	r0, [r0, #8]
 800a16e:	688c      	ldr	r4, [r1, #8]
 800a170:	0a1b      	lsrs	r3, r3, #8
 800a172:	f000 80f2 	beq.w	800a35a <forward_relu+0x222>
 800a176:	68d5      	ldr	r5, [r2, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a17e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a182:	42ab      	cmp	r3, r5
 800a184:	fb01 f202 	mul.w	r2, r1, r2
 800a188:	d1f9      	bne.n	800a17e <forward_relu+0x46>
 800a18a:	68b3      	ldr	r3, [r6, #8]
 800a18c:	ed93 7a02 	vldr	s14, [r3, #8]
 800a190:	edd3 6a00 	vldr	s13, [r3]
 800a194:	ed93 6a01 	vldr	s12, [r3, #4]
 800a198:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a19c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a1a0:	3a01      	subs	r2, #1
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1aa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a1ae:	d425      	bmi.n	800a1fc <forward_relu+0xc4>
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	d81f      	bhi.n	800a1f4 <forward_relu+0xbc>
 800a1b4:	1d1a      	adds	r2, r3, #4
 800a1b6:	1d01      	adds	r1, r0, #4
 800a1b8:	e00d      	b.n	800a1d6 <forward_relu+0x9e>
 800a1ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c2:	db03      	blt.n	800a1cc <forward_relu+0x94>
 800a1c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a1c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a1cc:	3b08      	subs	r3, #8
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	ed61 7a01 	vstmdb	r1!, {s15}
 800a1d4:	d80e      	bhi.n	800a1f4 <forward_relu+0xbc>
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	ed72 7a01 	vldmdb	r2!, {s15}
 800a1dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e4:	d9e9      	bls.n	800a1ba <forward_relu+0x82>
 800a1e6:	3b08      	subs	r3, #8
 800a1e8:	eef0 7a47 	vmov.f32	s15, s14
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	ed61 7a01 	vstmdb	r1!, {s15}
 800a1f2:	d9f0      	bls.n	800a1d6 <forward_relu+0x9e>
 800a1f4:	bc70      	pop	{r4, r5, r6}
 800a1f6:	4770      	bx	lr
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	deff      	udf	#255	; 0xff
 800a1fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a204:	d11f      	bne.n	800a246 <forward_relu+0x10e>
 800a206:	429c      	cmp	r4, r3
 800a208:	d8f4      	bhi.n	800a1f4 <forward_relu+0xbc>
 800a20a:	1b1c      	subs	r4, r3, r4
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	1d1a      	adds	r2, r3, #4
 800a212:	2500      	movs	r5, #0
 800a214:	1b1b      	subs	r3, r3, r4
 800a216:	1d01      	adds	r1, r0, #4
 800a218:	ed72 7a01 	vldmdb	r2!, {s15}
 800a21c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a224:	dc0a      	bgt.n	800a23c <forward_relu+0x104>
 800a226:	429a      	cmp	r2, r3
 800a228:	f841 5d04 	str.w	r5, [r1, #-4]!
 800a22c:	d0e2      	beq.n	800a1f4 <forward_relu+0xbc>
 800a22e:	ed72 7a01 	vldmdb	r2!, {s15}
 800a232:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23a:	ddf4      	ble.n	800a226 <forward_relu+0xee>
 800a23c:	429a      	cmp	r2, r3
 800a23e:	ed61 7a01 	vstmdb	r1!, {s15}
 800a242:	d1e9      	bne.n	800a218 <forward_relu+0xe0>
 800a244:	e7d6      	b.n	800a1f4 <forward_relu+0xbc>
 800a246:	429c      	cmp	r4, r3
 800a248:	d8d4      	bhi.n	800a1f4 <forward_relu+0xbc>
 800a24a:	1b1c      	subs	r4, r3, r4
 800a24c:	f024 0403 	bic.w	r4, r4, #3
 800a250:	1d1a      	adds	r2, r3, #4
 800a252:	1d01      	adds	r1, r0, #4
 800a254:	1b1b      	subs	r3, r3, r4
 800a256:	ed72 7a01 	vldmdb	r2!, {s15}
 800a25a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a262:	db0e      	blt.n	800a282 <forward_relu+0x14a>
 800a264:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a268:	4293      	cmp	r3, r2
 800a26a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a26e:	ed61 7a01 	vstmdb	r1!, {s15}
 800a272:	d0bf      	beq.n	800a1f4 <forward_relu+0xbc>
 800a274:	ed72 7a01 	vldmdb	r2!, {s15}
 800a278:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	daf0      	bge.n	800a264 <forward_relu+0x12c>
 800a282:	4293      	cmp	r3, r2
 800a284:	ed61 7a01 	vstmdb	r1!, {s15}
 800a288:	d1e5      	bne.n	800a256 <forward_relu+0x11e>
 800a28a:	e7b3      	b.n	800a1f4 <forward_relu+0xbc>
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	6989      	ldr	r1, [r1, #24]
 800a290:	6990      	ldr	r0, [r2, #24]
 800a292:	6889      	ldr	r1, [r1, #8]
 800a294:	6884      	ldr	r4, [r0, #8]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	d075      	beq.n	800a386 <forward_relu+0x24e>
 800a29a:	68d5      	ldr	r5, [r2, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a2a2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800a2a6:	429d      	cmp	r5, r3
 800a2a8:	fb00 f202 	mul.w	r2, r0, r2
 800a2ac:	d1f9      	bne.n	800a2a2 <forward_relu+0x16a>
 800a2ae:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a2b8:	4294      	cmp	r4, r2
 800a2ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a2be:	d899      	bhi.n	800a1f4 <forward_relu+0xbc>
 800a2c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a39c <forward_relu+0x264>
 800a2c4:	3204      	adds	r2, #4
 800a2c6:	3104      	adds	r1, #4
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	ed72 7a01 	vldmdb	r2!, {s15}
 800a2ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d6:	f1a3 0308 	sub.w	r3, r3, #8
 800a2da:	bfb8      	it	lt
 800a2dc:	eef0 7a47 	vmovlt.f32	s15, s14
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	ed61 7a01 	vstmdb	r1!, {s15}
 800a2e6:	d9ef      	bls.n	800a2c8 <forward_relu+0x190>
 800a2e8:	bc70      	pop	{r4, r5, r6}
 800a2ea:	4770      	bx	lr
 800a2ec:	688c      	ldr	r4, [r1, #8]
 800a2ee:	6891      	ldr	r1, [r2, #8]
 800a2f0:	6880      	ldr	r0, [r0, #8]
 800a2f2:	0a09      	lsrs	r1, r1, #8
 800a2f4:	d049      	beq.n	800a38a <forward_relu+0x252>
 800a2f6:	68d5      	ldr	r5, [r2, #12]
 800a2f8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800a2fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a300:	42aa      	cmp	r2, r5
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	d1f9      	bne.n	800a2fc <forward_relu+0x1c4>
 800a308:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800a30c:	3a01      	subs	r2, #1
 800a30e:	68b1      	ldr	r1, [r6, #8]
 800a310:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a314:	429c      	cmp	r4, r3
 800a316:	ed91 7a00 	vldr	s14, [r1]
 800a31a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a31e:	f63f af69 	bhi.w	800a1f4 <forward_relu+0xbc>
 800a322:	2500      	movs	r5, #0
 800a324:	3304      	adds	r3, #4
 800a326:	1d02      	adds	r2, r0, #4
 800a328:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a32c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a334:	f1a3 0104 	sub.w	r1, r3, #4
 800a338:	f1a3 0308 	sub.w	r3, r3, #8
 800a33c:	d406      	bmi.n	800a34c <forward_relu+0x214>
 800a33e:	429c      	cmp	r4, r3
 800a340:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a344:	f63f af56 	bhi.w	800a1f4 <forward_relu+0xbc>
 800a348:	460b      	mov	r3, r1
 800a34a:	e7ed      	b.n	800a328 <forward_relu+0x1f0>
 800a34c:	429c      	cmp	r4, r3
 800a34e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a352:	f63f af4f 	bhi.w	800a1f4 <forward_relu+0xbc>
 800a356:	460b      	mov	r3, r1
 800a358:	e7e6      	b.n	800a328 <forward_relu+0x1f0>
 800a35a:	68b3      	ldr	r3, [r6, #8]
 800a35c:	ed93 7a02 	vldr	s14, [r3, #8]
 800a360:	edd3 6a00 	vldr	s13, [r3]
 800a364:	ed93 6a01 	vldr	s12, [r3, #4]
 800a368:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	d401      	bmi.n	800a376 <forward_relu+0x23e>
 800a372:	4623      	mov	r3, r4
 800a374:	e71e      	b.n	800a1b4 <forward_relu+0x7c>
 800a376:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37e:	4623      	mov	r3, r4
 800a380:	f47f af63 	bne.w	800a24a <forward_relu+0x112>
 800a384:	e741      	b.n	800a20a <forward_relu+0xd2>
 800a386:	4622      	mov	r2, r4
 800a388:	e79a      	b.n	800a2c0 <forward_relu+0x188>
 800a38a:	68b2      	ldr	r2, [r6, #8]
 800a38c:	4623      	mov	r3, r4
 800a38e:	ed92 7a00 	vldr	s14, [r2]
 800a392:	e7c6      	b.n	800a322 <forward_relu+0x1ea>
 800a394:	2300      	movs	r3, #0
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	deff      	udf	#255	; 0xff
 800a39a:	bf00      	nop
 800a39c:	00000000 	.word	0x00000000

0800a3a0 <forward_sm>:
 800a3a0:	6982      	ldr	r2, [r0, #24]
 800a3a2:	8813      	ldrh	r3, [r2, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d07c      	beq.n	800a4a2 <forward_sm+0x102>
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b04 	vpush	{d8-d9}
 800a3b0:	6852      	ldr	r2, [r2, #4]
 800a3b2:	6854      	ldr	r4, [r2, #4]
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	b104      	cbz	r4, 800a3ba <forward_sm+0x1a>
 800a3b8:	6824      	ldr	r4, [r4, #0]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d076      	beq.n	800a4ac <forward_sm+0x10c>
 800a3be:	6913      	ldr	r3, [r2, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d076      	beq.n	800a4b2 <forward_sm+0x112>
 800a3c4:	681e      	ldr	r6, [r3, #0]
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	68e0      	ldr	r0, [r4, #12]
 800a3ca:	68f2      	ldr	r2, [r6, #12]
 800a3cc:	6845      	ldr	r5, [r0, #4]
 800a3ce:	6857      	ldr	r7, [r2, #4]
 800a3d0:	0a1b      	lsrs	r3, r3, #8
 800a3d2:	d068      	beq.n	800a4a6 <forward_sm+0x106>
 800a3d4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3de:	4298      	cmp	r0, r3
 800a3e0:	fb01 f202 	mul.w	r2, r1, r2
 800a3e4:	d1f9      	bne.n	800a3da <forward_sm+0x3a>
 800a3e6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800a3ea:	69a2      	ldr	r2, [r4, #24]
 800a3ec:	69b3      	ldr	r3, [r6, #24]
 800a3ee:	6892      	ldr	r2, [r2, #8]
 800a3f0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800a3f4:	eb02 0309 	add.w	r3, r2, r9
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	d24c      	bcs.n	800a498 <forward_sm+0xf8>
 800a3fe:	00bb      	lsls	r3, r7, #2
 800a400:	9303      	str	r3, [sp, #12]
 800a402:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800a406:	00ab      	lsls	r3, r5, #2
 800a408:	2d01      	cmp	r5, #1
 800a40a:	ed92 8a00 	vldr	s16, [r2]
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a414:	463e      	mov	r6, r7
 800a416:	d93c      	bls.n	800a492 <forward_sm+0xf2>
 800a418:	1d13      	adds	r3, r2, #4
 800a41a:	ecf3 7a01 	vldmia	r3!, {s15}
 800a41e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a426:	bfb8      	it	lt
 800a428:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a42c:	429e      	cmp	r6, r3
 800a42e:	d1f4      	bne.n	800a41a <forward_sm+0x7a>
 800a430:	eddf 8a21 	vldr	s17, [pc, #132]	; 800a4b8 <forward_sm+0x118>
 800a434:	4692      	mov	sl, r2
 800a436:	46c3      	mov	fp, r8
 800a438:	46c1      	mov	r9, r8
 800a43a:	2400      	movs	r4, #0
 800a43c:	ecba 0a01 	vldmia	sl!, {s0}
 800a440:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a444:	f000 fab8 	bl	800a9b8 <expf>
 800a448:	3401      	adds	r4, #1
 800a44a:	42a5      	cmp	r5, r4
 800a44c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a450:	eca9 0a01 	vstmia	r9!, {s0}
 800a454:	d8f2      	bhi.n	800a43c <forward_sm+0x9c>
 800a456:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45e:	d00b      	beq.n	800a478 <forward_sm+0xd8>
 800a460:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a464:	2300      	movs	r3, #0
 800a466:	3301      	adds	r3, #1
 800a468:	429d      	cmp	r5, r3
 800a46a:	eddb 7a00 	vldr	s15, [fp]
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	eceb 7a01 	vstmia	fp!, {s15}
 800a476:	d8f6      	bhi.n	800a466 <forward_sm+0xc6>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	9901      	ldr	r1, [sp, #4]
 800a47c:	4498      	add	r8, r3
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	42b9      	cmp	r1, r7
 800a482:	463a      	mov	r2, r7
 800a484:	441e      	add	r6, r3
 800a486:	d907      	bls.n	800a498 <forward_sm+0xf8>
 800a488:	2d01      	cmp	r5, #1
 800a48a:	ed92 8a00 	vldr	s16, [r2]
 800a48e:	441f      	add	r7, r3
 800a490:	d8c2      	bhi.n	800a418 <forward_sm+0x78>
 800a492:	2d00      	cmp	r5, #0
 800a494:	d0f0      	beq.n	800a478 <forward_sm+0xd8>
 800a496:	e7cb      	b.n	800a430 <forward_sm+0x90>
 800a498:	b005      	add	sp, #20
 800a49a:	ecbd 8b04 	vpop	{d8-d9}
 800a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	deff      	udf	#255	; 0xff
 800a4a6:	f04f 0904 	mov.w	r9, #4
 800a4aa:	e79e      	b.n	800a3ea <forward_sm+0x4a>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	deff      	udf	#255	; 0xff
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	deff      	udf	#255	; 0xff
 800a4b6:	bf00      	nop
 800a4b8:	00000000 	.word	0x00000000

0800a4bc <ai_check_custom_types>:
 800a4bc:	b082      	sub	sp, #8
 800a4be:	4b13      	ldr	r3, [pc, #76]	; (800a50c <ai_check_custom_types+0x50>)
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	b118      	cbz	r0, 800a4cc <ai_check_custom_types+0x10>
 800a4c4:	7803      	ldrb	r3, [r0, #0]
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d002      	beq.n	800a4d0 <ai_check_custom_types+0x14>
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	b002      	add	sp, #8
 800a4ce:	4770      	bx	lr
 800a4d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d004      	beq.n	800a4e2 <ai_check_custom_types+0x26>
 800a4d8:	2001      	movs	r0, #1
 800a4da:	f080 0001 	eor.w	r0, r0, #1
 800a4de:	b002      	add	sp, #8
 800a4e0:	4770      	bx	lr
 800a4e2:	7842      	ldrb	r2, [r0, #1]
 800a4e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	f100 0001 	add.w	r0, r0, #1
 800a4ee:	d1f3      	bne.n	800a4d8 <ai_check_custom_types+0x1c>
 800a4f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a4f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d1ed      	bne.n	800a4d8 <ai_check_custom_types+0x1c>
 800a4fc:	7842      	ldrb	r2, [r0, #1]
 800a4fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a502:	429a      	cmp	r2, r3
 800a504:	d1e8      	bne.n	800a4d8 <ai_check_custom_types+0x1c>
 800a506:	2000      	movs	r0, #0
 800a508:	e7e7      	b.n	800a4da <ai_check_custom_types+0x1e>
 800a50a:	bf00      	nop
 800a50c:	84048403 	.word	0x84048403

0800a510 <ai_layers_init_all>:
 800a510:	4601      	mov	r1, r0
 800a512:	2000      	movs	r0, #0
 800a514:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a516:	b143      	cbz	r3, 800a52a <ai_layers_init_all+0x1a>
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	60d9      	str	r1, [r3, #12]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	f100 0001 	add.w	r0, r0, #1
 800a522:	d002      	beq.n	800a52a <ai_layers_init_all+0x1a>
 800a524:	b10a      	cbz	r2, 800a52a <ai_layers_init_all+0x1a>
 800a526:	4613      	mov	r3, r2
 800a528:	e7f5      	b.n	800a516 <ai_layers_init_all+0x6>
 800a52a:	4770      	bx	lr

0800a52c <ai_layers_post_init_all>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a530:	2500      	movs	r5, #0
 800a532:	b16c      	cbz	r4, 800a550 <ai_layers_post_init_all+0x24>
 800a534:	6863      	ldr	r3, [r4, #4]
 800a536:	07db      	lsls	r3, r3, #31
 800a538:	d504      	bpl.n	800a544 <ai_layers_post_init_all+0x18>
 800a53a:	6a23      	ldr	r3, [r4, #32]
 800a53c:	4620      	mov	r0, r4
 800a53e:	b10b      	cbz	r3, 800a544 <ai_layers_post_init_all+0x18>
 800a540:	4798      	blx	r3
 800a542:	3501      	adds	r5, #1
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	42a3      	cmp	r3, r4
 800a548:	d002      	beq.n	800a550 <ai_layers_post_init_all+0x24>
 800a54a:	b10b      	cbz	r3, 800a550 <ai_layers_post_init_all+0x24>
 800a54c:	461c      	mov	r4, r3
 800a54e:	e7f0      	b.n	800a532 <ai_layers_post_init_all+0x6>
 800a550:	4628      	mov	r0, r5
 800a552:	bd38      	pop	{r3, r4, r5, pc}

0800a554 <ai_layers_forward_all>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800a55c:	4604      	mov	r4, r0
 800a55e:	f1b8 0f00 	cmp.w	r8, #0
 800a562:	d02b      	beq.n	800a5bc <ai_layers_forward_all+0x68>
 800a564:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a566:	6381      	str	r1, [r0, #56]	; 0x38
 800a568:	b321      	cbz	r1, 800a5b4 <ai_layers_forward_all+0x60>
 800a56a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a56c:	2001      	movs	r0, #1
 800a56e:	47c0      	blx	r8
 800a570:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a572:	b1fe      	cbz	r6, 800a5b4 <ai_layers_forward_all+0x60>
 800a574:	2700      	movs	r7, #0
 800a576:	4631      	mov	r1, r6
 800a578:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a57a:	2002      	movs	r0, #2
 800a57c:	47c0      	blx	r8
 800a57e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a580:	4628      	mov	r0, r5
 800a582:	696b      	ldr	r3, [r5, #20]
 800a584:	4798      	blx	r3
 800a586:	692e      	ldr	r6, [r5, #16]
 800a588:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a58a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a58c:	42b5      	cmp	r5, r6
 800a58e:	f04f 0003 	mov.w	r0, #3
 800a592:	d007      	beq.n	800a5a4 <ai_layers_forward_all+0x50>
 800a594:	47c0      	blx	r8
 800a596:	3701      	adds	r7, #1
 800a598:	63a6      	str	r6, [r4, #56]	; 0x38
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d1eb      	bne.n	800a576 <ai_layers_forward_all+0x22>
 800a59e:	4638      	mov	r0, r7
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	2003      	movs	r0, #3
 800a5a6:	47c0      	blx	r8
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	3701      	adds	r7, #1
 800a5ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a5be:	6385      	str	r5, [r0, #56]	; 0x38
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	d0f7      	beq.n	800a5b4 <ai_layers_forward_all+0x60>
 800a5c4:	4647      	mov	r7, r8
 800a5c6:	696b      	ldr	r3, [r5, #20]
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	4798      	blx	r3
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	692d      	ldr	r5, [r5, #16]
 800a5d0:	429d      	cmp	r5, r3
 800a5d2:	d004      	beq.n	800a5de <ai_layers_forward_all+0x8a>
 800a5d4:	63a5      	str	r5, [r4, #56]	; 0x38
 800a5d6:	3701      	adds	r7, #1
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	d1f4      	bne.n	800a5c6 <ai_layers_forward_all+0x72>
 800a5dc:	e7df      	b.n	800a59e <ai_layers_forward_all+0x4a>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5e2:	3701      	adds	r7, #1
 800a5e4:	e7db      	b.n	800a59e <ai_layers_forward_all+0x4a>
 800a5e6:	bf00      	nop

0800a5e8 <lite_dense_if32of32wf32>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800a5f0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800a5f4:	4287      	cmp	r7, r0
 800a5f6:	f240 8106 	bls.w	800a806 <lite_dense_if32of32wf32+0x21e>
 800a5fa:	f1a6 0810 	sub.w	r8, r6, #16
 800a5fe:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800a602:	f108 0801 	add.w	r8, r8, #1
 800a606:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a60a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800a60e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800a612:	4605      	mov	r5, r0
 800a614:	f006 0a0f 	and.w	sl, r6, #15
 800a618:	2e0f      	cmp	r6, #15
 800a61a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800a82c <lite_dense_if32of32wf32+0x244>
 800a61e:	f240 8101 	bls.w	800a824 <lite_dense_if32of32wf32+0x23c>
 800a622:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800a626:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800a62a:	46b6      	mov	lr, r6
 800a62c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800a630:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800a634:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800a638:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800a63c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800a640:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800a644:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800a648:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800a64c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800a650:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800a654:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800a658:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800a65c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800a660:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a664:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800a668:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a66c:	f1ae 0e10 	sub.w	lr, lr, #16
 800a670:	f1be 0f0f 	cmp.w	lr, #15
 800a674:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800a678:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800a67c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a680:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800a684:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a688:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800a68c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800a690:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a694:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800a698:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800a69c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a6a0:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800a6a4:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800a6a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a6ac:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800a6b0:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800a6b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a6b8:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800a6bc:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800a6c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a6c4:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800a6c8:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800a6cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a6d0:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800a6d4:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800a6d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a6dc:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800a6e0:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800a6e4:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a6e8:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a6ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a6f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a6f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a6f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a6fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a700:	d894      	bhi.n	800a62c <lite_dense_if32of32wf32+0x44>
 800a702:	eb02 0e0b 	add.w	lr, r2, fp
 800a706:	4654      	mov	r4, sl
 800a708:	46c4      	mov	ip, r8
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d075      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a70e:	eddc 6a00 	vldr	s13, [ip]
 800a712:	edde 7a00 	vldr	s15, [lr]
 800a716:	2c01      	cmp	r4, #1
 800a718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a71c:	d06d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a71e:	eddc 6a01 	vldr	s13, [ip, #4]
 800a722:	edde 7a01 	vldr	s15, [lr, #4]
 800a726:	2c02      	cmp	r4, #2
 800a728:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a72c:	d065      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a72e:	eddc 6a02 	vldr	s13, [ip, #8]
 800a732:	edde 7a02 	vldr	s15, [lr, #8]
 800a736:	2c03      	cmp	r4, #3
 800a738:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a73c:	d05d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a73e:	eddc 6a03 	vldr	s13, [ip, #12]
 800a742:	edde 7a03 	vldr	s15, [lr, #12]
 800a746:	2c04      	cmp	r4, #4
 800a748:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a74c:	d055      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a74e:	eddc 6a04 	vldr	s13, [ip, #16]
 800a752:	edde 7a04 	vldr	s15, [lr, #16]
 800a756:	2c05      	cmp	r4, #5
 800a758:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a75c:	d04d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a75e:	eddc 6a05 	vldr	s13, [ip, #20]
 800a762:	edde 7a05 	vldr	s15, [lr, #20]
 800a766:	2c06      	cmp	r4, #6
 800a768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a76c:	d045      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a76e:	eddc 6a06 	vldr	s13, [ip, #24]
 800a772:	edde 7a06 	vldr	s15, [lr, #24]
 800a776:	2c07      	cmp	r4, #7
 800a778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a77c:	d03d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a77e:	eddc 6a07 	vldr	s13, [ip, #28]
 800a782:	edde 7a07 	vldr	s15, [lr, #28]
 800a786:	2c08      	cmp	r4, #8
 800a788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a78c:	d035      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a78e:	eddc 6a08 	vldr	s13, [ip, #32]
 800a792:	edde 7a08 	vldr	s15, [lr, #32]
 800a796:	2c09      	cmp	r4, #9
 800a798:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a79c:	d02d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a79e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800a7a2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800a7a6:	2c0a      	cmp	r4, #10
 800a7a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7ac:	d025      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a7ae:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800a7b2:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800a7b6:	2c0b      	cmp	r4, #11
 800a7b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7bc:	d01d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a7be:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800a7c2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800a7c6:	2c0c      	cmp	r4, #12
 800a7c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7cc:	d015      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a7ce:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800a7d2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800a7d6:	3c0d      	subs	r4, #13
 800a7d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7dc:	d00d      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a7de:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800a7e2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800a7e6:	2c01      	cmp	r4, #1
 800a7e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7ec:	d005      	beq.n	800a7fa <lite_dense_if32of32wf32+0x212>
 800a7ee:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800a7f2:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800a7f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7fa:	444a      	add	r2, r9
 800a7fc:	eca5 7a01 	vstmia	r5!, {s14}
 800a800:	42af      	cmp	r7, r5
 800a802:	f63f af09 	bhi.w	800a618 <lite_dense_if32of32wf32+0x30>
 800a806:	b15b      	cbz	r3, 800a820 <lite_dense_if32of32wf32+0x238>
 800a808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a80a:	b14a      	cbz	r2, 800a820 <lite_dense_if32of32wf32+0x238>
 800a80c:	edd0 7a00 	vldr	s15, [r0]
 800a810:	ecb3 7a01 	vldmia	r3!, {s14}
 800a814:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a818:	ece0 7a01 	vstmia	r0!, {s15}
 800a81c:	4287      	cmp	r7, r0
 800a81e:	d1f5      	bne.n	800a80c <lite_dense_if32of32wf32+0x224>
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	4634      	mov	r4, r6
 800a826:	4696      	mov	lr, r2
 800a828:	468c      	mov	ip, r1
 800a82a:	e76e      	b.n	800a70a <lite_dense_if32of32wf32+0x122>
 800a82c:	00000000 	.word	0x00000000

0800a830 <ai_version_get>:
 800a830:	0212      	lsls	r2, r2, #8
 800a832:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a836:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a83a:	4770      	bx	lr

0800a83c <get_tensor_byte_size>:
 800a83c:	b410      	push	{r4}
 800a83e:	6983      	ldr	r3, [r0, #24]
 800a840:	68c4      	ldr	r4, [r0, #12]
 800a842:	6941      	ldr	r1, [r0, #20]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68e0      	ldr	r0, [r4, #12]
 800a848:	4a07      	ldr	r2, [pc, #28]	; (800a868 <get_tensor_byte_size+0x2c>)
 800a84a:	68c9      	ldr	r1, [r1, #12]
 800a84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a850:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a854:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a858:	fb01 f000 	mul.w	r0, r1, r0
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bf04      	itt	eq
 800a860:	3007      	addeq	r0, #7
 800a862:	08c0      	lsreq	r0, r0, #3
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	000400c0 	.word	0x000400c0

0800a86c <ai_array_to_buffer_fmt>:
 800a86c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a870:	2b02      	cmp	r3, #2
 800a872:	d050      	beq.n	800a916 <ai_array_to_buffer_fmt+0xaa>
 800a874:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <ai_array_to_buffer_fmt+0xb4>)
 800a876:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d00b      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a87e:	dc1c      	bgt.n	800a8ba <ai_array_to_buffer_fmt+0x4e>
 800a880:	4b28      	ldr	r3, [pc, #160]	; (800a924 <ai_array_to_buffer_fmt+0xb8>)
 800a882:	429a      	cmp	r2, r3
 800a884:	d007      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a886:	dd0b      	ble.n	800a8a0 <ai_array_to_buffer_fmt+0x34>
 800a888:	4b27      	ldr	r3, [pc, #156]	; (800a928 <ai_array_to_buffer_fmt+0xbc>)
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d003      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a88e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800a892:	429a      	cmp	r2, r3
 800a894:	d131      	bne.n	800a8fa <ai_array_to_buffer_fmt+0x8e>
 800a896:	4613      	mov	r3, r2
 800a898:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a89c:	4318      	orrs	r0, r3
 800a89e:	4770      	bx	lr
 800a8a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d0f6      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8a8:	dd2c      	ble.n	800a904 <ai_array_to_buffer_fmt+0x98>
 800a8aa:	4b20      	ldr	r3, [pc, #128]	; (800a92c <ai_array_to_buffer_fmt+0xc0>)
 800a8ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	bf18      	it	ne
 800a8b4:	2340      	movne	r3, #64	; 0x40
 800a8b6:	4318      	orrs	r0, r3
 800a8b8:	4770      	bx	lr
 800a8ba:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <ai_array_to_buffer_fmt+0xc4>)
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d0ea      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8c0:	dd0e      	ble.n	800a8e0 <ai_array_to_buffer_fmt+0x74>
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <ai_array_to_buffer_fmt+0xc8>)
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d0e6      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8c8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d0e2      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8d0:	4b19      	ldr	r3, [pc, #100]	; (800a938 <ai_array_to_buffer_fmt+0xcc>)
 800a8d2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	bf18      	it	ne
 800a8da:	2340      	movne	r3, #64	; 0x40
 800a8dc:	4318      	orrs	r0, r3
 800a8de:	4770      	bx	lr
 800a8e0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d0d6      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8e8:	3307      	adds	r3, #7
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d0d3      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a8ee:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	bf18      	it	ne
 800a8f6:	2340      	movne	r3, #64	; 0x40
 800a8f8:	e7ce      	b.n	800a898 <ai_array_to_buffer_fmt+0x2c>
 800a8fa:	4b10      	ldr	r3, [pc, #64]	; (800a93c <ai_array_to_buffer_fmt+0xd0>)
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	bf18      	it	ne
 800a900:	2340      	movne	r3, #64	; 0x40
 800a902:	e7c9      	b.n	800a898 <ai_array_to_buffer_fmt+0x2c>
 800a904:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a908:	429a      	cmp	r2, r3
 800a90a:	d0c4      	beq.n	800a896 <ai_array_to_buffer_fmt+0x2a>
 800a90c:	3380      	adds	r3, #128	; 0x80
 800a90e:	429a      	cmp	r2, r3
 800a910:	bf18      	it	ne
 800a912:	2340      	movne	r3, #64	; 0x40
 800a914:	e7c0      	b.n	800a898 <ai_array_to_buffer_fmt+0x2c>
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <ai_array_to_buffer_fmt+0xd4>)
 800a918:	4003      	ands	r3, r0
 800a91a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a91e:	e7bb      	b.n	800a898 <ai_array_to_buffer_fmt+0x2c>
 800a920:	00840040 	.word	0x00840040
 800a924:	00040840 	.word	0x00040840
 800a928:	00041040 	.word	0x00041040
 800a92c:	00040447 	.word	0x00040447
 800a930:	00840840 	.word	0x00840840
 800a934:	00841040 	.word	0x00841040
 800a938:	0084084f 	.word	0x0084084f
 800a93c:	0004084f 	.word	0x0004084f
 800a940:	00803fff 	.word	0x00803fff

0800a944 <ai_array_get_byte_size>:
 800a944:	b319      	cbz	r1, 800a98e <ai_array_get_byte_size+0x4a>
 800a946:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a94a:	fb03 f101 	mul.w	r1, r3, r1
 800a94e:	3107      	adds	r1, #7
 800a950:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800a954:	f021 0307 	bic.w	r3, r1, #7
 800a958:	2a04      	cmp	r2, #4
 800a95a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800a95e:	fa23 f101 	lsr.w	r1, r3, r1
 800a962:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800a966:	d00b      	beq.n	800a980 <ai_array_get_byte_size+0x3c>
 800a968:	2a08      	cmp	r2, #8
 800a96a:	d002      	beq.n	800a972 <ai_array_get_byte_size+0x2e>
 800a96c:	3107      	adds	r1, #7
 800a96e:	08c8      	lsrs	r0, r1, #3
 800a970:	4770      	bx	lr
 800a972:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a976:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a97a:	3107      	adds	r1, #7
 800a97c:	08c8      	lsrs	r0, r1, #3
 800a97e:	4770      	bx	lr
 800a980:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a984:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800a988:	3107      	adds	r1, #7
 800a98a:	08c8      	lsrs	r0, r1, #3
 800a98c:	4770      	bx	lr
 800a98e:	4608      	mov	r0, r1
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop

0800a994 <ai_array_get_data_byte_size>:
 800a994:	b169      	cbz	r1, 800a9b2 <ai_array_get_data_byte_size+0x1e>
 800a996:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800a99a:	fb02 f101 	mul.w	r1, r2, r1
 800a99e:	1dcb      	adds	r3, r1, #7
 800a9a0:	f023 0307 	bic.w	r3, r3, #7
 800a9a4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a9a8:	fa23 f000 	lsr.w	r0, r3, r0
 800a9ac:	3007      	adds	r0, #7
 800a9ae:	08c0      	lsrs	r0, r0, #3
 800a9b0:	4770      	bx	lr
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop

0800a9b8 <expf>:
 800a9b8:	b508      	push	{r3, lr}
 800a9ba:	ed2d 8b02 	vpush	{d8}
 800a9be:	eef0 8a40 	vmov.f32	s17, s0
 800a9c2:	f000 f82f 	bl	800aa24 <__ieee754_expf>
 800a9c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a9ca:	eeb0 0a68 	vmov.f32	s0, s17
 800a9ce:	f000 f919 	bl	800ac04 <finitef>
 800a9d2:	b160      	cbz	r0, 800a9ee <expf+0x36>
 800a9d4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800aa14 <expf+0x5c>
 800a9d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e0:	dd0a      	ble.n	800a9f8 <expf+0x40>
 800a9e2:	f000 f91d 	bl	800ac20 <__errno>
 800a9e6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800aa18 <expf+0x60>
 800a9ea:	2322      	movs	r3, #34	; 0x22
 800a9ec:	6003      	str	r3, [r0, #0]
 800a9ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f2:	ecbd 8b02 	vpop	{d8}
 800a9f6:	bd08      	pop	{r3, pc}
 800a9f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aa1c <expf+0x64>
 800a9fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa04:	d5f3      	bpl.n	800a9ee <expf+0x36>
 800aa06:	f000 f90b 	bl	800ac20 <__errno>
 800aa0a:	2322      	movs	r3, #34	; 0x22
 800aa0c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800aa20 <expf+0x68>
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	e7ec      	b.n	800a9ee <expf+0x36>
 800aa14:	42b17180 	.word	0x42b17180
 800aa18:	7f800000 	.word	0x7f800000
 800aa1c:	c2cff1b5 	.word	0xc2cff1b5
 800aa20:	00000000 	.word	0x00000000

0800aa24 <__ieee754_expf>:
 800aa24:	ee10 2a10 	vmov	r2, s0
 800aa28:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800aa2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aa30:	d902      	bls.n	800aa38 <__ieee754_expf+0x14>
 800aa32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa36:	4770      	bx	lr
 800aa38:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800aa3c:	d106      	bne.n	800aa4c <__ieee754_expf+0x28>
 800aa3e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800ab78 <__ieee754_expf+0x154>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bf18      	it	ne
 800aa46:	eeb0 0a67 	vmovne.f32	s0, s15
 800aa4a:	4770      	bx	lr
 800aa4c:	484b      	ldr	r0, [pc, #300]	; (800ab7c <__ieee754_expf+0x158>)
 800aa4e:	4282      	cmp	r2, r0
 800aa50:	dd02      	ble.n	800aa58 <__ieee754_expf+0x34>
 800aa52:	2000      	movs	r0, #0
 800aa54:	f000 b8d0 	b.w	800abf8 <__math_oflowf>
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	da05      	bge.n	800aa68 <__ieee754_expf+0x44>
 800aa5c:	4a48      	ldr	r2, [pc, #288]	; (800ab80 <__ieee754_expf+0x15c>)
 800aa5e:	4291      	cmp	r1, r2
 800aa60:	d902      	bls.n	800aa68 <__ieee754_expf+0x44>
 800aa62:	2000      	movs	r0, #0
 800aa64:	f000 b8c2 	b.w	800abec <__math_uflowf>
 800aa68:	4a46      	ldr	r2, [pc, #280]	; (800ab84 <__ieee754_expf+0x160>)
 800aa6a:	4291      	cmp	r1, r2
 800aa6c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800aa70:	d952      	bls.n	800ab18 <__ieee754_expf+0xf4>
 800aa72:	4a45      	ldr	r2, [pc, #276]	; (800ab88 <__ieee754_expf+0x164>)
 800aa74:	4291      	cmp	r1, r2
 800aa76:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800aa7a:	d834      	bhi.n	800aae6 <__ieee754_expf+0xc2>
 800aa7c:	4943      	ldr	r1, [pc, #268]	; (800ab8c <__ieee754_expf+0x168>)
 800aa7e:	4411      	add	r1, r2
 800aa80:	ed91 7a00 	vldr	s14, [r1]
 800aa84:	4942      	ldr	r1, [pc, #264]	; (800ab90 <__ieee754_expf+0x16c>)
 800aa86:	440a      	add	r2, r1
 800aa88:	edd2 7a00 	vldr	s15, [r2]
 800aa8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800aa90:	f1c3 0201 	rsb	r2, r3, #1
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	ee37 0a67 	vsub.f32	s0, s14, s15
 800aa9a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800aa9e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ab94 <__ieee754_expf+0x170>
 800aaa2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab98 <__ieee754_expf+0x174>
 800aaa6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800aaaa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ab9c <__ieee754_expf+0x178>
 800aaae:	eea6 5a86 	vfma.f32	s10, s13, s12
 800aab2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aba0 <__ieee754_expf+0x17c>
 800aab6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800aaba:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800aba4 <__ieee754_expf+0x180>
 800aabe:	eea6 5a86 	vfma.f32	s10, s13, s12
 800aac2:	eef0 6a40 	vmov.f32	s13, s0
 800aac6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800aaca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800aace:	ee20 5a26 	vmul.f32	s10, s0, s13
 800aad2:	bb92      	cbnz	r2, 800ab3a <__ieee754_expf+0x116>
 800aad4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800aad8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800aadc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800aae0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800aae4:	4770      	bx	lr
 800aae6:	4b30      	ldr	r3, [pc, #192]	; (800aba8 <__ieee754_expf+0x184>)
 800aae8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800abac <__ieee754_expf+0x188>
 800aaec:	eddf 6a30 	vldr	s13, [pc, #192]	; 800abb0 <__ieee754_expf+0x18c>
 800aaf0:	4413      	add	r3, r2
 800aaf2:	edd3 7a00 	vldr	s15, [r3]
 800aaf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aafa:	eeb0 7a40 	vmov.f32	s14, s0
 800aafe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab02:	ee17 2a90 	vmov	r2, s15
 800ab06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab0a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ab0e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800abb4 <__ieee754_expf+0x190>
 800ab12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ab16:	e7be      	b.n	800aa96 <__ieee754_expf+0x72>
 800ab18:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800ab1c:	d20b      	bcs.n	800ab36 <__ieee754_expf+0x112>
 800ab1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abb8 <__ieee754_expf+0x194>
 800ab22:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ab26:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ab2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2e:	dd02      	ble.n	800ab36 <__ieee754_expf+0x112>
 800ab30:	ee30 0a25 	vadd.f32	s0, s0, s11
 800ab34:	4770      	bx	lr
 800ab36:	2200      	movs	r2, #0
 800ab38:	e7af      	b.n	800aa9a <__ieee754_expf+0x76>
 800ab3a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ab3e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800ab42:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800ab46:	bfb8      	it	lt
 800ab48:	3264      	addlt	r2, #100	; 0x64
 800ab4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab4e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ab52:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800ab56:	ee17 3a90 	vmov	r3, s15
 800ab5a:	bfab      	itete	ge
 800ab5c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ab60:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ab64:	ee00 3a10 	vmovge	s0, r3
 800ab68:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800abbc <__ieee754_expf+0x198>
 800ab6c:	bfbc      	itt	lt
 800ab6e:	ee00 3a10 	vmovlt	s0, r3
 800ab72:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800ab76:	4770      	bx	lr
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	42b17217 	.word	0x42b17217
 800ab80:	42cff1b5 	.word	0x42cff1b5
 800ab84:	3eb17218 	.word	0x3eb17218
 800ab88:	3f851591 	.word	0x3f851591
 800ab8c:	080146c0 	.word	0x080146c0
 800ab90:	080146c8 	.word	0x080146c8
 800ab94:	3331bb4c 	.word	0x3331bb4c
 800ab98:	b5ddea0e 	.word	0xb5ddea0e
 800ab9c:	388ab355 	.word	0x388ab355
 800aba0:	bb360b61 	.word	0xbb360b61
 800aba4:	3e2aaaab 	.word	0x3e2aaaab
 800aba8:	080146b8 	.word	0x080146b8
 800abac:	3fb8aa3b 	.word	0x3fb8aa3b
 800abb0:	3f317180 	.word	0x3f317180
 800abb4:	3717f7d1 	.word	0x3717f7d1
 800abb8:	7149f2ca 	.word	0x7149f2ca
 800abbc:	0d800000 	.word	0x0d800000

0800abc0 <with_errnof>:
 800abc0:	b513      	push	{r0, r1, r4, lr}
 800abc2:	4604      	mov	r4, r0
 800abc4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800abc8:	f000 f82a 	bl	800ac20 <__errno>
 800abcc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800abd0:	6004      	str	r4, [r0, #0]
 800abd2:	b002      	add	sp, #8
 800abd4:	bd10      	pop	{r4, pc}

0800abd6 <xflowf>:
 800abd6:	b130      	cbz	r0, 800abe6 <xflowf+0x10>
 800abd8:	eef1 7a40 	vneg.f32	s15, s0
 800abdc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abe0:	2022      	movs	r0, #34	; 0x22
 800abe2:	f7ff bfed 	b.w	800abc0 <with_errnof>
 800abe6:	eef0 7a40 	vmov.f32	s15, s0
 800abea:	e7f7      	b.n	800abdc <xflowf+0x6>

0800abec <__math_uflowf>:
 800abec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abf4 <__math_uflowf+0x8>
 800abf0:	f7ff bff1 	b.w	800abd6 <xflowf>
 800abf4:	10000000 	.word	0x10000000

0800abf8 <__math_oflowf>:
 800abf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac00 <__math_oflowf+0x8>
 800abfc:	f7ff bfeb 	b.w	800abd6 <xflowf>
 800ac00:	70000000 	.word	0x70000000

0800ac04 <finitef>:
 800ac04:	b082      	sub	sp, #8
 800ac06:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ac0a:	9801      	ldr	r0, [sp, #4]
 800ac0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac10:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ac14:	bfac      	ite	ge
 800ac16:	2000      	movge	r0, #0
 800ac18:	2001      	movlt	r0, #1
 800ac1a:	b002      	add	sp, #8
 800ac1c:	4770      	bx	lr
	...

0800ac20 <__errno>:
 800ac20:	4b01      	ldr	r3, [pc, #4]	; (800ac28 <__errno+0x8>)
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	20000750 	.word	0x20000750

0800ac2c <__libc_init_array>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4d0d      	ldr	r5, [pc, #52]	; (800ac64 <__libc_init_array+0x38>)
 800ac30:	4c0d      	ldr	r4, [pc, #52]	; (800ac68 <__libc_init_array+0x3c>)
 800ac32:	1b64      	subs	r4, r4, r5
 800ac34:	10a4      	asrs	r4, r4, #2
 800ac36:	2600      	movs	r6, #0
 800ac38:	42a6      	cmp	r6, r4
 800ac3a:	d109      	bne.n	800ac50 <__libc_init_array+0x24>
 800ac3c:	4d0b      	ldr	r5, [pc, #44]	; (800ac6c <__libc_init_array+0x40>)
 800ac3e:	4c0c      	ldr	r4, [pc, #48]	; (800ac70 <__libc_init_array+0x44>)
 800ac40:	f004 fdca 	bl	800f7d8 <_init>
 800ac44:	1b64      	subs	r4, r4, r5
 800ac46:	10a4      	asrs	r4, r4, #2
 800ac48:	2600      	movs	r6, #0
 800ac4a:	42a6      	cmp	r6, r4
 800ac4c:	d105      	bne.n	800ac5a <__libc_init_array+0x2e>
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac54:	4798      	blx	r3
 800ac56:	3601      	adds	r6, #1
 800ac58:	e7ee      	b.n	800ac38 <__libc_init_array+0xc>
 800ac5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5e:	4798      	blx	r3
 800ac60:	3601      	adds	r6, #1
 800ac62:	e7f2      	b.n	800ac4a <__libc_init_array+0x1e>
 800ac64:	08014a6c 	.word	0x08014a6c
 800ac68:	08014a6c 	.word	0x08014a6c
 800ac6c:	08014a6c 	.word	0x08014a6c
 800ac70:	08014a74 	.word	0x08014a74

0800ac74 <_malloc_r>:
 800ac74:	f101 030b 	add.w	r3, r1, #11
 800ac78:	2b16      	cmp	r3, #22
 800ac7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7e:	4605      	mov	r5, r0
 800ac80:	d906      	bls.n	800ac90 <_malloc_r+0x1c>
 800ac82:	f033 0707 	bics.w	r7, r3, #7
 800ac86:	d504      	bpl.n	800ac92 <_malloc_r+0x1e>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	602b      	str	r3, [r5, #0]
 800ac8c:	2400      	movs	r4, #0
 800ac8e:	e1a5      	b.n	800afdc <_malloc_r+0x368>
 800ac90:	2710      	movs	r7, #16
 800ac92:	42b9      	cmp	r1, r7
 800ac94:	d8f8      	bhi.n	800ac88 <_malloc_r+0x14>
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 fa3e 	bl	800b118 <__malloc_lock>
 800ac9c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800aca0:	4eb0      	ldr	r6, [pc, #704]	; (800af64 <_malloc_r+0x2f0>)
 800aca2:	d237      	bcs.n	800ad14 <_malloc_r+0xa0>
 800aca4:	f107 0208 	add.w	r2, r7, #8
 800aca8:	4432      	add	r2, r6
 800acaa:	f1a2 0108 	sub.w	r1, r2, #8
 800acae:	6854      	ldr	r4, [r2, #4]
 800acb0:	428c      	cmp	r4, r1
 800acb2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800acb6:	d102      	bne.n	800acbe <_malloc_r+0x4a>
 800acb8:	68d4      	ldr	r4, [r2, #12]
 800acba:	42a2      	cmp	r2, r4
 800acbc:	d010      	beq.n	800ace0 <_malloc_r+0x6c>
 800acbe:	6863      	ldr	r3, [r4, #4]
 800acc0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800acc4:	f023 0303 	bic.w	r3, r3, #3
 800acc8:	60ca      	str	r2, [r1, #12]
 800acca:	4423      	add	r3, r4
 800accc:	6091      	str	r1, [r2, #8]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	f042 0201 	orr.w	r2, r2, #1
 800acd4:	605a      	str	r2, [r3, #4]
 800acd6:	4628      	mov	r0, r5
 800acd8:	f000 fa24 	bl	800b124 <__malloc_unlock>
 800acdc:	3408      	adds	r4, #8
 800acde:	e17d      	b.n	800afdc <_malloc_r+0x368>
 800ace0:	3302      	adds	r3, #2
 800ace2:	6934      	ldr	r4, [r6, #16]
 800ace4:	49a0      	ldr	r1, [pc, #640]	; (800af68 <_malloc_r+0x2f4>)
 800ace6:	428c      	cmp	r4, r1
 800ace8:	d077      	beq.n	800adda <_malloc_r+0x166>
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	f022 0c03 	bic.w	ip, r2, #3
 800acf0:	ebac 0007 	sub.w	r0, ip, r7
 800acf4:	280f      	cmp	r0, #15
 800acf6:	dd48      	ble.n	800ad8a <_malloc_r+0x116>
 800acf8:	19e2      	adds	r2, r4, r7
 800acfa:	f040 0301 	orr.w	r3, r0, #1
 800acfe:	f047 0701 	orr.w	r7, r7, #1
 800ad02:	6067      	str	r7, [r4, #4]
 800ad04:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800ad08:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800ad0c:	6053      	str	r3, [r2, #4]
 800ad0e:	f844 000c 	str.w	r0, [r4, ip]
 800ad12:	e7e0      	b.n	800acd6 <_malloc_r+0x62>
 800ad14:	0a7b      	lsrs	r3, r7, #9
 800ad16:	d02a      	beq.n	800ad6e <_malloc_r+0xfa>
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	d812      	bhi.n	800ad42 <_malloc_r+0xce>
 800ad1c:	09bb      	lsrs	r3, r7, #6
 800ad1e:	3338      	adds	r3, #56	; 0x38
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800ad26:	f1a2 0c08 	sub.w	ip, r2, #8
 800ad2a:	6854      	ldr	r4, [r2, #4]
 800ad2c:	4564      	cmp	r4, ip
 800ad2e:	d006      	beq.n	800ad3e <_malloc_r+0xca>
 800ad30:	6862      	ldr	r2, [r4, #4]
 800ad32:	f022 0203 	bic.w	r2, r2, #3
 800ad36:	1bd0      	subs	r0, r2, r7
 800ad38:	280f      	cmp	r0, #15
 800ad3a:	dd1c      	ble.n	800ad76 <_malloc_r+0x102>
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	3301      	adds	r3, #1
 800ad40:	e7cf      	b.n	800ace2 <_malloc_r+0x6e>
 800ad42:	2b14      	cmp	r3, #20
 800ad44:	d801      	bhi.n	800ad4a <_malloc_r+0xd6>
 800ad46:	335b      	adds	r3, #91	; 0x5b
 800ad48:	e7ea      	b.n	800ad20 <_malloc_r+0xac>
 800ad4a:	2b54      	cmp	r3, #84	; 0x54
 800ad4c:	d802      	bhi.n	800ad54 <_malloc_r+0xe0>
 800ad4e:	0b3b      	lsrs	r3, r7, #12
 800ad50:	336e      	adds	r3, #110	; 0x6e
 800ad52:	e7e5      	b.n	800ad20 <_malloc_r+0xac>
 800ad54:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ad58:	d802      	bhi.n	800ad60 <_malloc_r+0xec>
 800ad5a:	0bfb      	lsrs	r3, r7, #15
 800ad5c:	3377      	adds	r3, #119	; 0x77
 800ad5e:	e7df      	b.n	800ad20 <_malloc_r+0xac>
 800ad60:	f240 5254 	movw	r2, #1364	; 0x554
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d804      	bhi.n	800ad72 <_malloc_r+0xfe>
 800ad68:	0cbb      	lsrs	r3, r7, #18
 800ad6a:	337c      	adds	r3, #124	; 0x7c
 800ad6c:	e7d8      	b.n	800ad20 <_malloc_r+0xac>
 800ad6e:	233f      	movs	r3, #63	; 0x3f
 800ad70:	e7d6      	b.n	800ad20 <_malloc_r+0xac>
 800ad72:	237e      	movs	r3, #126	; 0x7e
 800ad74:	e7d4      	b.n	800ad20 <_malloc_r+0xac>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	68e1      	ldr	r1, [r4, #12]
 800ad7a:	db04      	blt.n	800ad86 <_malloc_r+0x112>
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	60d9      	str	r1, [r3, #12]
 800ad80:	608b      	str	r3, [r1, #8]
 800ad82:	18a3      	adds	r3, r4, r2
 800ad84:	e7a3      	b.n	800acce <_malloc_r+0x5a>
 800ad86:	460c      	mov	r4, r1
 800ad88:	e7d0      	b.n	800ad2c <_malloc_r+0xb8>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800ad90:	db07      	blt.n	800ada2 <_malloc_r+0x12e>
 800ad92:	44a4      	add	ip, r4
 800ad94:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800ad98:	f043 0301 	orr.w	r3, r3, #1
 800ad9c:	f8cc 3004 	str.w	r3, [ip, #4]
 800ada0:	e799      	b.n	800acd6 <_malloc_r+0x62>
 800ada2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800ada6:	6870      	ldr	r0, [r6, #4]
 800ada8:	f080 8096 	bcs.w	800aed8 <_malloc_r+0x264>
 800adac:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800adb0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800adb4:	f04f 0c01 	mov.w	ip, #1
 800adb8:	3201      	adds	r2, #1
 800adba:	fa0c fc0e 	lsl.w	ip, ip, lr
 800adbe:	ea4c 0000 	orr.w	r0, ip, r0
 800adc2:	6070      	str	r0, [r6, #4]
 800adc4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800adc8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800adcc:	3808      	subs	r0, #8
 800adce:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800add2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800add6:	f8cc 400c 	str.w	r4, [ip, #12]
 800adda:	2001      	movs	r0, #1
 800addc:	109a      	asrs	r2, r3, #2
 800adde:	fa00 f202 	lsl.w	r2, r0, r2
 800ade2:	6870      	ldr	r0, [r6, #4]
 800ade4:	4290      	cmp	r0, r2
 800ade6:	d326      	bcc.n	800ae36 <_malloc_r+0x1c2>
 800ade8:	4210      	tst	r0, r2
 800adea:	d106      	bne.n	800adfa <_malloc_r+0x186>
 800adec:	f023 0303 	bic.w	r3, r3, #3
 800adf0:	0052      	lsls	r2, r2, #1
 800adf2:	4210      	tst	r0, r2
 800adf4:	f103 0304 	add.w	r3, r3, #4
 800adf8:	d0fa      	beq.n	800adf0 <_malloc_r+0x17c>
 800adfa:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800adfe:	46c1      	mov	r9, r8
 800ae00:	469e      	mov	lr, r3
 800ae02:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ae06:	454c      	cmp	r4, r9
 800ae08:	f040 80ba 	bne.w	800af80 <_malloc_r+0x30c>
 800ae0c:	f10e 0e01 	add.w	lr, lr, #1
 800ae10:	f01e 0f03 	tst.w	lr, #3
 800ae14:	f109 0908 	add.w	r9, r9, #8
 800ae18:	d1f3      	bne.n	800ae02 <_malloc_r+0x18e>
 800ae1a:	0798      	lsls	r0, r3, #30
 800ae1c:	f040 80e4 	bne.w	800afe8 <_malloc_r+0x374>
 800ae20:	6873      	ldr	r3, [r6, #4]
 800ae22:	ea23 0302 	bic.w	r3, r3, r2
 800ae26:	6073      	str	r3, [r6, #4]
 800ae28:	6870      	ldr	r0, [r6, #4]
 800ae2a:	0052      	lsls	r2, r2, #1
 800ae2c:	4290      	cmp	r0, r2
 800ae2e:	d302      	bcc.n	800ae36 <_malloc_r+0x1c2>
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	f040 80e6 	bne.w	800b002 <_malloc_r+0x38e>
 800ae36:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800ae3a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ae3e:	f023 0903 	bic.w	r9, r3, #3
 800ae42:	45b9      	cmp	r9, r7
 800ae44:	d304      	bcc.n	800ae50 <_malloc_r+0x1dc>
 800ae46:	eba9 0207 	sub.w	r2, r9, r7
 800ae4a:	2a0f      	cmp	r2, #15
 800ae4c:	f300 8142 	bgt.w	800b0d4 <_malloc_r+0x460>
 800ae50:	4b46      	ldr	r3, [pc, #280]	; (800af6c <_malloc_r+0x2f8>)
 800ae52:	6819      	ldr	r1, [r3, #0]
 800ae54:	3110      	adds	r1, #16
 800ae56:	4439      	add	r1, r7
 800ae58:	2008      	movs	r0, #8
 800ae5a:	9101      	str	r1, [sp, #4]
 800ae5c:	f001 fd70 	bl	800c940 <sysconf>
 800ae60:	4a43      	ldr	r2, [pc, #268]	; (800af70 <_malloc_r+0x2fc>)
 800ae62:	9901      	ldr	r1, [sp, #4]
 800ae64:	6813      	ldr	r3, [r2, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	bf1f      	itttt	ne
 800ae6a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800ae6e:	1809      	addne	r1, r1, r0
 800ae70:	4243      	negne	r3, r0
 800ae72:	4019      	andne	r1, r3
 800ae74:	4680      	mov	r8, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	9101      	str	r1, [sp, #4]
 800ae7a:	f000 fb4b 	bl	800b514 <_sbrk_r>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	eb0a 0b09 	add.w	fp, sl, r9
 800ae84:	4604      	mov	r4, r0
 800ae86:	f000 80f8 	beq.w	800b07a <_malloc_r+0x406>
 800ae8a:	4583      	cmp	fp, r0
 800ae8c:	9901      	ldr	r1, [sp, #4]
 800ae8e:	4a38      	ldr	r2, [pc, #224]	; (800af70 <_malloc_r+0x2fc>)
 800ae90:	d902      	bls.n	800ae98 <_malloc_r+0x224>
 800ae92:	45b2      	cmp	sl, r6
 800ae94:	f040 80f1 	bne.w	800b07a <_malloc_r+0x406>
 800ae98:	4b36      	ldr	r3, [pc, #216]	; (800af74 <_malloc_r+0x300>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	45a3      	cmp	fp, r4
 800ae9e:	eb00 0e01 	add.w	lr, r0, r1
 800aea2:	f8c3 e000 	str.w	lr, [r3]
 800aea6:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800aeaa:	f040 80ac 	bne.w	800b006 <_malloc_r+0x392>
 800aeae:	ea1b 0f0c 	tst.w	fp, ip
 800aeb2:	f040 80a8 	bne.w	800b006 <_malloc_r+0x392>
 800aeb6:	68b2      	ldr	r2, [r6, #8]
 800aeb8:	4449      	add	r1, r9
 800aeba:	f041 0101 	orr.w	r1, r1, #1
 800aebe:	6051      	str	r1, [r2, #4]
 800aec0:	4a2d      	ldr	r2, [pc, #180]	; (800af78 <_malloc_r+0x304>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6811      	ldr	r1, [r2, #0]
 800aec6:	428b      	cmp	r3, r1
 800aec8:	bf88      	it	hi
 800aeca:	6013      	strhi	r3, [r2, #0]
 800aecc:	4a2b      	ldr	r2, [pc, #172]	; (800af7c <_malloc_r+0x308>)
 800aece:	6811      	ldr	r1, [r2, #0]
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf88      	it	hi
 800aed4:	6013      	strhi	r3, [r2, #0]
 800aed6:	e0d0      	b.n	800b07a <_malloc_r+0x406>
 800aed8:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800aedc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800aee0:	d218      	bcs.n	800af14 <_malloc_r+0x2a0>
 800aee2:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800aee6:	3238      	adds	r2, #56	; 0x38
 800aee8:	f102 0e01 	add.w	lr, r2, #1
 800aeec:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800aef0:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800aef4:	45f0      	cmp	r8, lr
 800aef6:	d12b      	bne.n	800af50 <_malloc_r+0x2dc>
 800aef8:	1092      	asrs	r2, r2, #2
 800aefa:	f04f 0c01 	mov.w	ip, #1
 800aefe:	fa0c f202 	lsl.w	r2, ip, r2
 800af02:	4310      	orrs	r0, r2
 800af04:	6070      	str	r0, [r6, #4]
 800af06:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800af0a:	f8c8 4008 	str.w	r4, [r8, #8]
 800af0e:	f8ce 400c 	str.w	r4, [lr, #12]
 800af12:	e762      	b.n	800adda <_malloc_r+0x166>
 800af14:	2a14      	cmp	r2, #20
 800af16:	d801      	bhi.n	800af1c <_malloc_r+0x2a8>
 800af18:	325b      	adds	r2, #91	; 0x5b
 800af1a:	e7e5      	b.n	800aee8 <_malloc_r+0x274>
 800af1c:	2a54      	cmp	r2, #84	; 0x54
 800af1e:	d803      	bhi.n	800af28 <_malloc_r+0x2b4>
 800af20:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800af24:	326e      	adds	r2, #110	; 0x6e
 800af26:	e7df      	b.n	800aee8 <_malloc_r+0x274>
 800af28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800af2c:	d803      	bhi.n	800af36 <_malloc_r+0x2c2>
 800af2e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800af32:	3277      	adds	r2, #119	; 0x77
 800af34:	e7d8      	b.n	800aee8 <_malloc_r+0x274>
 800af36:	f240 5e54 	movw	lr, #1364	; 0x554
 800af3a:	4572      	cmp	r2, lr
 800af3c:	bf9a      	itte	ls
 800af3e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800af42:	327c      	addls	r2, #124	; 0x7c
 800af44:	227e      	movhi	r2, #126	; 0x7e
 800af46:	e7cf      	b.n	800aee8 <_malloc_r+0x274>
 800af48:	f8de e008 	ldr.w	lr, [lr, #8]
 800af4c:	45f0      	cmp	r8, lr
 800af4e:	d005      	beq.n	800af5c <_malloc_r+0x2e8>
 800af50:	f8de 2004 	ldr.w	r2, [lr, #4]
 800af54:	f022 0203 	bic.w	r2, r2, #3
 800af58:	4562      	cmp	r2, ip
 800af5a:	d8f5      	bhi.n	800af48 <_malloc_r+0x2d4>
 800af5c:	f8de 800c 	ldr.w	r8, [lr, #12]
 800af60:	e7d1      	b.n	800af06 <_malloc_r+0x292>
 800af62:	bf00      	nop
 800af64:	20000b80 	.word	0x20000b80
 800af68:	20000b88 	.word	0x20000b88
 800af6c:	200019c4 	.word	0x200019c4
 800af70:	20000f88 	.word	0x20000f88
 800af74:	20001994 	.word	0x20001994
 800af78:	200019bc 	.word	0x200019bc
 800af7c:	200019c0 	.word	0x200019c0
 800af80:	6860      	ldr	r0, [r4, #4]
 800af82:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800af86:	f020 0003 	bic.w	r0, r0, #3
 800af8a:	eba0 0a07 	sub.w	sl, r0, r7
 800af8e:	f1ba 0f0f 	cmp.w	sl, #15
 800af92:	dd12      	ble.n	800afba <_malloc_r+0x346>
 800af94:	68a3      	ldr	r3, [r4, #8]
 800af96:	19e2      	adds	r2, r4, r7
 800af98:	f047 0701 	orr.w	r7, r7, #1
 800af9c:	6067      	str	r7, [r4, #4]
 800af9e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800afa2:	f8cc 3008 	str.w	r3, [ip, #8]
 800afa6:	f04a 0301 	orr.w	r3, sl, #1
 800afaa:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800afae:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800afb2:	6053      	str	r3, [r2, #4]
 800afb4:	f844 a000 	str.w	sl, [r4, r0]
 800afb8:	e68d      	b.n	800acd6 <_malloc_r+0x62>
 800afba:	f1ba 0f00 	cmp.w	sl, #0
 800afbe:	db11      	blt.n	800afe4 <_malloc_r+0x370>
 800afc0:	4420      	add	r0, r4
 800afc2:	6843      	ldr	r3, [r0, #4]
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	6043      	str	r3, [r0, #4]
 800afca:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800afce:	4628      	mov	r0, r5
 800afd0:	f8c3 c00c 	str.w	ip, [r3, #12]
 800afd4:	f8cc 3008 	str.w	r3, [ip, #8]
 800afd8:	f000 f8a4 	bl	800b124 <__malloc_unlock>
 800afdc:	4620      	mov	r0, r4
 800afde:	b003      	add	sp, #12
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	4664      	mov	r4, ip
 800afe6:	e70e      	b.n	800ae06 <_malloc_r+0x192>
 800afe8:	f858 0908 	ldr.w	r0, [r8], #-8
 800afec:	4540      	cmp	r0, r8
 800afee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aff2:	f43f af12 	beq.w	800ae1a <_malloc_r+0x1a6>
 800aff6:	e717      	b.n	800ae28 <_malloc_r+0x1b4>
 800aff8:	3304      	adds	r3, #4
 800affa:	0052      	lsls	r2, r2, #1
 800affc:	4210      	tst	r0, r2
 800affe:	d0fb      	beq.n	800aff8 <_malloc_r+0x384>
 800b000:	e6fb      	b.n	800adfa <_malloc_r+0x186>
 800b002:	4673      	mov	r3, lr
 800b004:	e7fa      	b.n	800affc <_malloc_r+0x388>
 800b006:	6810      	ldr	r0, [r2, #0]
 800b008:	3001      	adds	r0, #1
 800b00a:	bf1b      	ittet	ne
 800b00c:	eba4 0b0b 	subne.w	fp, r4, fp
 800b010:	eb0b 020e 	addne.w	r2, fp, lr
 800b014:	6014      	streq	r4, [r2, #0]
 800b016:	601a      	strne	r2, [r3, #0]
 800b018:	f014 0b07 	ands.w	fp, r4, #7
 800b01c:	bf1a      	itte	ne
 800b01e:	f1cb 0008 	rsbne	r0, fp, #8
 800b022:	1824      	addne	r4, r4, r0
 800b024:	4658      	moveq	r0, fp
 800b026:	1862      	adds	r2, r4, r1
 800b028:	ea02 010c 	and.w	r1, r2, ip
 800b02c:	4480      	add	r8, r0
 800b02e:	eba8 0801 	sub.w	r8, r8, r1
 800b032:	ea08 080c 	and.w	r8, r8, ip
 800b036:	4641      	mov	r1, r8
 800b038:	4628      	mov	r0, r5
 800b03a:	9201      	str	r2, [sp, #4]
 800b03c:	f000 fa6a 	bl	800b514 <_sbrk_r>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	9a01      	ldr	r2, [sp, #4]
 800b044:	4b28      	ldr	r3, [pc, #160]	; (800b0e8 <_malloc_r+0x474>)
 800b046:	d107      	bne.n	800b058 <_malloc_r+0x3e4>
 800b048:	f1bb 0f00 	cmp.w	fp, #0
 800b04c:	d023      	beq.n	800b096 <_malloc_r+0x422>
 800b04e:	f1ab 0008 	sub.w	r0, fp, #8
 800b052:	4410      	add	r0, r2
 800b054:	f04f 0800 	mov.w	r8, #0
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	60b4      	str	r4, [r6, #8]
 800b05c:	1b00      	subs	r0, r0, r4
 800b05e:	4440      	add	r0, r8
 800b060:	4442      	add	r2, r8
 800b062:	f040 0001 	orr.w	r0, r0, #1
 800b066:	45b2      	cmp	sl, r6
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	6060      	str	r0, [r4, #4]
 800b06c:	f43f af28 	beq.w	800aec0 <_malloc_r+0x24c>
 800b070:	f1b9 0f0f 	cmp.w	r9, #15
 800b074:	d812      	bhi.n	800b09c <_malloc_r+0x428>
 800b076:	2301      	movs	r3, #1
 800b078:	6063      	str	r3, [r4, #4]
 800b07a:	68b3      	ldr	r3, [r6, #8]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f023 0303 	bic.w	r3, r3, #3
 800b082:	42bb      	cmp	r3, r7
 800b084:	eba3 0207 	sub.w	r2, r3, r7
 800b088:	d301      	bcc.n	800b08e <_malloc_r+0x41a>
 800b08a:	2a0f      	cmp	r2, #15
 800b08c:	dc22      	bgt.n	800b0d4 <_malloc_r+0x460>
 800b08e:	4628      	mov	r0, r5
 800b090:	f000 f848 	bl	800b124 <__malloc_unlock>
 800b094:	e5fa      	b.n	800ac8c <_malloc_r+0x18>
 800b096:	4610      	mov	r0, r2
 800b098:	46d8      	mov	r8, fp
 800b09a:	e7dd      	b.n	800b058 <_malloc_r+0x3e4>
 800b09c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b0a0:	f1a9 090c 	sub.w	r9, r9, #12
 800b0a4:	f029 0907 	bic.w	r9, r9, #7
 800b0a8:	f002 0201 	and.w	r2, r2, #1
 800b0ac:	ea42 0209 	orr.w	r2, r2, r9
 800b0b0:	f8ca 2004 	str.w	r2, [sl, #4]
 800b0b4:	2105      	movs	r1, #5
 800b0b6:	eb0a 0209 	add.w	r2, sl, r9
 800b0ba:	f1b9 0f0f 	cmp.w	r9, #15
 800b0be:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800b0c2:	f67f aefd 	bls.w	800aec0 <_malloc_r+0x24c>
 800b0c6:	f10a 0108 	add.w	r1, sl, #8
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f002 fb90 	bl	800d7f0 <_free_r>
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <_malloc_r+0x474>)
 800b0d2:	e6f5      	b.n	800aec0 <_malloc_r+0x24c>
 800b0d4:	68b4      	ldr	r4, [r6, #8]
 800b0d6:	f047 0301 	orr.w	r3, r7, #1
 800b0da:	4427      	add	r7, r4
 800b0dc:	f042 0201 	orr.w	r2, r2, #1
 800b0e0:	6063      	str	r3, [r4, #4]
 800b0e2:	60b7      	str	r7, [r6, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	e5f6      	b.n	800acd6 <_malloc_r+0x62>
 800b0e8:	20001994 	.word	0x20001994

0800b0ec <memcpy>:
 800b0ec:	440a      	add	r2, r1
 800b0ee:	4291      	cmp	r1, r2
 800b0f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b0f4:	d100      	bne.n	800b0f8 <memcpy+0xc>
 800b0f6:	4770      	bx	lr
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b102:	4291      	cmp	r1, r2
 800b104:	d1f9      	bne.n	800b0fa <memcpy+0xe>
 800b106:	bd10      	pop	{r4, pc}

0800b108 <memset>:
 800b108:	4402      	add	r2, r0
 800b10a:	4603      	mov	r3, r0
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d100      	bne.n	800b112 <memset+0xa>
 800b110:	4770      	bx	lr
 800b112:	f803 1b01 	strb.w	r1, [r3], #1
 800b116:	e7f9      	b.n	800b10c <memset+0x4>

0800b118 <__malloc_lock>:
 800b118:	4801      	ldr	r0, [pc, #4]	; (800b120 <__malloc_lock+0x8>)
 800b11a:	f002 bd99 	b.w	800dc50 <__retarget_lock_acquire_recursive>
 800b11e:	bf00      	nop
 800b120:	200019c9 	.word	0x200019c9

0800b124 <__malloc_unlock>:
 800b124:	4801      	ldr	r0, [pc, #4]	; (800b12c <__malloc_unlock+0x8>)
 800b126:	f002 bd94 	b.w	800dc52 <__retarget_lock_release_recursive>
 800b12a:	bf00      	nop
 800b12c:	200019c9 	.word	0x200019c9

0800b130 <_puts_r>:
 800b130:	b530      	push	{r4, r5, lr}
 800b132:	4605      	mov	r5, r0
 800b134:	b089      	sub	sp, #36	; 0x24
 800b136:	4608      	mov	r0, r1
 800b138:	460c      	mov	r4, r1
 800b13a:	f7f5 f849 	bl	80001d0 <strlen>
 800b13e:	4b1e      	ldr	r3, [pc, #120]	; (800b1b8 <_puts_r+0x88>)
 800b140:	9306      	str	r3, [sp, #24]
 800b142:	2301      	movs	r3, #1
 800b144:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800b148:	9307      	str	r3, [sp, #28]
 800b14a:	4418      	add	r0, r3
 800b14c:	ab04      	add	r3, sp, #16
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	2302      	movs	r3, #2
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b156:	68ac      	ldr	r4, [r5, #8]
 800b158:	9003      	str	r0, [sp, #12]
 800b15a:	b913      	cbnz	r3, 800b162 <_puts_r+0x32>
 800b15c:	4628      	mov	r0, r5
 800b15e:	f002 fab7 	bl	800d6d0 <__sinit>
 800b162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b164:	07db      	lsls	r3, r3, #31
 800b166:	d405      	bmi.n	800b174 <_puts_r+0x44>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	0598      	lsls	r0, r3, #22
 800b16c:	d402      	bmi.n	800b174 <_puts_r+0x44>
 800b16e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b170:	f002 fd6e 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800b174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b178:	0499      	lsls	r1, r3, #18
 800b17a:	d406      	bmi.n	800b18a <_puts_r+0x5a>
 800b17c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b188:	6663      	str	r3, [r4, #100]	; 0x64
 800b18a:	4628      	mov	r0, r5
 800b18c:	aa01      	add	r2, sp, #4
 800b18e:	4621      	mov	r1, r4
 800b190:	f002 fbee 	bl	800d970 <__sfvwrite_r>
 800b194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b196:	2800      	cmp	r0, #0
 800b198:	bf14      	ite	ne
 800b19a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800b19e:	250a      	moveq	r5, #10
 800b1a0:	07da      	lsls	r2, r3, #31
 800b1a2:	d405      	bmi.n	800b1b0 <_puts_r+0x80>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	059b      	lsls	r3, r3, #22
 800b1a8:	d402      	bmi.n	800b1b0 <_puts_r+0x80>
 800b1aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ac:	f002 fd51 	bl	800dc52 <__retarget_lock_release_recursive>
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	b009      	add	sp, #36	; 0x24
 800b1b4:	bd30      	pop	{r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	08014936 	.word	0x08014936

0800b1bc <puts>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <puts+0xc>)
 800b1be:	4601      	mov	r1, r0
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f7ff bfb5 	b.w	800b130 <_puts_r>
 800b1c6:	bf00      	nop
 800b1c8:	20000750 	.word	0x20000750

0800b1cc <_realloc_r>:
 800b1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	4681      	mov	r9, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	b929      	cbnz	r1, 800b1e2 <_realloc_r+0x16>
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	b003      	add	sp, #12
 800b1da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1de:	f7ff bd49 	b.w	800ac74 <_malloc_r>
 800b1e2:	9201      	str	r2, [sp, #4]
 800b1e4:	f7ff ff98 	bl	800b118 <__malloc_lock>
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	f102 080b 	add.w	r8, r2, #11
 800b1ee:	f1b8 0f16 	cmp.w	r8, #22
 800b1f2:	d90b      	bls.n	800b20c <_realloc_r+0x40>
 800b1f4:	f038 0807 	bics.w	r8, r8, #7
 800b1f8:	d50a      	bpl.n	800b210 <_realloc_r+0x44>
 800b1fa:	230c      	movs	r3, #12
 800b1fc:	f8c9 3000 	str.w	r3, [r9]
 800b200:	f04f 0b00 	mov.w	fp, #0
 800b204:	4658      	mov	r0, fp
 800b206:	b003      	add	sp, #12
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20c:	f04f 0810 	mov.w	r8, #16
 800b210:	4590      	cmp	r8, r2
 800b212:	d3f2      	bcc.n	800b1fa <_realloc_r+0x2e>
 800b214:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b218:	f025 0603 	bic.w	r6, r5, #3
 800b21c:	45b0      	cmp	r8, r6
 800b21e:	f1a4 0a08 	sub.w	sl, r4, #8
 800b222:	f340 816e 	ble.w	800b502 <_realloc_r+0x336>
 800b226:	499b      	ldr	r1, [pc, #620]	; (800b494 <_realloc_r+0x2c8>)
 800b228:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b22c:	eb0a 0306 	add.w	r3, sl, r6
 800b230:	459c      	cmp	ip, r3
 800b232:	6859      	ldr	r1, [r3, #4]
 800b234:	d005      	beq.n	800b242 <_realloc_r+0x76>
 800b236:	f021 0001 	bic.w	r0, r1, #1
 800b23a:	4418      	add	r0, r3
 800b23c:	6840      	ldr	r0, [r0, #4]
 800b23e:	07c7      	lsls	r7, r0, #31
 800b240:	d427      	bmi.n	800b292 <_realloc_r+0xc6>
 800b242:	f021 0103 	bic.w	r1, r1, #3
 800b246:	459c      	cmp	ip, r3
 800b248:	eb06 0701 	add.w	r7, r6, r1
 800b24c:	d119      	bne.n	800b282 <_realloc_r+0xb6>
 800b24e:	f108 0010 	add.w	r0, r8, #16
 800b252:	42b8      	cmp	r0, r7
 800b254:	dc1f      	bgt.n	800b296 <_realloc_r+0xca>
 800b256:	eb0a 0308 	add.w	r3, sl, r8
 800b25a:	4a8e      	ldr	r2, [pc, #568]	; (800b494 <_realloc_r+0x2c8>)
 800b25c:	eba7 0708 	sub.w	r7, r7, r8
 800b260:	f047 0701 	orr.w	r7, r7, #1
 800b264:	6093      	str	r3, [r2, #8]
 800b266:	605f      	str	r7, [r3, #4]
 800b268:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	ea43 0308 	orr.w	r3, r3, r8
 800b274:	f844 3c04 	str.w	r3, [r4, #-4]
 800b278:	4648      	mov	r0, r9
 800b27a:	f7ff ff53 	bl	800b124 <__malloc_unlock>
 800b27e:	46a3      	mov	fp, r4
 800b280:	e7c0      	b.n	800b204 <_realloc_r+0x38>
 800b282:	45b8      	cmp	r8, r7
 800b284:	dc07      	bgt.n	800b296 <_realloc_r+0xca>
 800b286:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b28a:	60da      	str	r2, [r3, #12]
 800b28c:	6093      	str	r3, [r2, #8]
 800b28e:	4655      	mov	r5, sl
 800b290:	e07f      	b.n	800b392 <_realloc_r+0x1c6>
 800b292:	2100      	movs	r1, #0
 800b294:	460b      	mov	r3, r1
 800b296:	07e8      	lsls	r0, r5, #31
 800b298:	f100 80e5 	bmi.w	800b466 <_realloc_r+0x29a>
 800b29c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b2a0:	ebaa 0505 	sub.w	r5, sl, r5
 800b2a4:	6868      	ldr	r0, [r5, #4]
 800b2a6:	f020 0003 	bic.w	r0, r0, #3
 800b2aa:	eb00 0b06 	add.w	fp, r0, r6
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80a5 	beq.w	800b3fe <_realloc_r+0x232>
 800b2b4:	459c      	cmp	ip, r3
 800b2b6:	eb01 070b 	add.w	r7, r1, fp
 800b2ba:	d14a      	bne.n	800b352 <_realloc_r+0x186>
 800b2bc:	f108 0310 	add.w	r3, r8, #16
 800b2c0:	42bb      	cmp	r3, r7
 800b2c2:	f300 809c 	bgt.w	800b3fe <_realloc_r+0x232>
 800b2c6:	46ab      	mov	fp, r5
 800b2c8:	68eb      	ldr	r3, [r5, #12]
 800b2ca:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800b2ce:	60d3      	str	r3, [r2, #12]
 800b2d0:	609a      	str	r2, [r3, #8]
 800b2d2:	1f32      	subs	r2, r6, #4
 800b2d4:	2a24      	cmp	r2, #36	; 0x24
 800b2d6:	d837      	bhi.n	800b348 <_realloc_r+0x17c>
 800b2d8:	2a13      	cmp	r2, #19
 800b2da:	d933      	bls.n	800b344 <_realloc_r+0x178>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	60ab      	str	r3, [r5, #8]
 800b2e0:	6863      	ldr	r3, [r4, #4]
 800b2e2:	60eb      	str	r3, [r5, #12]
 800b2e4:	2a1b      	cmp	r2, #27
 800b2e6:	d81b      	bhi.n	800b320 <_realloc_r+0x154>
 800b2e8:	3408      	adds	r4, #8
 800b2ea:	f105 0310 	add.w	r3, r5, #16
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	6862      	ldr	r2, [r4, #4]
 800b2f4:	605a      	str	r2, [r3, #4]
 800b2f6:	68a2      	ldr	r2, [r4, #8]
 800b2f8:	609a      	str	r2, [r3, #8]
 800b2fa:	eb05 0308 	add.w	r3, r5, r8
 800b2fe:	4a65      	ldr	r2, [pc, #404]	; (800b494 <_realloc_r+0x2c8>)
 800b300:	eba7 0708 	sub.w	r7, r7, r8
 800b304:	f047 0701 	orr.w	r7, r7, #1
 800b308:	6093      	str	r3, [r2, #8]
 800b30a:	605f      	str	r7, [r3, #4]
 800b30c:	686b      	ldr	r3, [r5, #4]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	ea43 0308 	orr.w	r3, r3, r8
 800b316:	606b      	str	r3, [r5, #4]
 800b318:	4648      	mov	r0, r9
 800b31a:	f7ff ff03 	bl	800b124 <__malloc_unlock>
 800b31e:	e771      	b.n	800b204 <_realloc_r+0x38>
 800b320:	68a3      	ldr	r3, [r4, #8]
 800b322:	612b      	str	r3, [r5, #16]
 800b324:	68e3      	ldr	r3, [r4, #12]
 800b326:	616b      	str	r3, [r5, #20]
 800b328:	2a24      	cmp	r2, #36	; 0x24
 800b32a:	bf01      	itttt	eq
 800b32c:	6923      	ldreq	r3, [r4, #16]
 800b32e:	61ab      	streq	r3, [r5, #24]
 800b330:	6962      	ldreq	r2, [r4, #20]
 800b332:	61ea      	streq	r2, [r5, #28]
 800b334:	bf19      	ittee	ne
 800b336:	3410      	addne	r4, #16
 800b338:	f105 0318 	addne.w	r3, r5, #24
 800b33c:	f105 0320 	addeq.w	r3, r5, #32
 800b340:	3418      	addeq	r4, #24
 800b342:	e7d4      	b.n	800b2ee <_realloc_r+0x122>
 800b344:	465b      	mov	r3, fp
 800b346:	e7d2      	b.n	800b2ee <_realloc_r+0x122>
 800b348:	4621      	mov	r1, r4
 800b34a:	4658      	mov	r0, fp
 800b34c:	f002 fc82 	bl	800dc54 <memmove>
 800b350:	e7d3      	b.n	800b2fa <_realloc_r+0x12e>
 800b352:	45b8      	cmp	r8, r7
 800b354:	dc53      	bgt.n	800b3fe <_realloc_r+0x232>
 800b356:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b35a:	4628      	mov	r0, r5
 800b35c:	60da      	str	r2, [r3, #12]
 800b35e:	6093      	str	r3, [r2, #8]
 800b360:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b364:	68eb      	ldr	r3, [r5, #12]
 800b366:	60d3      	str	r3, [r2, #12]
 800b368:	609a      	str	r2, [r3, #8]
 800b36a:	1f32      	subs	r2, r6, #4
 800b36c:	2a24      	cmp	r2, #36	; 0x24
 800b36e:	d842      	bhi.n	800b3f6 <_realloc_r+0x22a>
 800b370:	2a13      	cmp	r2, #19
 800b372:	d908      	bls.n	800b386 <_realloc_r+0x1ba>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	60ab      	str	r3, [r5, #8]
 800b378:	6863      	ldr	r3, [r4, #4]
 800b37a:	60eb      	str	r3, [r5, #12]
 800b37c:	2a1b      	cmp	r2, #27
 800b37e:	d828      	bhi.n	800b3d2 <_realloc_r+0x206>
 800b380:	3408      	adds	r4, #8
 800b382:	f105 0010 	add.w	r0, r5, #16
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	6043      	str	r3, [r0, #4]
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	6083      	str	r3, [r0, #8]
 800b392:	686b      	ldr	r3, [r5, #4]
 800b394:	eba7 0008 	sub.w	r0, r7, r8
 800b398:	280f      	cmp	r0, #15
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	eb05 0207 	add.w	r2, r5, r7
 800b3a2:	f240 80b0 	bls.w	800b506 <_realloc_r+0x33a>
 800b3a6:	eb05 0108 	add.w	r1, r5, r8
 800b3aa:	ea48 0303 	orr.w	r3, r8, r3
 800b3ae:	f040 0001 	orr.w	r0, r0, #1
 800b3b2:	606b      	str	r3, [r5, #4]
 800b3b4:	6048      	str	r0, [r1, #4]
 800b3b6:	6853      	ldr	r3, [r2, #4]
 800b3b8:	f043 0301 	orr.w	r3, r3, #1
 800b3bc:	6053      	str	r3, [r2, #4]
 800b3be:	3108      	adds	r1, #8
 800b3c0:	4648      	mov	r0, r9
 800b3c2:	f002 fa15 	bl	800d7f0 <_free_r>
 800b3c6:	4648      	mov	r0, r9
 800b3c8:	f7ff feac 	bl	800b124 <__malloc_unlock>
 800b3cc:	f105 0b08 	add.w	fp, r5, #8
 800b3d0:	e718      	b.n	800b204 <_realloc_r+0x38>
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	612b      	str	r3, [r5, #16]
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	616b      	str	r3, [r5, #20]
 800b3da:	2a24      	cmp	r2, #36	; 0x24
 800b3dc:	bf01      	itttt	eq
 800b3de:	6923      	ldreq	r3, [r4, #16]
 800b3e0:	61ab      	streq	r3, [r5, #24]
 800b3e2:	6963      	ldreq	r3, [r4, #20]
 800b3e4:	61eb      	streq	r3, [r5, #28]
 800b3e6:	bf19      	ittee	ne
 800b3e8:	3410      	addne	r4, #16
 800b3ea:	f105 0018 	addne.w	r0, r5, #24
 800b3ee:	f105 0020 	addeq.w	r0, r5, #32
 800b3f2:	3418      	addeq	r4, #24
 800b3f4:	e7c7      	b.n	800b386 <_realloc_r+0x1ba>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	f002 fc2c 	bl	800dc54 <memmove>
 800b3fc:	e7c9      	b.n	800b392 <_realloc_r+0x1c6>
 800b3fe:	45d8      	cmp	r8, fp
 800b400:	dc31      	bgt.n	800b466 <_realloc_r+0x29a>
 800b402:	4628      	mov	r0, r5
 800b404:	68eb      	ldr	r3, [r5, #12]
 800b406:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b40a:	60d3      	str	r3, [r2, #12]
 800b40c:	609a      	str	r2, [r3, #8]
 800b40e:	1f32      	subs	r2, r6, #4
 800b410:	2a24      	cmp	r2, #36	; 0x24
 800b412:	d824      	bhi.n	800b45e <_realloc_r+0x292>
 800b414:	2a13      	cmp	r2, #19
 800b416:	d908      	bls.n	800b42a <_realloc_r+0x25e>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	60ab      	str	r3, [r5, #8]
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	60eb      	str	r3, [r5, #12]
 800b420:	2a1b      	cmp	r2, #27
 800b422:	d80a      	bhi.n	800b43a <_realloc_r+0x26e>
 800b424:	3408      	adds	r4, #8
 800b426:	f105 0010 	add.w	r0, r5, #16
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	6003      	str	r3, [r0, #0]
 800b42e:	6863      	ldr	r3, [r4, #4]
 800b430:	6043      	str	r3, [r0, #4]
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	6083      	str	r3, [r0, #8]
 800b436:	465f      	mov	r7, fp
 800b438:	e7ab      	b.n	800b392 <_realloc_r+0x1c6>
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	612b      	str	r3, [r5, #16]
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	616b      	str	r3, [r5, #20]
 800b442:	2a24      	cmp	r2, #36	; 0x24
 800b444:	bf01      	itttt	eq
 800b446:	6923      	ldreq	r3, [r4, #16]
 800b448:	61ab      	streq	r3, [r5, #24]
 800b44a:	6963      	ldreq	r3, [r4, #20]
 800b44c:	61eb      	streq	r3, [r5, #28]
 800b44e:	bf19      	ittee	ne
 800b450:	3410      	addne	r4, #16
 800b452:	f105 0018 	addne.w	r0, r5, #24
 800b456:	f105 0020 	addeq.w	r0, r5, #32
 800b45a:	3418      	addeq	r4, #24
 800b45c:	e7e5      	b.n	800b42a <_realloc_r+0x25e>
 800b45e:	4621      	mov	r1, r4
 800b460:	f002 fbf8 	bl	800dc54 <memmove>
 800b464:	e7e7      	b.n	800b436 <_realloc_r+0x26a>
 800b466:	4611      	mov	r1, r2
 800b468:	4648      	mov	r0, r9
 800b46a:	f7ff fc03 	bl	800ac74 <_malloc_r>
 800b46e:	4683      	mov	fp, r0
 800b470:	2800      	cmp	r0, #0
 800b472:	f43f af51 	beq.w	800b318 <_realloc_r+0x14c>
 800b476:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b47a:	f023 0301 	bic.w	r3, r3, #1
 800b47e:	4453      	add	r3, sl
 800b480:	f1a0 0208 	sub.w	r2, r0, #8
 800b484:	4293      	cmp	r3, r2
 800b486:	d107      	bne.n	800b498 <_realloc_r+0x2cc>
 800b488:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b48c:	f027 0703 	bic.w	r7, r7, #3
 800b490:	4437      	add	r7, r6
 800b492:	e6fc      	b.n	800b28e <_realloc_r+0xc2>
 800b494:	20000b80 	.word	0x20000b80
 800b498:	1f32      	subs	r2, r6, #4
 800b49a:	2a24      	cmp	r2, #36	; 0x24
 800b49c:	d82d      	bhi.n	800b4fa <_realloc_r+0x32e>
 800b49e:	2a13      	cmp	r2, #19
 800b4a0:	d928      	bls.n	800b4f4 <_realloc_r+0x328>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	6863      	ldr	r3, [r4, #4]
 800b4a8:	6043      	str	r3, [r0, #4]
 800b4aa:	2a1b      	cmp	r2, #27
 800b4ac:	d80e      	bhi.n	800b4cc <_realloc_r+0x300>
 800b4ae:	f104 0208 	add.w	r2, r4, #8
 800b4b2:	f100 0308 	add.w	r3, r0, #8
 800b4b6:	6811      	ldr	r1, [r2, #0]
 800b4b8:	6019      	str	r1, [r3, #0]
 800b4ba:	6851      	ldr	r1, [r2, #4]
 800b4bc:	6059      	str	r1, [r3, #4]
 800b4be:	6892      	ldr	r2, [r2, #8]
 800b4c0:	609a      	str	r2, [r3, #8]
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f002 f993 	bl	800d7f0 <_free_r>
 800b4ca:	e725      	b.n	800b318 <_realloc_r+0x14c>
 800b4cc:	68a3      	ldr	r3, [r4, #8]
 800b4ce:	6083      	str	r3, [r0, #8]
 800b4d0:	68e3      	ldr	r3, [r4, #12]
 800b4d2:	60c3      	str	r3, [r0, #12]
 800b4d4:	2a24      	cmp	r2, #36	; 0x24
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6923      	ldreq	r3, [r4, #16]
 800b4da:	6103      	streq	r3, [r0, #16]
 800b4dc:	6961      	ldreq	r1, [r4, #20]
 800b4de:	6141      	streq	r1, [r0, #20]
 800b4e0:	bf19      	ittee	ne
 800b4e2:	f104 0210 	addne.w	r2, r4, #16
 800b4e6:	f100 0310 	addne.w	r3, r0, #16
 800b4ea:	f104 0218 	addeq.w	r2, r4, #24
 800b4ee:	f100 0318 	addeq.w	r3, r0, #24
 800b4f2:	e7e0      	b.n	800b4b6 <_realloc_r+0x2ea>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	e7dd      	b.n	800b4b6 <_realloc_r+0x2ea>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	f002 fbaa 	bl	800dc54 <memmove>
 800b500:	e7df      	b.n	800b4c2 <_realloc_r+0x2f6>
 800b502:	4637      	mov	r7, r6
 800b504:	e6c3      	b.n	800b28e <_realloc_r+0xc2>
 800b506:	431f      	orrs	r7, r3
 800b508:	606f      	str	r7, [r5, #4]
 800b50a:	6853      	ldr	r3, [r2, #4]
 800b50c:	f043 0301 	orr.w	r3, r3, #1
 800b510:	6053      	str	r3, [r2, #4]
 800b512:	e758      	b.n	800b3c6 <_realloc_r+0x1fa>

0800b514 <_sbrk_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d06      	ldr	r5, [pc, #24]	; (800b530 <_sbrk_r+0x1c>)
 800b518:	2300      	movs	r3, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	f7f6 fe36 	bl	8002190 <_sbrk>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_sbrk_r+0x1a>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_sbrk_r+0x1a>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	200019cc 	.word	0x200019cc

0800b534 <sprintf>:
 800b534:	b40e      	push	{r1, r2, r3}
 800b536:	b500      	push	{lr}
 800b538:	b09c      	sub	sp, #112	; 0x70
 800b53a:	ab1d      	add	r3, sp, #116	; 0x74
 800b53c:	9002      	str	r0, [sp, #8]
 800b53e:	9006      	str	r0, [sp, #24]
 800b540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b544:	4809      	ldr	r0, [pc, #36]	; (800b56c <sprintf+0x38>)
 800b546:	9107      	str	r1, [sp, #28]
 800b548:	9104      	str	r1, [sp, #16]
 800b54a:	4909      	ldr	r1, [pc, #36]	; (800b570 <sprintf+0x3c>)
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	9105      	str	r1, [sp, #20]
 800b552:	6800      	ldr	r0, [r0, #0]
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	a902      	add	r1, sp, #8
 800b558:	f000 f80e 	bl	800b578 <_svfprintf_r>
 800b55c:	9b02      	ldr	r3, [sp, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]
 800b562:	b01c      	add	sp, #112	; 0x70
 800b564:	f85d eb04 	ldr.w	lr, [sp], #4
 800b568:	b003      	add	sp, #12
 800b56a:	4770      	bx	lr
 800b56c:	20000750 	.word	0x20000750
 800b570:	ffff0208 	.word	0xffff0208
 800b574:	00000000 	.word	0x00000000

0800b578 <_svfprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	ed2d 8b04 	vpush	{d8-d9}
 800b580:	b0cf      	sub	sp, #316	; 0x13c
 800b582:	4688      	mov	r8, r1
 800b584:	4691      	mov	r9, r2
 800b586:	461e      	mov	r6, r3
 800b588:	4682      	mov	sl, r0
 800b58a:	f002 fb5b 	bl	800dc44 <_localeconv_r>
 800b58e:	6803      	ldr	r3, [r0, #0]
 800b590:	9313      	str	r3, [sp, #76]	; 0x4c
 800b592:	4618      	mov	r0, r3
 800b594:	f7f4 fe1c 	bl	80001d0 <strlen>
 800b598:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b59c:	900d      	str	r0, [sp, #52]	; 0x34
 800b59e:	0618      	lsls	r0, r3, #24
 800b5a0:	d51a      	bpl.n	800b5d8 <_svfprintf_r+0x60>
 800b5a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b5a6:	b9bb      	cbnz	r3, 800b5d8 <_svfprintf_r+0x60>
 800b5a8:	2140      	movs	r1, #64	; 0x40
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	f7ff fb62 	bl	800ac74 <_malloc_r>
 800b5b0:	f8c8 0000 	str.w	r0, [r8]
 800b5b4:	f8c8 0010 	str.w	r0, [r8, #16]
 800b5b8:	b958      	cbnz	r0, 800b5d2 <_svfprintf_r+0x5a>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	f8ca 3000 	str.w	r3, [sl]
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b5c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b5c8:	b04f      	add	sp, #316	; 0x13c
 800b5ca:	ecbd 8b04 	vpop	{d8-d9}
 800b5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d2:	2340      	movs	r3, #64	; 0x40
 800b5d4:	f8c8 3014 	str.w	r3, [r8, #20]
 800b5d8:	ed9f 7b93 	vldr	d7, [pc, #588]	; 800b828 <_svfprintf_r+0x2b0>
 800b5dc:	2500      	movs	r5, #0
 800b5de:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800b5e2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b5e6:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800b5ea:	ac25      	add	r4, sp, #148	; 0x94
 800b5ec:	9422      	str	r4, [sp, #136]	; 0x88
 800b5ee:	9505      	str	r5, [sp, #20]
 800b5f0:	950a      	str	r5, [sp, #40]	; 0x28
 800b5f2:	9512      	str	r5, [sp, #72]	; 0x48
 800b5f4:	9514      	str	r5, [sp, #80]	; 0x50
 800b5f6:	950c      	str	r5, [sp, #48]	; 0x30
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	461d      	mov	r5, r3
 800b5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b600:	b10a      	cbz	r2, 800b606 <_svfprintf_r+0x8e>
 800b602:	2a25      	cmp	r2, #37	; 0x25
 800b604:	d1f9      	bne.n	800b5fa <_svfprintf_r+0x82>
 800b606:	ebb5 0709 	subs.w	r7, r5, r9
 800b60a:	d00d      	beq.n	800b628 <_svfprintf_r+0xb0>
 800b60c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b60e:	443b      	add	r3, r7
 800b610:	9324      	str	r3, [sp, #144]	; 0x90
 800b612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b614:	3301      	adds	r3, #1
 800b616:	2b07      	cmp	r3, #7
 800b618:	e9c4 9700 	strd	r9, r7, [r4]
 800b61c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b61e:	dc79      	bgt.n	800b714 <_svfprintf_r+0x19c>
 800b620:	3408      	adds	r4, #8
 800b622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b624:	443b      	add	r3, r7
 800b626:	930c      	str	r3, [sp, #48]	; 0x30
 800b628:	782b      	ldrb	r3, [r5, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f001 8148 	beq.w	800c8c0 <_svfprintf_r+0x1348>
 800b630:	2300      	movs	r3, #0
 800b632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b636:	9204      	str	r2, [sp, #16]
 800b638:	3501      	adds	r5, #1
 800b63a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b63e:	9310      	str	r3, [sp, #64]	; 0x40
 800b640:	469b      	mov	fp, r3
 800b642:	270a      	movs	r7, #10
 800b644:	222b      	movs	r2, #43	; 0x2b
 800b646:	462b      	mov	r3, r5
 800b648:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b64c:	9106      	str	r1, [sp, #24]
 800b64e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b650:	9b06      	ldr	r3, [sp, #24]
 800b652:	3b20      	subs	r3, #32
 800b654:	2b5a      	cmp	r3, #90	; 0x5a
 800b656:	f200 85bf 	bhi.w	800c1d8 <_svfprintf_r+0xc60>
 800b65a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b65e:	007e      	.short	0x007e
 800b660:	05bd05bd 	.word	0x05bd05bd
 800b664:	05bd0086 	.word	0x05bd0086
 800b668:	05bd05bd 	.word	0x05bd05bd
 800b66c:	05bd0065 	.word	0x05bd0065
 800b670:	008905bd 	.word	0x008905bd
 800b674:	05bd0093 	.word	0x05bd0093
 800b678:	00960090 	.word	0x00960090
 800b67c:	00b305bd 	.word	0x00b305bd
 800b680:	00b600b6 	.word	0x00b600b6
 800b684:	00b600b6 	.word	0x00b600b6
 800b688:	00b600b6 	.word	0x00b600b6
 800b68c:	00b600b6 	.word	0x00b600b6
 800b690:	05bd00b6 	.word	0x05bd00b6
 800b694:	05bd05bd 	.word	0x05bd05bd
 800b698:	05bd05bd 	.word	0x05bd05bd
 800b69c:	05bd05bd 	.word	0x05bd05bd
 800b6a0:	05bd012c 	.word	0x05bd012c
 800b6a4:	00fc00e9 	.word	0x00fc00e9
 800b6a8:	012c012c 	.word	0x012c012c
 800b6ac:	05bd012c 	.word	0x05bd012c
 800b6b0:	05bd05bd 	.word	0x05bd05bd
 800b6b4:	00c605bd 	.word	0x00c605bd
 800b6b8:	05bd05bd 	.word	0x05bd05bd
 800b6bc:	05bd0498 	.word	0x05bd0498
 800b6c0:	05bd05bd 	.word	0x05bd05bd
 800b6c4:	05bd04e2 	.word	0x05bd04e2
 800b6c8:	05bd0503 	.word	0x05bd0503
 800b6cc:	052505bd 	.word	0x052505bd
 800b6d0:	05bd05bd 	.word	0x05bd05bd
 800b6d4:	05bd05bd 	.word	0x05bd05bd
 800b6d8:	05bd05bd 	.word	0x05bd05bd
 800b6dc:	05bd05bd 	.word	0x05bd05bd
 800b6e0:	05bd012c 	.word	0x05bd012c
 800b6e4:	00fe00e9 	.word	0x00fe00e9
 800b6e8:	012c012c 	.word	0x012c012c
 800b6ec:	00c9012c 	.word	0x00c9012c
 800b6f0:	00dd00fe 	.word	0x00dd00fe
 800b6f4:	00d605bd 	.word	0x00d605bd
 800b6f8:	047305bd 	.word	0x047305bd
 800b6fc:	04d0049a 	.word	0x04d0049a
 800b700:	05bd00dd 	.word	0x05bd00dd
 800b704:	007c04e2 	.word	0x007c04e2
 800b708:	05bd0505 	.word	0x05bd0505
 800b70c:	054405bd 	.word	0x054405bd
 800b710:	007c05bd 	.word	0x007c05bd
 800b714:	aa22      	add	r2, sp, #136	; 0x88
 800b716:	4641      	mov	r1, r8
 800b718:	4650      	mov	r0, sl
 800b71a:	f002 fe79 	bl	800e410 <__ssprint_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f040 8137 	bne.w	800b992 <_svfprintf_r+0x41a>
 800b724:	ac25      	add	r4, sp, #148	; 0x94
 800b726:	e77c      	b.n	800b622 <_svfprintf_r+0xaa>
 800b728:	4650      	mov	r0, sl
 800b72a:	f002 fa8b 	bl	800dc44 <_localeconv_r>
 800b72e:	6843      	ldr	r3, [r0, #4]
 800b730:	9314      	str	r3, [sp, #80]	; 0x50
 800b732:	4618      	mov	r0, r3
 800b734:	f7f4 fd4c 	bl	80001d0 <strlen>
 800b738:	9012      	str	r0, [sp, #72]	; 0x48
 800b73a:	4650      	mov	r0, sl
 800b73c:	f002 fa82 	bl	800dc44 <_localeconv_r>
 800b740:	6883      	ldr	r3, [r0, #8]
 800b742:	930a      	str	r3, [sp, #40]	; 0x28
 800b744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b746:	222b      	movs	r2, #43	; 0x2b
 800b748:	b12b      	cbz	r3, 800b756 <_svfprintf_r+0x1de>
 800b74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74c:	b11b      	cbz	r3, 800b756 <_svfprintf_r+0x1de>
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	b10b      	cbz	r3, 800b756 <_svfprintf_r+0x1de>
 800b752:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800b756:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b758:	e775      	b.n	800b646 <_svfprintf_r+0xce>
 800b75a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f9      	bne.n	800b756 <_svfprintf_r+0x1de>
 800b762:	2320      	movs	r3, #32
 800b764:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b768:	e7f5      	b.n	800b756 <_svfprintf_r+0x1de>
 800b76a:	f04b 0b01 	orr.w	fp, fp, #1
 800b76e:	e7f2      	b.n	800b756 <_svfprintf_r+0x1de>
 800b770:	f856 3b04 	ldr.w	r3, [r6], #4
 800b774:	9310      	str	r3, [sp, #64]	; 0x40
 800b776:	2b00      	cmp	r3, #0
 800b778:	daed      	bge.n	800b756 <_svfprintf_r+0x1de>
 800b77a:	425b      	negs	r3, r3
 800b77c:	9310      	str	r3, [sp, #64]	; 0x40
 800b77e:	f04b 0b04 	orr.w	fp, fp, #4
 800b782:	e7e8      	b.n	800b756 <_svfprintf_r+0x1de>
 800b784:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b788:	e7e5      	b.n	800b756 <_svfprintf_r+0x1de>
 800b78a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b78c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b790:	9306      	str	r3, [sp, #24]
 800b792:	2b2a      	cmp	r3, #42	; 0x2a
 800b794:	d113      	bne.n	800b7be <_svfprintf_r+0x246>
 800b796:	f856 0b04 	ldr.w	r0, [r6], #4
 800b79a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b79c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	e7d8      	b.n	800b756 <_svfprintf_r+0x1de>
 800b7a4:	9904      	ldr	r1, [sp, #16]
 800b7a6:	fb07 3301 	mla	r3, r7, r1, r3
 800b7aa:	9304      	str	r3, [sp, #16]
 800b7ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7b0:	9306      	str	r3, [sp, #24]
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	3b30      	subs	r3, #48	; 0x30
 800b7b6:	2b09      	cmp	r3, #9
 800b7b8:	d9f4      	bls.n	800b7a4 <_svfprintf_r+0x22c>
 800b7ba:	950b      	str	r5, [sp, #44]	; 0x2c
 800b7bc:	e748      	b.n	800b650 <_svfprintf_r+0xd8>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	e7f6      	b.n	800b7b2 <_svfprintf_r+0x23a>
 800b7c4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800b7c8:	e7c5      	b.n	800b756 <_svfprintf_r+0x1de>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7ce:	9310      	str	r3, [sp, #64]	; 0x40
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b7d4:	3b30      	subs	r3, #48	; 0x30
 800b7d6:	fb07 3301 	mla	r3, r7, r1, r3
 800b7da:	9310      	str	r3, [sp, #64]	; 0x40
 800b7dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7e0:	9306      	str	r3, [sp, #24]
 800b7e2:	3b30      	subs	r3, #48	; 0x30
 800b7e4:	2b09      	cmp	r3, #9
 800b7e6:	d9f3      	bls.n	800b7d0 <_svfprintf_r+0x258>
 800b7e8:	e7e7      	b.n	800b7ba <_svfprintf_r+0x242>
 800b7ea:	f04b 0b08 	orr.w	fp, fp, #8
 800b7ee:	e7b2      	b.n	800b756 <_svfprintf_r+0x1de>
 800b7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b68      	cmp	r3, #104	; 0x68
 800b7f6:	bf01      	itttt	eq
 800b7f8:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800b7fa:	3301      	addeq	r3, #1
 800b7fc:	930b      	streq	r3, [sp, #44]	; 0x2c
 800b7fe:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800b802:	bf18      	it	ne
 800b804:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800b808:	e7a5      	b.n	800b756 <_svfprintf_r+0x1de>
 800b80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b6c      	cmp	r3, #108	; 0x6c
 800b810:	d105      	bne.n	800b81e <_svfprintf_r+0x2a6>
 800b812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b814:	3301      	adds	r3, #1
 800b816:	930b      	str	r3, [sp, #44]	; 0x2c
 800b818:	f04b 0b20 	orr.w	fp, fp, #32
 800b81c:	e79b      	b.n	800b756 <_svfprintf_r+0x1de>
 800b81e:	f04b 0b10 	orr.w	fp, fp, #16
 800b822:	e798      	b.n	800b756 <_svfprintf_r+0x1de>
 800b824:	f3af 8000 	nop.w
	...
 800b830:	4632      	mov	r2, r6
 800b832:	2000      	movs	r0, #0
 800b834:	f852 3b04 	ldr.w	r3, [r2], #4
 800b838:	9207      	str	r2, [sp, #28]
 800b83a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800b83e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800b842:	2301      	movs	r3, #1
 800b844:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800b848:	9003      	str	r0, [sp, #12]
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	4606      	mov	r6, r0
 800b84e:	4605      	mov	r5, r0
 800b850:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800b854:	e1bc      	b.n	800bbd0 <_svfprintf_r+0x658>
 800b856:	f04b 0b10 	orr.w	fp, fp, #16
 800b85a:	f01b 0f20 	tst.w	fp, #32
 800b85e:	d012      	beq.n	800b886 <_svfprintf_r+0x30e>
 800b860:	1df3      	adds	r3, r6, #7
 800b862:	f023 0307 	bic.w	r3, r3, #7
 800b866:	461a      	mov	r2, r3
 800b868:	685d      	ldr	r5, [r3, #4]
 800b86a:	f852 6b08 	ldr.w	r6, [r2], #8
 800b86e:	9207      	str	r2, [sp, #28]
 800b870:	2d00      	cmp	r5, #0
 800b872:	da06      	bge.n	800b882 <_svfprintf_r+0x30a>
 800b874:	4276      	negs	r6, r6
 800b876:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b87a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b87e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b882:	2301      	movs	r3, #1
 800b884:	e396      	b.n	800bfb4 <_svfprintf_r+0xa3c>
 800b886:	4633      	mov	r3, r6
 800b888:	f01b 0f10 	tst.w	fp, #16
 800b88c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	d002      	beq.n	800b89a <_svfprintf_r+0x322>
 800b894:	462e      	mov	r6, r5
 800b896:	17ed      	asrs	r5, r5, #31
 800b898:	e7ea      	b.n	800b870 <_svfprintf_r+0x2f8>
 800b89a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b89e:	d003      	beq.n	800b8a8 <_svfprintf_r+0x330>
 800b8a0:	b22e      	sxth	r6, r5
 800b8a2:	f345 35c0 	sbfx	r5, r5, #15, #1
 800b8a6:	e7e3      	b.n	800b870 <_svfprintf_r+0x2f8>
 800b8a8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b8ac:	d0f2      	beq.n	800b894 <_svfprintf_r+0x31c>
 800b8ae:	b26e      	sxtb	r6, r5
 800b8b0:	f345 15c0 	sbfx	r5, r5, #7, #1
 800b8b4:	e7dc      	b.n	800b870 <_svfprintf_r+0x2f8>
 800b8b6:	3607      	adds	r6, #7
 800b8b8:	f026 0307 	bic.w	r3, r6, #7
 800b8bc:	ecb3 7b02 	vldmia	r3!, {d7}
 800b8c0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8c8:	ee09 3a10 	vmov	s18, r3
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8d2:	ee09 3a90 	vmov	s19, r3
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8da:	4b3a      	ldr	r3, [pc, #232]	; (800b9c4 <_svfprintf_r+0x44c>)
 800b8dc:	ec51 0b19 	vmov	r0, r1, d9
 800b8e0:	f7f5 f924 	bl	8000b2c <__aeabi_dcmpun>
 800b8e4:	bb10      	cbnz	r0, 800b92c <_svfprintf_r+0x3b4>
 800b8e6:	4b37      	ldr	r3, [pc, #220]	; (800b9c4 <_svfprintf_r+0x44c>)
 800b8e8:	ec51 0b19 	vmov	r0, r1, d9
 800b8ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8f0:	f7f5 f8fe 	bl	8000af0 <__aeabi_dcmple>
 800b8f4:	b9d0      	cbnz	r0, 800b92c <_svfprintf_r+0x3b4>
 800b8f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f7f5 f8ed 	bl	8000adc <__aeabi_dcmplt>
 800b902:	b110      	cbz	r0, 800b90a <_svfprintf_r+0x392>
 800b904:	232d      	movs	r3, #45	; 0x2d
 800b906:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b90a:	4a2f      	ldr	r2, [pc, #188]	; (800b9c8 <_svfprintf_r+0x450>)
 800b90c:	482f      	ldr	r0, [pc, #188]	; (800b9cc <_svfprintf_r+0x454>)
 800b90e:	9b06      	ldr	r3, [sp, #24]
 800b910:	2100      	movs	r1, #0
 800b912:	2b47      	cmp	r3, #71	; 0x47
 800b914:	bfd4      	ite	le
 800b916:	4691      	movle	r9, r2
 800b918:	4681      	movgt	r9, r0
 800b91a:	2303      	movs	r3, #3
 800b91c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800b920:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800b924:	2600      	movs	r6, #0
 800b926:	4633      	mov	r3, r6
 800b928:	f001 b800 	b.w	800c92c <_svfprintf_r+0x13b4>
 800b92c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b930:	4610      	mov	r0, r2
 800b932:	4619      	mov	r1, r3
 800b934:	f7f5 f8fa 	bl	8000b2c <__aeabi_dcmpun>
 800b938:	b140      	cbz	r0, 800b94c <_svfprintf_r+0x3d4>
 800b93a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b93c:	4a24      	ldr	r2, [pc, #144]	; (800b9d0 <_svfprintf_r+0x458>)
 800b93e:	4825      	ldr	r0, [pc, #148]	; (800b9d4 <_svfprintf_r+0x45c>)
 800b940:	2b00      	cmp	r3, #0
 800b942:	bfbc      	itt	lt
 800b944:	232d      	movlt	r3, #45	; 0x2d
 800b946:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800b94a:	e7e0      	b.n	800b90e <_svfprintf_r+0x396>
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	f023 0320 	bic.w	r3, r3, #32
 800b952:	2b41      	cmp	r3, #65	; 0x41
 800b954:	9308      	str	r3, [sp, #32]
 800b956:	d125      	bne.n	800b9a4 <_svfprintf_r+0x42c>
 800b958:	2330      	movs	r3, #48	; 0x30
 800b95a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	2b61      	cmp	r3, #97	; 0x61
 800b962:	bf0c      	ite	eq
 800b964:	2378      	moveq	r3, #120	; 0x78
 800b966:	2358      	movne	r3, #88	; 0x58
 800b968:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	2b63      	cmp	r3, #99	; 0x63
 800b970:	f04b 0b02 	orr.w	fp, fp, #2
 800b974:	dd30      	ble.n	800b9d8 <_svfprintf_r+0x460>
 800b976:	1c59      	adds	r1, r3, #1
 800b978:	4650      	mov	r0, sl
 800b97a:	f7ff f97b 	bl	800ac74 <_malloc_r>
 800b97e:	4681      	mov	r9, r0
 800b980:	2800      	cmp	r0, #0
 800b982:	f040 81fd 	bne.w	800bd80 <_svfprintf_r+0x808>
 800b986:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b98e:	f8a8 300c 	strh.w	r3, [r8, #12]
 800b992:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b996:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b99c:	bf18      	it	ne
 800b99e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b9a2:	e60f      	b.n	800b5c4 <_svfprintf_r+0x4c>
 800b9a4:	9b04      	ldr	r3, [sp, #16]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	f000 81ec 	beq.w	800bd84 <_svfprintf_r+0x80c>
 800b9ac:	9b08      	ldr	r3, [sp, #32]
 800b9ae:	2b47      	cmp	r3, #71	; 0x47
 800b9b0:	f040 81eb 	bne.w	800bd8a <_svfprintf_r+0x812>
 800b9b4:	9b04      	ldr	r3, [sp, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f040 81e7 	bne.w	800bd8a <_svfprintf_r+0x812>
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	2301      	movs	r3, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	e00c      	b.n	800b9de <_svfprintf_r+0x466>
 800b9c4:	7fefffff 	.word	0x7fefffff
 800b9c8:	080146d4 	.word	0x080146d4
 800b9cc:	080146d8 	.word	0x080146d8
 800b9d0:	080146dc 	.word	0x080146dc
 800b9d4:	080146e0 	.word	0x080146e0
 800b9d8:	9003      	str	r0, [sp, #12]
 800b9da:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800b9de:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800b9e2:	9311      	str	r3, [sp, #68]	; 0x44
 800b9e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f280 81d1 	bge.w	800bd8e <_svfprintf_r+0x816>
 800b9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ee:	ee08 3a10 	vmov	s16, r3
 800b9f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9f8:	ee08 3a90 	vmov	s17, r3
 800b9fc:	232d      	movs	r3, #45	; 0x2d
 800b9fe:	9318      	str	r3, [sp, #96]	; 0x60
 800ba00:	9b08      	ldr	r3, [sp, #32]
 800ba02:	2b41      	cmp	r3, #65	; 0x41
 800ba04:	f040 81e1 	bne.w	800bdca <_svfprintf_r+0x852>
 800ba08:	eeb0 0a48 	vmov.f32	s0, s16
 800ba0c:	eef0 0a68 	vmov.f32	s1, s17
 800ba10:	a81c      	add	r0, sp, #112	; 0x70
 800ba12:	f002 fc6f 	bl	800e2f4 <frexp>
 800ba16:	2200      	movs	r2, #0
 800ba18:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba1c:	ec51 0b10 	vmov	r0, r1, d0
 800ba20:	f7f4 fdea 	bl	80005f8 <__aeabi_dmul>
 800ba24:	2200      	movs	r2, #0
 800ba26:	2300      	movs	r3, #0
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	f7f5 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba30:	b108      	cbz	r0, 800ba36 <_svfprintf_r+0x4be>
 800ba32:	2301      	movs	r3, #1
 800ba34:	931c      	str	r3, [sp, #112]	; 0x70
 800ba36:	4ba7      	ldr	r3, [pc, #668]	; (800bcd4 <_svfprintf_r+0x75c>)
 800ba38:	4aa7      	ldr	r2, [pc, #668]	; (800bcd8 <_svfprintf_r+0x760>)
 800ba3a:	9906      	ldr	r1, [sp, #24]
 800ba3c:	2961      	cmp	r1, #97	; 0x61
 800ba3e:	bf18      	it	ne
 800ba40:	461a      	movne	r2, r3
 800ba42:	9b04      	ldr	r3, [sp, #16]
 800ba44:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba46:	3b01      	subs	r3, #1
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	464d      	mov	r5, r9
 800ba4c:	4ba3      	ldr	r3, [pc, #652]	; (800bcdc <_svfprintf_r+0x764>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	460f      	mov	r7, r1
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	f7f5 f87c 	bl	8000b58 <__aeabi_d2iz>
 800ba60:	9019      	str	r0, [sp, #100]	; 0x64
 800ba62:	f7f4 fd5f 	bl	8000524 <__aeabi_i2d>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f4 fc0b 	bl	8000288 <__aeabi_dsub>
 800ba72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba76:	5c9b      	ldrb	r3, [r3, r2]
 800ba78:	f805 3b01 	strb.w	r3, [r5], #1
 800ba7c:	9b05      	ldr	r3, [sp, #20]
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	d007      	beq.n	800ba98 <_svfprintf_r+0x520>
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	9305      	str	r3, [sp, #20]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f7f5 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0d9      	beq.n	800ba4c <_svfprintf_r+0x4d4>
 800ba98:	4b91      	ldr	r3, [pc, #580]	; (800bce0 <_svfprintf_r+0x768>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f5 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 800baa4:	b960      	cbnz	r0, 800bac0 <_svfprintf_r+0x548>
 800baa6:	4b8e      	ldr	r3, [pc, #568]	; (800bce0 <_svfprintf_r+0x768>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	4630      	mov	r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	f7f5 f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f000 8184 	beq.w	800bdc0 <_svfprintf_r+0x848>
 800bab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800baba:	07db      	lsls	r3, r3, #31
 800babc:	f140 8180 	bpl.w	800bdc0 <_svfprintf_r+0x848>
 800bac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bac2:	9520      	str	r5, [sp, #128]	; 0x80
 800bac4:	7bd9      	ldrb	r1, [r3, #15]
 800bac6:	2030      	movs	r0, #48	; 0x30
 800bac8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800baca:	1e53      	subs	r3, r2, #1
 800bacc:	9320      	str	r3, [sp, #128]	; 0x80
 800bace:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800bad2:	428b      	cmp	r3, r1
 800bad4:	f000 8163 	beq.w	800bd9e <_svfprintf_r+0x826>
 800bad8:	2b39      	cmp	r3, #57	; 0x39
 800bada:	bf0b      	itete	eq
 800badc:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800bade:	3301      	addne	r3, #1
 800bae0:	7a9b      	ldrbeq	r3, [r3, #10]
 800bae2:	b2db      	uxtbne	r3, r3
 800bae4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bae8:	eba5 0309 	sub.w	r3, r5, r9
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800baf2:	2b47      	cmp	r3, #71	; 0x47
 800baf4:	f040 81b1 	bne.w	800be5a <_svfprintf_r+0x8e2>
 800baf8:	1cef      	adds	r7, r5, #3
 800bafa:	db03      	blt.n	800bb04 <_svfprintf_r+0x58c>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	42ab      	cmp	r3, r5
 800bb00:	f280 81d6 	bge.w	800beb0 <_svfprintf_r+0x938>
 800bb04:	9b06      	ldr	r3, [sp, #24]
 800bb06:	3b02      	subs	r3, #2
 800bb08:	9306      	str	r3, [sp, #24]
 800bb0a:	9906      	ldr	r1, [sp, #24]
 800bb0c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800bb10:	f021 0120 	bic.w	r1, r1, #32
 800bb14:	2941      	cmp	r1, #65	; 0x41
 800bb16:	bf08      	it	eq
 800bb18:	320f      	addeq	r2, #15
 800bb1a:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bb1e:	bf06      	itte	eq
 800bb20:	b2d2      	uxtbeq	r2, r2
 800bb22:	2101      	moveq	r1, #1
 800bb24:	2100      	movne	r1, #0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	931c      	str	r3, [sp, #112]	; 0x70
 800bb2a:	bfb8      	it	lt
 800bb2c:	f1c5 0301 	rsblt	r3, r5, #1
 800bb30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800bb34:	bfb4      	ite	lt
 800bb36:	222d      	movlt	r2, #45	; 0x2d
 800bb38:	222b      	movge	r2, #43	; 0x2b
 800bb3a:	2b09      	cmp	r3, #9
 800bb3c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800bb40:	f340 81a4 	ble.w	800be8c <_svfprintf_r+0x914>
 800bb44:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800bb48:	260a      	movs	r6, #10
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	fb93 f5f6 	sdiv	r5, r3, r6
 800bb50:	fb06 3015 	mls	r0, r6, r5, r3
 800bb54:	3030      	adds	r0, #48	; 0x30
 800bb56:	f801 0c01 	strb.w	r0, [r1, #-1]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	2863      	cmp	r0, #99	; 0x63
 800bb5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bb62:	462b      	mov	r3, r5
 800bb64:	dcf1      	bgt.n	800bb4a <_svfprintf_r+0x5d2>
 800bb66:	3330      	adds	r3, #48	; 0x30
 800bb68:	1e88      	subs	r0, r1, #2
 800bb6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb6e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800bb72:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800bb76:	4603      	mov	r3, r0
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	f0c0 8182 	bcc.w	800be82 <_svfprintf_r+0x90a>
 800bb7e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800bb82:	1a52      	subs	r2, r2, r1
 800bb84:	42a8      	cmp	r0, r5
 800bb86:	bf88      	it	hi
 800bb88:	2200      	movhi	r2, #0
 800bb8a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800bb8e:	441a      	add	r2, r3
 800bb90:	ab1e      	add	r3, sp, #120	; 0x78
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	9a05      	ldr	r2, [sp, #20]
 800bb96:	9315      	str	r3, [sp, #84]	; 0x54
 800bb98:	2a01      	cmp	r2, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	dc02      	bgt.n	800bba6 <_svfprintf_r+0x62e>
 800bba0:	f01b 0f01 	tst.w	fp, #1
 800bba4:	d003      	beq.n	800bbae <_svfprintf_r+0x636>
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbaa:	4413      	add	r3, r2
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800bbb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbb6:	9311      	str	r3, [sp, #68]	; 0x44
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bbbe:	461d      	mov	r5, r3
 800bbc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bbc2:	b113      	cbz	r3, 800bbca <_svfprintf_r+0x652>
 800bbc4:	232d      	movs	r3, #45	; 0x2d
 800bbc6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bbca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bbce:	2600      	movs	r6, #0
 800bbd0:	9b04      	ldr	r3, [sp, #16]
 800bbd2:	42b3      	cmp	r3, r6
 800bbd4:	bfb8      	it	lt
 800bbd6:	4633      	movlt	r3, r6
 800bbd8:	9311      	str	r3, [sp, #68]	; 0x44
 800bbda:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bbde:	b113      	cbz	r3, 800bbe6 <_svfprintf_r+0x66e>
 800bbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	9311      	str	r3, [sp, #68]	; 0x44
 800bbe6:	f01b 0302 	ands.w	r3, fp, #2
 800bbea:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbec:	bf1e      	ittt	ne
 800bbee:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800bbf0:	3302      	addne	r3, #2
 800bbf2:	9311      	strne	r3, [sp, #68]	; 0x44
 800bbf4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800bbf8:	9318      	str	r3, [sp, #96]	; 0x60
 800bbfa:	d11f      	bne.n	800bc3c <_svfprintf_r+0x6c4>
 800bbfc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bc00:	1a9f      	subs	r7, r3, r2
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	dd1a      	ble.n	800bc3c <_svfprintf_r+0x6c4>
 800bc06:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc0a:	4836      	ldr	r0, [pc, #216]	; (800bce4 <_svfprintf_r+0x76c>)
 800bc0c:	6020      	str	r0, [r4, #0]
 800bc0e:	2f10      	cmp	r7, #16
 800bc10:	f103 0301 	add.w	r3, r3, #1
 800bc14:	f104 0108 	add.w	r1, r4, #8
 800bc18:	f300 82ed 	bgt.w	800c1f6 <_svfprintf_r+0xc7e>
 800bc1c:	6067      	str	r7, [r4, #4]
 800bc1e:	2b07      	cmp	r3, #7
 800bc20:	4417      	add	r7, r2
 800bc22:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bc26:	f340 82f9 	ble.w	800c21c <_svfprintf_r+0xca4>
 800bc2a:	aa22      	add	r2, sp, #136	; 0x88
 800bc2c:	4641      	mov	r1, r8
 800bc2e:	4650      	mov	r0, sl
 800bc30:	f002 fbee 	bl	800e410 <__ssprint_r>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f040 8621 	bne.w	800c87c <_svfprintf_r+0x1304>
 800bc3a:	ac25      	add	r4, sp, #148	; 0x94
 800bc3c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bc40:	b173      	cbz	r3, 800bc60 <_svfprintf_r+0x6e8>
 800bc42:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	6063      	str	r3, [r4, #4]
 800bc4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc4e:	3301      	adds	r3, #1
 800bc50:	9324      	str	r3, [sp, #144]	; 0x90
 800bc52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc54:	3301      	adds	r3, #1
 800bc56:	2b07      	cmp	r3, #7
 800bc58:	9323      	str	r3, [sp, #140]	; 0x8c
 800bc5a:	f300 82e1 	bgt.w	800c220 <_svfprintf_r+0xca8>
 800bc5e:	3408      	adds	r4, #8
 800bc60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc62:	b16b      	cbz	r3, 800bc80 <_svfprintf_r+0x708>
 800bc64:	ab1b      	add	r3, sp, #108	; 0x6c
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	2302      	movs	r3, #2
 800bc6a:	6063      	str	r3, [r4, #4]
 800bc6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc6e:	3302      	adds	r3, #2
 800bc70:	9324      	str	r3, [sp, #144]	; 0x90
 800bc72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc74:	3301      	adds	r3, #1
 800bc76:	2b07      	cmp	r3, #7
 800bc78:	9323      	str	r3, [sp, #140]	; 0x8c
 800bc7a:	f300 82db 	bgt.w	800c234 <_svfprintf_r+0xcbc>
 800bc7e:	3408      	adds	r4, #8
 800bc80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc82:	2b80      	cmp	r3, #128	; 0x80
 800bc84:	d11f      	bne.n	800bcc6 <_svfprintf_r+0x74e>
 800bc86:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bc8a:	1a9f      	subs	r7, r3, r2
 800bc8c:	2f00      	cmp	r7, #0
 800bc8e:	dd1a      	ble.n	800bcc6 <_svfprintf_r+0x74e>
 800bc90:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc94:	4814      	ldr	r0, [pc, #80]	; (800bce8 <_svfprintf_r+0x770>)
 800bc96:	6020      	str	r0, [r4, #0]
 800bc98:	2f10      	cmp	r7, #16
 800bc9a:	f103 0301 	add.w	r3, r3, #1
 800bc9e:	f104 0108 	add.w	r1, r4, #8
 800bca2:	f300 82d1 	bgt.w	800c248 <_svfprintf_r+0xcd0>
 800bca6:	6067      	str	r7, [r4, #4]
 800bca8:	2b07      	cmp	r3, #7
 800bcaa:	4417      	add	r7, r2
 800bcac:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bcb0:	f340 82dd 	ble.w	800c26e <_svfprintf_r+0xcf6>
 800bcb4:	aa22      	add	r2, sp, #136	; 0x88
 800bcb6:	4641      	mov	r1, r8
 800bcb8:	4650      	mov	r0, sl
 800bcba:	f002 fba9 	bl	800e410 <__ssprint_r>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f040 85dc 	bne.w	800c87c <_svfprintf_r+0x1304>
 800bcc4:	ac25      	add	r4, sp, #148	; 0x94
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	1af6      	subs	r6, r6, r3
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	dd28      	ble.n	800bd20 <_svfprintf_r+0x7a8>
 800bcce:	4f06      	ldr	r7, [pc, #24]	; (800bce8 <_svfprintf_r+0x770>)
 800bcd0:	e00c      	b.n	800bcec <_svfprintf_r+0x774>
 800bcd2:	bf00      	nop
 800bcd4:	080146f5 	.word	0x080146f5
 800bcd8:	080146e4 	.word	0x080146e4
 800bcdc:	40300000 	.word	0x40300000
 800bce0:	3fe00000 	.word	0x3fe00000
 800bce4:	08014708 	.word	0x08014708
 800bce8:	08014718 	.word	0x08014718
 800bcec:	6027      	str	r7, [r4, #0]
 800bcee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bcf2:	2e10      	cmp	r6, #16
 800bcf4:	f103 0301 	add.w	r3, r3, #1
 800bcf8:	f104 0108 	add.w	r1, r4, #8
 800bcfc:	f300 82b9 	bgt.w	800c272 <_svfprintf_r+0xcfa>
 800bd00:	6066      	str	r6, [r4, #4]
 800bd02:	2b07      	cmp	r3, #7
 800bd04:	4416      	add	r6, r2
 800bd06:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800bd0a:	f340 82c5 	ble.w	800c298 <_svfprintf_r+0xd20>
 800bd0e:	aa22      	add	r2, sp, #136	; 0x88
 800bd10:	4641      	mov	r1, r8
 800bd12:	4650      	mov	r0, sl
 800bd14:	f002 fb7c 	bl	800e410 <__ssprint_r>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	f040 85af 	bne.w	800c87c <_svfprintf_r+0x1304>
 800bd1e:	ac25      	add	r4, sp, #148	; 0x94
 800bd20:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bd24:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bd26:	f040 82bd 	bne.w	800c2a4 <_svfprintf_r+0xd2c>
 800bd2a:	9b04      	ldr	r3, [sp, #16]
 800bd2c:	f8c4 9000 	str.w	r9, [r4]
 800bd30:	441e      	add	r6, r3
 800bd32:	6063      	str	r3, [r4, #4]
 800bd34:	9624      	str	r6, [sp, #144]	; 0x90
 800bd36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd38:	3301      	adds	r3, #1
 800bd3a:	2b07      	cmp	r3, #7
 800bd3c:	9323      	str	r3, [sp, #140]	; 0x8c
 800bd3e:	f300 82f6 	bgt.w	800c32e <_svfprintf_r+0xdb6>
 800bd42:	3408      	adds	r4, #8
 800bd44:	f01b 0f04 	tst.w	fp, #4
 800bd48:	f040 857a 	bne.w	800c840 <_svfprintf_r+0x12c8>
 800bd4c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 800bd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd52:	428a      	cmp	r2, r1
 800bd54:	bfac      	ite	ge
 800bd56:	189b      	addge	r3, r3, r2
 800bd58:	185b      	addlt	r3, r3, r1
 800bd5a:	930c      	str	r3, [sp, #48]	; 0x30
 800bd5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd5e:	b13b      	cbz	r3, 800bd70 <_svfprintf_r+0x7f8>
 800bd60:	aa22      	add	r2, sp, #136	; 0x88
 800bd62:	4641      	mov	r1, r8
 800bd64:	4650      	mov	r0, sl
 800bd66:	f002 fb53 	bl	800e410 <__ssprint_r>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f040 8586 	bne.w	800c87c <_svfprintf_r+0x1304>
 800bd70:	2300      	movs	r3, #0
 800bd72:	9323      	str	r3, [sp, #140]	; 0x8c
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f040 859c 	bne.w	800c8b4 <_svfprintf_r+0x133c>
 800bd7c:	ac25      	add	r4, sp, #148	; 0x94
 800bd7e:	e0ec      	b.n	800bf5a <_svfprintf_r+0x9e2>
 800bd80:	9003      	str	r0, [sp, #12]
 800bd82:	e62c      	b.n	800b9de <_svfprintf_r+0x466>
 800bd84:	9003      	str	r0, [sp, #12]
 800bd86:	2306      	movs	r3, #6
 800bd88:	e61a      	b.n	800b9c0 <_svfprintf_r+0x448>
 800bd8a:	9003      	str	r0, [sp, #12]
 800bd8c:	e627      	b.n	800b9de <_svfprintf_r+0x466>
 800bd8e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800bd92:	2300      	movs	r3, #0
 800bd94:	eeb0 8a47 	vmov.f32	s16, s14
 800bd98:	eef0 8a67 	vmov.f32	s17, s15
 800bd9c:	e62f      	b.n	800b9fe <_svfprintf_r+0x486>
 800bd9e:	f802 0c01 	strb.w	r0, [r2, #-1]
 800bda2:	e691      	b.n	800bac8 <_svfprintf_r+0x550>
 800bda4:	f803 0b01 	strb.w	r0, [r3], #1
 800bda8:	1aca      	subs	r2, r1, r3
 800bdaa:	2a00      	cmp	r2, #0
 800bdac:	dafa      	bge.n	800bda4 <_svfprintf_r+0x82c>
 800bdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb2:	3201      	adds	r2, #1
 800bdb4:	f103 0301 	add.w	r3, r3, #1
 800bdb8:	bfb8      	it	lt
 800bdba:	2300      	movlt	r3, #0
 800bdbc:	441d      	add	r5, r3
 800bdbe:	e693      	b.n	800bae8 <_svfprintf_r+0x570>
 800bdc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	18a9      	adds	r1, r5, r2
 800bdc6:	2030      	movs	r0, #48	; 0x30
 800bdc8:	e7ee      	b.n	800bda8 <_svfprintf_r+0x830>
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	2b46      	cmp	r3, #70	; 0x46
 800bdce:	d005      	beq.n	800bddc <_svfprintf_r+0x864>
 800bdd0:	2b45      	cmp	r3, #69	; 0x45
 800bdd2:	d11b      	bne.n	800be0c <_svfprintf_r+0x894>
 800bdd4:	9b04      	ldr	r3, [sp, #16]
 800bdd6:	1c5d      	adds	r5, r3, #1
 800bdd8:	2102      	movs	r1, #2
 800bdda:	e001      	b.n	800bde0 <_svfprintf_r+0x868>
 800bddc:	9d04      	ldr	r5, [sp, #16]
 800bdde:	2103      	movs	r1, #3
 800bde0:	ab20      	add	r3, sp, #128	; 0x80
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	ab1d      	add	r3, sp, #116	; 0x74
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	462a      	mov	r2, r5
 800bdea:	ab1c      	add	r3, sp, #112	; 0x70
 800bdec:	4650      	mov	r0, sl
 800bdee:	eeb0 0a48 	vmov.f32	s0, s16
 800bdf2:	eef0 0a68 	vmov.f32	s1, s17
 800bdf6:	f000 fe4f 	bl	800ca98 <_dtoa_r>
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	2b47      	cmp	r3, #71	; 0x47
 800bdfe:	4681      	mov	r9, r0
 800be00:	d106      	bne.n	800be10 <_svfprintf_r+0x898>
 800be02:	f01b 0f01 	tst.w	fp, #1
 800be06:	d103      	bne.n	800be10 <_svfprintf_r+0x898>
 800be08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800be0a:	e66d      	b.n	800bae8 <_svfprintf_r+0x570>
 800be0c:	9d04      	ldr	r5, [sp, #16]
 800be0e:	e7e3      	b.n	800bdd8 <_svfprintf_r+0x860>
 800be10:	9b08      	ldr	r3, [sp, #32]
 800be12:	2b46      	cmp	r3, #70	; 0x46
 800be14:	eb09 0605 	add.w	r6, r9, r5
 800be18:	d10f      	bne.n	800be3a <_svfprintf_r+0x8c2>
 800be1a:	f899 3000 	ldrb.w	r3, [r9]
 800be1e:	2b30      	cmp	r3, #48	; 0x30
 800be20:	d109      	bne.n	800be36 <_svfprintf_r+0x8be>
 800be22:	ec51 0b18 	vmov	r0, r1, d8
 800be26:	2200      	movs	r2, #0
 800be28:	2300      	movs	r3, #0
 800be2a:	f7f4 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be2e:	b910      	cbnz	r0, 800be36 <_svfprintf_r+0x8be>
 800be30:	f1c5 0501 	rsb	r5, r5, #1
 800be34:	951c      	str	r5, [sp, #112]	; 0x70
 800be36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800be38:	441e      	add	r6, r3
 800be3a:	ec51 0b18 	vmov	r0, r1, d8
 800be3e:	2200      	movs	r2, #0
 800be40:	2300      	movs	r3, #0
 800be42:	f7f4 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800be46:	b100      	cbz	r0, 800be4a <_svfprintf_r+0x8d2>
 800be48:	9620      	str	r6, [sp, #128]	; 0x80
 800be4a:	2230      	movs	r2, #48	; 0x30
 800be4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be4e:	429e      	cmp	r6, r3
 800be50:	d9da      	bls.n	800be08 <_svfprintf_r+0x890>
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	9120      	str	r1, [sp, #128]	; 0x80
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	e7f8      	b.n	800be4c <_svfprintf_r+0x8d4>
 800be5a:	9b08      	ldr	r3, [sp, #32]
 800be5c:	2b46      	cmp	r3, #70	; 0x46
 800be5e:	f47f ae54 	bne.w	800bb0a <_svfprintf_r+0x592>
 800be62:	9a04      	ldr	r2, [sp, #16]
 800be64:	f00b 0301 	and.w	r3, fp, #1
 800be68:	2d00      	cmp	r5, #0
 800be6a:	ea43 0302 	orr.w	r3, r3, r2
 800be6e:	dd1a      	ble.n	800bea6 <_svfprintf_r+0x92e>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d034      	beq.n	800bede <_svfprintf_r+0x966>
 800be74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be76:	18eb      	adds	r3, r5, r3
 800be78:	441a      	add	r2, r3
 800be7a:	9204      	str	r2, [sp, #16]
 800be7c:	2366      	movs	r3, #102	; 0x66
 800be7e:	9306      	str	r3, [sp, #24]
 800be80:	e033      	b.n	800beea <_svfprintf_r+0x972>
 800be82:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be86:	f802 6b01 	strb.w	r6, [r2], #1
 800be8a:	e675      	b.n	800bb78 <_svfprintf_r+0x600>
 800be8c:	b941      	cbnz	r1, 800bea0 <_svfprintf_r+0x928>
 800be8e:	2230      	movs	r2, #48	; 0x30
 800be90:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800be94:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800be98:	3330      	adds	r3, #48	; 0x30
 800be9a:	f802 3b01 	strb.w	r3, [r2], #1
 800be9e:	e677      	b.n	800bb90 <_svfprintf_r+0x618>
 800bea0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800bea4:	e7f8      	b.n	800be98 <_svfprintf_r+0x920>
 800bea6:	b1e3      	cbz	r3, 800bee2 <_svfprintf_r+0x96a>
 800bea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beaa:	9a04      	ldr	r2, [sp, #16]
 800beac:	3301      	adds	r3, #1
 800beae:	e7e3      	b.n	800be78 <_svfprintf_r+0x900>
 800beb0:	9b05      	ldr	r3, [sp, #20]
 800beb2:	429d      	cmp	r5, r3
 800beb4:	db07      	blt.n	800bec6 <_svfprintf_r+0x94e>
 800beb6:	f01b 0f01 	tst.w	fp, #1
 800beba:	d02d      	beq.n	800bf18 <_svfprintf_r+0x9a0>
 800bebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bebe:	18eb      	adds	r3, r5, r3
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	2367      	movs	r3, #103	; 0x67
 800bec4:	e7db      	b.n	800be7e <_svfprintf_r+0x906>
 800bec6:	9b05      	ldr	r3, [sp, #20]
 800bec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beca:	2d00      	cmp	r5, #0
 800becc:	4413      	add	r3, r2
 800bece:	9304      	str	r3, [sp, #16]
 800bed0:	dcf7      	bgt.n	800bec2 <_svfprintf_r+0x94a>
 800bed2:	9a04      	ldr	r2, [sp, #16]
 800bed4:	f1c5 0301 	rsb	r3, r5, #1
 800bed8:	441a      	add	r2, r3
 800beda:	9204      	str	r2, [sp, #16]
 800bedc:	e7f1      	b.n	800bec2 <_svfprintf_r+0x94a>
 800bede:	9504      	str	r5, [sp, #16]
 800bee0:	e7cc      	b.n	800be7c <_svfprintf_r+0x904>
 800bee2:	2366      	movs	r3, #102	; 0x66
 800bee4:	9306      	str	r3, [sp, #24]
 800bee6:	2301      	movs	r3, #1
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800beee:	9309      	str	r3, [sp, #36]	; 0x24
 800bef0:	d025      	beq.n	800bf3e <_svfprintf_r+0x9c6>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2d00      	cmp	r5, #0
 800bef6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800befa:	f77f ae61 	ble.w	800bbc0 <_svfprintf_r+0x648>
 800befe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2bff      	cmp	r3, #255	; 0xff
 800bf04:	d10a      	bne.n	800bf1c <_svfprintf_r+0x9a4>
 800bf06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bf0c:	4413      	add	r3, r2
 800bf0e:	9a04      	ldr	r2, [sp, #16]
 800bf10:	fb01 2303 	mla	r3, r1, r3, r2
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	e653      	b.n	800bbc0 <_svfprintf_r+0x648>
 800bf18:	9504      	str	r5, [sp, #16]
 800bf1a:	e7d2      	b.n	800bec2 <_svfprintf_r+0x94a>
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	daf2      	bge.n	800bf06 <_svfprintf_r+0x98e>
 800bf20:	1aed      	subs	r5, r5, r3
 800bf22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf24:	785b      	ldrb	r3, [r3, #1]
 800bf26:	b133      	cbz	r3, 800bf36 <_svfprintf_r+0x9be>
 800bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf30:	3301      	adds	r3, #1
 800bf32:	930a      	str	r3, [sp, #40]	; 0x28
 800bf34:	e7e3      	b.n	800befe <_svfprintf_r+0x986>
 800bf36:	9b08      	ldr	r3, [sp, #32]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	9308      	str	r3, [sp, #32]
 800bf3c:	e7df      	b.n	800befe <_svfprintf_r+0x986>
 800bf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf40:	9308      	str	r3, [sp, #32]
 800bf42:	e63d      	b.n	800bbc0 <_svfprintf_r+0x648>
 800bf44:	1d33      	adds	r3, r6, #4
 800bf46:	f01b 0f20 	tst.w	fp, #32
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	d00a      	beq.n	800bf64 <_svfprintf_r+0x9ec>
 800bf4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf54:	17d2      	asrs	r2, r2, #31
 800bf56:	e9c3 1200 	strd	r1, r2, [r3]
 800bf5a:	9e07      	ldr	r6, [sp, #28]
 800bf5c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bf60:	f7ff bb4a 	b.w	800b5f8 <_svfprintf_r+0x80>
 800bf64:	f01b 0f10 	tst.w	fp, #16
 800bf68:	d003      	beq.n	800bf72 <_svfprintf_r+0x9fa>
 800bf6a:	6833      	ldr	r3, [r6, #0]
 800bf6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e7f3      	b.n	800bf5a <_svfprintf_r+0x9e2>
 800bf72:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800bf76:	d003      	beq.n	800bf80 <_svfprintf_r+0xa08>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf7c:	801a      	strh	r2, [r3, #0]
 800bf7e:	e7ec      	b.n	800bf5a <_svfprintf_r+0x9e2>
 800bf80:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800bf84:	d0f1      	beq.n	800bf6a <_svfprintf_r+0x9f2>
 800bf86:	6833      	ldr	r3, [r6, #0]
 800bf88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	e7e5      	b.n	800bf5a <_svfprintf_r+0x9e2>
 800bf8e:	f04b 0b10 	orr.w	fp, fp, #16
 800bf92:	f01b 0320 	ands.w	r3, fp, #32
 800bf96:	d01f      	beq.n	800bfd8 <_svfprintf_r+0xa60>
 800bf98:	1df3      	adds	r3, r6, #7
 800bf9a:	f023 0307 	bic.w	r3, r3, #7
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	685d      	ldr	r5, [r3, #4]
 800bfa2:	f852 6b08 	ldr.w	r6, [r2], #8
 800bfa6:	9207      	str	r2, [sp, #28]
 800bfa8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800bfac:	2300      	movs	r3, #0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	f000 848d 	beq.w	800c8d6 <_svfprintf_r+0x135e>
 800bfbc:	ea56 0205 	orrs.w	r2, r6, r5
 800bfc0:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 800bfc4:	f040 848c 	bne.w	800c8e0 <_svfprintf_r+0x1368>
 800bfc8:	9a04      	ldr	r2, [sp, #16]
 800bfca:	2a00      	cmp	r2, #0
 800bfcc:	f000 80f9 	beq.w	800c1c2 <_svfprintf_r+0xc4a>
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	f040 8488 	bne.w	800c8e6 <_svfprintf_r+0x136e>
 800bfd6:	e09f      	b.n	800c118 <_svfprintf_r+0xba0>
 800bfd8:	4632      	mov	r2, r6
 800bfda:	f01b 0510 	ands.w	r5, fp, #16
 800bfde:	f852 6b04 	ldr.w	r6, [r2], #4
 800bfe2:	9207      	str	r2, [sp, #28]
 800bfe4:	d001      	beq.n	800bfea <_svfprintf_r+0xa72>
 800bfe6:	461d      	mov	r5, r3
 800bfe8:	e7de      	b.n	800bfa8 <_svfprintf_r+0xa30>
 800bfea:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800bfee:	d001      	beq.n	800bff4 <_svfprintf_r+0xa7c>
 800bff0:	b2b6      	uxth	r6, r6
 800bff2:	e7d9      	b.n	800bfa8 <_svfprintf_r+0xa30>
 800bff4:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800bff8:	d0d6      	beq.n	800bfa8 <_svfprintf_r+0xa30>
 800bffa:	b2f6      	uxtb	r6, r6
 800bffc:	e7f3      	b.n	800bfe6 <_svfprintf_r+0xa6e>
 800bffe:	4633      	mov	r3, r6
 800c000:	2278      	movs	r2, #120	; 0x78
 800c002:	f853 6b04 	ldr.w	r6, [r3], #4
 800c006:	9307      	str	r3, [sp, #28]
 800c008:	2330      	movs	r3, #48	; 0x30
 800c00a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c00e:	4ba3      	ldr	r3, [pc, #652]	; (800c29c <_svfprintf_r+0xd24>)
 800c010:	9316      	str	r3, [sp, #88]	; 0x58
 800c012:	2500      	movs	r5, #0
 800c014:	f04b 0b02 	orr.w	fp, fp, #2
 800c018:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800c01c:	2302      	movs	r3, #2
 800c01e:	9206      	str	r2, [sp, #24]
 800c020:	e7c5      	b.n	800bfae <_svfprintf_r+0xa36>
 800c022:	4633      	mov	r3, r6
 800c024:	2500      	movs	r5, #0
 800c026:	f853 9b04 	ldr.w	r9, [r3], #4
 800c02a:	9307      	str	r3, [sp, #28]
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800c032:	1c58      	adds	r0, r3, #1
 800c034:	d010      	beq.n	800c058 <_svfprintf_r+0xae0>
 800c036:	461a      	mov	r2, r3
 800c038:	4629      	mov	r1, r5
 800c03a:	4648      	mov	r0, r9
 800c03c:	f7f4 f8d0 	bl	80001e0 <memchr>
 800c040:	9003      	str	r0, [sp, #12]
 800c042:	2800      	cmp	r0, #0
 800c044:	f000 80d4 	beq.w	800c1f0 <_svfprintf_r+0xc78>
 800c048:	eba0 0309 	sub.w	r3, r0, r9
 800c04c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800c050:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800c054:	462e      	mov	r6, r5
 800c056:	e5bb      	b.n	800bbd0 <_svfprintf_r+0x658>
 800c058:	4648      	mov	r0, r9
 800c05a:	f7f4 f8b9 	bl	80001d0 <strlen>
 800c05e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800c062:	e45f      	b.n	800b924 <_svfprintf_r+0x3ac>
 800c064:	f04b 0b10 	orr.w	fp, fp, #16
 800c068:	f01b 0320 	ands.w	r3, fp, #32
 800c06c:	d009      	beq.n	800c082 <_svfprintf_r+0xb0a>
 800c06e:	1df3      	adds	r3, r6, #7
 800c070:	f023 0307 	bic.w	r3, r3, #7
 800c074:	461a      	mov	r2, r3
 800c076:	685d      	ldr	r5, [r3, #4]
 800c078:	f852 6b08 	ldr.w	r6, [r2], #8
 800c07c:	9207      	str	r2, [sp, #28]
 800c07e:	2301      	movs	r3, #1
 800c080:	e795      	b.n	800bfae <_svfprintf_r+0xa36>
 800c082:	4632      	mov	r2, r6
 800c084:	f01b 0510 	ands.w	r5, fp, #16
 800c088:	f852 6b04 	ldr.w	r6, [r2], #4
 800c08c:	9207      	str	r2, [sp, #28]
 800c08e:	d001      	beq.n	800c094 <_svfprintf_r+0xb1c>
 800c090:	461d      	mov	r5, r3
 800c092:	e7f4      	b.n	800c07e <_svfprintf_r+0xb06>
 800c094:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c098:	d001      	beq.n	800c09e <_svfprintf_r+0xb26>
 800c09a:	b2b6      	uxth	r6, r6
 800c09c:	e7ef      	b.n	800c07e <_svfprintf_r+0xb06>
 800c09e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c0a2:	d0ec      	beq.n	800c07e <_svfprintf_r+0xb06>
 800c0a4:	b2f6      	uxtb	r6, r6
 800c0a6:	e7f3      	b.n	800c090 <_svfprintf_r+0xb18>
 800c0a8:	4b7d      	ldr	r3, [pc, #500]	; (800c2a0 <_svfprintf_r+0xd28>)
 800c0aa:	9316      	str	r3, [sp, #88]	; 0x58
 800c0ac:	f01b 0320 	ands.w	r3, fp, #32
 800c0b0:	d01b      	beq.n	800c0ea <_svfprintf_r+0xb72>
 800c0b2:	1df3      	adds	r3, r6, #7
 800c0b4:	f023 0307 	bic.w	r3, r3, #7
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	685d      	ldr	r5, [r3, #4]
 800c0bc:	f852 6b08 	ldr.w	r6, [r2], #8
 800c0c0:	9207      	str	r2, [sp, #28]
 800c0c2:	f01b 0f01 	tst.w	fp, #1
 800c0c6:	d00a      	beq.n	800c0de <_svfprintf_r+0xb66>
 800c0c8:	ea56 0305 	orrs.w	r3, r6, r5
 800c0cc:	d007      	beq.n	800c0de <_svfprintf_r+0xb66>
 800c0ce:	2330      	movs	r3, #48	; 0x30
 800c0d0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c0d4:	9b06      	ldr	r3, [sp, #24]
 800c0d6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800c0da:	f04b 0b02 	orr.w	fp, fp, #2
 800c0de:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	e763      	b.n	800bfae <_svfprintf_r+0xa36>
 800c0e6:	4b6d      	ldr	r3, [pc, #436]	; (800c29c <_svfprintf_r+0xd24>)
 800c0e8:	e7df      	b.n	800c0aa <_svfprintf_r+0xb32>
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	f01b 0510 	ands.w	r5, fp, #16
 800c0f0:	f852 6b04 	ldr.w	r6, [r2], #4
 800c0f4:	9207      	str	r2, [sp, #28]
 800c0f6:	d001      	beq.n	800c0fc <_svfprintf_r+0xb84>
 800c0f8:	461d      	mov	r5, r3
 800c0fa:	e7e2      	b.n	800c0c2 <_svfprintf_r+0xb4a>
 800c0fc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c100:	d001      	beq.n	800c106 <_svfprintf_r+0xb8e>
 800c102:	b2b6      	uxth	r6, r6
 800c104:	e7dd      	b.n	800c0c2 <_svfprintf_r+0xb4a>
 800c106:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c10a:	d0da      	beq.n	800c0c2 <_svfprintf_r+0xb4a>
 800c10c:	b2f6      	uxtb	r6, r6
 800c10e:	e7f3      	b.n	800c0f8 <_svfprintf_r+0xb80>
 800c110:	2e0a      	cmp	r6, #10
 800c112:	f175 0300 	sbcs.w	r3, r5, #0
 800c116:	d205      	bcs.n	800c124 <_svfprintf_r+0xbac>
 800c118:	3630      	adds	r6, #48	; 0x30
 800c11a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800c11e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 800c122:	e3fb      	b.n	800c91c <_svfprintf_r+0x13a4>
 800c124:	2300      	movs	r3, #0
 800c126:	9305      	str	r3, [sp, #20]
 800c128:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800c12c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	220a      	movs	r2, #10
 800c134:	2300      	movs	r3, #0
 800c136:	4630      	mov	r0, r6
 800c138:	4629      	mov	r1, r5
 800c13a:	f7f4 fd85 	bl	8000c48 <__aeabi_uldivmod>
 800c13e:	9b05      	ldr	r3, [sp, #20]
 800c140:	3301      	adds	r3, #1
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	3230      	adds	r2, #48	; 0x30
 800c148:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 800c14c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800c150:	b1d3      	cbz	r3, 800c188 <_svfprintf_r+0xc10>
 800c152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c154:	9a05      	ldr	r2, [sp, #20]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d115      	bne.n	800c188 <_svfprintf_r+0xc10>
 800c15c:	2aff      	cmp	r2, #255	; 0xff
 800c15e:	d013      	beq.n	800c188 <_svfprintf_r+0xc10>
 800c160:	2e0a      	cmp	r6, #10
 800c162:	f175 0300 	sbcs.w	r3, r5, #0
 800c166:	d30f      	bcc.n	800c188 <_svfprintf_r+0xc10>
 800c168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c16a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c16c:	eba9 0903 	sub.w	r9, r9, r3
 800c170:	461a      	mov	r2, r3
 800c172:	4648      	mov	r0, r9
 800c174:	f002 f939 	bl	800e3ea <strncpy>
 800c178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17a:	785b      	ldrb	r3, [r3, #1]
 800c17c:	b11b      	cbz	r3, 800c186 <_svfprintf_r+0xc0e>
 800c17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c180:	3301      	adds	r3, #1
 800c182:	930a      	str	r3, [sp, #40]	; 0x28
 800c184:	2300      	movs	r3, #0
 800c186:	9305      	str	r3, [sp, #20]
 800c188:	2300      	movs	r3, #0
 800c18a:	220a      	movs	r2, #10
 800c18c:	4630      	mov	r0, r6
 800c18e:	4629      	mov	r1, r5
 800c190:	f7f4 fd5a 	bl	8000c48 <__aeabi_uldivmod>
 800c194:	2e0a      	cmp	r6, #10
 800c196:	f175 0300 	sbcs.w	r3, r5, #0
 800c19a:	f0c0 83bf 	bcc.w	800c91c <_svfprintf_r+0x13a4>
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	46cb      	mov	fp, r9
 800c1a4:	e7c5      	b.n	800c132 <_svfprintf_r+0xbba>
 800c1a6:	f006 030f 	and.w	r3, r6, #15
 800c1aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1ac:	0936      	lsrs	r6, r6, #4
 800c1ae:	5cd3      	ldrb	r3, [r2, r3]
 800c1b0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c1b4:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 800c1b8:	092d      	lsrs	r5, r5, #4
 800c1ba:	ea56 0305 	orrs.w	r3, r6, r5
 800c1be:	d1f2      	bne.n	800c1a6 <_svfprintf_r+0xc2e>
 800c1c0:	e3ac      	b.n	800c91c <_svfprintf_r+0x13a4>
 800c1c2:	b933      	cbnz	r3, 800c1d2 <_svfprintf_r+0xc5a>
 800c1c4:	f01b 0f01 	tst.w	fp, #1
 800c1c8:	d003      	beq.n	800c1d2 <_svfprintf_r+0xc5a>
 800c1ca:	2330      	movs	r3, #48	; 0x30
 800c1cc:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800c1d0:	e7a5      	b.n	800c11e <_svfprintf_r+0xba6>
 800c1d2:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800c1d6:	e3a1      	b.n	800c91c <_svfprintf_r+0x13a4>
 800c1d8:	9b06      	ldr	r3, [sp, #24]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 8370 	beq.w	800c8c0 <_svfprintf_r+0x1348>
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800c1e6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800c1ea:	9607      	str	r6, [sp, #28]
 800c1ec:	f7ff bb29 	b.w	800b842 <_svfprintf_r+0x2ca>
 800c1f0:	9e03      	ldr	r6, [sp, #12]
 800c1f2:	f7ff bb98 	b.w	800b926 <_svfprintf_r+0x3ae>
 800c1f6:	2010      	movs	r0, #16
 800c1f8:	4402      	add	r2, r0
 800c1fa:	2b07      	cmp	r3, #7
 800c1fc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c200:	6060      	str	r0, [r4, #4]
 800c202:	dd08      	ble.n	800c216 <_svfprintf_r+0xc9e>
 800c204:	aa22      	add	r2, sp, #136	; 0x88
 800c206:	4641      	mov	r1, r8
 800c208:	4650      	mov	r0, sl
 800c20a:	f002 f901 	bl	800e410 <__ssprint_r>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f040 8334 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c214:	a925      	add	r1, sp, #148	; 0x94
 800c216:	3f10      	subs	r7, #16
 800c218:	460c      	mov	r4, r1
 800c21a:	e4f4      	b.n	800bc06 <_svfprintf_r+0x68e>
 800c21c:	460c      	mov	r4, r1
 800c21e:	e50d      	b.n	800bc3c <_svfprintf_r+0x6c4>
 800c220:	aa22      	add	r2, sp, #136	; 0x88
 800c222:	4641      	mov	r1, r8
 800c224:	4650      	mov	r0, sl
 800c226:	f002 f8f3 	bl	800e410 <__ssprint_r>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f040 8326 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c230:	ac25      	add	r4, sp, #148	; 0x94
 800c232:	e515      	b.n	800bc60 <_svfprintf_r+0x6e8>
 800c234:	aa22      	add	r2, sp, #136	; 0x88
 800c236:	4641      	mov	r1, r8
 800c238:	4650      	mov	r0, sl
 800c23a:	f002 f8e9 	bl	800e410 <__ssprint_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f040 831c 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c244:	ac25      	add	r4, sp, #148	; 0x94
 800c246:	e51b      	b.n	800bc80 <_svfprintf_r+0x708>
 800c248:	2010      	movs	r0, #16
 800c24a:	4402      	add	r2, r0
 800c24c:	2b07      	cmp	r3, #7
 800c24e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c252:	6060      	str	r0, [r4, #4]
 800c254:	dd08      	ble.n	800c268 <_svfprintf_r+0xcf0>
 800c256:	aa22      	add	r2, sp, #136	; 0x88
 800c258:	4641      	mov	r1, r8
 800c25a:	4650      	mov	r0, sl
 800c25c:	f002 f8d8 	bl	800e410 <__ssprint_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	f040 830b 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c266:	a925      	add	r1, sp, #148	; 0x94
 800c268:	3f10      	subs	r7, #16
 800c26a:	460c      	mov	r4, r1
 800c26c:	e510      	b.n	800bc90 <_svfprintf_r+0x718>
 800c26e:	460c      	mov	r4, r1
 800c270:	e529      	b.n	800bcc6 <_svfprintf_r+0x74e>
 800c272:	2010      	movs	r0, #16
 800c274:	4402      	add	r2, r0
 800c276:	2b07      	cmp	r3, #7
 800c278:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c27c:	6060      	str	r0, [r4, #4]
 800c27e:	dd08      	ble.n	800c292 <_svfprintf_r+0xd1a>
 800c280:	aa22      	add	r2, sp, #136	; 0x88
 800c282:	4641      	mov	r1, r8
 800c284:	4650      	mov	r0, sl
 800c286:	f002 f8c3 	bl	800e410 <__ssprint_r>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f040 82f6 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c290:	a925      	add	r1, sp, #148	; 0x94
 800c292:	3e10      	subs	r6, #16
 800c294:	460c      	mov	r4, r1
 800c296:	e529      	b.n	800bcec <_svfprintf_r+0x774>
 800c298:	460c      	mov	r4, r1
 800c29a:	e541      	b.n	800bd20 <_svfprintf_r+0x7a8>
 800c29c:	080146e4 	.word	0x080146e4
 800c2a0:	080146f5 	.word	0x080146f5
 800c2a4:	9b06      	ldr	r3, [sp, #24]
 800c2a6:	2b65      	cmp	r3, #101	; 0x65
 800c2a8:	f340 8230 	ble.w	800c70c <_svfprintf_r+0x1194>
 800c2ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f7f4 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d068      	beq.n	800c38e <_svfprintf_r+0xe16>
 800c2bc:	4b6d      	ldr	r3, [pc, #436]	; (800c474 <_svfprintf_r+0xefc>)
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	441e      	add	r6, r3
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c2c8:	9624      	str	r6, [sp, #144]	; 0x90
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	2b07      	cmp	r3, #7
 800c2ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800c2d0:	dc37      	bgt.n	800c342 <_svfprintf_r+0xdca>
 800c2d2:	3408      	adds	r4, #8
 800c2d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c2d6:	9a05      	ldr	r2, [sp, #20]
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	db03      	blt.n	800c2e4 <_svfprintf_r+0xd6c>
 800c2dc:	f01b 0f01 	tst.w	fp, #1
 800c2e0:	f43f ad30 	beq.w	800bd44 <_svfprintf_r+0x7cc>
 800c2e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c2f0:	4413      	add	r3, r2
 800c2f2:	9324      	str	r3, [sp, #144]	; 0x90
 800c2f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	2b07      	cmp	r3, #7
 800c2fa:	9323      	str	r3, [sp, #140]	; 0x8c
 800c2fc:	dc2b      	bgt.n	800c356 <_svfprintf_r+0xdde>
 800c2fe:	3408      	adds	r4, #8
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	1e5d      	subs	r5, r3, #1
 800c304:	2d00      	cmp	r5, #0
 800c306:	f77f ad1d 	ble.w	800bd44 <_svfprintf_r+0x7cc>
 800c30a:	4e5b      	ldr	r6, [pc, #364]	; (800c478 <_svfprintf_r+0xf00>)
 800c30c:	2710      	movs	r7, #16
 800c30e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c312:	2d10      	cmp	r5, #16
 800c314:	f103 0301 	add.w	r3, r3, #1
 800c318:	f104 0108 	add.w	r1, r4, #8
 800c31c:	6026      	str	r6, [r4, #0]
 800c31e:	dc24      	bgt.n	800c36a <_svfprintf_r+0xdf2>
 800c320:	6065      	str	r5, [r4, #4]
 800c322:	2b07      	cmp	r3, #7
 800c324:	4415      	add	r5, r2
 800c326:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c32a:	f340 8286 	ble.w	800c83a <_svfprintf_r+0x12c2>
 800c32e:	aa22      	add	r2, sp, #136	; 0x88
 800c330:	4641      	mov	r1, r8
 800c332:	4650      	mov	r0, sl
 800c334:	f002 f86c 	bl	800e410 <__ssprint_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	f040 829f 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c33e:	ac25      	add	r4, sp, #148	; 0x94
 800c340:	e500      	b.n	800bd44 <_svfprintf_r+0x7cc>
 800c342:	aa22      	add	r2, sp, #136	; 0x88
 800c344:	4641      	mov	r1, r8
 800c346:	4650      	mov	r0, sl
 800c348:	f002 f862 	bl	800e410 <__ssprint_r>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	f040 8295 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c352:	ac25      	add	r4, sp, #148	; 0x94
 800c354:	e7be      	b.n	800c2d4 <_svfprintf_r+0xd5c>
 800c356:	aa22      	add	r2, sp, #136	; 0x88
 800c358:	4641      	mov	r1, r8
 800c35a:	4650      	mov	r0, sl
 800c35c:	f002 f858 	bl	800e410 <__ssprint_r>
 800c360:	2800      	cmp	r0, #0
 800c362:	f040 828b 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c366:	ac25      	add	r4, sp, #148	; 0x94
 800c368:	e7ca      	b.n	800c300 <_svfprintf_r+0xd88>
 800c36a:	3210      	adds	r2, #16
 800c36c:	2b07      	cmp	r3, #7
 800c36e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c372:	6067      	str	r7, [r4, #4]
 800c374:	dd08      	ble.n	800c388 <_svfprintf_r+0xe10>
 800c376:	aa22      	add	r2, sp, #136	; 0x88
 800c378:	4641      	mov	r1, r8
 800c37a:	4650      	mov	r0, sl
 800c37c:	f002 f848 	bl	800e410 <__ssprint_r>
 800c380:	2800      	cmp	r0, #0
 800c382:	f040 827b 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c386:	a925      	add	r1, sp, #148	; 0x94
 800c388:	3d10      	subs	r5, #16
 800c38a:	460c      	mov	r4, r1
 800c38c:	e7bf      	b.n	800c30e <_svfprintf_r+0xd96>
 800c38e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c390:	2b00      	cmp	r3, #0
 800c392:	dc73      	bgt.n	800c47c <_svfprintf_r+0xf04>
 800c394:	4b37      	ldr	r3, [pc, #220]	; (800c474 <_svfprintf_r+0xefc>)
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	2301      	movs	r3, #1
 800c39a:	441e      	add	r6, r3
 800c39c:	6063      	str	r3, [r4, #4]
 800c39e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3a0:	9624      	str	r6, [sp, #144]	; 0x90
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	2b07      	cmp	r3, #7
 800c3a6:	9323      	str	r3, [sp, #140]	; 0x8c
 800c3a8:	dc3d      	bgt.n	800c426 <_svfprintf_r+0xeae>
 800c3aa:	3408      	adds	r4, #8
 800c3ac:	9905      	ldr	r1, [sp, #20]
 800c3ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c3b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	f00b 0101 	and.w	r1, fp, #1
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	f43f acc3 	beq.w	800bd44 <_svfprintf_r+0x7cc>
 800c3be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3c0:	6022      	str	r2, [r4, #0]
 800c3c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3c4:	6062      	str	r2, [r4, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	9324      	str	r3, [sp, #144]	; 0x90
 800c3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	2b07      	cmp	r3, #7
 800c3d0:	9323      	str	r3, [sp, #140]	; 0x8c
 800c3d2:	dc32      	bgt.n	800c43a <_svfprintf_r+0xec2>
 800c3d4:	3408      	adds	r4, #8
 800c3d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	da1b      	bge.n	800c414 <_svfprintf_r+0xe9c>
 800c3dc:	4e26      	ldr	r6, [pc, #152]	; (800c478 <_svfprintf_r+0xf00>)
 800c3de:	426d      	negs	r5, r5
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	2710      	movs	r7, #16
 800c3e4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800c3e8:	2d10      	cmp	r5, #16
 800c3ea:	f102 0201 	add.w	r2, r2, #1
 800c3ee:	f104 0408 	add.w	r4, r4, #8
 800c3f2:	601e      	str	r6, [r3, #0]
 800c3f4:	dc2b      	bgt.n	800c44e <_svfprintf_r+0xed6>
 800c3f6:	605d      	str	r5, [r3, #4]
 800c3f8:	2a07      	cmp	r2, #7
 800c3fa:	440d      	add	r5, r1
 800c3fc:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800c400:	dd08      	ble.n	800c414 <_svfprintf_r+0xe9c>
 800c402:	aa22      	add	r2, sp, #136	; 0x88
 800c404:	4641      	mov	r1, r8
 800c406:	4650      	mov	r0, sl
 800c408:	f002 f802 	bl	800e410 <__ssprint_r>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	f040 8235 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c412:	ac25      	add	r4, sp, #148	; 0x94
 800c414:	9b05      	ldr	r3, [sp, #20]
 800c416:	9a05      	ldr	r2, [sp, #20]
 800c418:	6063      	str	r3, [r4, #4]
 800c41a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c41c:	f8c4 9000 	str.w	r9, [r4]
 800c420:	4413      	add	r3, r2
 800c422:	9324      	str	r3, [sp, #144]	; 0x90
 800c424:	e487      	b.n	800bd36 <_svfprintf_r+0x7be>
 800c426:	aa22      	add	r2, sp, #136	; 0x88
 800c428:	4641      	mov	r1, r8
 800c42a:	4650      	mov	r0, sl
 800c42c:	f001 fff0 	bl	800e410 <__ssprint_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	f040 8223 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c436:	ac25      	add	r4, sp, #148	; 0x94
 800c438:	e7b8      	b.n	800c3ac <_svfprintf_r+0xe34>
 800c43a:	aa22      	add	r2, sp, #136	; 0x88
 800c43c:	4641      	mov	r1, r8
 800c43e:	4650      	mov	r0, sl
 800c440:	f001 ffe6 	bl	800e410 <__ssprint_r>
 800c444:	2800      	cmp	r0, #0
 800c446:	f040 8219 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c44a:	ac25      	add	r4, sp, #148	; 0x94
 800c44c:	e7c3      	b.n	800c3d6 <_svfprintf_r+0xe5e>
 800c44e:	3110      	adds	r1, #16
 800c450:	2a07      	cmp	r2, #7
 800c452:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800c456:	605f      	str	r7, [r3, #4]
 800c458:	dd08      	ble.n	800c46c <_svfprintf_r+0xef4>
 800c45a:	aa22      	add	r2, sp, #136	; 0x88
 800c45c:	4641      	mov	r1, r8
 800c45e:	4650      	mov	r0, sl
 800c460:	f001 ffd6 	bl	800e410 <__ssprint_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	f040 8209 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c46a:	ac25      	add	r4, sp, #148	; 0x94
 800c46c:	3d10      	subs	r5, #16
 800c46e:	4623      	mov	r3, r4
 800c470:	e7b8      	b.n	800c3e4 <_svfprintf_r+0xe6c>
 800c472:	bf00      	nop
 800c474:	08014706 	.word	0x08014706
 800c478:	08014718 	.word	0x08014718
 800c47c:	9f05      	ldr	r7, [sp, #20]
 800c47e:	42af      	cmp	r7, r5
 800c480:	bfa8      	it	ge
 800c482:	462f      	movge	r7, r5
 800c484:	2f00      	cmp	r7, #0
 800c486:	dd0a      	ble.n	800c49e <_svfprintf_r+0xf26>
 800c488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c48a:	3301      	adds	r3, #1
 800c48c:	443e      	add	r6, r7
 800c48e:	2b07      	cmp	r3, #7
 800c490:	e9c4 9700 	strd	r9, r7, [r4]
 800c494:	9624      	str	r6, [sp, #144]	; 0x90
 800c496:	9323      	str	r3, [sp, #140]	; 0x8c
 800c498:	f300 8085 	bgt.w	800c5a6 <_svfprintf_r+0x102e>
 800c49c:	3408      	adds	r4, #8
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	bfac      	ite	ge
 800c4a2:	1bee      	subge	r6, r5, r7
 800c4a4:	462e      	movlt	r6, r5
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	dd19      	ble.n	800c4de <_svfprintf_r+0xf66>
 800c4aa:	4f97      	ldr	r7, [pc, #604]	; (800c708 <_svfprintf_r+0x1190>)
 800c4ac:	6027      	str	r7, [r4, #0]
 800c4ae:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c4b2:	2e10      	cmp	r6, #16
 800c4b4:	f103 0301 	add.w	r3, r3, #1
 800c4b8:	f104 0108 	add.w	r1, r4, #8
 800c4bc:	dc7d      	bgt.n	800c5ba <_svfprintf_r+0x1042>
 800c4be:	6066      	str	r6, [r4, #4]
 800c4c0:	2b07      	cmp	r3, #7
 800c4c2:	4416      	add	r6, r2
 800c4c4:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c4c8:	f340 808a 	ble.w	800c5e0 <_svfprintf_r+0x1068>
 800c4cc:	aa22      	add	r2, sp, #136	; 0x88
 800c4ce:	4641      	mov	r1, r8
 800c4d0:	4650      	mov	r0, sl
 800c4d2:	f001 ff9d 	bl	800e410 <__ssprint_r>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f040 81d0 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c4dc:	ac25      	add	r4, sp, #148	; 0x94
 800c4de:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800c4e2:	444d      	add	r5, r9
 800c4e4:	d00a      	beq.n	800c4fc <_svfprintf_r+0xf84>
 800c4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d17b      	bne.n	800c5e4 <_svfprintf_r+0x106c>
 800c4ec:	9b08      	ldr	r3, [sp, #32]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d17b      	bne.n	800c5ea <_svfprintf_r+0x1072>
 800c4f2:	9b05      	ldr	r3, [sp, #20]
 800c4f4:	444b      	add	r3, r9
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf28      	it	cs
 800c4fa:	461d      	movcs	r5, r3
 800c4fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c4fe:	9a05      	ldr	r2, [sp, #20]
 800c500:	4293      	cmp	r3, r2
 800c502:	db02      	blt.n	800c50a <_svfprintf_r+0xf92>
 800c504:	f01b 0f01 	tst.w	fp, #1
 800c508:	d00e      	beq.n	800c528 <_svfprintf_r+0xfb0>
 800c50a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c512:	6063      	str	r3, [r4, #4]
 800c514:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c516:	4413      	add	r3, r2
 800c518:	9324      	str	r3, [sp, #144]	; 0x90
 800c51a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c51c:	3301      	adds	r3, #1
 800c51e:	2b07      	cmp	r3, #7
 800c520:	9323      	str	r3, [sp, #140]	; 0x8c
 800c522:	f300 80dd 	bgt.w	800c6e0 <_svfprintf_r+0x1168>
 800c526:	3408      	adds	r4, #8
 800c528:	9b05      	ldr	r3, [sp, #20]
 800c52a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c52c:	eb09 0203 	add.w	r2, r9, r3
 800c530:	1b9e      	subs	r6, r3, r6
 800c532:	1b52      	subs	r2, r2, r5
 800c534:	4296      	cmp	r6, r2
 800c536:	bfa8      	it	ge
 800c538:	4616      	movge	r6, r2
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	dd0b      	ble.n	800c556 <_svfprintf_r+0xfde>
 800c53e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c540:	4433      	add	r3, r6
 800c542:	9324      	str	r3, [sp, #144]	; 0x90
 800c544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c546:	3301      	adds	r3, #1
 800c548:	2b07      	cmp	r3, #7
 800c54a:	e9c4 5600 	strd	r5, r6, [r4]
 800c54e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c550:	f300 80d0 	bgt.w	800c6f4 <_svfprintf_r+0x117c>
 800c554:	3408      	adds	r4, #8
 800c556:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	eba3 0505 	sub.w	r5, r3, r5
 800c560:	bfa8      	it	ge
 800c562:	1bad      	subge	r5, r5, r6
 800c564:	2d00      	cmp	r5, #0
 800c566:	f77f abed 	ble.w	800bd44 <_svfprintf_r+0x7cc>
 800c56a:	4e67      	ldr	r6, [pc, #412]	; (800c708 <_svfprintf_r+0x1190>)
 800c56c:	2710      	movs	r7, #16
 800c56e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c572:	2d10      	cmp	r5, #16
 800c574:	f103 0301 	add.w	r3, r3, #1
 800c578:	f104 0108 	add.w	r1, r4, #8
 800c57c:	6026      	str	r6, [r4, #0]
 800c57e:	f77f aecf 	ble.w	800c320 <_svfprintf_r+0xda8>
 800c582:	3210      	adds	r2, #16
 800c584:	2b07      	cmp	r3, #7
 800c586:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c58a:	6067      	str	r7, [r4, #4]
 800c58c:	dd08      	ble.n	800c5a0 <_svfprintf_r+0x1028>
 800c58e:	aa22      	add	r2, sp, #136	; 0x88
 800c590:	4641      	mov	r1, r8
 800c592:	4650      	mov	r0, sl
 800c594:	f001 ff3c 	bl	800e410 <__ssprint_r>
 800c598:	2800      	cmp	r0, #0
 800c59a:	f040 816f 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c59e:	a925      	add	r1, sp, #148	; 0x94
 800c5a0:	3d10      	subs	r5, #16
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	e7e3      	b.n	800c56e <_svfprintf_r+0xff6>
 800c5a6:	aa22      	add	r2, sp, #136	; 0x88
 800c5a8:	4641      	mov	r1, r8
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	f001 ff30 	bl	800e410 <__ssprint_r>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	f040 8163 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c5b6:	ac25      	add	r4, sp, #148	; 0x94
 800c5b8:	e771      	b.n	800c49e <_svfprintf_r+0xf26>
 800c5ba:	2010      	movs	r0, #16
 800c5bc:	4402      	add	r2, r0
 800c5be:	2b07      	cmp	r3, #7
 800c5c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c5c4:	6060      	str	r0, [r4, #4]
 800c5c6:	dd08      	ble.n	800c5da <_svfprintf_r+0x1062>
 800c5c8:	aa22      	add	r2, sp, #136	; 0x88
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	4650      	mov	r0, sl
 800c5ce:	f001 ff1f 	bl	800e410 <__ssprint_r>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f040 8152 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c5d8:	a925      	add	r1, sp, #148	; 0x94
 800c5da:	3e10      	subs	r6, #16
 800c5dc:	460c      	mov	r4, r1
 800c5de:	e765      	b.n	800c4ac <_svfprintf_r+0xf34>
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	e77c      	b.n	800c4de <_svfprintf_r+0xf66>
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d04a      	beq.n	800c680 <_svfprintf_r+0x1108>
 800c5ea:	9b08      	ldr	r3, [sp, #32]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	9308      	str	r3, [sp, #32]
 800c5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5f2:	6023      	str	r3, [r4, #0]
 800c5f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5fc:	4413      	add	r3, r2
 800c5fe:	9324      	str	r3, [sp, #144]	; 0x90
 800c600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c602:	3301      	adds	r3, #1
 800c604:	2b07      	cmp	r3, #7
 800c606:	9323      	str	r3, [sp, #140]	; 0x8c
 800c608:	dc41      	bgt.n	800c68e <_svfprintf_r+0x1116>
 800c60a:	3408      	adds	r4, #8
 800c60c:	9b05      	ldr	r3, [sp, #20]
 800c60e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c610:	eb09 0703 	add.w	r7, r9, r3
 800c614:	1b7b      	subs	r3, r7, r5
 800c616:	7817      	ldrb	r7, [r2, #0]
 800c618:	429f      	cmp	r7, r3
 800c61a:	bfa8      	it	ge
 800c61c:	461f      	movge	r7, r3
 800c61e:	2f00      	cmp	r7, #0
 800c620:	dd0a      	ble.n	800c638 <_svfprintf_r+0x10c0>
 800c622:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c624:	443b      	add	r3, r7
 800c626:	9324      	str	r3, [sp, #144]	; 0x90
 800c628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c62a:	3301      	adds	r3, #1
 800c62c:	2b07      	cmp	r3, #7
 800c62e:	e9c4 5700 	strd	r5, r7, [r4]
 800c632:	9323      	str	r3, [sp, #140]	; 0x8c
 800c634:	dc35      	bgt.n	800c6a2 <_svfprintf_r+0x112a>
 800c636:	3408      	adds	r4, #8
 800c638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63a:	781e      	ldrb	r6, [r3, #0]
 800c63c:	2f00      	cmp	r7, #0
 800c63e:	bfa8      	it	ge
 800c640:	1bf6      	subge	r6, r6, r7
 800c642:	2e00      	cmp	r6, #0
 800c644:	dd18      	ble.n	800c678 <_svfprintf_r+0x1100>
 800c646:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c64a:	482f      	ldr	r0, [pc, #188]	; (800c708 <_svfprintf_r+0x1190>)
 800c64c:	6020      	str	r0, [r4, #0]
 800c64e:	2e10      	cmp	r6, #16
 800c650:	f103 0301 	add.w	r3, r3, #1
 800c654:	f104 0108 	add.w	r1, r4, #8
 800c658:	dc2d      	bgt.n	800c6b6 <_svfprintf_r+0x113e>
 800c65a:	4432      	add	r2, r6
 800c65c:	2b07      	cmp	r3, #7
 800c65e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c662:	6066      	str	r6, [r4, #4]
 800c664:	dd3a      	ble.n	800c6dc <_svfprintf_r+0x1164>
 800c666:	aa22      	add	r2, sp, #136	; 0x88
 800c668:	4641      	mov	r1, r8
 800c66a:	4650      	mov	r0, sl
 800c66c:	f001 fed0 	bl	800e410 <__ssprint_r>
 800c670:	2800      	cmp	r0, #0
 800c672:	f040 8103 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c676:	ac25      	add	r4, sp, #148	; 0x94
 800c678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	441d      	add	r5, r3
 800c67e:	e732      	b.n	800c4e6 <_svfprintf_r+0xf6e>
 800c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c682:	3b01      	subs	r3, #1
 800c684:	930a      	str	r3, [sp, #40]	; 0x28
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	3b01      	subs	r3, #1
 800c68a:	9309      	str	r3, [sp, #36]	; 0x24
 800c68c:	e7b0      	b.n	800c5f0 <_svfprintf_r+0x1078>
 800c68e:	aa22      	add	r2, sp, #136	; 0x88
 800c690:	4641      	mov	r1, r8
 800c692:	4650      	mov	r0, sl
 800c694:	f001 febc 	bl	800e410 <__ssprint_r>
 800c698:	2800      	cmp	r0, #0
 800c69a:	f040 80ef 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c69e:	ac25      	add	r4, sp, #148	; 0x94
 800c6a0:	e7b4      	b.n	800c60c <_svfprintf_r+0x1094>
 800c6a2:	aa22      	add	r2, sp, #136	; 0x88
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	f001 feb2 	bl	800e410 <__ssprint_r>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f040 80e5 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c6b2:	ac25      	add	r4, sp, #148	; 0x94
 800c6b4:	e7c0      	b.n	800c638 <_svfprintf_r+0x10c0>
 800c6b6:	2010      	movs	r0, #16
 800c6b8:	4402      	add	r2, r0
 800c6ba:	2b07      	cmp	r3, #7
 800c6bc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c6c0:	6060      	str	r0, [r4, #4]
 800c6c2:	dd08      	ble.n	800c6d6 <_svfprintf_r+0x115e>
 800c6c4:	aa22      	add	r2, sp, #136	; 0x88
 800c6c6:	4641      	mov	r1, r8
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	f001 fea1 	bl	800e410 <__ssprint_r>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f040 80d4 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c6d4:	a925      	add	r1, sp, #148	; 0x94
 800c6d6:	3e10      	subs	r6, #16
 800c6d8:	460c      	mov	r4, r1
 800c6da:	e7b4      	b.n	800c646 <_svfprintf_r+0x10ce>
 800c6dc:	460c      	mov	r4, r1
 800c6de:	e7cb      	b.n	800c678 <_svfprintf_r+0x1100>
 800c6e0:	aa22      	add	r2, sp, #136	; 0x88
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	f001 fe93 	bl	800e410 <__ssprint_r>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f040 80c6 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c6f0:	ac25      	add	r4, sp, #148	; 0x94
 800c6f2:	e719      	b.n	800c528 <_svfprintf_r+0xfb0>
 800c6f4:	aa22      	add	r2, sp, #136	; 0x88
 800c6f6:	4641      	mov	r1, r8
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	f001 fe89 	bl	800e410 <__ssprint_r>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f040 80bc 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c704:	ac25      	add	r4, sp, #148	; 0x94
 800c706:	e726      	b.n	800c556 <_svfprintf_r+0xfde>
 800c708:	08014718 	.word	0x08014718
 800c70c:	9a05      	ldr	r2, [sp, #20]
 800c70e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c710:	2a01      	cmp	r2, #1
 800c712:	f106 0601 	add.w	r6, r6, #1
 800c716:	f103 0301 	add.w	r3, r3, #1
 800c71a:	f104 0508 	add.w	r5, r4, #8
 800c71e:	dc02      	bgt.n	800c726 <_svfprintf_r+0x11ae>
 800c720:	f01b 0f01 	tst.w	fp, #1
 800c724:	d07e      	beq.n	800c824 <_svfprintf_r+0x12ac>
 800c726:	2201      	movs	r2, #1
 800c728:	2b07      	cmp	r3, #7
 800c72a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c72e:	f8c4 9000 	str.w	r9, [r4]
 800c732:	6062      	str	r2, [r4, #4]
 800c734:	dd08      	ble.n	800c748 <_svfprintf_r+0x11d0>
 800c736:	aa22      	add	r2, sp, #136	; 0x88
 800c738:	4641      	mov	r1, r8
 800c73a:	4650      	mov	r0, sl
 800c73c:	f001 fe68 	bl	800e410 <__ssprint_r>
 800c740:	2800      	cmp	r0, #0
 800c742:	f040 809b 	bne.w	800c87c <_svfprintf_r+0x1304>
 800c746:	ad25      	add	r5, sp, #148	; 0x94
 800c748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c750:	606b      	str	r3, [r5, #4]
 800c752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c754:	4413      	add	r3, r2
 800c756:	9324      	str	r3, [sp, #144]	; 0x90
 800c758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c75a:	3301      	adds	r3, #1
 800c75c:	2b07      	cmp	r3, #7
 800c75e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c760:	dc32      	bgt.n	800c7c8 <_svfprintf_r+0x1250>
 800c762:	3508      	adds	r5, #8
 800c764:	9b05      	ldr	r3, [sp, #20]
 800c766:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c76a:	1e5c      	subs	r4, r3, #1
 800c76c:	2200      	movs	r2, #0
 800c76e:	2300      	movs	r3, #0
 800c770:	f7f4 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c774:	2800      	cmp	r0, #0
 800c776:	d130      	bne.n	800c7da <_svfprintf_r+0x1262>
 800c778:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c77a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c77c:	9a05      	ldr	r2, [sp, #20]
 800c77e:	3101      	adds	r1, #1
 800c780:	3b01      	subs	r3, #1
 800c782:	f109 0001 	add.w	r0, r9, #1
 800c786:	4413      	add	r3, r2
 800c788:	2907      	cmp	r1, #7
 800c78a:	e9c5 0400 	strd	r0, r4, [r5]
 800c78e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800c792:	dd50      	ble.n	800c836 <_svfprintf_r+0x12be>
 800c794:	aa22      	add	r2, sp, #136	; 0x88
 800c796:	4641      	mov	r1, r8
 800c798:	4650      	mov	r0, sl
 800c79a:	f001 fe39 	bl	800e410 <__ssprint_r>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d16c      	bne.n	800c87c <_svfprintf_r+0x1304>
 800c7a2:	ad25      	add	r5, sp, #148	; 0x94
 800c7a4:	ab1e      	add	r3, sp, #120	; 0x78
 800c7a6:	602b      	str	r3, [r5, #0]
 800c7a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c7ac:	606b      	str	r3, [r5, #4]
 800c7ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7b0:	4413      	add	r3, r2
 800c7b2:	9324      	str	r3, [sp, #144]	; 0x90
 800c7b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	2b07      	cmp	r3, #7
 800c7ba:	9323      	str	r3, [sp, #140]	; 0x8c
 800c7bc:	f73f adb7 	bgt.w	800c32e <_svfprintf_r+0xdb6>
 800c7c0:	f105 0408 	add.w	r4, r5, #8
 800c7c4:	f7ff babe 	b.w	800bd44 <_svfprintf_r+0x7cc>
 800c7c8:	aa22      	add	r2, sp, #136	; 0x88
 800c7ca:	4641      	mov	r1, r8
 800c7cc:	4650      	mov	r0, sl
 800c7ce:	f001 fe1f 	bl	800e410 <__ssprint_r>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d152      	bne.n	800c87c <_svfprintf_r+0x1304>
 800c7d6:	ad25      	add	r5, sp, #148	; 0x94
 800c7d8:	e7c4      	b.n	800c764 <_svfprintf_r+0x11ec>
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	dde2      	ble.n	800c7a4 <_svfprintf_r+0x122c>
 800c7de:	4e56      	ldr	r6, [pc, #344]	; (800c938 <_svfprintf_r+0x13c0>)
 800c7e0:	2710      	movs	r7, #16
 800c7e2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c7e6:	2c10      	cmp	r4, #16
 800c7e8:	f103 0301 	add.w	r3, r3, #1
 800c7ec:	f105 0108 	add.w	r1, r5, #8
 800c7f0:	602e      	str	r6, [r5, #0]
 800c7f2:	dc07      	bgt.n	800c804 <_svfprintf_r+0x128c>
 800c7f4:	606c      	str	r4, [r5, #4]
 800c7f6:	2b07      	cmp	r3, #7
 800c7f8:	4414      	add	r4, r2
 800c7fa:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800c7fe:	dcc9      	bgt.n	800c794 <_svfprintf_r+0x121c>
 800c800:	460d      	mov	r5, r1
 800c802:	e7cf      	b.n	800c7a4 <_svfprintf_r+0x122c>
 800c804:	3210      	adds	r2, #16
 800c806:	2b07      	cmp	r3, #7
 800c808:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c80c:	606f      	str	r7, [r5, #4]
 800c80e:	dd06      	ble.n	800c81e <_svfprintf_r+0x12a6>
 800c810:	aa22      	add	r2, sp, #136	; 0x88
 800c812:	4641      	mov	r1, r8
 800c814:	4650      	mov	r0, sl
 800c816:	f001 fdfb 	bl	800e410 <__ssprint_r>
 800c81a:	bb78      	cbnz	r0, 800c87c <_svfprintf_r+0x1304>
 800c81c:	a925      	add	r1, sp, #148	; 0x94
 800c81e:	3c10      	subs	r4, #16
 800c820:	460d      	mov	r5, r1
 800c822:	e7de      	b.n	800c7e2 <_svfprintf_r+0x126a>
 800c824:	2201      	movs	r2, #1
 800c826:	2b07      	cmp	r3, #7
 800c828:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c82c:	f8c4 9000 	str.w	r9, [r4]
 800c830:	6062      	str	r2, [r4, #4]
 800c832:	ddb7      	ble.n	800c7a4 <_svfprintf_r+0x122c>
 800c834:	e7ae      	b.n	800c794 <_svfprintf_r+0x121c>
 800c836:	3508      	adds	r5, #8
 800c838:	e7b4      	b.n	800c7a4 <_svfprintf_r+0x122c>
 800c83a:	460c      	mov	r4, r1
 800c83c:	f7ff ba82 	b.w	800bd44 <_svfprintf_r+0x7cc>
 800c840:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800c844:	1a9d      	subs	r5, r3, r2
 800c846:	2d00      	cmp	r5, #0
 800c848:	f77f aa80 	ble.w	800bd4c <_svfprintf_r+0x7d4>
 800c84c:	4e3b      	ldr	r6, [pc, #236]	; (800c93c <_svfprintf_r+0x13c4>)
 800c84e:	2710      	movs	r7, #16
 800c850:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c854:	2d10      	cmp	r5, #16
 800c856:	f103 0301 	add.w	r3, r3, #1
 800c85a:	6026      	str	r6, [r4, #0]
 800c85c:	dc18      	bgt.n	800c890 <_svfprintf_r+0x1318>
 800c85e:	6065      	str	r5, [r4, #4]
 800c860:	2b07      	cmp	r3, #7
 800c862:	4415      	add	r5, r2
 800c864:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c868:	f77f aa70 	ble.w	800bd4c <_svfprintf_r+0x7d4>
 800c86c:	aa22      	add	r2, sp, #136	; 0x88
 800c86e:	4641      	mov	r1, r8
 800c870:	4650      	mov	r0, sl
 800c872:	f001 fdcd 	bl	800e410 <__ssprint_r>
 800c876:	2800      	cmp	r0, #0
 800c878:	f43f aa68 	beq.w	800bd4c <_svfprintf_r+0x7d4>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f43f a887 	beq.w	800b992 <_svfprintf_r+0x41a>
 800c884:	4619      	mov	r1, r3
 800c886:	4650      	mov	r0, sl
 800c888:	f000 ffb2 	bl	800d7f0 <_free_r>
 800c88c:	f7ff b881 	b.w	800b992 <_svfprintf_r+0x41a>
 800c890:	3210      	adds	r2, #16
 800c892:	2b07      	cmp	r3, #7
 800c894:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c898:	6067      	str	r7, [r4, #4]
 800c89a:	dc02      	bgt.n	800c8a2 <_svfprintf_r+0x132a>
 800c89c:	3408      	adds	r4, #8
 800c89e:	3d10      	subs	r5, #16
 800c8a0:	e7d6      	b.n	800c850 <_svfprintf_r+0x12d8>
 800c8a2:	aa22      	add	r2, sp, #136	; 0x88
 800c8a4:	4641      	mov	r1, r8
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	f001 fdb2 	bl	800e410 <__ssprint_r>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d1e5      	bne.n	800c87c <_svfprintf_r+0x1304>
 800c8b0:	ac25      	add	r4, sp, #148	; 0x94
 800c8b2:	e7f4      	b.n	800c89e <_svfprintf_r+0x1326>
 800c8b4:	9903      	ldr	r1, [sp, #12]
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f000 ff9a 	bl	800d7f0 <_free_r>
 800c8bc:	f7ff ba5e 	b.w	800bd7c <_svfprintf_r+0x804>
 800c8c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f43f a865 	beq.w	800b992 <_svfprintf_r+0x41a>
 800c8c8:	aa22      	add	r2, sp, #136	; 0x88
 800c8ca:	4641      	mov	r1, r8
 800c8cc:	4650      	mov	r0, sl
 800c8ce:	f001 fd9f 	bl	800e410 <__ssprint_r>
 800c8d2:	f7ff b85e 	b.w	800b992 <_svfprintf_r+0x41a>
 800c8d6:	ea56 0205 	orrs.w	r2, r6, r5
 800c8da:	465f      	mov	r7, fp
 800c8dc:	f43f ab78 	beq.w	800bfd0 <_svfprintf_r+0xa58>
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	f43f ac15 	beq.w	800c110 <_svfprintf_r+0xb98>
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800c8ec:	f43f ac5b 	beq.w	800c1a6 <_svfprintf_r+0xc2e>
 800c8f0:	f006 0307 	and.w	r3, r6, #7
 800c8f4:	08f6      	lsrs	r6, r6, #3
 800c8f6:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 800c8fa:	08ed      	lsrs	r5, r5, #3
 800c8fc:	3330      	adds	r3, #48	; 0x30
 800c8fe:	ea56 0105 	orrs.w	r1, r6, r5
 800c902:	464a      	mov	r2, r9
 800c904:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c908:	d1f2      	bne.n	800c8f0 <_svfprintf_r+0x1378>
 800c90a:	07f9      	lsls	r1, r7, #31
 800c90c:	d506      	bpl.n	800c91c <_svfprintf_r+0x13a4>
 800c90e:	2b30      	cmp	r3, #48	; 0x30
 800c910:	d004      	beq.n	800c91c <_svfprintf_r+0x13a4>
 800c912:	2330      	movs	r3, #48	; 0x30
 800c914:	f809 3c01 	strb.w	r3, [r9, #-1]
 800c918:	f1a2 0902 	sub.w	r9, r2, #2
 800c91c:	ab4e      	add	r3, sp, #312	; 0x138
 800c91e:	eba3 0309 	sub.w	r3, r3, r9
 800c922:	9e04      	ldr	r6, [sp, #16]
 800c924:	9304      	str	r3, [sp, #16]
 800c926:	2300      	movs	r3, #0
 800c928:	46bb      	mov	fp, r7
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c930:	461d      	mov	r5, r3
 800c932:	f7ff b94d 	b.w	800bbd0 <_svfprintf_r+0x658>
 800c936:	bf00      	nop
 800c938:	08014718 	.word	0x08014718
 800c93c:	08014708 	.word	0x08014708

0800c940 <sysconf>:
 800c940:	2808      	cmp	r0, #8
 800c942:	b508      	push	{r3, lr}
 800c944:	d006      	beq.n	800c954 <sysconf+0x14>
 800c946:	f7fe f96b 	bl	800ac20 <__errno>
 800c94a:	2316      	movs	r3, #22
 800c94c:	6003      	str	r3, [r0, #0]
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c952:	bd08      	pop	{r3, pc}
 800c954:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c958:	e7fb      	b.n	800c952 <sysconf+0x12>
	...

0800c95c <register_fini>:
 800c95c:	4b02      	ldr	r3, [pc, #8]	; (800c968 <register_fini+0xc>)
 800c95e:	b113      	cbz	r3, 800c966 <register_fini+0xa>
 800c960:	4802      	ldr	r0, [pc, #8]	; (800c96c <register_fini+0x10>)
 800c962:	f000 b805 	b.w	800c970 <atexit>
 800c966:	4770      	bx	lr
 800c968:	00000000 	.word	0x00000000
 800c96c:	0800d721 	.word	0x0800d721

0800c970 <atexit>:
 800c970:	2300      	movs	r3, #0
 800c972:	4601      	mov	r1, r0
 800c974:	461a      	mov	r2, r3
 800c976:	4618      	mov	r0, r3
 800c978:	f001 be30 	b.w	800e5dc <__register_exitproc>

0800c97c <quorem>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	690c      	ldr	r4, [r1, #16]
 800c984:	42a3      	cmp	r3, r4
 800c986:	4607      	mov	r7, r0
 800c988:	f2c0 8081 	blt.w	800ca8e <quorem+0x112>
 800c98c:	3c01      	subs	r4, #1
 800c98e:	f101 0814 	add.w	r8, r1, #20
 800c992:	f100 0514 	add.w	r5, r0, #20
 800c996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9b4:	d331      	bcc.n	800ca1a <quorem+0x9e>
 800c9b6:	f04f 0e00 	mov.w	lr, #0
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	46ac      	mov	ip, r5
 800c9be:	46f2      	mov	sl, lr
 800c9c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9c4:	b293      	uxth	r3, r2
 800c9c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c9ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d4:	f8dc a000 	ldr.w	sl, [ip]
 800c9d8:	0c12      	lsrs	r2, r2, #16
 800c9da:	fa13 f38a 	uxtah	r3, r3, sl
 800c9de:	fb06 e202 	mla	r2, r6, r2, lr
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	9b00      	ldr	r3, [sp, #0]
 800c9e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9ea:	b292      	uxth	r2, r2
 800c9ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c9f8:	4581      	cmp	r9, r0
 800c9fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9fe:	f84c 3b04 	str.w	r3, [ip], #4
 800ca02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca06:	d2db      	bcs.n	800c9c0 <quorem+0x44>
 800ca08:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca0c:	b92b      	cbnz	r3, 800ca1a <quorem+0x9e>
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	3b04      	subs	r3, #4
 800ca12:	429d      	cmp	r5, r3
 800ca14:	461a      	mov	r2, r3
 800ca16:	d32e      	bcc.n	800ca76 <quorem+0xfa>
 800ca18:	613c      	str	r4, [r7, #16]
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	f001 fb68 	bl	800e0f0 <__mcmp>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	db24      	blt.n	800ca6e <quorem+0xf2>
 800ca24:	3601      	adds	r6, #1
 800ca26:	4628      	mov	r0, r5
 800ca28:	f04f 0c00 	mov.w	ip, #0
 800ca2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca30:	f8d0 e000 	ldr.w	lr, [r0]
 800ca34:	b293      	uxth	r3, r2
 800ca36:	ebac 0303 	sub.w	r3, ip, r3
 800ca3a:	0c12      	lsrs	r2, r2, #16
 800ca3c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4e:	45c1      	cmp	r9, r8
 800ca50:	f840 3b04 	str.w	r3, [r0], #4
 800ca54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca58:	d2e8      	bcs.n	800ca2c <quorem+0xb0>
 800ca5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca62:	b922      	cbnz	r2, 800ca6e <quorem+0xf2>
 800ca64:	3b04      	subs	r3, #4
 800ca66:	429d      	cmp	r5, r3
 800ca68:	461a      	mov	r2, r3
 800ca6a:	d30a      	bcc.n	800ca82 <quorem+0x106>
 800ca6c:	613c      	str	r4, [r7, #16]
 800ca6e:	4630      	mov	r0, r6
 800ca70:	b003      	add	sp, #12
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	6812      	ldr	r2, [r2, #0]
 800ca78:	3b04      	subs	r3, #4
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	d1cc      	bne.n	800ca18 <quorem+0x9c>
 800ca7e:	3c01      	subs	r4, #1
 800ca80:	e7c7      	b.n	800ca12 <quorem+0x96>
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	3b04      	subs	r3, #4
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	d1f0      	bne.n	800ca6c <quorem+0xf0>
 800ca8a:	3c01      	subs	r4, #1
 800ca8c:	e7eb      	b.n	800ca66 <quorem+0xea>
 800ca8e:	2000      	movs	r0, #0
 800ca90:	e7ee      	b.n	800ca70 <quorem+0xf4>
 800ca92:	0000      	movs	r0, r0
 800ca94:	0000      	movs	r0, r0
	...

0800ca98 <_dtoa_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ed2d 8b04 	vpush	{d8-d9}
 800caa0:	b093      	sub	sp, #76	; 0x4c
 800caa2:	ec57 6b10 	vmov	r6, r7, d0
 800caa6:	9106      	str	r1, [sp, #24]
 800caa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800caaa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800caac:	9209      	str	r2, [sp, #36]	; 0x24
 800caae:	ee10 aa10 	vmov	sl, s0
 800cab2:	4604      	mov	r4, r0
 800cab4:	930c      	str	r3, [sp, #48]	; 0x30
 800cab6:	46bb      	mov	fp, r7
 800cab8:	b141      	cbz	r1, 800cacc <_dtoa_r+0x34>
 800caba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cabc:	604a      	str	r2, [r1, #4]
 800cabe:	2301      	movs	r3, #1
 800cac0:	4093      	lsls	r3, r2
 800cac2:	608b      	str	r3, [r1, #8]
 800cac4:	f001 f905 	bl	800dcd2 <_Bfree>
 800cac8:	2300      	movs	r3, #0
 800caca:	6423      	str	r3, [r4, #64]	; 0x40
 800cacc:	1e3b      	subs	r3, r7, #0
 800cace:	bfaa      	itet	ge
 800cad0:	2300      	movge	r3, #0
 800cad2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cad6:	602b      	strge	r3, [r5, #0]
 800cad8:	4ba3      	ldr	r3, [pc, #652]	; (800cd68 <_dtoa_r+0x2d0>)
 800cada:	bfbc      	itt	lt
 800cadc:	2201      	movlt	r2, #1
 800cade:	602a      	strlt	r2, [r5, #0]
 800cae0:	ea33 030b 	bics.w	r3, r3, fp
 800cae4:	d11b      	bne.n	800cb1e <_dtoa_r+0x86>
 800cae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cae8:	f242 730f 	movw	r3, #9999	; 0x270f
 800caec:	6013      	str	r3, [r2, #0]
 800caee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800caf2:	4333      	orrs	r3, r6
 800caf4:	f000 8590 	beq.w	800d618 <_dtoa_r+0xb80>
 800caf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cafa:	b90b      	cbnz	r3, 800cb00 <_dtoa_r+0x68>
 800cafc:	4b9b      	ldr	r3, [pc, #620]	; (800cd6c <_dtoa_r+0x2d4>)
 800cafe:	e022      	b.n	800cb46 <_dtoa_r+0xae>
 800cb00:	4b9a      	ldr	r3, [pc, #616]	; (800cd6c <_dtoa_r+0x2d4>)
 800cb02:	9301      	str	r3, [sp, #4]
 800cb04:	3303      	adds	r3, #3
 800cb06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	9801      	ldr	r0, [sp, #4]
 800cb0c:	b013      	add	sp, #76	; 0x4c
 800cb0e:	ecbd 8b04 	vpop	{d8-d9}
 800cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	4b96      	ldr	r3, [pc, #600]	; (800cd70 <_dtoa_r+0x2d8>)
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	e7f3      	b.n	800cb06 <_dtoa_r+0x6e>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2300      	movs	r3, #0
 800cb22:	4650      	mov	r0, sl
 800cb24:	4659      	mov	r1, fp
 800cb26:	f7f3 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb2a:	ec4b ab19 	vmov	d9, sl, fp
 800cb2e:	4680      	mov	r8, r0
 800cb30:	b158      	cbz	r0, 800cb4a <_dtoa_r+0xb2>
 800cb32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb34:	2301      	movs	r3, #1
 800cb36:	6013      	str	r3, [r2, #0]
 800cb38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 8569 	beq.w	800d612 <_dtoa_r+0xb7a>
 800cb40:	488c      	ldr	r0, [pc, #560]	; (800cd74 <_dtoa_r+0x2dc>)
 800cb42:	6018      	str	r0, [r3, #0]
 800cb44:	1e43      	subs	r3, r0, #1
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	e7df      	b.n	800cb0a <_dtoa_r+0x72>
 800cb4a:	ec4b ab10 	vmov	d0, sl, fp
 800cb4e:	aa10      	add	r2, sp, #64	; 0x40
 800cb50:	a911      	add	r1, sp, #68	; 0x44
 800cb52:	4620      	mov	r0, r4
 800cb54:	f001 fb72 	bl	800e23c <__d2b>
 800cb58:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cb5c:	ee08 0a10 	vmov	s16, r0
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	f000 8082 	beq.w	800cc6a <_dtoa_r+0x1d2>
 800cb66:	ee19 3a90 	vmov	r3, s19
 800cb6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cb72:	4656      	mov	r6, sl
 800cb74:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cb78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb7c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cb80:	4b7d      	ldr	r3, [pc, #500]	; (800cd78 <_dtoa_r+0x2e0>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	a370      	add	r3, pc, #448	; (adr r3, 800cd50 <_dtoa_r+0x2b8>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f7f3 fd31 	bl	80005f8 <__aeabi_dmul>
 800cb96:	a370      	add	r3, pc, #448	; (adr r3, 800cd58 <_dtoa_r+0x2c0>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f7f3 fb76 	bl	800028c <__adddf3>
 800cba0:	4606      	mov	r6, r0
 800cba2:	4628      	mov	r0, r5
 800cba4:	460f      	mov	r7, r1
 800cba6:	f7f3 fcbd 	bl	8000524 <__aeabi_i2d>
 800cbaa:	a36d      	add	r3, pc, #436	; (adr r3, 800cd60 <_dtoa_r+0x2c8>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 fb66 	bl	800028c <__adddf3>
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	f7f3 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800cbc8:	2200      	movs	r2, #0
 800cbca:	9000      	str	r0, [sp, #0]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 ff83 	bl	8000adc <__aeabi_dcmplt>
 800cbd6:	b150      	cbz	r0, 800cbee <_dtoa_r+0x156>
 800cbd8:	9800      	ldr	r0, [sp, #0]
 800cbda:	f7f3 fca3 	bl	8000524 <__aeabi_i2d>
 800cbde:	4632      	mov	r2, r6
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	f7f3 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbe6:	b910      	cbnz	r0, 800cbee <_dtoa_r+0x156>
 800cbe8:	9b00      	ldr	r3, [sp, #0]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	9b00      	ldr	r3, [sp, #0]
 800cbf0:	2b16      	cmp	r3, #22
 800cbf2:	d858      	bhi.n	800cca6 <_dtoa_r+0x20e>
 800cbf4:	9a00      	ldr	r2, [sp, #0]
 800cbf6:	4b61      	ldr	r3, [pc, #388]	; (800cd7c <_dtoa_r+0x2e4>)
 800cbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	ec51 0b19 	vmov	r0, r1, d9
 800cc04:	f7f3 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d04e      	beq.n	800ccaa <_dtoa_r+0x212>
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	2300      	movs	r3, #0
 800cc14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc18:	1b5d      	subs	r5, r3, r5
 800cc1a:	1e6b      	subs	r3, r5, #1
 800cc1c:	9305      	str	r3, [sp, #20]
 800cc1e:	bf45      	ittet	mi
 800cc20:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc24:	9304      	strmi	r3, [sp, #16]
 800cc26:	2300      	movpl	r3, #0
 800cc28:	2300      	movmi	r3, #0
 800cc2a:	bf4c      	ite	mi
 800cc2c:	9305      	strmi	r3, [sp, #20]
 800cc2e:	9304      	strpl	r3, [sp, #16]
 800cc30:	9b00      	ldr	r3, [sp, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	db3b      	blt.n	800ccae <_dtoa_r+0x216>
 800cc36:	9b05      	ldr	r3, [sp, #20]
 800cc38:	9a00      	ldr	r2, [sp, #0]
 800cc3a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc3c:	4413      	add	r3, r2
 800cc3e:	9305      	str	r3, [sp, #20]
 800cc40:	2300      	movs	r3, #0
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	9b06      	ldr	r3, [sp, #24]
 800cc46:	2b09      	cmp	r3, #9
 800cc48:	d869      	bhi.n	800cd1e <_dtoa_r+0x286>
 800cc4a:	2b05      	cmp	r3, #5
 800cc4c:	bfc4      	itt	gt
 800cc4e:	3b04      	subgt	r3, #4
 800cc50:	9306      	strgt	r3, [sp, #24]
 800cc52:	9b06      	ldr	r3, [sp, #24]
 800cc54:	f1a3 0302 	sub.w	r3, r3, #2
 800cc58:	bfcc      	ite	gt
 800cc5a:	2500      	movgt	r5, #0
 800cc5c:	2501      	movle	r5, #1
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d868      	bhi.n	800cd34 <_dtoa_r+0x29c>
 800cc62:	e8df f003 	tbb	[pc, r3]
 800cc66:	3a2d      	.short	0x3a2d
 800cc68:	5a38      	.short	0x5a38
 800cc6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cc6e:	441d      	add	r5, r3
 800cc70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc74:	2b20      	cmp	r3, #32
 800cc76:	bfc1      	itttt	gt
 800cc78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cc80:	fa0b f303 	lslgt.w	r3, fp, r3
 800cc84:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc88:	bfda      	itte	le
 800cc8a:	f1c3 0320 	rsble	r3, r3, #32
 800cc8e:	fa06 f003 	lslle.w	r0, r6, r3
 800cc92:	4318      	orrgt	r0, r3
 800cc94:	f7f3 fc36 	bl	8000504 <__aeabi_ui2d>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cca0:	3d01      	subs	r5, #1
 800cca2:	930e      	str	r3, [sp, #56]	; 0x38
 800cca4:	e76c      	b.n	800cb80 <_dtoa_r+0xe8>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e7b4      	b.n	800cc14 <_dtoa_r+0x17c>
 800ccaa:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccac:	e7b3      	b.n	800cc16 <_dtoa_r+0x17e>
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	9a00      	ldr	r2, [sp, #0]
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	9304      	str	r3, [sp, #16]
 800ccb6:	4253      	negs	r3, r2
 800ccb8:	9307      	str	r3, [sp, #28]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	930a      	str	r3, [sp, #40]	; 0x28
 800ccbe:	e7c1      	b.n	800cc44 <_dtoa_r+0x1ac>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9308      	str	r3, [sp, #32]
 800ccc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	dc37      	bgt.n	800cd3a <_dtoa_r+0x2a2>
 800ccca:	2301      	movs	r3, #1
 800cccc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd4:	e00c      	b.n	800ccf0 <_dtoa_r+0x258>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e7f3      	b.n	800ccc2 <_dtoa_r+0x22a>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccde:	9308      	str	r3, [sp, #32]
 800cce0:	9b00      	ldr	r3, [sp, #0]
 800cce2:	4413      	add	r3, r2
 800cce4:	9302      	str	r3, [sp, #8]
 800cce6:	3301      	adds	r3, #1
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	9303      	str	r3, [sp, #12]
 800ccec:	bfb8      	it	lt
 800ccee:	2301      	movlt	r3, #1
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	6462      	str	r2, [r4, #68]	; 0x44
 800ccf4:	2204      	movs	r2, #4
 800ccf6:	f102 0014 	add.w	r0, r2, #20
 800ccfa:	4298      	cmp	r0, r3
 800ccfc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ccfe:	d920      	bls.n	800cd42 <_dtoa_r+0x2aa>
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 ffc1 	bl	800dc88 <_Balloc>
 800cd06:	9001      	str	r0, [sp, #4]
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d13d      	bne.n	800cd88 <_dtoa_r+0x2f0>
 800cd0c:	4b1c      	ldr	r3, [pc, #112]	; (800cd80 <_dtoa_r+0x2e8>)
 800cd0e:	4602      	mov	r2, r0
 800cd10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd14:	481b      	ldr	r0, [pc, #108]	; (800cd84 <_dtoa_r+0x2ec>)
 800cd16:	f001 fca3 	bl	800e660 <__assert_func>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e7de      	b.n	800ccdc <_dtoa_r+0x244>
 800cd1e:	2501      	movs	r5, #1
 800cd20:	2300      	movs	r3, #0
 800cd22:	9306      	str	r3, [sp, #24]
 800cd24:	9508      	str	r5, [sp, #32]
 800cd26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2312      	movs	r3, #18
 800cd32:	e7ce      	b.n	800ccd2 <_dtoa_r+0x23a>
 800cd34:	2301      	movs	r3, #1
 800cd36:	9308      	str	r3, [sp, #32]
 800cd38:	e7f5      	b.n	800cd26 <_dtoa_r+0x28e>
 800cd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd40:	e7d6      	b.n	800ccf0 <_dtoa_r+0x258>
 800cd42:	3101      	adds	r1, #1
 800cd44:	6461      	str	r1, [r4, #68]	; 0x44
 800cd46:	0052      	lsls	r2, r2, #1
 800cd48:	e7d5      	b.n	800ccf6 <_dtoa_r+0x25e>
 800cd4a:	bf00      	nop
 800cd4c:	f3af 8000 	nop.w
 800cd50:	636f4361 	.word	0x636f4361
 800cd54:	3fd287a7 	.word	0x3fd287a7
 800cd58:	8b60c8b3 	.word	0x8b60c8b3
 800cd5c:	3fc68a28 	.word	0x3fc68a28
 800cd60:	509f79fb 	.word	0x509f79fb
 800cd64:	3fd34413 	.word	0x3fd34413
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	08014728 	.word	0x08014728
 800cd70:	0801472c 	.word	0x0801472c
 800cd74:	08014707 	.word	0x08014707
 800cd78:	3ff80000 	.word	0x3ff80000
 800cd7c:	08014828 	.word	0x08014828
 800cd80:	08014735 	.word	0x08014735
 800cd84:	08014746 	.word	0x08014746
 800cd88:	9b01      	ldr	r3, [sp, #4]
 800cd8a:	6423      	str	r3, [r4, #64]	; 0x40
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	2b0e      	cmp	r3, #14
 800cd90:	f200 809d 	bhi.w	800cece <_dtoa_r+0x436>
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	f000 809a 	beq.w	800cece <_dtoa_r+0x436>
 800cd9a:	9b00      	ldr	r3, [sp, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd32      	ble.n	800ce06 <_dtoa_r+0x36e>
 800cda0:	4ab7      	ldr	r2, [pc, #732]	; (800d080 <_dtoa_r+0x5e8>)
 800cda2:	f003 030f 	and.w	r3, r3, #15
 800cda6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	05d8      	lsls	r0, r3, #23
 800cdb2:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cdb6:	d516      	bpl.n	800cde6 <_dtoa_r+0x34e>
 800cdb8:	4bb2      	ldr	r3, [pc, #712]	; (800d084 <_dtoa_r+0x5ec>)
 800cdba:	ec51 0b19 	vmov	r0, r1, d9
 800cdbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdc2:	f7f3 fd43 	bl	800084c <__aeabi_ddiv>
 800cdc6:	f007 070f 	and.w	r7, r7, #15
 800cdca:	4682      	mov	sl, r0
 800cdcc:	468b      	mov	fp, r1
 800cdce:	2503      	movs	r5, #3
 800cdd0:	4eac      	ldr	r6, [pc, #688]	; (800d084 <_dtoa_r+0x5ec>)
 800cdd2:	b957      	cbnz	r7, 800cdea <_dtoa_r+0x352>
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4659      	mov	r1, fp
 800cddc:	f7f3 fd36 	bl	800084c <__aeabi_ddiv>
 800cde0:	4682      	mov	sl, r0
 800cde2:	468b      	mov	fp, r1
 800cde4:	e028      	b.n	800ce38 <_dtoa_r+0x3a0>
 800cde6:	2502      	movs	r5, #2
 800cde8:	e7f2      	b.n	800cdd0 <_dtoa_r+0x338>
 800cdea:	07f9      	lsls	r1, r7, #31
 800cdec:	d508      	bpl.n	800ce00 <_dtoa_r+0x368>
 800cdee:	4640      	mov	r0, r8
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdf6:	f7f3 fbff 	bl	80005f8 <__aeabi_dmul>
 800cdfa:	3501      	adds	r5, #1
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	107f      	asrs	r7, r7, #1
 800ce02:	3608      	adds	r6, #8
 800ce04:	e7e5      	b.n	800cdd2 <_dtoa_r+0x33a>
 800ce06:	f000 809b 	beq.w	800cf40 <_dtoa_r+0x4a8>
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	4f9d      	ldr	r7, [pc, #628]	; (800d084 <_dtoa_r+0x5ec>)
 800ce0e:	425e      	negs	r6, r3
 800ce10:	4b9b      	ldr	r3, [pc, #620]	; (800d080 <_dtoa_r+0x5e8>)
 800ce12:	f006 020f 	and.w	r2, r6, #15
 800ce16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	ec51 0b19 	vmov	r0, r1, d9
 800ce22:	f7f3 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ce26:	1136      	asrs	r6, r6, #4
 800ce28:	4682      	mov	sl, r0
 800ce2a:	468b      	mov	fp, r1
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2502      	movs	r5, #2
 800ce30:	2e00      	cmp	r6, #0
 800ce32:	d17a      	bne.n	800cf2a <_dtoa_r+0x492>
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1d3      	bne.n	800cde0 <_dtoa_r+0x348>
 800ce38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 8082 	beq.w	800cf44 <_dtoa_r+0x4ac>
 800ce40:	4b91      	ldr	r3, [pc, #580]	; (800d088 <_dtoa_r+0x5f0>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	4650      	mov	r0, sl
 800ce46:	4659      	mov	r1, fp
 800ce48:	f7f3 fe48 	bl	8000adc <__aeabi_dcmplt>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d079      	beq.n	800cf44 <_dtoa_r+0x4ac>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d076      	beq.n	800cf44 <_dtoa_r+0x4ac>
 800ce56:	9b02      	ldr	r3, [sp, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dd36      	ble.n	800ceca <_dtoa_r+0x432>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	4650      	mov	r0, sl
 800ce60:	4659      	mov	r1, fp
 800ce62:	1e5f      	subs	r7, r3, #1
 800ce64:	2200      	movs	r2, #0
 800ce66:	4b89      	ldr	r3, [pc, #548]	; (800d08c <_dtoa_r+0x5f4>)
 800ce68:	f7f3 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ce6c:	9e02      	ldr	r6, [sp, #8]
 800ce6e:	4682      	mov	sl, r0
 800ce70:	468b      	mov	fp, r1
 800ce72:	3501      	adds	r5, #1
 800ce74:	4628      	mov	r0, r5
 800ce76:	f7f3 fb55 	bl	8000524 <__aeabi_i2d>
 800ce7a:	4652      	mov	r2, sl
 800ce7c:	465b      	mov	r3, fp
 800ce7e:	f7f3 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ce82:	4b83      	ldr	r3, [pc, #524]	; (800d090 <_dtoa_r+0x5f8>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	f7f3 fa01 	bl	800028c <__adddf3>
 800ce8a:	46d0      	mov	r8, sl
 800ce8c:	46d9      	mov	r9, fp
 800ce8e:	4682      	mov	sl, r0
 800ce90:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	d158      	bne.n	800cf4a <_dtoa_r+0x4b2>
 800ce98:	4b7e      	ldr	r3, [pc, #504]	; (800d094 <_dtoa_r+0x5fc>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	4649      	mov	r1, r9
 800cea0:	f7f3 f9f2 	bl	8000288 <__aeabi_dsub>
 800cea4:	4652      	mov	r2, sl
 800cea6:	465b      	mov	r3, fp
 800cea8:	4680      	mov	r8, r0
 800ceaa:	4689      	mov	r9, r1
 800ceac:	f7f3 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f040 8296 	bne.w	800d3e2 <_dtoa_r+0x94a>
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cebc:	4640      	mov	r0, r8
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7f3 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f040 828a 	bne.w	800d3de <_dtoa_r+0x946>
 800ceca:	ec5b ab19 	vmov	sl, fp, d9
 800cece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f2c0 8149 	blt.w	800d168 <_dtoa_r+0x6d0>
 800ced6:	9a00      	ldr	r2, [sp, #0]
 800ced8:	2a0e      	cmp	r2, #14
 800ceda:	f300 8145 	bgt.w	800d168 <_dtoa_r+0x6d0>
 800cede:	4b68      	ldr	r3, [pc, #416]	; (800d080 <_dtoa_r+0x5e8>)
 800cee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f280 80d6 	bge.w	800d09c <_dtoa_r+0x604>
 800cef0:	9b03      	ldr	r3, [sp, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f300 80d2 	bgt.w	800d09c <_dtoa_r+0x604>
 800cef8:	f040 8270 	bne.w	800d3dc <_dtoa_r+0x944>
 800cefc:	4b65      	ldr	r3, [pc, #404]	; (800d094 <_dtoa_r+0x5fc>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 fb78 	bl	80005f8 <__aeabi_dmul>
 800cf08:	4652      	mov	r2, sl
 800cf0a:	465b      	mov	r3, fp
 800cf0c:	f7f3 fdfa 	bl	8000b04 <__aeabi_dcmpge>
 800cf10:	9e03      	ldr	r6, [sp, #12]
 800cf12:	4637      	mov	r7, r6
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f040 8246 	bne.w	800d3a6 <_dtoa_r+0x90e>
 800cf1a:	9d01      	ldr	r5, [sp, #4]
 800cf1c:	2331      	movs	r3, #49	; 0x31
 800cf1e:	f805 3b01 	strb.w	r3, [r5], #1
 800cf22:	9b00      	ldr	r3, [sp, #0]
 800cf24:	3301      	adds	r3, #1
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	e241      	b.n	800d3ae <_dtoa_r+0x916>
 800cf2a:	07f2      	lsls	r2, r6, #31
 800cf2c:	d505      	bpl.n	800cf3a <_dtoa_r+0x4a2>
 800cf2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf32:	f7f3 fb61 	bl	80005f8 <__aeabi_dmul>
 800cf36:	3501      	adds	r5, #1
 800cf38:	2301      	movs	r3, #1
 800cf3a:	1076      	asrs	r6, r6, #1
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	e777      	b.n	800ce30 <_dtoa_r+0x398>
 800cf40:	2502      	movs	r5, #2
 800cf42:	e779      	b.n	800ce38 <_dtoa_r+0x3a0>
 800cf44:	9f00      	ldr	r7, [sp, #0]
 800cf46:	9e03      	ldr	r6, [sp, #12]
 800cf48:	e794      	b.n	800ce74 <_dtoa_r+0x3dc>
 800cf4a:	9901      	ldr	r1, [sp, #4]
 800cf4c:	4b4c      	ldr	r3, [pc, #304]	; (800d080 <_dtoa_r+0x5e8>)
 800cf4e:	4431      	add	r1, r6
 800cf50:	910d      	str	r1, [sp, #52]	; 0x34
 800cf52:	9908      	ldr	r1, [sp, #32]
 800cf54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d043      	beq.n	800cfe8 <_dtoa_r+0x550>
 800cf60:	494d      	ldr	r1, [pc, #308]	; (800d098 <_dtoa_r+0x600>)
 800cf62:	2000      	movs	r0, #0
 800cf64:	f7f3 fc72 	bl	800084c <__aeabi_ddiv>
 800cf68:	4652      	mov	r2, sl
 800cf6a:	465b      	mov	r3, fp
 800cf6c:	f7f3 f98c 	bl	8000288 <__aeabi_dsub>
 800cf70:	9d01      	ldr	r5, [sp, #4]
 800cf72:	4682      	mov	sl, r0
 800cf74:	468b      	mov	fp, r1
 800cf76:	4649      	mov	r1, r9
 800cf78:	4640      	mov	r0, r8
 800cf7a:	f7f3 fded 	bl	8000b58 <__aeabi_d2iz>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	f7f3 fad0 	bl	8000524 <__aeabi_i2d>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4640      	mov	r0, r8
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	f7f3 f97c 	bl	8000288 <__aeabi_dsub>
 800cf90:	3630      	adds	r6, #48	; 0x30
 800cf92:	f805 6b01 	strb.w	r6, [r5], #1
 800cf96:	4652      	mov	r2, sl
 800cf98:	465b      	mov	r3, fp
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	4689      	mov	r9, r1
 800cf9e:	f7f3 fd9d 	bl	8000adc <__aeabi_dcmplt>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d163      	bne.n	800d06e <_dtoa_r+0x5d6>
 800cfa6:	4642      	mov	r2, r8
 800cfa8:	464b      	mov	r3, r9
 800cfaa:	4937      	ldr	r1, [pc, #220]	; (800d088 <_dtoa_r+0x5f0>)
 800cfac:	2000      	movs	r0, #0
 800cfae:	f7f3 f96b 	bl	8000288 <__aeabi_dsub>
 800cfb2:	4652      	mov	r2, sl
 800cfb4:	465b      	mov	r3, fp
 800cfb6:	f7f3 fd91 	bl	8000adc <__aeabi_dcmplt>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	f040 80b6 	bne.w	800d12c <_dtoa_r+0x694>
 800cfc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfc2:	429d      	cmp	r5, r3
 800cfc4:	d081      	beq.n	800ceca <_dtoa_r+0x432>
 800cfc6:	4b31      	ldr	r3, [pc, #196]	; (800d08c <_dtoa_r+0x5f4>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	4650      	mov	r0, sl
 800cfcc:	4659      	mov	r1, fp
 800cfce:	f7f3 fb13 	bl	80005f8 <__aeabi_dmul>
 800cfd2:	4b2e      	ldr	r3, [pc, #184]	; (800d08c <_dtoa_r+0x5f4>)
 800cfd4:	4682      	mov	sl, r0
 800cfd6:	468b      	mov	fp, r1
 800cfd8:	4640      	mov	r0, r8
 800cfda:	4649      	mov	r1, r9
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f7f3 fb0b 	bl	80005f8 <__aeabi_dmul>
 800cfe2:	4680      	mov	r8, r0
 800cfe4:	4689      	mov	r9, r1
 800cfe6:	e7c6      	b.n	800cf76 <_dtoa_r+0x4de>
 800cfe8:	4650      	mov	r0, sl
 800cfea:	4659      	mov	r1, fp
 800cfec:	f7f3 fb04 	bl	80005f8 <__aeabi_dmul>
 800cff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cff2:	9d01      	ldr	r5, [sp, #4]
 800cff4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cff6:	4682      	mov	sl, r0
 800cff8:	468b      	mov	fp, r1
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	f7f3 fdab 	bl	8000b58 <__aeabi_d2iz>
 800d002:	4606      	mov	r6, r0
 800d004:	f7f3 fa8e 	bl	8000524 <__aeabi_i2d>
 800d008:	3630      	adds	r6, #48	; 0x30
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	4640      	mov	r0, r8
 800d010:	4649      	mov	r1, r9
 800d012:	f7f3 f939 	bl	8000288 <__aeabi_dsub>
 800d016:	f805 6b01 	strb.w	r6, [r5], #1
 800d01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d01c:	429d      	cmp	r5, r3
 800d01e:	4680      	mov	r8, r0
 800d020:	4689      	mov	r9, r1
 800d022:	f04f 0200 	mov.w	r2, #0
 800d026:	d124      	bne.n	800d072 <_dtoa_r+0x5da>
 800d028:	4b1b      	ldr	r3, [pc, #108]	; (800d098 <_dtoa_r+0x600>)
 800d02a:	4650      	mov	r0, sl
 800d02c:	4659      	mov	r1, fp
 800d02e:	f7f3 f92d 	bl	800028c <__adddf3>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4640      	mov	r0, r8
 800d038:	4649      	mov	r1, r9
 800d03a:	f7f3 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800d03e:	2800      	cmp	r0, #0
 800d040:	d174      	bne.n	800d12c <_dtoa_r+0x694>
 800d042:	4652      	mov	r2, sl
 800d044:	465b      	mov	r3, fp
 800d046:	4914      	ldr	r1, [pc, #80]	; (800d098 <_dtoa_r+0x600>)
 800d048:	2000      	movs	r0, #0
 800d04a:	f7f3 f91d 	bl	8000288 <__aeabi_dsub>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4640      	mov	r0, r8
 800d054:	4649      	mov	r1, r9
 800d056:	f7f3 fd41 	bl	8000adc <__aeabi_dcmplt>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	f43f af35 	beq.w	800ceca <_dtoa_r+0x432>
 800d060:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d062:	1e6b      	subs	r3, r5, #1
 800d064:	930f      	str	r3, [sp, #60]	; 0x3c
 800d066:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d06a:	2b30      	cmp	r3, #48	; 0x30
 800d06c:	d0f8      	beq.n	800d060 <_dtoa_r+0x5c8>
 800d06e:	9700      	str	r7, [sp, #0]
 800d070:	e04a      	b.n	800d108 <_dtoa_r+0x670>
 800d072:	4b06      	ldr	r3, [pc, #24]	; (800d08c <_dtoa_r+0x5f4>)
 800d074:	f7f3 fac0 	bl	80005f8 <__aeabi_dmul>
 800d078:	4680      	mov	r8, r0
 800d07a:	4689      	mov	r9, r1
 800d07c:	e7bd      	b.n	800cffa <_dtoa_r+0x562>
 800d07e:	bf00      	nop
 800d080:	08014828 	.word	0x08014828
 800d084:	08014800 	.word	0x08014800
 800d088:	3ff00000 	.word	0x3ff00000
 800d08c:	40240000 	.word	0x40240000
 800d090:	401c0000 	.word	0x401c0000
 800d094:	40140000 	.word	0x40140000
 800d098:	3fe00000 	.word	0x3fe00000
 800d09c:	9d01      	ldr	r5, [sp, #4]
 800d09e:	4656      	mov	r6, sl
 800d0a0:	465f      	mov	r7, fp
 800d0a2:	4642      	mov	r2, r8
 800d0a4:	464b      	mov	r3, r9
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 fbcf 	bl	800084c <__aeabi_ddiv>
 800d0ae:	f7f3 fd53 	bl	8000b58 <__aeabi_d2iz>
 800d0b2:	4682      	mov	sl, r0
 800d0b4:	f7f3 fa36 	bl	8000524 <__aeabi_i2d>
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	f7f3 fa9c 	bl	80005f8 <__aeabi_dmul>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d0cc:	f7f3 f8dc 	bl	8000288 <__aeabi_dsub>
 800d0d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d0d4:	9e01      	ldr	r6, [sp, #4]
 800d0d6:	9f03      	ldr	r7, [sp, #12]
 800d0d8:	1bae      	subs	r6, r5, r6
 800d0da:	42b7      	cmp	r7, r6
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	d135      	bne.n	800d14e <_dtoa_r+0x6b6>
 800d0e2:	f7f3 f8d3 	bl	800028c <__adddf3>
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	460f      	mov	r7, r1
 800d0ee:	f7f3 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 800d0f2:	b9d0      	cbnz	r0, 800d12a <_dtoa_r+0x692>
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d100:	b110      	cbz	r0, 800d108 <_dtoa_r+0x670>
 800d102:	f01a 0f01 	tst.w	sl, #1
 800d106:	d110      	bne.n	800d12a <_dtoa_r+0x692>
 800d108:	4620      	mov	r0, r4
 800d10a:	ee18 1a10 	vmov	r1, s16
 800d10e:	f000 fde0 	bl	800dcd2 <_Bfree>
 800d112:	2300      	movs	r3, #0
 800d114:	9800      	ldr	r0, [sp, #0]
 800d116:	702b      	strb	r3, [r5, #0]
 800d118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d11a:	3001      	adds	r0, #1
 800d11c:	6018      	str	r0, [r3, #0]
 800d11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d120:	2b00      	cmp	r3, #0
 800d122:	f43f acf2 	beq.w	800cb0a <_dtoa_r+0x72>
 800d126:	601d      	str	r5, [r3, #0]
 800d128:	e4ef      	b.n	800cb0a <_dtoa_r+0x72>
 800d12a:	9f00      	ldr	r7, [sp, #0]
 800d12c:	462b      	mov	r3, r5
 800d12e:	461d      	mov	r5, r3
 800d130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d134:	2a39      	cmp	r2, #57	; 0x39
 800d136:	d106      	bne.n	800d146 <_dtoa_r+0x6ae>
 800d138:	9a01      	ldr	r2, [sp, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d1f7      	bne.n	800d12e <_dtoa_r+0x696>
 800d13e:	9901      	ldr	r1, [sp, #4]
 800d140:	2230      	movs	r2, #48	; 0x30
 800d142:	3701      	adds	r7, #1
 800d144:	700a      	strb	r2, [r1, #0]
 800d146:	781a      	ldrb	r2, [r3, #0]
 800d148:	3201      	adds	r2, #1
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	e78f      	b.n	800d06e <_dtoa_r+0x5d6>
 800d14e:	4ba6      	ldr	r3, [pc, #664]	; (800d3e8 <_dtoa_r+0x950>)
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	2200      	movs	r2, #0
 800d158:	2300      	movs	r3, #0
 800d15a:	4606      	mov	r6, r0
 800d15c:	460f      	mov	r7, r1
 800d15e:	f7f3 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d162:	2800      	cmp	r0, #0
 800d164:	d09d      	beq.n	800d0a2 <_dtoa_r+0x60a>
 800d166:	e7cf      	b.n	800d108 <_dtoa_r+0x670>
 800d168:	9a08      	ldr	r2, [sp, #32]
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	f000 80d7 	beq.w	800d31e <_dtoa_r+0x886>
 800d170:	9a06      	ldr	r2, [sp, #24]
 800d172:	2a01      	cmp	r2, #1
 800d174:	f300 80ba 	bgt.w	800d2ec <_dtoa_r+0x854>
 800d178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d17a:	2a00      	cmp	r2, #0
 800d17c:	f000 80b2 	beq.w	800d2e4 <_dtoa_r+0x84c>
 800d180:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d184:	9e07      	ldr	r6, [sp, #28]
 800d186:	9d04      	ldr	r5, [sp, #16]
 800d188:	9a04      	ldr	r2, [sp, #16]
 800d18a:	441a      	add	r2, r3
 800d18c:	9204      	str	r2, [sp, #16]
 800d18e:	9a05      	ldr	r2, [sp, #20]
 800d190:	2101      	movs	r1, #1
 800d192:	441a      	add	r2, r3
 800d194:	4620      	mov	r0, r4
 800d196:	9205      	str	r2, [sp, #20]
 800d198:	f000 fe3a 	bl	800de10 <__i2b>
 800d19c:	4607      	mov	r7, r0
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	dd0c      	ble.n	800d1bc <_dtoa_r+0x724>
 800d1a2:	9b05      	ldr	r3, [sp, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd09      	ble.n	800d1bc <_dtoa_r+0x724>
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	9a04      	ldr	r2, [sp, #16]
 800d1ac:	bfa8      	it	ge
 800d1ae:	462b      	movge	r3, r5
 800d1b0:	1ad2      	subs	r2, r2, r3
 800d1b2:	9204      	str	r2, [sp, #16]
 800d1b4:	9a05      	ldr	r2, [sp, #20]
 800d1b6:	1aed      	subs	r5, r5, r3
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	9305      	str	r3, [sp, #20]
 800d1bc:	9b07      	ldr	r3, [sp, #28]
 800d1be:	b31b      	cbz	r3, 800d208 <_dtoa_r+0x770>
 800d1c0:	9b08      	ldr	r3, [sp, #32]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 80af 	beq.w	800d326 <_dtoa_r+0x88e>
 800d1c8:	2e00      	cmp	r6, #0
 800d1ca:	dd13      	ble.n	800d1f4 <_dtoa_r+0x75c>
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	4632      	mov	r2, r6
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fedd 	bl	800df90 <__pow5mult>
 800d1d6:	ee18 2a10 	vmov	r2, s16
 800d1da:	4601      	mov	r1, r0
 800d1dc:	4607      	mov	r7, r0
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fe2c 	bl	800de3c <__multiply>
 800d1e4:	ee18 1a10 	vmov	r1, s16
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fd71 	bl	800dcd2 <_Bfree>
 800d1f0:	ee08 8a10 	vmov	s16, r8
 800d1f4:	9b07      	ldr	r3, [sp, #28]
 800d1f6:	1b9a      	subs	r2, r3, r6
 800d1f8:	d006      	beq.n	800d208 <_dtoa_r+0x770>
 800d1fa:	ee18 1a10 	vmov	r1, s16
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 fec6 	bl	800df90 <__pow5mult>
 800d204:	ee08 0a10 	vmov	s16, r0
 800d208:	2101      	movs	r1, #1
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 fe00 	bl	800de10 <__i2b>
 800d210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d212:	2b00      	cmp	r3, #0
 800d214:	4606      	mov	r6, r0
 800d216:	f340 8088 	ble.w	800d32a <_dtoa_r+0x892>
 800d21a:	461a      	mov	r2, r3
 800d21c:	4601      	mov	r1, r0
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 feb6 	bl	800df90 <__pow5mult>
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	2b01      	cmp	r3, #1
 800d228:	4606      	mov	r6, r0
 800d22a:	f340 8081 	ble.w	800d330 <_dtoa_r+0x898>
 800d22e:	f04f 0800 	mov.w	r8, #0
 800d232:	6933      	ldr	r3, [r6, #16]
 800d234:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d238:	6918      	ldr	r0, [r3, #16]
 800d23a:	f000 fd99 	bl	800dd70 <__hi0bits>
 800d23e:	f1c0 0020 	rsb	r0, r0, #32
 800d242:	9b05      	ldr	r3, [sp, #20]
 800d244:	4418      	add	r0, r3
 800d246:	f010 001f 	ands.w	r0, r0, #31
 800d24a:	f000 8092 	beq.w	800d372 <_dtoa_r+0x8da>
 800d24e:	f1c0 0320 	rsb	r3, r0, #32
 800d252:	2b04      	cmp	r3, #4
 800d254:	f340 808a 	ble.w	800d36c <_dtoa_r+0x8d4>
 800d258:	f1c0 001c 	rsb	r0, r0, #28
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	4403      	add	r3, r0
 800d260:	9304      	str	r3, [sp, #16]
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	4403      	add	r3, r0
 800d266:	4405      	add	r5, r0
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd07      	ble.n	800d280 <_dtoa_r+0x7e8>
 800d270:	ee18 1a10 	vmov	r1, s16
 800d274:	461a      	mov	r2, r3
 800d276:	4620      	mov	r0, r4
 800d278:	f000 feca 	bl	800e010 <__lshift>
 800d27c:	ee08 0a10 	vmov	s16, r0
 800d280:	9b05      	ldr	r3, [sp, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	dd05      	ble.n	800d292 <_dtoa_r+0x7fa>
 800d286:	4631      	mov	r1, r6
 800d288:	461a      	mov	r2, r3
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fec0 	bl	800e010 <__lshift>
 800d290:	4606      	mov	r6, r0
 800d292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d06e      	beq.n	800d376 <_dtoa_r+0x8de>
 800d298:	ee18 0a10 	vmov	r0, s16
 800d29c:	4631      	mov	r1, r6
 800d29e:	f000 ff27 	bl	800e0f0 <__mcmp>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	da67      	bge.n	800d376 <_dtoa_r+0x8de>
 800d2a6:	9b00      	ldr	r3, [sp, #0]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	ee18 1a10 	vmov	r1, s16
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 fd15 	bl	800dce4 <__multadd>
 800d2ba:	9b08      	ldr	r3, [sp, #32]
 800d2bc:	ee08 0a10 	vmov	s16, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 81b0 	beq.w	800d626 <_dtoa_r+0xb8e>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	220a      	movs	r2, #10
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 fd09 	bl	800dce4 <__multadd>
 800d2d2:	9b02      	ldr	r3, [sp, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	f300 808e 	bgt.w	800d3f8 <_dtoa_r+0x960>
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	dc51      	bgt.n	800d386 <_dtoa_r+0x8ee>
 800d2e2:	e089      	b.n	800d3f8 <_dtoa_r+0x960>
 800d2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d2ea:	e74b      	b.n	800d184 <_dtoa_r+0x6ec>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	1e5e      	subs	r6, r3, #1
 800d2f0:	9b07      	ldr	r3, [sp, #28]
 800d2f2:	42b3      	cmp	r3, r6
 800d2f4:	bfbf      	itttt	lt
 800d2f6:	9b07      	ldrlt	r3, [sp, #28]
 800d2f8:	9607      	strlt	r6, [sp, #28]
 800d2fa:	1af2      	sublt	r2, r6, r3
 800d2fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d2fe:	bfb6      	itet	lt
 800d300:	189b      	addlt	r3, r3, r2
 800d302:	1b9e      	subge	r6, r3, r6
 800d304:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	bfb8      	it	lt
 800d30a:	2600      	movlt	r6, #0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bfb7      	itett	lt
 800d310:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d314:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d318:	1a9d      	sublt	r5, r3, r2
 800d31a:	2300      	movlt	r3, #0
 800d31c:	e734      	b.n	800d188 <_dtoa_r+0x6f0>
 800d31e:	9e07      	ldr	r6, [sp, #28]
 800d320:	9d04      	ldr	r5, [sp, #16]
 800d322:	9f08      	ldr	r7, [sp, #32]
 800d324:	e73b      	b.n	800d19e <_dtoa_r+0x706>
 800d326:	9a07      	ldr	r2, [sp, #28]
 800d328:	e767      	b.n	800d1fa <_dtoa_r+0x762>
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	dc18      	bgt.n	800d362 <_dtoa_r+0x8ca>
 800d330:	f1ba 0f00 	cmp.w	sl, #0
 800d334:	d115      	bne.n	800d362 <_dtoa_r+0x8ca>
 800d336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d33a:	b993      	cbnz	r3, 800d362 <_dtoa_r+0x8ca>
 800d33c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d340:	0d1b      	lsrs	r3, r3, #20
 800d342:	051b      	lsls	r3, r3, #20
 800d344:	b183      	cbz	r3, 800d368 <_dtoa_r+0x8d0>
 800d346:	9b04      	ldr	r3, [sp, #16]
 800d348:	3301      	adds	r3, #1
 800d34a:	9304      	str	r3, [sp, #16]
 800d34c:	9b05      	ldr	r3, [sp, #20]
 800d34e:	3301      	adds	r3, #1
 800d350:	9305      	str	r3, [sp, #20]
 800d352:	f04f 0801 	mov.w	r8, #1
 800d356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f47f af6a 	bne.w	800d232 <_dtoa_r+0x79a>
 800d35e:	2001      	movs	r0, #1
 800d360:	e76f      	b.n	800d242 <_dtoa_r+0x7aa>
 800d362:	f04f 0800 	mov.w	r8, #0
 800d366:	e7f6      	b.n	800d356 <_dtoa_r+0x8be>
 800d368:	4698      	mov	r8, r3
 800d36a:	e7f4      	b.n	800d356 <_dtoa_r+0x8be>
 800d36c:	f43f af7d 	beq.w	800d26a <_dtoa_r+0x7d2>
 800d370:	4618      	mov	r0, r3
 800d372:	301c      	adds	r0, #28
 800d374:	e772      	b.n	800d25c <_dtoa_r+0x7c4>
 800d376:	9b03      	ldr	r3, [sp, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	dc37      	bgt.n	800d3ec <_dtoa_r+0x954>
 800d37c:	9b06      	ldr	r3, [sp, #24]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	dd34      	ble.n	800d3ec <_dtoa_r+0x954>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	9b02      	ldr	r3, [sp, #8]
 800d388:	b96b      	cbnz	r3, 800d3a6 <_dtoa_r+0x90e>
 800d38a:	4631      	mov	r1, r6
 800d38c:	2205      	movs	r2, #5
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fca8 	bl	800dce4 <__multadd>
 800d394:	4601      	mov	r1, r0
 800d396:	4606      	mov	r6, r0
 800d398:	ee18 0a10 	vmov	r0, s16
 800d39c:	f000 fea8 	bl	800e0f0 <__mcmp>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	f73f adba 	bgt.w	800cf1a <_dtoa_r+0x482>
 800d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a8:	9d01      	ldr	r5, [sp, #4]
 800d3aa:	43db      	mvns	r3, r3
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	f04f 0800 	mov.w	r8, #0
 800d3b2:	4631      	mov	r1, r6
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f000 fc8c 	bl	800dcd2 <_Bfree>
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	f43f aea4 	beq.w	800d108 <_dtoa_r+0x670>
 800d3c0:	f1b8 0f00 	cmp.w	r8, #0
 800d3c4:	d005      	beq.n	800d3d2 <_dtoa_r+0x93a>
 800d3c6:	45b8      	cmp	r8, r7
 800d3c8:	d003      	beq.n	800d3d2 <_dtoa_r+0x93a>
 800d3ca:	4641      	mov	r1, r8
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 fc80 	bl	800dcd2 <_Bfree>
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 fc7c 	bl	800dcd2 <_Bfree>
 800d3da:	e695      	b.n	800d108 <_dtoa_r+0x670>
 800d3dc:	2600      	movs	r6, #0
 800d3de:	4637      	mov	r7, r6
 800d3e0:	e7e1      	b.n	800d3a6 <_dtoa_r+0x90e>
 800d3e2:	9700      	str	r7, [sp, #0]
 800d3e4:	4637      	mov	r7, r6
 800d3e6:	e598      	b.n	800cf1a <_dtoa_r+0x482>
 800d3e8:	40240000 	.word	0x40240000
 800d3ec:	9b08      	ldr	r3, [sp, #32]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80c9 	beq.w	800d586 <_dtoa_r+0xaee>
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	9302      	str	r3, [sp, #8]
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	dd05      	ble.n	800d408 <_dtoa_r+0x970>
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	462a      	mov	r2, r5
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fe05 	bl	800e010 <__lshift>
 800d406:	4607      	mov	r7, r0
 800d408:	f1b8 0f00 	cmp.w	r8, #0
 800d40c:	d05a      	beq.n	800d4c4 <_dtoa_r+0xa2c>
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fc39 	bl	800dc88 <_Balloc>
 800d416:	4605      	mov	r5, r0
 800d418:	b920      	cbnz	r0, 800d424 <_dtoa_r+0x98c>
 800d41a:	4b87      	ldr	r3, [pc, #540]	; (800d638 <_dtoa_r+0xba0>)
 800d41c:	4602      	mov	r2, r0
 800d41e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d422:	e477      	b.n	800cd14 <_dtoa_r+0x27c>
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	3202      	adds	r2, #2
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	f107 010c 	add.w	r1, r7, #12
 800d42e:	300c      	adds	r0, #12
 800d430:	f7fd fe5c 	bl	800b0ec <memcpy>
 800d434:	2201      	movs	r2, #1
 800d436:	4629      	mov	r1, r5
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 fde9 	bl	800e010 <__lshift>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	f103 0901 	add.w	r9, r3, #1
 800d444:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d448:	4413      	add	r3, r2
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	f00a 0301 	and.w	r3, sl, #1
 800d450:	46b8      	mov	r8, r7
 800d452:	9304      	str	r3, [sp, #16]
 800d454:	4607      	mov	r7, r0
 800d456:	4631      	mov	r1, r6
 800d458:	ee18 0a10 	vmov	r0, s16
 800d45c:	f7ff fa8e 	bl	800c97c <quorem>
 800d460:	4641      	mov	r1, r8
 800d462:	9002      	str	r0, [sp, #8]
 800d464:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d468:	ee18 0a10 	vmov	r0, s16
 800d46c:	f000 fe40 	bl	800e0f0 <__mcmp>
 800d470:	463a      	mov	r2, r7
 800d472:	9003      	str	r0, [sp, #12]
 800d474:	4631      	mov	r1, r6
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fe56 	bl	800e128 <__mdiff>
 800d47c:	68c2      	ldr	r2, [r0, #12]
 800d47e:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d482:	4605      	mov	r5, r0
 800d484:	bb02      	cbnz	r2, 800d4c8 <_dtoa_r+0xa30>
 800d486:	4601      	mov	r1, r0
 800d488:	ee18 0a10 	vmov	r0, s16
 800d48c:	f000 fe30 	bl	800e0f0 <__mcmp>
 800d490:	4602      	mov	r2, r0
 800d492:	4629      	mov	r1, r5
 800d494:	4620      	mov	r0, r4
 800d496:	9207      	str	r2, [sp, #28]
 800d498:	f000 fc1b 	bl	800dcd2 <_Bfree>
 800d49c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d4a0:	ea43 0102 	orr.w	r1, r3, r2
 800d4a4:	9b04      	ldr	r3, [sp, #16]
 800d4a6:	430b      	orrs	r3, r1
 800d4a8:	464d      	mov	r5, r9
 800d4aa:	d10f      	bne.n	800d4cc <_dtoa_r+0xa34>
 800d4ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4b0:	d02a      	beq.n	800d508 <_dtoa_r+0xa70>
 800d4b2:	9b03      	ldr	r3, [sp, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	dd02      	ble.n	800d4be <_dtoa_r+0xa26>
 800d4b8:	9b02      	ldr	r3, [sp, #8]
 800d4ba:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d4be:	f88b a000 	strb.w	sl, [fp]
 800d4c2:	e776      	b.n	800d3b2 <_dtoa_r+0x91a>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	e7ba      	b.n	800d43e <_dtoa_r+0x9a6>
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	e7e2      	b.n	800d492 <_dtoa_r+0x9fa>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	db04      	blt.n	800d4dc <_dtoa_r+0xa44>
 800d4d2:	9906      	ldr	r1, [sp, #24]
 800d4d4:	430b      	orrs	r3, r1
 800d4d6:	9904      	ldr	r1, [sp, #16]
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	d122      	bne.n	800d522 <_dtoa_r+0xa8a>
 800d4dc:	2a00      	cmp	r2, #0
 800d4de:	ddee      	ble.n	800d4be <_dtoa_r+0xa26>
 800d4e0:	ee18 1a10 	vmov	r1, s16
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 fd92 	bl	800e010 <__lshift>
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	ee08 0a10 	vmov	s16, r0
 800d4f2:	f000 fdfd 	bl	800e0f0 <__mcmp>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	dc03      	bgt.n	800d502 <_dtoa_r+0xa6a>
 800d4fa:	d1e0      	bne.n	800d4be <_dtoa_r+0xa26>
 800d4fc:	f01a 0f01 	tst.w	sl, #1
 800d500:	d0dd      	beq.n	800d4be <_dtoa_r+0xa26>
 800d502:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d506:	d1d7      	bne.n	800d4b8 <_dtoa_r+0xa20>
 800d508:	2339      	movs	r3, #57	; 0x39
 800d50a:	f88b 3000 	strb.w	r3, [fp]
 800d50e:	462b      	mov	r3, r5
 800d510:	461d      	mov	r5, r3
 800d512:	3b01      	subs	r3, #1
 800d514:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d518:	2a39      	cmp	r2, #57	; 0x39
 800d51a:	d071      	beq.n	800d600 <_dtoa_r+0xb68>
 800d51c:	3201      	adds	r2, #1
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	e747      	b.n	800d3b2 <_dtoa_r+0x91a>
 800d522:	2a00      	cmp	r2, #0
 800d524:	dd07      	ble.n	800d536 <_dtoa_r+0xa9e>
 800d526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d52a:	d0ed      	beq.n	800d508 <_dtoa_r+0xa70>
 800d52c:	f10a 0301 	add.w	r3, sl, #1
 800d530:	f88b 3000 	strb.w	r3, [fp]
 800d534:	e73d      	b.n	800d3b2 <_dtoa_r+0x91a>
 800d536:	9b05      	ldr	r3, [sp, #20]
 800d538:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d53c:	4599      	cmp	r9, r3
 800d53e:	d047      	beq.n	800d5d0 <_dtoa_r+0xb38>
 800d540:	ee18 1a10 	vmov	r1, s16
 800d544:	2300      	movs	r3, #0
 800d546:	220a      	movs	r2, #10
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fbcb 	bl	800dce4 <__multadd>
 800d54e:	45b8      	cmp	r8, r7
 800d550:	ee08 0a10 	vmov	s16, r0
 800d554:	f04f 0300 	mov.w	r3, #0
 800d558:	f04f 020a 	mov.w	r2, #10
 800d55c:	4641      	mov	r1, r8
 800d55e:	4620      	mov	r0, r4
 800d560:	d106      	bne.n	800d570 <_dtoa_r+0xad8>
 800d562:	f000 fbbf 	bl	800dce4 <__multadd>
 800d566:	4680      	mov	r8, r0
 800d568:	4607      	mov	r7, r0
 800d56a:	f109 0901 	add.w	r9, r9, #1
 800d56e:	e772      	b.n	800d456 <_dtoa_r+0x9be>
 800d570:	f000 fbb8 	bl	800dce4 <__multadd>
 800d574:	4639      	mov	r1, r7
 800d576:	4680      	mov	r8, r0
 800d578:	2300      	movs	r3, #0
 800d57a:	220a      	movs	r2, #10
 800d57c:	4620      	mov	r0, r4
 800d57e:	f000 fbb1 	bl	800dce4 <__multadd>
 800d582:	4607      	mov	r7, r0
 800d584:	e7f1      	b.n	800d56a <_dtoa_r+0xad2>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	9d01      	ldr	r5, [sp, #4]
 800d58c:	ee18 0a10 	vmov	r0, s16
 800d590:	4631      	mov	r1, r6
 800d592:	f7ff f9f3 	bl	800c97c <quorem>
 800d596:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d59a:	9b01      	ldr	r3, [sp, #4]
 800d59c:	f805 ab01 	strb.w	sl, [r5], #1
 800d5a0:	1aea      	subs	r2, r5, r3
 800d5a2:	9b02      	ldr	r3, [sp, #8]
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	dd09      	ble.n	800d5bc <_dtoa_r+0xb24>
 800d5a8:	ee18 1a10 	vmov	r1, s16
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	220a      	movs	r2, #10
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f000 fb97 	bl	800dce4 <__multadd>
 800d5b6:	ee08 0a10 	vmov	s16, r0
 800d5ba:	e7e7      	b.n	800d58c <_dtoa_r+0xaf4>
 800d5bc:	9b02      	ldr	r3, [sp, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	bfc8      	it	gt
 800d5c2:	461d      	movgt	r5, r3
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	bfd8      	it	le
 800d5c8:	2501      	movle	r5, #1
 800d5ca:	441d      	add	r5, r3
 800d5cc:	f04f 0800 	mov.w	r8, #0
 800d5d0:	ee18 1a10 	vmov	r1, s16
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f000 fd1a 	bl	800e010 <__lshift>
 800d5dc:	4631      	mov	r1, r6
 800d5de:	ee08 0a10 	vmov	s16, r0
 800d5e2:	f000 fd85 	bl	800e0f0 <__mcmp>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	dc91      	bgt.n	800d50e <_dtoa_r+0xa76>
 800d5ea:	d102      	bne.n	800d5f2 <_dtoa_r+0xb5a>
 800d5ec:	f01a 0f01 	tst.w	sl, #1
 800d5f0:	d18d      	bne.n	800d50e <_dtoa_r+0xa76>
 800d5f2:	462b      	mov	r3, r5
 800d5f4:	461d      	mov	r5, r3
 800d5f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5fa:	2a30      	cmp	r2, #48	; 0x30
 800d5fc:	d0fa      	beq.n	800d5f4 <_dtoa_r+0xb5c>
 800d5fe:	e6d8      	b.n	800d3b2 <_dtoa_r+0x91a>
 800d600:	9a01      	ldr	r2, [sp, #4]
 800d602:	429a      	cmp	r2, r3
 800d604:	d184      	bne.n	800d510 <_dtoa_r+0xa78>
 800d606:	9b00      	ldr	r3, [sp, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	2331      	movs	r3, #49	; 0x31
 800d60e:	7013      	strb	r3, [r2, #0]
 800d610:	e6cf      	b.n	800d3b2 <_dtoa_r+0x91a>
 800d612:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <_dtoa_r+0xba4>)
 800d614:	f7ff ba97 	b.w	800cb46 <_dtoa_r+0xae>
 800d618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f47f aa7b 	bne.w	800cb16 <_dtoa_r+0x7e>
 800d620:	4b07      	ldr	r3, [pc, #28]	; (800d640 <_dtoa_r+0xba8>)
 800d622:	f7ff ba90 	b.w	800cb46 <_dtoa_r+0xae>
 800d626:	9b02      	ldr	r3, [sp, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	dcae      	bgt.n	800d58a <_dtoa_r+0xaf2>
 800d62c:	9b06      	ldr	r3, [sp, #24]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	f73f aea9 	bgt.w	800d386 <_dtoa_r+0x8ee>
 800d634:	e7a9      	b.n	800d58a <_dtoa_r+0xaf2>
 800d636:	bf00      	nop
 800d638:	08014735 	.word	0x08014735
 800d63c:	08014706 	.word	0x08014706
 800d640:	0801472c 	.word	0x0801472c

0800d644 <std>:
 800d644:	2300      	movs	r3, #0
 800d646:	b510      	push	{r4, lr}
 800d648:	4604      	mov	r4, r0
 800d64a:	e9c0 3300 	strd	r3, r3, [r0]
 800d64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d652:	6083      	str	r3, [r0, #8]
 800d654:	8181      	strh	r1, [r0, #12]
 800d656:	6643      	str	r3, [r0, #100]	; 0x64
 800d658:	81c2      	strh	r2, [r0, #14]
 800d65a:	6183      	str	r3, [r0, #24]
 800d65c:	4619      	mov	r1, r3
 800d65e:	2208      	movs	r2, #8
 800d660:	305c      	adds	r0, #92	; 0x5c
 800d662:	f7fd fd51 	bl	800b108 <memset>
 800d666:	4b07      	ldr	r3, [pc, #28]	; (800d684 <std+0x40>)
 800d668:	6223      	str	r3, [r4, #32]
 800d66a:	4b07      	ldr	r3, [pc, #28]	; (800d688 <std+0x44>)
 800d66c:	6263      	str	r3, [r4, #36]	; 0x24
 800d66e:	4b07      	ldr	r3, [pc, #28]	; (800d68c <std+0x48>)
 800d670:	62a3      	str	r3, [r4, #40]	; 0x28
 800d672:	4b07      	ldr	r3, [pc, #28]	; (800d690 <std+0x4c>)
 800d674:	61e4      	str	r4, [r4, #28]
 800d676:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d680:	f000 bae4 	b.w	800dc4c <__retarget_lock_init_recursive>
 800d684:	0800e365 	.word	0x0800e365
 800d688:	0800e387 	.word	0x0800e387
 800d68c:	0800e3bf 	.word	0x0800e3bf
 800d690:	0800e3e3 	.word	0x0800e3e3

0800d694 <_cleanup_r>:
 800d694:	4901      	ldr	r1, [pc, #4]	; (800d69c <_cleanup_r+0x8>)
 800d696:	f000 bab5 	b.w	800dc04 <_fwalk_reent>
 800d69a:	bf00      	nop
 800d69c:	0800e729 	.word	0x0800e729

0800d6a0 <__sfp_lock_acquire>:
 800d6a0:	4801      	ldr	r0, [pc, #4]	; (800d6a8 <__sfp_lock_acquire+0x8>)
 800d6a2:	f000 bad5 	b.w	800dc50 <__retarget_lock_acquire_recursive>
 800d6a6:	bf00      	nop
 800d6a8:	200019ca 	.word	0x200019ca

0800d6ac <__sfp_lock_release>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__sfp_lock_release+0x8>)
 800d6ae:	f000 bad0 	b.w	800dc52 <__retarget_lock_release_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	200019ca 	.word	0x200019ca

0800d6b8 <__sinit_lock_acquire>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__sinit_lock_acquire+0x8>)
 800d6ba:	f000 bac9 	b.w	800dc50 <__retarget_lock_acquire_recursive>
 800d6be:	bf00      	nop
 800d6c0:	200019cb 	.word	0x200019cb

0800d6c4 <__sinit_lock_release>:
 800d6c4:	4801      	ldr	r0, [pc, #4]	; (800d6cc <__sinit_lock_release+0x8>)
 800d6c6:	f000 bac4 	b.w	800dc52 <__retarget_lock_release_recursive>
 800d6ca:	bf00      	nop
 800d6cc:	200019cb 	.word	0x200019cb

0800d6d0 <__sinit>:
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	f7ff fff0 	bl	800d6b8 <__sinit_lock_acquire>
 800d6d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d6da:	b11a      	cbz	r2, 800d6e4 <__sinit+0x14>
 800d6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e0:	f7ff bff0 	b.w	800d6c4 <__sinit_lock_release>
 800d6e4:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <__sinit+0x4c>)
 800d6e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800d6ee:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800d6f2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800d6f6:	6860      	ldr	r0, [r4, #4]
 800d6f8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800d6fc:	2104      	movs	r1, #4
 800d6fe:	f7ff ffa1 	bl	800d644 <std>
 800d702:	68a0      	ldr	r0, [r4, #8]
 800d704:	2201      	movs	r2, #1
 800d706:	2109      	movs	r1, #9
 800d708:	f7ff ff9c 	bl	800d644 <std>
 800d70c:	68e0      	ldr	r0, [r4, #12]
 800d70e:	2202      	movs	r2, #2
 800d710:	2112      	movs	r1, #18
 800d712:	f7ff ff97 	bl	800d644 <std>
 800d716:	2301      	movs	r3, #1
 800d718:	63a3      	str	r3, [r4, #56]	; 0x38
 800d71a:	e7df      	b.n	800d6dc <__sinit+0xc>
 800d71c:	0800d695 	.word	0x0800d695

0800d720 <__libc_fini_array>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d07      	ldr	r5, [pc, #28]	; (800d740 <__libc_fini_array+0x20>)
 800d724:	4c07      	ldr	r4, [pc, #28]	; (800d744 <__libc_fini_array+0x24>)
 800d726:	1b64      	subs	r4, r4, r5
 800d728:	10a4      	asrs	r4, r4, #2
 800d72a:	b91c      	cbnz	r4, 800d734 <__libc_fini_array+0x14>
 800d72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d730:	f002 b858 	b.w	800f7e4 <_fini>
 800d734:	3c01      	subs	r4, #1
 800d736:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d73a:	4798      	blx	r3
 800d73c:	e7f5      	b.n	800d72a <__libc_fini_array+0xa>
 800d73e:	bf00      	nop
 800d740:	08014a74 	.word	0x08014a74
 800d744:	08014a78 	.word	0x08014a78

0800d748 <_malloc_trim_r>:
 800d748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d74c:	4606      	mov	r6, r0
 800d74e:	2008      	movs	r0, #8
 800d750:	460c      	mov	r4, r1
 800d752:	f7ff f8f5 	bl	800c940 <sysconf>
 800d756:	4f23      	ldr	r7, [pc, #140]	; (800d7e4 <_malloc_trim_r+0x9c>)
 800d758:	4680      	mov	r8, r0
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7fd fcdc 	bl	800b118 <__malloc_lock>
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	685d      	ldr	r5, [r3, #4]
 800d764:	f025 0503 	bic.w	r5, r5, #3
 800d768:	1b2c      	subs	r4, r5, r4
 800d76a:	3c11      	subs	r4, #17
 800d76c:	4444      	add	r4, r8
 800d76e:	fbb4 f4f8 	udiv	r4, r4, r8
 800d772:	3c01      	subs	r4, #1
 800d774:	fb08 f404 	mul.w	r4, r8, r4
 800d778:	45a0      	cmp	r8, r4
 800d77a:	dd05      	ble.n	800d788 <_malloc_trim_r+0x40>
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7fd fcd1 	bl	800b124 <__malloc_unlock>
 800d782:	2000      	movs	r0, #0
 800d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d788:	2100      	movs	r1, #0
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7fd fec2 	bl	800b514 <_sbrk_r>
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	442b      	add	r3, r5
 800d794:	4298      	cmp	r0, r3
 800d796:	d1f1      	bne.n	800d77c <_malloc_trim_r+0x34>
 800d798:	4261      	negs	r1, r4
 800d79a:	4630      	mov	r0, r6
 800d79c:	f7fd feba 	bl	800b514 <_sbrk_r>
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	d110      	bne.n	800d7c6 <_malloc_trim_r+0x7e>
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7fd feb4 	bl	800b514 <_sbrk_r>
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	1a83      	subs	r3, r0, r2
 800d7b0:	2b0f      	cmp	r3, #15
 800d7b2:	dde3      	ble.n	800d77c <_malloc_trim_r+0x34>
 800d7b4:	490c      	ldr	r1, [pc, #48]	; (800d7e8 <_malloc_trim_r+0xa0>)
 800d7b6:	6809      	ldr	r1, [r1, #0]
 800d7b8:	1a40      	subs	r0, r0, r1
 800d7ba:	490c      	ldr	r1, [pc, #48]	; (800d7ec <_malloc_trim_r+0xa4>)
 800d7bc:	f043 0301 	orr.w	r3, r3, #1
 800d7c0:	6008      	str	r0, [r1, #0]
 800d7c2:	6053      	str	r3, [r2, #4]
 800d7c4:	e7da      	b.n	800d77c <_malloc_trim_r+0x34>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	4a08      	ldr	r2, [pc, #32]	; (800d7ec <_malloc_trim_r+0xa4>)
 800d7ca:	1b2d      	subs	r5, r5, r4
 800d7cc:	f045 0501 	orr.w	r5, r5, #1
 800d7d0:	605d      	str	r5, [r3, #4]
 800d7d2:	6813      	ldr	r3, [r2, #0]
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	1b1b      	subs	r3, r3, r4
 800d7d8:	6013      	str	r3, [r2, #0]
 800d7da:	f7fd fca3 	bl	800b124 <__malloc_unlock>
 800d7de:	2001      	movs	r0, #1
 800d7e0:	e7d0      	b.n	800d784 <_malloc_trim_r+0x3c>
 800d7e2:	bf00      	nop
 800d7e4:	20000b80 	.word	0x20000b80
 800d7e8:	20000f88 	.word	0x20000f88
 800d7ec:	20001994 	.word	0x20001994

0800d7f0 <_free_r>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	2900      	cmp	r1, #0
 800d7f8:	f000 80b1 	beq.w	800d95e <_free_r+0x16e>
 800d7fc:	f7fd fc8c 	bl	800b118 <__malloc_lock>
 800d800:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d804:	4856      	ldr	r0, [pc, #344]	; (800d960 <_free_r+0x170>)
 800d806:	f022 0401 	bic.w	r4, r2, #1
 800d80a:	f1a7 0308 	sub.w	r3, r7, #8
 800d80e:	eb03 0c04 	add.w	ip, r3, r4
 800d812:	6881      	ldr	r1, [r0, #8]
 800d814:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d818:	4561      	cmp	r1, ip
 800d81a:	f026 0603 	bic.w	r6, r6, #3
 800d81e:	f002 0201 	and.w	r2, r2, #1
 800d822:	d11b      	bne.n	800d85c <_free_r+0x6c>
 800d824:	4434      	add	r4, r6
 800d826:	b93a      	cbnz	r2, 800d838 <_free_r+0x48>
 800d828:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d82c:	1a9b      	subs	r3, r3, r2
 800d82e:	4414      	add	r4, r2
 800d830:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d834:	60ca      	str	r2, [r1, #12]
 800d836:	6091      	str	r1, [r2, #8]
 800d838:	f044 0201 	orr.w	r2, r4, #1
 800d83c:	605a      	str	r2, [r3, #4]
 800d83e:	6083      	str	r3, [r0, #8]
 800d840:	4b48      	ldr	r3, [pc, #288]	; (800d964 <_free_r+0x174>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	42a3      	cmp	r3, r4
 800d846:	d804      	bhi.n	800d852 <_free_r+0x62>
 800d848:	4b47      	ldr	r3, [pc, #284]	; (800d968 <_free_r+0x178>)
 800d84a:	4628      	mov	r0, r5
 800d84c:	6819      	ldr	r1, [r3, #0]
 800d84e:	f7ff ff7b 	bl	800d748 <_malloc_trim_r>
 800d852:	4628      	mov	r0, r5
 800d854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d858:	f7fd bc64 	b.w	800b124 <__malloc_unlock>
 800d85c:	f8cc 6004 	str.w	r6, [ip, #4]
 800d860:	2a00      	cmp	r2, #0
 800d862:	d138      	bne.n	800d8d6 <_free_r+0xe6>
 800d864:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d868:	1a5b      	subs	r3, r3, r1
 800d86a:	440c      	add	r4, r1
 800d86c:	6899      	ldr	r1, [r3, #8]
 800d86e:	f100 0708 	add.w	r7, r0, #8
 800d872:	42b9      	cmp	r1, r7
 800d874:	d031      	beq.n	800d8da <_free_r+0xea>
 800d876:	68df      	ldr	r7, [r3, #12]
 800d878:	60cf      	str	r7, [r1, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	eb0c 0106 	add.w	r1, ip, r6
 800d880:	6849      	ldr	r1, [r1, #4]
 800d882:	07c9      	lsls	r1, r1, #31
 800d884:	d40b      	bmi.n	800d89e <_free_r+0xae>
 800d886:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d88a:	4434      	add	r4, r6
 800d88c:	bb3a      	cbnz	r2, 800d8de <_free_r+0xee>
 800d88e:	4e37      	ldr	r6, [pc, #220]	; (800d96c <_free_r+0x17c>)
 800d890:	42b1      	cmp	r1, r6
 800d892:	d124      	bne.n	800d8de <_free_r+0xee>
 800d894:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d898:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f044 0101 	orr.w	r1, r4, #1
 800d8a2:	6059      	str	r1, [r3, #4]
 800d8a4:	511c      	str	r4, [r3, r4]
 800d8a6:	2a00      	cmp	r2, #0
 800d8a8:	d1d3      	bne.n	800d852 <_free_r+0x62>
 800d8aa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d8ae:	d21b      	bcs.n	800d8e8 <_free_r+0xf8>
 800d8b0:	0961      	lsrs	r1, r4, #5
 800d8b2:	08e2      	lsrs	r2, r4, #3
 800d8b4:	2401      	movs	r4, #1
 800d8b6:	408c      	lsls	r4, r1
 800d8b8:	6841      	ldr	r1, [r0, #4]
 800d8ba:	3201      	adds	r2, #1
 800d8bc:	430c      	orrs	r4, r1
 800d8be:	6044      	str	r4, [r0, #4]
 800d8c0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800d8c4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800d8c8:	3908      	subs	r1, #8
 800d8ca:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800d8ce:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800d8d2:	60e3      	str	r3, [r4, #12]
 800d8d4:	e7bd      	b.n	800d852 <_free_r+0x62>
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	e7d0      	b.n	800d87c <_free_r+0x8c>
 800d8da:	2201      	movs	r2, #1
 800d8dc:	e7ce      	b.n	800d87c <_free_r+0x8c>
 800d8de:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d8e2:	60ce      	str	r6, [r1, #12]
 800d8e4:	60b1      	str	r1, [r6, #8]
 800d8e6:	e7da      	b.n	800d89e <_free_r+0xae>
 800d8e8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800d8ec:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800d8f0:	d214      	bcs.n	800d91c <_free_r+0x12c>
 800d8f2:	09a2      	lsrs	r2, r4, #6
 800d8f4:	3238      	adds	r2, #56	; 0x38
 800d8f6:	1c51      	adds	r1, r2, #1
 800d8f8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800d8fc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800d900:	428e      	cmp	r6, r1
 800d902:	d125      	bne.n	800d950 <_free_r+0x160>
 800d904:	2401      	movs	r4, #1
 800d906:	1092      	asrs	r2, r2, #2
 800d908:	fa04 f202 	lsl.w	r2, r4, r2
 800d90c:	6844      	ldr	r4, [r0, #4]
 800d90e:	4322      	orrs	r2, r4
 800d910:	6042      	str	r2, [r0, #4]
 800d912:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800d916:	60b3      	str	r3, [r6, #8]
 800d918:	60cb      	str	r3, [r1, #12]
 800d91a:	e79a      	b.n	800d852 <_free_r+0x62>
 800d91c:	2a14      	cmp	r2, #20
 800d91e:	d801      	bhi.n	800d924 <_free_r+0x134>
 800d920:	325b      	adds	r2, #91	; 0x5b
 800d922:	e7e8      	b.n	800d8f6 <_free_r+0x106>
 800d924:	2a54      	cmp	r2, #84	; 0x54
 800d926:	d802      	bhi.n	800d92e <_free_r+0x13e>
 800d928:	0b22      	lsrs	r2, r4, #12
 800d92a:	326e      	adds	r2, #110	; 0x6e
 800d92c:	e7e3      	b.n	800d8f6 <_free_r+0x106>
 800d92e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d932:	d802      	bhi.n	800d93a <_free_r+0x14a>
 800d934:	0be2      	lsrs	r2, r4, #15
 800d936:	3277      	adds	r2, #119	; 0x77
 800d938:	e7dd      	b.n	800d8f6 <_free_r+0x106>
 800d93a:	f240 5154 	movw	r1, #1364	; 0x554
 800d93e:	428a      	cmp	r2, r1
 800d940:	bf9a      	itte	ls
 800d942:	0ca2      	lsrls	r2, r4, #18
 800d944:	327c      	addls	r2, #124	; 0x7c
 800d946:	227e      	movhi	r2, #126	; 0x7e
 800d948:	e7d5      	b.n	800d8f6 <_free_r+0x106>
 800d94a:	6889      	ldr	r1, [r1, #8]
 800d94c:	428e      	cmp	r6, r1
 800d94e:	d004      	beq.n	800d95a <_free_r+0x16a>
 800d950:	684a      	ldr	r2, [r1, #4]
 800d952:	f022 0203 	bic.w	r2, r2, #3
 800d956:	42a2      	cmp	r2, r4
 800d958:	d8f7      	bhi.n	800d94a <_free_r+0x15a>
 800d95a:	68ce      	ldr	r6, [r1, #12]
 800d95c:	e7d9      	b.n	800d912 <_free_r+0x122>
 800d95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d960:	20000b80 	.word	0x20000b80
 800d964:	20000f8c 	.word	0x20000f8c
 800d968:	200019c4 	.word	0x200019c4
 800d96c:	20000b88 	.word	0x20000b88

0800d970 <__sfvwrite_r>:
 800d970:	6893      	ldr	r3, [r2, #8]
 800d972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d976:	4606      	mov	r6, r0
 800d978:	460c      	mov	r4, r1
 800d97a:	4690      	mov	r8, r2
 800d97c:	b91b      	cbnz	r3, 800d986 <__sfvwrite_r+0x16>
 800d97e:	2000      	movs	r0, #0
 800d980:	b003      	add	sp, #12
 800d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d986:	898b      	ldrh	r3, [r1, #12]
 800d988:	0718      	lsls	r0, r3, #28
 800d98a:	d550      	bpl.n	800da2e <__sfvwrite_r+0xbe>
 800d98c:	690b      	ldr	r3, [r1, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d04d      	beq.n	800da2e <__sfvwrite_r+0xbe>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f8d8 7000 	ldr.w	r7, [r8]
 800d998:	f013 0902 	ands.w	r9, r3, #2
 800d99c:	d16c      	bne.n	800da78 <__sfvwrite_r+0x108>
 800d99e:	f013 0301 	ands.w	r3, r3, #1
 800d9a2:	f000 809c 	beq.w	800dade <__sfvwrite_r+0x16e>
 800d9a6:	4648      	mov	r0, r9
 800d9a8:	46ca      	mov	sl, r9
 800d9aa:	46cb      	mov	fp, r9
 800d9ac:	f1bb 0f00 	cmp.w	fp, #0
 800d9b0:	f000 8103 	beq.w	800dbba <__sfvwrite_r+0x24a>
 800d9b4:	b950      	cbnz	r0, 800d9cc <__sfvwrite_r+0x5c>
 800d9b6:	465a      	mov	r2, fp
 800d9b8:	210a      	movs	r1, #10
 800d9ba:	4650      	mov	r0, sl
 800d9bc:	f7f2 fc10 	bl	80001e0 <memchr>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	f000 80ff 	beq.w	800dbc4 <__sfvwrite_r+0x254>
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	eba0 090a 	sub.w	r9, r0, sl
 800d9cc:	6820      	ldr	r0, [r4, #0]
 800d9ce:	6921      	ldr	r1, [r4, #16]
 800d9d0:	6963      	ldr	r3, [r4, #20]
 800d9d2:	45d9      	cmp	r9, fp
 800d9d4:	464a      	mov	r2, r9
 800d9d6:	bf28      	it	cs
 800d9d8:	465a      	movcs	r2, fp
 800d9da:	4288      	cmp	r0, r1
 800d9dc:	f240 80f5 	bls.w	800dbca <__sfvwrite_r+0x25a>
 800d9e0:	68a5      	ldr	r5, [r4, #8]
 800d9e2:	441d      	add	r5, r3
 800d9e4:	42aa      	cmp	r2, r5
 800d9e6:	f340 80f0 	ble.w	800dbca <__sfvwrite_r+0x25a>
 800d9ea:	4651      	mov	r1, sl
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	f000 f931 	bl	800dc54 <memmove>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	442b      	add	r3, r5
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f000 ff7a 	bl	800e8f4 <_fflush_r>
 800da00:	2800      	cmp	r0, #0
 800da02:	d167      	bne.n	800dad4 <__sfvwrite_r+0x164>
 800da04:	ebb9 0905 	subs.w	r9, r9, r5
 800da08:	f040 80f7 	bne.w	800dbfa <__sfvwrite_r+0x28a>
 800da0c:	4621      	mov	r1, r4
 800da0e:	4630      	mov	r0, r6
 800da10:	f000 ff70 	bl	800e8f4 <_fflush_r>
 800da14:	2800      	cmp	r0, #0
 800da16:	d15d      	bne.n	800dad4 <__sfvwrite_r+0x164>
 800da18:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800da1c:	44aa      	add	sl, r5
 800da1e:	ebab 0b05 	sub.w	fp, fp, r5
 800da22:	1b55      	subs	r5, r2, r5
 800da24:	f8c8 5008 	str.w	r5, [r8, #8]
 800da28:	2d00      	cmp	r5, #0
 800da2a:	d1bf      	bne.n	800d9ac <__sfvwrite_r+0x3c>
 800da2c:	e7a7      	b.n	800d97e <__sfvwrite_r+0xe>
 800da2e:	4621      	mov	r1, r4
 800da30:	4630      	mov	r0, r6
 800da32:	f000 fd7b 	bl	800e52c <__swsetup_r>
 800da36:	2800      	cmp	r0, #0
 800da38:	d0ab      	beq.n	800d992 <__sfvwrite_r+0x22>
 800da3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da3e:	e79f      	b.n	800d980 <__sfvwrite_r+0x10>
 800da40:	e9d7 b900 	ldrd	fp, r9, [r7]
 800da44:	3708      	adds	r7, #8
 800da46:	f1b9 0f00 	cmp.w	r9, #0
 800da4a:	d0f9      	beq.n	800da40 <__sfvwrite_r+0xd0>
 800da4c:	45d1      	cmp	r9, sl
 800da4e:	464b      	mov	r3, r9
 800da50:	69e1      	ldr	r1, [r4, #28]
 800da52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800da54:	bf28      	it	cs
 800da56:	4653      	movcs	r3, sl
 800da58:	465a      	mov	r2, fp
 800da5a:	4630      	mov	r0, r6
 800da5c:	47a8      	blx	r5
 800da5e:	2800      	cmp	r0, #0
 800da60:	dd38      	ble.n	800dad4 <__sfvwrite_r+0x164>
 800da62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da66:	4483      	add	fp, r0
 800da68:	eba9 0900 	sub.w	r9, r9, r0
 800da6c:	1a18      	subs	r0, r3, r0
 800da6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da72:	2800      	cmp	r0, #0
 800da74:	d1e7      	bne.n	800da46 <__sfvwrite_r+0xd6>
 800da76:	e782      	b.n	800d97e <__sfvwrite_r+0xe>
 800da78:	f04f 0b00 	mov.w	fp, #0
 800da7c:	f8df a180 	ldr.w	sl, [pc, #384]	; 800dc00 <__sfvwrite_r+0x290>
 800da80:	46d9      	mov	r9, fp
 800da82:	e7e0      	b.n	800da46 <__sfvwrite_r+0xd6>
 800da84:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800da88:	3708      	adds	r7, #8
 800da8a:	f1ba 0f00 	cmp.w	sl, #0
 800da8e:	d0f9      	beq.n	800da84 <__sfvwrite_r+0x114>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	6820      	ldr	r0, [r4, #0]
 800da94:	68a2      	ldr	r2, [r4, #8]
 800da96:	0599      	lsls	r1, r3, #22
 800da98:	d563      	bpl.n	800db62 <__sfvwrite_r+0x1f2>
 800da9a:	4552      	cmp	r2, sl
 800da9c:	d836      	bhi.n	800db0c <__sfvwrite_r+0x19c>
 800da9e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800daa2:	d033      	beq.n	800db0c <__sfvwrite_r+0x19c>
 800daa4:	6921      	ldr	r1, [r4, #16]
 800daa6:	6965      	ldr	r5, [r4, #20]
 800daa8:	eba0 0b01 	sub.w	fp, r0, r1
 800daac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dab4:	f10b 0201 	add.w	r2, fp, #1
 800dab8:	106d      	asrs	r5, r5, #1
 800daba:	4452      	add	r2, sl
 800dabc:	4295      	cmp	r5, r2
 800dabe:	bf38      	it	cc
 800dac0:	4615      	movcc	r5, r2
 800dac2:	055b      	lsls	r3, r3, #21
 800dac4:	d53d      	bpl.n	800db42 <__sfvwrite_r+0x1d2>
 800dac6:	4629      	mov	r1, r5
 800dac8:	4630      	mov	r0, r6
 800daca:	f7fd f8d3 	bl	800ac74 <_malloc_r>
 800dace:	b948      	cbnz	r0, 800dae4 <__sfvwrite_r+0x174>
 800dad0:	230c      	movs	r3, #12
 800dad2:	6033      	str	r3, [r6, #0]
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dada:	81a3      	strh	r3, [r4, #12]
 800dadc:	e7ad      	b.n	800da3a <__sfvwrite_r+0xca>
 800dade:	4699      	mov	r9, r3
 800dae0:	469a      	mov	sl, r3
 800dae2:	e7d2      	b.n	800da8a <__sfvwrite_r+0x11a>
 800dae4:	465a      	mov	r2, fp
 800dae6:	6921      	ldr	r1, [r4, #16]
 800dae8:	9001      	str	r0, [sp, #4]
 800daea:	f7fd faff 	bl	800b0ec <memcpy>
 800daee:	89a2      	ldrh	r2, [r4, #12]
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800daf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dafa:	81a2      	strh	r2, [r4, #12]
 800dafc:	6123      	str	r3, [r4, #16]
 800dafe:	6165      	str	r5, [r4, #20]
 800db00:	445b      	add	r3, fp
 800db02:	eba5 050b 	sub.w	r5, r5, fp
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	4652      	mov	r2, sl
 800db0a:	60a5      	str	r5, [r4, #8]
 800db0c:	4552      	cmp	r2, sl
 800db0e:	bf28      	it	cs
 800db10:	4652      	movcs	r2, sl
 800db12:	6820      	ldr	r0, [r4, #0]
 800db14:	9201      	str	r2, [sp, #4]
 800db16:	4649      	mov	r1, r9
 800db18:	f000 f89c 	bl	800dc54 <memmove>
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	9a01      	ldr	r2, [sp, #4]
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	441a      	add	r2, r3
 800db28:	4655      	mov	r5, sl
 800db2a:	6022      	str	r2, [r4, #0]
 800db2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800db30:	44a9      	add	r9, r5
 800db32:	ebaa 0a05 	sub.w	sl, sl, r5
 800db36:	1b45      	subs	r5, r0, r5
 800db38:	f8c8 5008 	str.w	r5, [r8, #8]
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	d1a4      	bne.n	800da8a <__sfvwrite_r+0x11a>
 800db40:	e71d      	b.n	800d97e <__sfvwrite_r+0xe>
 800db42:	462a      	mov	r2, r5
 800db44:	4630      	mov	r0, r6
 800db46:	f7fd fb41 	bl	800b1cc <_realloc_r>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d1d5      	bne.n	800dafc <__sfvwrite_r+0x18c>
 800db50:	6921      	ldr	r1, [r4, #16]
 800db52:	4630      	mov	r0, r6
 800db54:	f7ff fe4c 	bl	800d7f0 <_free_r>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db5e:	81a3      	strh	r3, [r4, #12]
 800db60:	e7b6      	b.n	800dad0 <__sfvwrite_r+0x160>
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	4283      	cmp	r3, r0
 800db66:	d302      	bcc.n	800db6e <__sfvwrite_r+0x1fe>
 800db68:	6961      	ldr	r1, [r4, #20]
 800db6a:	4551      	cmp	r1, sl
 800db6c:	d915      	bls.n	800db9a <__sfvwrite_r+0x22a>
 800db6e:	4552      	cmp	r2, sl
 800db70:	bf28      	it	cs
 800db72:	4652      	movcs	r2, sl
 800db74:	4649      	mov	r1, r9
 800db76:	4615      	mov	r5, r2
 800db78:	f000 f86c 	bl	800dc54 <memmove>
 800db7c:	68a3      	ldr	r3, [r4, #8]
 800db7e:	6822      	ldr	r2, [r4, #0]
 800db80:	1b5b      	subs	r3, r3, r5
 800db82:	442a      	add	r2, r5
 800db84:	60a3      	str	r3, [r4, #8]
 800db86:	6022      	str	r2, [r4, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1cf      	bne.n	800db2c <__sfvwrite_r+0x1bc>
 800db8c:	4621      	mov	r1, r4
 800db8e:	4630      	mov	r0, r6
 800db90:	f000 feb0 	bl	800e8f4 <_fflush_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	d0c9      	beq.n	800db2c <__sfvwrite_r+0x1bc>
 800db98:	e79c      	b.n	800dad4 <__sfvwrite_r+0x164>
 800db9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db9e:	459a      	cmp	sl, r3
 800dba0:	bf38      	it	cc
 800dba2:	4653      	movcc	r3, sl
 800dba4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dba6:	fb93 f3f1 	sdiv	r3, r3, r1
 800dbaa:	464a      	mov	r2, r9
 800dbac:	434b      	muls	r3, r1
 800dbae:	4630      	mov	r0, r6
 800dbb0:	69e1      	ldr	r1, [r4, #28]
 800dbb2:	47a8      	blx	r5
 800dbb4:	1e05      	subs	r5, r0, #0
 800dbb6:	dcb9      	bgt.n	800db2c <__sfvwrite_r+0x1bc>
 800dbb8:	e78c      	b.n	800dad4 <__sfvwrite_r+0x164>
 800dbba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	e6f3      	b.n	800d9ac <__sfvwrite_r+0x3c>
 800dbc4:	f10b 0901 	add.w	r9, fp, #1
 800dbc8:	e700      	b.n	800d9cc <__sfvwrite_r+0x5c>
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	dc08      	bgt.n	800dbe0 <__sfvwrite_r+0x270>
 800dbce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dbd0:	69e1      	ldr	r1, [r4, #28]
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	47a8      	blx	r5
 800dbd8:	1e05      	subs	r5, r0, #0
 800dbda:	f73f af13 	bgt.w	800da04 <__sfvwrite_r+0x94>
 800dbde:	e779      	b.n	800dad4 <__sfvwrite_r+0x164>
 800dbe0:	4651      	mov	r1, sl
 800dbe2:	9201      	str	r2, [sp, #4]
 800dbe4:	f000 f836 	bl	800dc54 <memmove>
 800dbe8:	9a01      	ldr	r2, [sp, #4]
 800dbea:	68a3      	ldr	r3, [r4, #8]
 800dbec:	1a9b      	subs	r3, r3, r2
 800dbee:	60a3      	str	r3, [r4, #8]
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	4615      	mov	r5, r2
 800dbf8:	e704      	b.n	800da04 <__sfvwrite_r+0x94>
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	e70c      	b.n	800da18 <__sfvwrite_r+0xa8>
 800dbfe:	bf00      	nop
 800dc00:	7ffffc00 	.word	0x7ffffc00

0800dc04 <_fwalk_reent>:
 800dc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc08:	4606      	mov	r6, r0
 800dc0a:	4688      	mov	r8, r1
 800dc0c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800dc10:	2700      	movs	r7, #0
 800dc12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc16:	f1b9 0901 	subs.w	r9, r9, #1
 800dc1a:	d505      	bpl.n	800dc28 <_fwalk_reent+0x24>
 800dc1c:	6824      	ldr	r4, [r4, #0]
 800dc1e:	2c00      	cmp	r4, #0
 800dc20:	d1f7      	bne.n	800dc12 <_fwalk_reent+0xe>
 800dc22:	4638      	mov	r0, r7
 800dc24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc28:	89ab      	ldrh	r3, [r5, #12]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d907      	bls.n	800dc3e <_fwalk_reent+0x3a>
 800dc2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc32:	3301      	adds	r3, #1
 800dc34:	d003      	beq.n	800dc3e <_fwalk_reent+0x3a>
 800dc36:	4629      	mov	r1, r5
 800dc38:	4630      	mov	r0, r6
 800dc3a:	47c0      	blx	r8
 800dc3c:	4307      	orrs	r7, r0
 800dc3e:	3568      	adds	r5, #104	; 0x68
 800dc40:	e7e9      	b.n	800dc16 <_fwalk_reent+0x12>
	...

0800dc44 <_localeconv_r>:
 800dc44:	4800      	ldr	r0, [pc, #0]	; (800dc48 <_localeconv_r+0x4>)
 800dc46:	4770      	bx	lr
 800dc48:	20001084 	.word	0x20001084

0800dc4c <__retarget_lock_init_recursive>:
 800dc4c:	4770      	bx	lr

0800dc4e <__retarget_lock_close_recursive>:
 800dc4e:	4770      	bx	lr

0800dc50 <__retarget_lock_acquire_recursive>:
 800dc50:	4770      	bx	lr

0800dc52 <__retarget_lock_release_recursive>:
 800dc52:	4770      	bx	lr

0800dc54 <memmove>:
 800dc54:	4288      	cmp	r0, r1
 800dc56:	b510      	push	{r4, lr}
 800dc58:	eb01 0402 	add.w	r4, r1, r2
 800dc5c:	d902      	bls.n	800dc64 <memmove+0x10>
 800dc5e:	4284      	cmp	r4, r0
 800dc60:	4623      	mov	r3, r4
 800dc62:	d807      	bhi.n	800dc74 <memmove+0x20>
 800dc64:	1e43      	subs	r3, r0, #1
 800dc66:	42a1      	cmp	r1, r4
 800dc68:	d008      	beq.n	800dc7c <memmove+0x28>
 800dc6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc72:	e7f8      	b.n	800dc66 <memmove+0x12>
 800dc74:	4402      	add	r2, r0
 800dc76:	4601      	mov	r1, r0
 800dc78:	428a      	cmp	r2, r1
 800dc7a:	d100      	bne.n	800dc7e <memmove+0x2a>
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc86:	e7f7      	b.n	800dc78 <memmove+0x24>

0800dc88 <_Balloc>:
 800dc88:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800dc8a:	b570      	push	{r4, r5, r6, lr}
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	460c      	mov	r4, r1
 800dc90:	b17b      	cbz	r3, 800dcb2 <_Balloc+0x2a>
 800dc92:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800dc94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dc98:	b9a0      	cbnz	r0, 800dcc4 <_Balloc+0x3c>
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	fa01 f604 	lsl.w	r6, r1, r4
 800dca0:	1d72      	adds	r2, r6, #5
 800dca2:	0092      	lsls	r2, r2, #2
 800dca4:	4628      	mov	r0, r5
 800dca6:	f000 fcf9 	bl	800e69c <_calloc_r>
 800dcaa:	b148      	cbz	r0, 800dcc0 <_Balloc+0x38>
 800dcac:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800dcb0:	e00b      	b.n	800dcca <_Balloc+0x42>
 800dcb2:	2221      	movs	r2, #33	; 0x21
 800dcb4:	2104      	movs	r1, #4
 800dcb6:	f000 fcf1 	bl	800e69c <_calloc_r>
 800dcba:	64e8      	str	r0, [r5, #76]	; 0x4c
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d1e8      	bne.n	800dc92 <_Balloc+0xa>
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	6802      	ldr	r2, [r0, #0]
 800dcc6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800dcca:	2300      	movs	r3, #0
 800dccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcd0:	e7f7      	b.n	800dcc2 <_Balloc+0x3a>

0800dcd2 <_Bfree>:
 800dcd2:	b131      	cbz	r1, 800dce2 <_Bfree+0x10>
 800dcd4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800dcd6:	684a      	ldr	r2, [r1, #4]
 800dcd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dcdc:	6008      	str	r0, [r1, #0]
 800dcde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dce2:	4770      	bx	lr

0800dce4 <__multadd>:
 800dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce8:	690d      	ldr	r5, [r1, #16]
 800dcea:	4607      	mov	r7, r0
 800dcec:	460c      	mov	r4, r1
 800dcee:	461e      	mov	r6, r3
 800dcf0:	f101 0c14 	add.w	ip, r1, #20
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	f8dc 3000 	ldr.w	r3, [ip]
 800dcfa:	b299      	uxth	r1, r3
 800dcfc:	fb02 6101 	mla	r1, r2, r1, r6
 800dd00:	0c1e      	lsrs	r6, r3, #16
 800dd02:	0c0b      	lsrs	r3, r1, #16
 800dd04:	fb02 3306 	mla	r3, r2, r6, r3
 800dd08:	b289      	uxth	r1, r1
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd10:	4285      	cmp	r5, r0
 800dd12:	f84c 1b04 	str.w	r1, [ip], #4
 800dd16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd1a:	dcec      	bgt.n	800dcf6 <__multadd+0x12>
 800dd1c:	b30e      	cbz	r6, 800dd62 <__multadd+0x7e>
 800dd1e:	68a3      	ldr	r3, [r4, #8]
 800dd20:	42ab      	cmp	r3, r5
 800dd22:	dc19      	bgt.n	800dd58 <__multadd+0x74>
 800dd24:	6861      	ldr	r1, [r4, #4]
 800dd26:	4638      	mov	r0, r7
 800dd28:	3101      	adds	r1, #1
 800dd2a:	f7ff ffad 	bl	800dc88 <_Balloc>
 800dd2e:	4680      	mov	r8, r0
 800dd30:	b928      	cbnz	r0, 800dd3e <__multadd+0x5a>
 800dd32:	4602      	mov	r2, r0
 800dd34:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <__multadd+0x84>)
 800dd36:	480d      	ldr	r0, [pc, #52]	; (800dd6c <__multadd+0x88>)
 800dd38:	21b5      	movs	r1, #181	; 0xb5
 800dd3a:	f000 fc91 	bl	800e660 <__assert_func>
 800dd3e:	6922      	ldr	r2, [r4, #16]
 800dd40:	3202      	adds	r2, #2
 800dd42:	f104 010c 	add.w	r1, r4, #12
 800dd46:	0092      	lsls	r2, r2, #2
 800dd48:	300c      	adds	r0, #12
 800dd4a:	f7fd f9cf 	bl	800b0ec <memcpy>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4638      	mov	r0, r7
 800dd52:	f7ff ffbe 	bl	800dcd2 <_Bfree>
 800dd56:	4644      	mov	r4, r8
 800dd58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd5c:	3501      	adds	r5, #1
 800dd5e:	615e      	str	r6, [r3, #20]
 800dd60:	6125      	str	r5, [r4, #16]
 800dd62:	4620      	mov	r0, r4
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd68:	08014735 	.word	0x08014735
 800dd6c:	080147a1 	.word	0x080147a1

0800dd70 <__hi0bits>:
 800dd70:	0c03      	lsrs	r3, r0, #16
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	b9d3      	cbnz	r3, 800ddac <__hi0bits+0x3c>
 800dd76:	0400      	lsls	r0, r0, #16
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd7e:	bf04      	itt	eq
 800dd80:	0200      	lsleq	r0, r0, #8
 800dd82:	3308      	addeq	r3, #8
 800dd84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd88:	bf04      	itt	eq
 800dd8a:	0100      	lsleq	r0, r0, #4
 800dd8c:	3304      	addeq	r3, #4
 800dd8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd92:	bf04      	itt	eq
 800dd94:	0080      	lsleq	r0, r0, #2
 800dd96:	3302      	addeq	r3, #2
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	db05      	blt.n	800dda8 <__hi0bits+0x38>
 800dd9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dda0:	f103 0301 	add.w	r3, r3, #1
 800dda4:	bf08      	it	eq
 800dda6:	2320      	moveq	r3, #32
 800dda8:	4618      	mov	r0, r3
 800ddaa:	4770      	bx	lr
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7e4      	b.n	800dd7a <__hi0bits+0xa>

0800ddb0 <__lo0bits>:
 800ddb0:	6803      	ldr	r3, [r0, #0]
 800ddb2:	f013 0207 	ands.w	r2, r3, #7
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	d00b      	beq.n	800ddd2 <__lo0bits+0x22>
 800ddba:	07da      	lsls	r2, r3, #31
 800ddbc:	d423      	bmi.n	800de06 <__lo0bits+0x56>
 800ddbe:	0798      	lsls	r0, r3, #30
 800ddc0:	bf49      	itett	mi
 800ddc2:	085b      	lsrmi	r3, r3, #1
 800ddc4:	089b      	lsrpl	r3, r3, #2
 800ddc6:	2001      	movmi	r0, #1
 800ddc8:	600b      	strmi	r3, [r1, #0]
 800ddca:	bf5c      	itt	pl
 800ddcc:	600b      	strpl	r3, [r1, #0]
 800ddce:	2002      	movpl	r0, #2
 800ddd0:	4770      	bx	lr
 800ddd2:	b298      	uxth	r0, r3
 800ddd4:	b9a8      	cbnz	r0, 800de02 <__lo0bits+0x52>
 800ddd6:	0c1b      	lsrs	r3, r3, #16
 800ddd8:	2010      	movs	r0, #16
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	b90a      	cbnz	r2, 800dde2 <__lo0bits+0x32>
 800ddde:	3008      	adds	r0, #8
 800dde0:	0a1b      	lsrs	r3, r3, #8
 800dde2:	071a      	lsls	r2, r3, #28
 800dde4:	bf04      	itt	eq
 800dde6:	091b      	lsreq	r3, r3, #4
 800dde8:	3004      	addeq	r0, #4
 800ddea:	079a      	lsls	r2, r3, #30
 800ddec:	bf04      	itt	eq
 800ddee:	089b      	lsreq	r3, r3, #2
 800ddf0:	3002      	addeq	r0, #2
 800ddf2:	07da      	lsls	r2, r3, #31
 800ddf4:	d403      	bmi.n	800ddfe <__lo0bits+0x4e>
 800ddf6:	085b      	lsrs	r3, r3, #1
 800ddf8:	f100 0001 	add.w	r0, r0, #1
 800ddfc:	d005      	beq.n	800de0a <__lo0bits+0x5a>
 800ddfe:	600b      	str	r3, [r1, #0]
 800de00:	4770      	bx	lr
 800de02:	4610      	mov	r0, r2
 800de04:	e7e9      	b.n	800ddda <__lo0bits+0x2a>
 800de06:	2000      	movs	r0, #0
 800de08:	4770      	bx	lr
 800de0a:	2020      	movs	r0, #32
 800de0c:	4770      	bx	lr
	...

0800de10 <__i2b>:
 800de10:	b510      	push	{r4, lr}
 800de12:	460c      	mov	r4, r1
 800de14:	2101      	movs	r1, #1
 800de16:	f7ff ff37 	bl	800dc88 <_Balloc>
 800de1a:	4602      	mov	r2, r0
 800de1c:	b928      	cbnz	r0, 800de2a <__i2b+0x1a>
 800de1e:	4b05      	ldr	r3, [pc, #20]	; (800de34 <__i2b+0x24>)
 800de20:	4805      	ldr	r0, [pc, #20]	; (800de38 <__i2b+0x28>)
 800de22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de26:	f000 fc1b 	bl	800e660 <__assert_func>
 800de2a:	2301      	movs	r3, #1
 800de2c:	6144      	str	r4, [r0, #20]
 800de2e:	6103      	str	r3, [r0, #16]
 800de30:	bd10      	pop	{r4, pc}
 800de32:	bf00      	nop
 800de34:	08014735 	.word	0x08014735
 800de38:	080147a1 	.word	0x080147a1

0800de3c <__multiply>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	4691      	mov	r9, r2
 800de42:	690a      	ldr	r2, [r1, #16]
 800de44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de48:	429a      	cmp	r2, r3
 800de4a:	bfb8      	it	lt
 800de4c:	460b      	movlt	r3, r1
 800de4e:	460c      	mov	r4, r1
 800de50:	bfbc      	itt	lt
 800de52:	464c      	movlt	r4, r9
 800de54:	4699      	movlt	r9, r3
 800de56:	6927      	ldr	r7, [r4, #16]
 800de58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de5c:	68a3      	ldr	r3, [r4, #8]
 800de5e:	6861      	ldr	r1, [r4, #4]
 800de60:	eb07 060a 	add.w	r6, r7, sl
 800de64:	42b3      	cmp	r3, r6
 800de66:	b085      	sub	sp, #20
 800de68:	bfb8      	it	lt
 800de6a:	3101      	addlt	r1, #1
 800de6c:	f7ff ff0c 	bl	800dc88 <_Balloc>
 800de70:	b930      	cbnz	r0, 800de80 <__multiply+0x44>
 800de72:	4602      	mov	r2, r0
 800de74:	4b44      	ldr	r3, [pc, #272]	; (800df88 <__multiply+0x14c>)
 800de76:	4845      	ldr	r0, [pc, #276]	; (800df8c <__multiply+0x150>)
 800de78:	f240 115d 	movw	r1, #349	; 0x15d
 800de7c:	f000 fbf0 	bl	800e660 <__assert_func>
 800de80:	f100 0514 	add.w	r5, r0, #20
 800de84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de88:	462b      	mov	r3, r5
 800de8a:	2200      	movs	r2, #0
 800de8c:	4543      	cmp	r3, r8
 800de8e:	d321      	bcc.n	800ded4 <__multiply+0x98>
 800de90:	f104 0314 	add.w	r3, r4, #20
 800de94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de98:	f109 0314 	add.w	r3, r9, #20
 800de9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dea0:	9202      	str	r2, [sp, #8]
 800dea2:	1b3a      	subs	r2, r7, r4
 800dea4:	3a15      	subs	r2, #21
 800dea6:	f022 0203 	bic.w	r2, r2, #3
 800deaa:	3204      	adds	r2, #4
 800deac:	f104 0115 	add.w	r1, r4, #21
 800deb0:	428f      	cmp	r7, r1
 800deb2:	bf38      	it	cc
 800deb4:	2204      	movcc	r2, #4
 800deb6:	9201      	str	r2, [sp, #4]
 800deb8:	9a02      	ldr	r2, [sp, #8]
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	429a      	cmp	r2, r3
 800debe:	d80c      	bhi.n	800deda <__multiply+0x9e>
 800dec0:	2e00      	cmp	r6, #0
 800dec2:	dd03      	ble.n	800decc <__multiply+0x90>
 800dec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d05a      	beq.n	800df82 <__multiply+0x146>
 800decc:	6106      	str	r6, [r0, #16]
 800dece:	b005      	add	sp, #20
 800ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded4:	f843 2b04 	str.w	r2, [r3], #4
 800ded8:	e7d8      	b.n	800de8c <__multiply+0x50>
 800deda:	f8b3 a000 	ldrh.w	sl, [r3]
 800dede:	f1ba 0f00 	cmp.w	sl, #0
 800dee2:	d024      	beq.n	800df2e <__multiply+0xf2>
 800dee4:	f104 0e14 	add.w	lr, r4, #20
 800dee8:	46a9      	mov	r9, r5
 800deea:	f04f 0c00 	mov.w	ip, #0
 800deee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800def2:	f8d9 1000 	ldr.w	r1, [r9]
 800def6:	fa1f fb82 	uxth.w	fp, r2
 800defa:	b289      	uxth	r1, r1
 800defc:	fb0a 110b 	mla	r1, sl, fp, r1
 800df00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df04:	f8d9 2000 	ldr.w	r2, [r9]
 800df08:	4461      	add	r1, ip
 800df0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800df12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df16:	b289      	uxth	r1, r1
 800df18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df1c:	4577      	cmp	r7, lr
 800df1e:	f849 1b04 	str.w	r1, [r9], #4
 800df22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df26:	d8e2      	bhi.n	800deee <__multiply+0xb2>
 800df28:	9a01      	ldr	r2, [sp, #4]
 800df2a:	f845 c002 	str.w	ip, [r5, r2]
 800df2e:	9a03      	ldr	r2, [sp, #12]
 800df30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df34:	3304      	adds	r3, #4
 800df36:	f1b9 0f00 	cmp.w	r9, #0
 800df3a:	d020      	beq.n	800df7e <__multiply+0x142>
 800df3c:	6829      	ldr	r1, [r5, #0]
 800df3e:	f104 0c14 	add.w	ip, r4, #20
 800df42:	46ae      	mov	lr, r5
 800df44:	f04f 0a00 	mov.w	sl, #0
 800df48:	f8bc b000 	ldrh.w	fp, [ip]
 800df4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df50:	fb09 220b 	mla	r2, r9, fp, r2
 800df54:	4492      	add	sl, r2
 800df56:	b289      	uxth	r1, r1
 800df58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800df5c:	f84e 1b04 	str.w	r1, [lr], #4
 800df60:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df64:	f8be 1000 	ldrh.w	r1, [lr]
 800df68:	0c12      	lsrs	r2, r2, #16
 800df6a:	fb09 1102 	mla	r1, r9, r2, r1
 800df6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800df72:	4567      	cmp	r7, ip
 800df74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df78:	d8e6      	bhi.n	800df48 <__multiply+0x10c>
 800df7a:	9a01      	ldr	r2, [sp, #4]
 800df7c:	50a9      	str	r1, [r5, r2]
 800df7e:	3504      	adds	r5, #4
 800df80:	e79a      	b.n	800deb8 <__multiply+0x7c>
 800df82:	3e01      	subs	r6, #1
 800df84:	e79c      	b.n	800dec0 <__multiply+0x84>
 800df86:	bf00      	nop
 800df88:	08014735 	.word	0x08014735
 800df8c:	080147a1 	.word	0x080147a1

0800df90 <__pow5mult>:
 800df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df94:	4615      	mov	r5, r2
 800df96:	f012 0203 	ands.w	r2, r2, #3
 800df9a:	4606      	mov	r6, r0
 800df9c:	460f      	mov	r7, r1
 800df9e:	d007      	beq.n	800dfb0 <__pow5mult+0x20>
 800dfa0:	4c1a      	ldr	r4, [pc, #104]	; (800e00c <__pow5mult+0x7c>)
 800dfa2:	3a01      	subs	r2, #1
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfaa:	f7ff fe9b 	bl	800dce4 <__multadd>
 800dfae:	4607      	mov	r7, r0
 800dfb0:	10ad      	asrs	r5, r5, #2
 800dfb2:	d027      	beq.n	800e004 <__pow5mult+0x74>
 800dfb4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800dfb6:	b944      	cbnz	r4, 800dfca <__pow5mult+0x3a>
 800dfb8:	f240 2171 	movw	r1, #625	; 0x271
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7ff ff27 	bl	800de10 <__i2b>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	64b0      	str	r0, [r6, #72]	; 0x48
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	6003      	str	r3, [r0, #0]
 800dfca:	f04f 0900 	mov.w	r9, #0
 800dfce:	07eb      	lsls	r3, r5, #31
 800dfd0:	d50a      	bpl.n	800dfe8 <__pow5mult+0x58>
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f7ff ff30 	bl	800de3c <__multiply>
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4680      	mov	r8, r0
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7ff fe76 	bl	800dcd2 <_Bfree>
 800dfe6:	4647      	mov	r7, r8
 800dfe8:	106d      	asrs	r5, r5, #1
 800dfea:	d00b      	beq.n	800e004 <__pow5mult+0x74>
 800dfec:	6820      	ldr	r0, [r4, #0]
 800dfee:	b938      	cbnz	r0, 800e000 <__pow5mult+0x70>
 800dff0:	4622      	mov	r2, r4
 800dff2:	4621      	mov	r1, r4
 800dff4:	4630      	mov	r0, r6
 800dff6:	f7ff ff21 	bl	800de3c <__multiply>
 800dffa:	6020      	str	r0, [r4, #0]
 800dffc:	f8c0 9000 	str.w	r9, [r0]
 800e000:	4604      	mov	r4, r0
 800e002:	e7e4      	b.n	800dfce <__pow5mult+0x3e>
 800e004:	4638      	mov	r0, r7
 800e006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00a:	bf00      	nop
 800e00c:	080148f0 	.word	0x080148f0

0800e010 <__lshift>:
 800e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	460c      	mov	r4, r1
 800e016:	6849      	ldr	r1, [r1, #4]
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e01e:	68a3      	ldr	r3, [r4, #8]
 800e020:	4607      	mov	r7, r0
 800e022:	4691      	mov	r9, r2
 800e024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e028:	f108 0601 	add.w	r6, r8, #1
 800e02c:	42b3      	cmp	r3, r6
 800e02e:	db0b      	blt.n	800e048 <__lshift+0x38>
 800e030:	4638      	mov	r0, r7
 800e032:	f7ff fe29 	bl	800dc88 <_Balloc>
 800e036:	4605      	mov	r5, r0
 800e038:	b948      	cbnz	r0, 800e04e <__lshift+0x3e>
 800e03a:	4602      	mov	r2, r0
 800e03c:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <__lshift+0xd8>)
 800e03e:	482b      	ldr	r0, [pc, #172]	; (800e0ec <__lshift+0xdc>)
 800e040:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e044:	f000 fb0c 	bl	800e660 <__assert_func>
 800e048:	3101      	adds	r1, #1
 800e04a:	005b      	lsls	r3, r3, #1
 800e04c:	e7ee      	b.n	800e02c <__lshift+0x1c>
 800e04e:	2300      	movs	r3, #0
 800e050:	f100 0114 	add.w	r1, r0, #20
 800e054:	f100 0210 	add.w	r2, r0, #16
 800e058:	4618      	mov	r0, r3
 800e05a:	4553      	cmp	r3, sl
 800e05c:	db37      	blt.n	800e0ce <__lshift+0xbe>
 800e05e:	6920      	ldr	r0, [r4, #16]
 800e060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e064:	f104 0314 	add.w	r3, r4, #20
 800e068:	f019 091f 	ands.w	r9, r9, #31
 800e06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e070:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e074:	d02f      	beq.n	800e0d6 <__lshift+0xc6>
 800e076:	f1c9 0e20 	rsb	lr, r9, #32
 800e07a:	468a      	mov	sl, r1
 800e07c:	f04f 0c00 	mov.w	ip, #0
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	fa02 f209 	lsl.w	r2, r2, r9
 800e086:	ea42 020c 	orr.w	r2, r2, ip
 800e08a:	f84a 2b04 	str.w	r2, [sl], #4
 800e08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e092:	4298      	cmp	r0, r3
 800e094:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e098:	d8f2      	bhi.n	800e080 <__lshift+0x70>
 800e09a:	1b03      	subs	r3, r0, r4
 800e09c:	3b15      	subs	r3, #21
 800e09e:	f023 0303 	bic.w	r3, r3, #3
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	f104 0215 	add.w	r2, r4, #21
 800e0a8:	4290      	cmp	r0, r2
 800e0aa:	bf38      	it	cc
 800e0ac:	2304      	movcc	r3, #4
 800e0ae:	f841 c003 	str.w	ip, [r1, r3]
 800e0b2:	f1bc 0f00 	cmp.w	ip, #0
 800e0b6:	d001      	beq.n	800e0bc <__lshift+0xac>
 800e0b8:	f108 0602 	add.w	r6, r8, #2
 800e0bc:	3e01      	subs	r6, #1
 800e0be:	4638      	mov	r0, r7
 800e0c0:	612e      	str	r6, [r5, #16]
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	f7ff fe05 	bl	800dcd2 <_Bfree>
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	e7c1      	b.n	800e05a <__lshift+0x4a>
 800e0d6:	3904      	subs	r1, #4
 800e0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0e0:	4298      	cmp	r0, r3
 800e0e2:	d8f9      	bhi.n	800e0d8 <__lshift+0xc8>
 800e0e4:	e7ea      	b.n	800e0bc <__lshift+0xac>
 800e0e6:	bf00      	nop
 800e0e8:	08014735 	.word	0x08014735
 800e0ec:	080147a1 	.word	0x080147a1

0800e0f0 <__mcmp>:
 800e0f0:	b530      	push	{r4, r5, lr}
 800e0f2:	6902      	ldr	r2, [r0, #16]
 800e0f4:	690c      	ldr	r4, [r1, #16]
 800e0f6:	1b12      	subs	r2, r2, r4
 800e0f8:	d10e      	bne.n	800e118 <__mcmp+0x28>
 800e0fa:	f100 0314 	add.w	r3, r0, #20
 800e0fe:	3114      	adds	r1, #20
 800e100:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e104:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e108:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e10c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e110:	42a5      	cmp	r5, r4
 800e112:	d003      	beq.n	800e11c <__mcmp+0x2c>
 800e114:	d305      	bcc.n	800e122 <__mcmp+0x32>
 800e116:	2201      	movs	r2, #1
 800e118:	4610      	mov	r0, r2
 800e11a:	bd30      	pop	{r4, r5, pc}
 800e11c:	4283      	cmp	r3, r0
 800e11e:	d3f3      	bcc.n	800e108 <__mcmp+0x18>
 800e120:	e7fa      	b.n	800e118 <__mcmp+0x28>
 800e122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e126:	e7f7      	b.n	800e118 <__mcmp+0x28>

0800e128 <__mdiff>:
 800e128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	460c      	mov	r4, r1
 800e12e:	4606      	mov	r6, r0
 800e130:	4611      	mov	r1, r2
 800e132:	4620      	mov	r0, r4
 800e134:	4690      	mov	r8, r2
 800e136:	f7ff ffdb 	bl	800e0f0 <__mcmp>
 800e13a:	1e05      	subs	r5, r0, #0
 800e13c:	d110      	bne.n	800e160 <__mdiff+0x38>
 800e13e:	4629      	mov	r1, r5
 800e140:	4630      	mov	r0, r6
 800e142:	f7ff fda1 	bl	800dc88 <_Balloc>
 800e146:	b930      	cbnz	r0, 800e156 <__mdiff+0x2e>
 800e148:	4b3a      	ldr	r3, [pc, #232]	; (800e234 <__mdiff+0x10c>)
 800e14a:	4602      	mov	r2, r0
 800e14c:	f240 2132 	movw	r1, #562	; 0x232
 800e150:	4839      	ldr	r0, [pc, #228]	; (800e238 <__mdiff+0x110>)
 800e152:	f000 fa85 	bl	800e660 <__assert_func>
 800e156:	2301      	movs	r3, #1
 800e158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e15c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e160:	bfa4      	itt	ge
 800e162:	4643      	movge	r3, r8
 800e164:	46a0      	movge	r8, r4
 800e166:	4630      	mov	r0, r6
 800e168:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e16c:	bfa6      	itte	ge
 800e16e:	461c      	movge	r4, r3
 800e170:	2500      	movge	r5, #0
 800e172:	2501      	movlt	r5, #1
 800e174:	f7ff fd88 	bl	800dc88 <_Balloc>
 800e178:	b920      	cbnz	r0, 800e184 <__mdiff+0x5c>
 800e17a:	4b2e      	ldr	r3, [pc, #184]	; (800e234 <__mdiff+0x10c>)
 800e17c:	4602      	mov	r2, r0
 800e17e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e182:	e7e5      	b.n	800e150 <__mdiff+0x28>
 800e184:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e188:	6926      	ldr	r6, [r4, #16]
 800e18a:	60c5      	str	r5, [r0, #12]
 800e18c:	f104 0914 	add.w	r9, r4, #20
 800e190:	f108 0514 	add.w	r5, r8, #20
 800e194:	f100 0e14 	add.w	lr, r0, #20
 800e198:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e19c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1a0:	f108 0210 	add.w	r2, r8, #16
 800e1a4:	46f2      	mov	sl, lr
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1b0:	fa1f f883 	uxth.w	r8, r3
 800e1b4:	fa11 f18b 	uxtah	r1, r1, fp
 800e1b8:	0c1b      	lsrs	r3, r3, #16
 800e1ba:	eba1 0808 	sub.w	r8, r1, r8
 800e1be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1c6:	fa1f f888 	uxth.w	r8, r8
 800e1ca:	1419      	asrs	r1, r3, #16
 800e1cc:	454e      	cmp	r6, r9
 800e1ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1d2:	f84a 3b04 	str.w	r3, [sl], #4
 800e1d6:	d8e7      	bhi.n	800e1a8 <__mdiff+0x80>
 800e1d8:	1b33      	subs	r3, r6, r4
 800e1da:	3b15      	subs	r3, #21
 800e1dc:	f023 0303 	bic.w	r3, r3, #3
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	3415      	adds	r4, #21
 800e1e4:	42a6      	cmp	r6, r4
 800e1e6:	bf38      	it	cc
 800e1e8:	2304      	movcc	r3, #4
 800e1ea:	441d      	add	r5, r3
 800e1ec:	4473      	add	r3, lr
 800e1ee:	469e      	mov	lr, r3
 800e1f0:	462e      	mov	r6, r5
 800e1f2:	4566      	cmp	r6, ip
 800e1f4:	d30e      	bcc.n	800e214 <__mdiff+0xec>
 800e1f6:	f10c 0203 	add.w	r2, ip, #3
 800e1fa:	1b52      	subs	r2, r2, r5
 800e1fc:	f022 0203 	bic.w	r2, r2, #3
 800e200:	3d03      	subs	r5, #3
 800e202:	45ac      	cmp	ip, r5
 800e204:	bf38      	it	cc
 800e206:	2200      	movcc	r2, #0
 800e208:	441a      	add	r2, r3
 800e20a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e20e:	b17b      	cbz	r3, 800e230 <__mdiff+0x108>
 800e210:	6107      	str	r7, [r0, #16]
 800e212:	e7a3      	b.n	800e15c <__mdiff+0x34>
 800e214:	f856 8b04 	ldr.w	r8, [r6], #4
 800e218:	fa11 f288 	uxtah	r2, r1, r8
 800e21c:	1414      	asrs	r4, r2, #16
 800e21e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e222:	b292      	uxth	r2, r2
 800e224:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e228:	f84e 2b04 	str.w	r2, [lr], #4
 800e22c:	1421      	asrs	r1, r4, #16
 800e22e:	e7e0      	b.n	800e1f2 <__mdiff+0xca>
 800e230:	3f01      	subs	r7, #1
 800e232:	e7ea      	b.n	800e20a <__mdiff+0xe2>
 800e234:	08014735 	.word	0x08014735
 800e238:	080147a1 	.word	0x080147a1

0800e23c <__d2b>:
 800e23c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e240:	4689      	mov	r9, r1
 800e242:	2101      	movs	r1, #1
 800e244:	ec57 6b10 	vmov	r6, r7, d0
 800e248:	4690      	mov	r8, r2
 800e24a:	f7ff fd1d 	bl	800dc88 <_Balloc>
 800e24e:	4604      	mov	r4, r0
 800e250:	b930      	cbnz	r0, 800e260 <__d2b+0x24>
 800e252:	4602      	mov	r2, r0
 800e254:	4b25      	ldr	r3, [pc, #148]	; (800e2ec <__d2b+0xb0>)
 800e256:	4826      	ldr	r0, [pc, #152]	; (800e2f0 <__d2b+0xb4>)
 800e258:	f240 310a 	movw	r1, #778	; 0x30a
 800e25c:	f000 fa00 	bl	800e660 <__assert_func>
 800e260:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e268:	bb35      	cbnz	r5, 800e2b8 <__d2b+0x7c>
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	d028      	beq.n	800e2c2 <__d2b+0x86>
 800e270:	4668      	mov	r0, sp
 800e272:	9600      	str	r6, [sp, #0]
 800e274:	f7ff fd9c 	bl	800ddb0 <__lo0bits>
 800e278:	9900      	ldr	r1, [sp, #0]
 800e27a:	b300      	cbz	r0, 800e2be <__d2b+0x82>
 800e27c:	9a01      	ldr	r2, [sp, #4]
 800e27e:	f1c0 0320 	rsb	r3, r0, #32
 800e282:	fa02 f303 	lsl.w	r3, r2, r3
 800e286:	430b      	orrs	r3, r1
 800e288:	40c2      	lsrs	r2, r0
 800e28a:	6163      	str	r3, [r4, #20]
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	61a3      	str	r3, [r4, #24]
 800e292:	2b00      	cmp	r3, #0
 800e294:	bf14      	ite	ne
 800e296:	2202      	movne	r2, #2
 800e298:	2201      	moveq	r2, #1
 800e29a:	6122      	str	r2, [r4, #16]
 800e29c:	b1d5      	cbz	r5, 800e2d4 <__d2b+0x98>
 800e29e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2a2:	4405      	add	r5, r0
 800e2a4:	f8c9 5000 	str.w	r5, [r9]
 800e2a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2ac:	f8c8 0000 	str.w	r0, [r8]
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	b003      	add	sp, #12
 800e2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2bc:	e7d5      	b.n	800e26a <__d2b+0x2e>
 800e2be:	6161      	str	r1, [r4, #20]
 800e2c0:	e7e5      	b.n	800e28e <__d2b+0x52>
 800e2c2:	a801      	add	r0, sp, #4
 800e2c4:	f7ff fd74 	bl	800ddb0 <__lo0bits>
 800e2c8:	9b01      	ldr	r3, [sp, #4]
 800e2ca:	6163      	str	r3, [r4, #20]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	6122      	str	r2, [r4, #16]
 800e2d0:	3020      	adds	r0, #32
 800e2d2:	e7e3      	b.n	800e29c <__d2b+0x60>
 800e2d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2dc:	f8c9 0000 	str.w	r0, [r9]
 800e2e0:	6918      	ldr	r0, [r3, #16]
 800e2e2:	f7ff fd45 	bl	800dd70 <__hi0bits>
 800e2e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2ea:	e7df      	b.n	800e2ac <__d2b+0x70>
 800e2ec:	08014735 	.word	0x08014735
 800e2f0:	080147a1 	.word	0x080147a1

0800e2f4 <frexp>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	ec55 4b10 	vmov	r4, r5, d0
 800e2fc:	6001      	str	r1, [r0, #0]
 800e2fe:	4916      	ldr	r1, [pc, #88]	; (800e358 <frexp+0x64>)
 800e300:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800e304:	428a      	cmp	r2, r1
 800e306:	4606      	mov	r6, r0
 800e308:	462b      	mov	r3, r5
 800e30a:	dc22      	bgt.n	800e352 <frexp+0x5e>
 800e30c:	ee10 1a10 	vmov	r1, s0
 800e310:	4311      	orrs	r1, r2
 800e312:	d01e      	beq.n	800e352 <frexp+0x5e>
 800e314:	4911      	ldr	r1, [pc, #68]	; (800e35c <frexp+0x68>)
 800e316:	4029      	ands	r1, r5
 800e318:	b969      	cbnz	r1, 800e336 <frexp+0x42>
 800e31a:	4b11      	ldr	r3, [pc, #68]	; (800e360 <frexp+0x6c>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	ee10 0a10 	vmov	r0, s0
 800e322:	4629      	mov	r1, r5
 800e324:	f7f2 f968 	bl	80005f8 <__aeabi_dmul>
 800e328:	460b      	mov	r3, r1
 800e32a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e32e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800e332:	4604      	mov	r4, r0
 800e334:	6031      	str	r1, [r6, #0]
 800e336:	6831      	ldr	r1, [r6, #0]
 800e338:	1512      	asrs	r2, r2, #20
 800e33a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e33e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800e342:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e346:	440a      	add	r2, r1
 800e348:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800e34c:	6032      	str	r2, [r6, #0]
 800e34e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800e352:	ec45 4b10 	vmov	d0, r4, r5
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	7fefffff 	.word	0x7fefffff
 800e35c:	7ff00000 	.word	0x7ff00000
 800e360:	43500000 	.word	0x43500000

0800e364 <__sread>:
 800e364:	b510      	push	{r4, lr}
 800e366:	460c      	mov	r4, r1
 800e368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e36c:	f000 fb90 	bl	800ea90 <_read_r>
 800e370:	2800      	cmp	r0, #0
 800e372:	bfab      	itete	ge
 800e374:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800e376:	89a3      	ldrhlt	r3, [r4, #12]
 800e378:	181b      	addge	r3, r3, r0
 800e37a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e37e:	bfac      	ite	ge
 800e380:	6523      	strge	r3, [r4, #80]	; 0x50
 800e382:	81a3      	strhlt	r3, [r4, #12]
 800e384:	bd10      	pop	{r4, pc}

0800e386 <__swrite>:
 800e386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38a:	461f      	mov	r7, r3
 800e38c:	898b      	ldrh	r3, [r1, #12]
 800e38e:	05db      	lsls	r3, r3, #23
 800e390:	4605      	mov	r5, r0
 800e392:	460c      	mov	r4, r1
 800e394:	4616      	mov	r6, r2
 800e396:	d505      	bpl.n	800e3a4 <__swrite+0x1e>
 800e398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39c:	2302      	movs	r3, #2
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f000 fae6 	bl	800e970 <_lseek_r>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3ae:	81a3      	strh	r3, [r4, #12]
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	463b      	mov	r3, r7
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ba:	f000 b8a5 	b.w	800e508 <_write_r>

0800e3be <__sseek>:
 800e3be:	b510      	push	{r4, lr}
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c6:	f000 fad3 	bl	800e970 <_lseek_r>
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	bf15      	itete	ne
 800e3d0:	6520      	strne	r0, [r4, #80]	; 0x50
 800e3d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3da:	81a3      	strheq	r3, [r4, #12]
 800e3dc:	bf18      	it	ne
 800e3de:	81a3      	strhne	r3, [r4, #12]
 800e3e0:	bd10      	pop	{r4, pc}

0800e3e2 <__sclose>:
 800e3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e6:	f000 b98f 	b.w	800e708 <_close_r>

0800e3ea <strncpy>:
 800e3ea:	b510      	push	{r4, lr}
 800e3ec:	3901      	subs	r1, #1
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	b132      	cbz	r2, 800e400 <strncpy+0x16>
 800e3f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e3f6:	f803 4b01 	strb.w	r4, [r3], #1
 800e3fa:	3a01      	subs	r2, #1
 800e3fc:	2c00      	cmp	r4, #0
 800e3fe:	d1f7      	bne.n	800e3f0 <strncpy+0x6>
 800e400:	441a      	add	r2, r3
 800e402:	2100      	movs	r1, #0
 800e404:	4293      	cmp	r3, r2
 800e406:	d100      	bne.n	800e40a <strncpy+0x20>
 800e408:	bd10      	pop	{r4, pc}
 800e40a:	f803 1b01 	strb.w	r1, [r3], #1
 800e40e:	e7f9      	b.n	800e404 <strncpy+0x1a>

0800e410 <__ssprint_r>:
 800e410:	6893      	ldr	r3, [r2, #8]
 800e412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e416:	4680      	mov	r8, r0
 800e418:	460c      	mov	r4, r1
 800e41a:	4617      	mov	r7, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d061      	beq.n	800e4e4 <__ssprint_r+0xd4>
 800e420:	2300      	movs	r3, #0
 800e422:	f8d2 a000 	ldr.w	sl, [r2]
 800e426:	9301      	str	r3, [sp, #4]
 800e428:	469b      	mov	fp, r3
 800e42a:	f1bb 0f00 	cmp.w	fp, #0
 800e42e:	d02b      	beq.n	800e488 <__ssprint_r+0x78>
 800e430:	68a6      	ldr	r6, [r4, #8]
 800e432:	455e      	cmp	r6, fp
 800e434:	d844      	bhi.n	800e4c0 <__ssprint_r+0xb0>
 800e436:	89a2      	ldrh	r2, [r4, #12]
 800e438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e43c:	d03e      	beq.n	800e4bc <__ssprint_r+0xac>
 800e43e:	6820      	ldr	r0, [r4, #0]
 800e440:	6921      	ldr	r1, [r4, #16]
 800e442:	6965      	ldr	r5, [r4, #20]
 800e444:	eba0 0901 	sub.w	r9, r0, r1
 800e448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e44c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e450:	f109 0001 	add.w	r0, r9, #1
 800e454:	106d      	asrs	r5, r5, #1
 800e456:	4458      	add	r0, fp
 800e458:	4285      	cmp	r5, r0
 800e45a:	bf38      	it	cc
 800e45c:	4605      	movcc	r5, r0
 800e45e:	0553      	lsls	r3, r2, #21
 800e460:	d545      	bpl.n	800e4ee <__ssprint_r+0xde>
 800e462:	4629      	mov	r1, r5
 800e464:	4640      	mov	r0, r8
 800e466:	f7fc fc05 	bl	800ac74 <_malloc_r>
 800e46a:	4606      	mov	r6, r0
 800e46c:	b9a0      	cbnz	r0, 800e498 <__ssprint_r+0x88>
 800e46e:	230c      	movs	r3, #12
 800e470:	f8c8 3000 	str.w	r3, [r8]
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e47a:	81a3      	strh	r3, [r4, #12]
 800e47c:	2300      	movs	r3, #0
 800e47e:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800e482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e486:	e02f      	b.n	800e4e8 <__ssprint_r+0xd8>
 800e488:	f8da 3000 	ldr.w	r3, [sl]
 800e48c:	f8da b004 	ldr.w	fp, [sl, #4]
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	f10a 0a08 	add.w	sl, sl, #8
 800e496:	e7c8      	b.n	800e42a <__ssprint_r+0x1a>
 800e498:	464a      	mov	r2, r9
 800e49a:	6921      	ldr	r1, [r4, #16]
 800e49c:	f7fc fe26 	bl	800b0ec <memcpy>
 800e4a0:	89a2      	ldrh	r2, [r4, #12]
 800e4a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e4a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e4aa:	81a2      	strh	r2, [r4, #12]
 800e4ac:	6126      	str	r6, [r4, #16]
 800e4ae:	6165      	str	r5, [r4, #20]
 800e4b0:	444e      	add	r6, r9
 800e4b2:	eba5 0509 	sub.w	r5, r5, r9
 800e4b6:	6026      	str	r6, [r4, #0]
 800e4b8:	60a5      	str	r5, [r4, #8]
 800e4ba:	465e      	mov	r6, fp
 800e4bc:	455e      	cmp	r6, fp
 800e4be:	d900      	bls.n	800e4c2 <__ssprint_r+0xb2>
 800e4c0:	465e      	mov	r6, fp
 800e4c2:	4632      	mov	r2, r6
 800e4c4:	9901      	ldr	r1, [sp, #4]
 800e4c6:	6820      	ldr	r0, [r4, #0]
 800e4c8:	f7ff fbc4 	bl	800dc54 <memmove>
 800e4cc:	68a2      	ldr	r2, [r4, #8]
 800e4ce:	1b92      	subs	r2, r2, r6
 800e4d0:	60a2      	str	r2, [r4, #8]
 800e4d2:	6822      	ldr	r2, [r4, #0]
 800e4d4:	4432      	add	r2, r6
 800e4d6:	6022      	str	r2, [r4, #0]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	eba2 030b 	sub.w	r3, r2, fp
 800e4de:	60bb      	str	r3, [r7, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1d1      	bne.n	800e488 <__ssprint_r+0x78>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	b003      	add	sp, #12
 800e4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ee:	462a      	mov	r2, r5
 800e4f0:	4640      	mov	r0, r8
 800e4f2:	f7fc fe6b 	bl	800b1cc <_realloc_r>
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d1d7      	bne.n	800e4ac <__ssprint_r+0x9c>
 800e4fc:	6921      	ldr	r1, [r4, #16]
 800e4fe:	4640      	mov	r0, r8
 800e500:	f7ff f976 	bl	800d7f0 <_free_r>
 800e504:	e7b3      	b.n	800e46e <__ssprint_r+0x5e>
	...

0800e508 <_write_r>:
 800e508:	b538      	push	{r3, r4, r5, lr}
 800e50a:	4d07      	ldr	r5, [pc, #28]	; (800e528 <_write_r+0x20>)
 800e50c:	4604      	mov	r4, r0
 800e50e:	4608      	mov	r0, r1
 800e510:	4611      	mov	r1, r2
 800e512:	2200      	movs	r2, #0
 800e514:	602a      	str	r2, [r5, #0]
 800e516:	461a      	mov	r2, r3
 800e518:	f001 f954 	bl	800f7c4 <_write>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	d102      	bne.n	800e526 <_write_r+0x1e>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	b103      	cbz	r3, 800e526 <_write_r+0x1e>
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	bd38      	pop	{r3, r4, r5, pc}
 800e528:	200019cc 	.word	0x200019cc

0800e52c <__swsetup_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	4b2a      	ldr	r3, [pc, #168]	; (800e5d8 <__swsetup_r+0xac>)
 800e530:	4605      	mov	r5, r0
 800e532:	6818      	ldr	r0, [r3, #0]
 800e534:	460c      	mov	r4, r1
 800e536:	b118      	cbz	r0, 800e540 <__swsetup_r+0x14>
 800e538:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e53a:	b90b      	cbnz	r3, 800e540 <__swsetup_r+0x14>
 800e53c:	f7ff f8c8 	bl	800d6d0 <__sinit>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e546:	0718      	lsls	r0, r3, #28
 800e548:	d422      	bmi.n	800e590 <__swsetup_r+0x64>
 800e54a:	06d9      	lsls	r1, r3, #27
 800e54c:	d407      	bmi.n	800e55e <__swsetup_r+0x32>
 800e54e:	2309      	movs	r3, #9
 800e550:	602b      	str	r3, [r5, #0]
 800e552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e556:	81a3      	strh	r3, [r4, #12]
 800e558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e55c:	e034      	b.n	800e5c8 <__swsetup_r+0x9c>
 800e55e:	0758      	lsls	r0, r3, #29
 800e560:	d512      	bpl.n	800e588 <__swsetup_r+0x5c>
 800e562:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e564:	b141      	cbz	r1, 800e578 <__swsetup_r+0x4c>
 800e566:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e56a:	4299      	cmp	r1, r3
 800e56c:	d002      	beq.n	800e574 <__swsetup_r+0x48>
 800e56e:	4628      	mov	r0, r5
 800e570:	f7ff f93e 	bl	800d7f0 <_free_r>
 800e574:	2300      	movs	r3, #0
 800e576:	6323      	str	r3, [r4, #48]	; 0x30
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e57e:	81a3      	strh	r3, [r4, #12]
 800e580:	2300      	movs	r3, #0
 800e582:	6063      	str	r3, [r4, #4]
 800e584:	6923      	ldr	r3, [r4, #16]
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f043 0308 	orr.w	r3, r3, #8
 800e58e:	81a3      	strh	r3, [r4, #12]
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	b94b      	cbnz	r3, 800e5a8 <__swsetup_r+0x7c>
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e59a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e59e:	d003      	beq.n	800e5a8 <__swsetup_r+0x7c>
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f000 fa22 	bl	800e9ec <__smakebuf_r>
 800e5a8:	89a0      	ldrh	r0, [r4, #12]
 800e5aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5ae:	f010 0301 	ands.w	r3, r0, #1
 800e5b2:	d00a      	beq.n	800e5ca <__swsetup_r+0x9e>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	60a3      	str	r3, [r4, #8]
 800e5b8:	6963      	ldr	r3, [r4, #20]
 800e5ba:	425b      	negs	r3, r3
 800e5bc:	61a3      	str	r3, [r4, #24]
 800e5be:	6923      	ldr	r3, [r4, #16]
 800e5c0:	b943      	cbnz	r3, 800e5d4 <__swsetup_r+0xa8>
 800e5c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5c6:	d1c4      	bne.n	800e552 <__swsetup_r+0x26>
 800e5c8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ca:	0781      	lsls	r1, r0, #30
 800e5cc:	bf58      	it	pl
 800e5ce:	6963      	ldrpl	r3, [r4, #20]
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	e7f4      	b.n	800e5be <__swsetup_r+0x92>
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	e7f7      	b.n	800e5c8 <__swsetup_r+0x9c>
 800e5d8:	20000750 	.word	0x20000750

0800e5dc <__register_exitproc>:
 800e5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e0:	f8df a078 	ldr.w	sl, [pc, #120]	; 800e65c <__register_exitproc+0x80>
 800e5e4:	4606      	mov	r6, r0
 800e5e6:	f8da 0000 	ldr.w	r0, [sl]
 800e5ea:	4698      	mov	r8, r3
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	4691      	mov	r9, r2
 800e5f0:	f7ff fb2e 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800e5f4:	4b18      	ldr	r3, [pc, #96]	; (800e658 <__register_exitproc+0x7c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800e5fc:	b91c      	cbnz	r4, 800e606 <__register_exitproc+0x2a>
 800e5fe:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800e602:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800e606:	6865      	ldr	r5, [r4, #4]
 800e608:	f8da 0000 	ldr.w	r0, [sl]
 800e60c:	2d1f      	cmp	r5, #31
 800e60e:	dd05      	ble.n	800e61c <__register_exitproc+0x40>
 800e610:	f7ff fb1f 	bl	800dc52 <__retarget_lock_release_recursive>
 800e614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e61c:	b19e      	cbz	r6, 800e646 <__register_exitproc+0x6a>
 800e61e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e622:	2201      	movs	r2, #1
 800e624:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800e628:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800e62c:	40aa      	lsls	r2, r5
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800e634:	2e02      	cmp	r6, #2
 800e636:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800e63a:	bf02      	ittt	eq
 800e63c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800e640:	4313      	orreq	r3, r2
 800e642:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800e646:	1c6b      	adds	r3, r5, #1
 800e648:	3502      	adds	r5, #2
 800e64a:	6063      	str	r3, [r4, #4]
 800e64c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e650:	f7ff faff 	bl	800dc52 <__retarget_lock_release_recursive>
 800e654:	2000      	movs	r0, #0
 800e656:	e7df      	b.n	800e618 <__register_exitproc+0x3c>
 800e658:	080146d0 	.word	0x080146d0
 800e65c:	20000f90 	.word	0x20000f90

0800e660 <__assert_func>:
 800e660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e662:	4614      	mov	r4, r2
 800e664:	461a      	mov	r2, r3
 800e666:	4b09      	ldr	r3, [pc, #36]	; (800e68c <__assert_func+0x2c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4605      	mov	r5, r0
 800e66c:	68d8      	ldr	r0, [r3, #12]
 800e66e:	b14c      	cbz	r4, 800e684 <__assert_func+0x24>
 800e670:	4b07      	ldr	r3, [pc, #28]	; (800e690 <__assert_func+0x30>)
 800e672:	9100      	str	r1, [sp, #0]
 800e674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e678:	4906      	ldr	r1, [pc, #24]	; (800e694 <__assert_func+0x34>)
 800e67a:	462b      	mov	r3, r5
 800e67c:	f000 f960 	bl	800e940 <fiprintf>
 800e680:	f000 ff2d 	bl	800f4de <abort>
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <__assert_func+0x38>)
 800e686:	461c      	mov	r4, r3
 800e688:	e7f3      	b.n	800e672 <__assert_func+0x12>
 800e68a:	bf00      	nop
 800e68c:	20000750 	.word	0x20000750
 800e690:	080148fc 	.word	0x080148fc
 800e694:	08014909 	.word	0x08014909
 800e698:	08014937 	.word	0x08014937

0800e69c <_calloc_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	fba1 1502 	umull	r1, r5, r1, r2
 800e6a2:	b92d      	cbnz	r5, 800e6b0 <_calloc_r+0x14>
 800e6a4:	f7fc fae6 	bl	800ac74 <_malloc_r>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	b938      	cbnz	r0, 800e6bc <_calloc_r+0x20>
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	f7fc fab6 	bl	800ac20 <__errno>
 800e6b4:	230c      	movs	r3, #12
 800e6b6:	6003      	str	r3, [r0, #0]
 800e6b8:	2400      	movs	r4, #0
 800e6ba:	e7f7      	b.n	800e6ac <_calloc_r+0x10>
 800e6bc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e6c0:	f022 0203 	bic.w	r2, r2, #3
 800e6c4:	3a04      	subs	r2, #4
 800e6c6:	2a24      	cmp	r2, #36	; 0x24
 800e6c8:	d819      	bhi.n	800e6fe <_calloc_r+0x62>
 800e6ca:	2a13      	cmp	r2, #19
 800e6cc:	d915      	bls.n	800e6fa <_calloc_r+0x5e>
 800e6ce:	2a1b      	cmp	r2, #27
 800e6d0:	e9c0 5500 	strd	r5, r5, [r0]
 800e6d4:	d806      	bhi.n	800e6e4 <_calloc_r+0x48>
 800e6d6:	f100 0308 	add.w	r3, r0, #8
 800e6da:	2200      	movs	r2, #0
 800e6dc:	e9c3 2200 	strd	r2, r2, [r3]
 800e6e0:	609a      	str	r2, [r3, #8]
 800e6e2:	e7e3      	b.n	800e6ac <_calloc_r+0x10>
 800e6e4:	2a24      	cmp	r2, #36	; 0x24
 800e6e6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e6ea:	bf11      	iteee	ne
 800e6ec:	f100 0310 	addne.w	r3, r0, #16
 800e6f0:	6105      	streq	r5, [r0, #16]
 800e6f2:	f100 0318 	addeq.w	r3, r0, #24
 800e6f6:	6145      	streq	r5, [r0, #20]
 800e6f8:	e7ef      	b.n	800e6da <_calloc_r+0x3e>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e7ed      	b.n	800e6da <_calloc_r+0x3e>
 800e6fe:	4629      	mov	r1, r5
 800e700:	f7fc fd02 	bl	800b108 <memset>
 800e704:	e7d2      	b.n	800e6ac <_calloc_r+0x10>
	...

0800e708 <_close_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4d06      	ldr	r5, [pc, #24]	; (800e724 <_close_r+0x1c>)
 800e70c:	2300      	movs	r3, #0
 800e70e:	4604      	mov	r4, r0
 800e710:	4608      	mov	r0, r1
 800e712:	602b      	str	r3, [r5, #0]
 800e714:	f001 f81e 	bl	800f754 <_close>
 800e718:	1c43      	adds	r3, r0, #1
 800e71a:	d102      	bne.n	800e722 <_close_r+0x1a>
 800e71c:	682b      	ldr	r3, [r5, #0]
 800e71e:	b103      	cbz	r3, 800e722 <_close_r+0x1a>
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	bd38      	pop	{r3, r4, r5, pc}
 800e724:	200019cc 	.word	0x200019cc

0800e728 <_fclose_r>:
 800e728:	b570      	push	{r4, r5, r6, lr}
 800e72a:	4606      	mov	r6, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	b911      	cbnz	r1, 800e736 <_fclose_r+0xe>
 800e730:	2500      	movs	r5, #0
 800e732:	4628      	mov	r0, r5
 800e734:	bd70      	pop	{r4, r5, r6, pc}
 800e736:	b118      	cbz	r0, 800e740 <_fclose_r+0x18>
 800e738:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e73a:	b90b      	cbnz	r3, 800e740 <_fclose_r+0x18>
 800e73c:	f7fe ffc8 	bl	800d6d0 <__sinit>
 800e740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e742:	07d8      	lsls	r0, r3, #31
 800e744:	d405      	bmi.n	800e752 <_fclose_r+0x2a>
 800e746:	89a3      	ldrh	r3, [r4, #12]
 800e748:	0599      	lsls	r1, r3, #22
 800e74a:	d402      	bmi.n	800e752 <_fclose_r+0x2a>
 800e74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e74e:	f7ff fa7f 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800e752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e756:	b93b      	cbnz	r3, 800e768 <_fclose_r+0x40>
 800e758:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e75a:	f015 0501 	ands.w	r5, r5, #1
 800e75e:	d1e7      	bne.n	800e730 <_fclose_r+0x8>
 800e760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e762:	f7ff fa76 	bl	800dc52 <__retarget_lock_release_recursive>
 800e766:	e7e4      	b.n	800e732 <_fclose_r+0xa>
 800e768:	4621      	mov	r1, r4
 800e76a:	4630      	mov	r0, r6
 800e76c:	f000 f834 	bl	800e7d8 <__sflush_r>
 800e770:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e772:	4605      	mov	r5, r0
 800e774:	b133      	cbz	r3, 800e784 <_fclose_r+0x5c>
 800e776:	69e1      	ldr	r1, [r4, #28]
 800e778:	4630      	mov	r0, r6
 800e77a:	4798      	blx	r3
 800e77c:	2800      	cmp	r0, #0
 800e77e:	bfb8      	it	lt
 800e780:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	061a      	lsls	r2, r3, #24
 800e788:	d503      	bpl.n	800e792 <_fclose_r+0x6a>
 800e78a:	6921      	ldr	r1, [r4, #16]
 800e78c:	4630      	mov	r0, r6
 800e78e:	f7ff f82f 	bl	800d7f0 <_free_r>
 800e792:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e794:	b141      	cbz	r1, 800e7a8 <_fclose_r+0x80>
 800e796:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e79a:	4299      	cmp	r1, r3
 800e79c:	d002      	beq.n	800e7a4 <_fclose_r+0x7c>
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7ff f826 	bl	800d7f0 <_free_r>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800e7a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e7aa:	b121      	cbz	r1, 800e7b6 <_fclose_r+0x8e>
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff f81f 	bl	800d7f0 <_free_r>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6463      	str	r3, [r4, #68]	; 0x44
 800e7b6:	f7fe ff73 	bl	800d6a0 <__sfp_lock_acquire>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	81a3      	strh	r3, [r4, #12]
 800e7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7c0:	07db      	lsls	r3, r3, #31
 800e7c2:	d402      	bmi.n	800e7ca <_fclose_r+0xa2>
 800e7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7c6:	f7ff fa44 	bl	800dc52 <__retarget_lock_release_recursive>
 800e7ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7cc:	f7ff fa3f 	bl	800dc4e <__retarget_lock_close_recursive>
 800e7d0:	f7fe ff6c 	bl	800d6ac <__sfp_lock_release>
 800e7d4:	e7ad      	b.n	800e732 <_fclose_r+0xa>
	...

0800e7d8 <__sflush_r>:
 800e7d8:	898b      	ldrh	r3, [r1, #12]
 800e7da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	0718      	lsls	r0, r3, #28
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	d45f      	bmi.n	800e8aa <__sflush_r+0xd2>
 800e7ea:	684b      	ldr	r3, [r1, #4]
 800e7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	818a      	strh	r2, [r1, #12]
 800e7f4:	dc05      	bgt.n	800e802 <__sflush_r+0x2a>
 800e7f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dc02      	bgt.n	800e802 <__sflush_r+0x2a>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e804:	2e00      	cmp	r6, #0
 800e806:	d0f9      	beq.n	800e7fc <__sflush_r+0x24>
 800e808:	2300      	movs	r3, #0
 800e80a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e80e:	682f      	ldr	r7, [r5, #0]
 800e810:	602b      	str	r3, [r5, #0]
 800e812:	d036      	beq.n	800e882 <__sflush_r+0xaa>
 800e814:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	075a      	lsls	r2, r3, #29
 800e81a:	d505      	bpl.n	800e828 <__sflush_r+0x50>
 800e81c:	6863      	ldr	r3, [r4, #4]
 800e81e:	1ac0      	subs	r0, r0, r3
 800e820:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e822:	b10b      	cbz	r3, 800e828 <__sflush_r+0x50>
 800e824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e826:	1ac0      	subs	r0, r0, r3
 800e828:	2300      	movs	r3, #0
 800e82a:	4602      	mov	r2, r0
 800e82c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e82e:	69e1      	ldr	r1, [r4, #28]
 800e830:	4628      	mov	r0, r5
 800e832:	47b0      	blx	r6
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	89a3      	ldrh	r3, [r4, #12]
 800e838:	d106      	bne.n	800e848 <__sflush_r+0x70>
 800e83a:	6829      	ldr	r1, [r5, #0]
 800e83c:	291d      	cmp	r1, #29
 800e83e:	d830      	bhi.n	800e8a2 <__sflush_r+0xca>
 800e840:	4a2b      	ldr	r2, [pc, #172]	; (800e8f0 <__sflush_r+0x118>)
 800e842:	40ca      	lsrs	r2, r1
 800e844:	07d6      	lsls	r6, r2, #31
 800e846:	d52c      	bpl.n	800e8a2 <__sflush_r+0xca>
 800e848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e84c:	b21b      	sxth	r3, r3
 800e84e:	2200      	movs	r2, #0
 800e850:	6062      	str	r2, [r4, #4]
 800e852:	04d9      	lsls	r1, r3, #19
 800e854:	6922      	ldr	r2, [r4, #16]
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	6022      	str	r2, [r4, #0]
 800e85a:	d504      	bpl.n	800e866 <__sflush_r+0x8e>
 800e85c:	1c42      	adds	r2, r0, #1
 800e85e:	d101      	bne.n	800e864 <__sflush_r+0x8c>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b903      	cbnz	r3, 800e866 <__sflush_r+0x8e>
 800e864:	6520      	str	r0, [r4, #80]	; 0x50
 800e866:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e868:	602f      	str	r7, [r5, #0]
 800e86a:	2900      	cmp	r1, #0
 800e86c:	d0c6      	beq.n	800e7fc <__sflush_r+0x24>
 800e86e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e872:	4299      	cmp	r1, r3
 800e874:	d002      	beq.n	800e87c <__sflush_r+0xa4>
 800e876:	4628      	mov	r0, r5
 800e878:	f7fe ffba 	bl	800d7f0 <_free_r>
 800e87c:	2000      	movs	r0, #0
 800e87e:	6320      	str	r0, [r4, #48]	; 0x30
 800e880:	e7bd      	b.n	800e7fe <__sflush_r+0x26>
 800e882:	69e1      	ldr	r1, [r4, #28]
 800e884:	2301      	movs	r3, #1
 800e886:	4628      	mov	r0, r5
 800e888:	47b0      	blx	r6
 800e88a:	1c41      	adds	r1, r0, #1
 800e88c:	d1c3      	bne.n	800e816 <__sflush_r+0x3e>
 800e88e:	682b      	ldr	r3, [r5, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d0c0      	beq.n	800e816 <__sflush_r+0x3e>
 800e894:	2b1d      	cmp	r3, #29
 800e896:	d001      	beq.n	800e89c <__sflush_r+0xc4>
 800e898:	2b16      	cmp	r3, #22
 800e89a:	d101      	bne.n	800e8a0 <__sflush_r+0xc8>
 800e89c:	602f      	str	r7, [r5, #0]
 800e89e:	e7ad      	b.n	800e7fc <__sflush_r+0x24>
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a6:	81a3      	strh	r3, [r4, #12]
 800e8a8:	e7a9      	b.n	800e7fe <__sflush_r+0x26>
 800e8aa:	690f      	ldr	r7, [r1, #16]
 800e8ac:	2f00      	cmp	r7, #0
 800e8ae:	d0a5      	beq.n	800e7fc <__sflush_r+0x24>
 800e8b0:	079b      	lsls	r3, r3, #30
 800e8b2:	680e      	ldr	r6, [r1, #0]
 800e8b4:	bf08      	it	eq
 800e8b6:	694b      	ldreq	r3, [r1, #20]
 800e8b8:	600f      	str	r7, [r1, #0]
 800e8ba:	bf18      	it	ne
 800e8bc:	2300      	movne	r3, #0
 800e8be:	eba6 0807 	sub.w	r8, r6, r7
 800e8c2:	608b      	str	r3, [r1, #8]
 800e8c4:	f1b8 0f00 	cmp.w	r8, #0
 800e8c8:	dd98      	ble.n	800e7fc <__sflush_r+0x24>
 800e8ca:	69e1      	ldr	r1, [r4, #28]
 800e8cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e8ce:	4643      	mov	r3, r8
 800e8d0:	463a      	mov	r2, r7
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	47b0      	blx	r6
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	dc06      	bgt.n	800e8e8 <__sflush_r+0x110>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8e0:	81a3      	strh	r3, [r4, #12]
 800e8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8e6:	e78a      	b.n	800e7fe <__sflush_r+0x26>
 800e8e8:	4407      	add	r7, r0
 800e8ea:	eba8 0800 	sub.w	r8, r8, r0
 800e8ee:	e7e9      	b.n	800e8c4 <__sflush_r+0xec>
 800e8f0:	20400001 	.word	0x20400001

0800e8f4 <_fflush_r>:
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	b118      	cbz	r0, 800e904 <_fflush_r+0x10>
 800e8fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e8fe:	b90b      	cbnz	r3, 800e904 <_fflush_r+0x10>
 800e900:	f7fe fee6 	bl	800d6d0 <__sinit>
 800e904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e908:	b1bb      	cbz	r3, 800e93a <_fflush_r+0x46>
 800e90a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e90c:	07d0      	lsls	r0, r2, #31
 800e90e:	d404      	bmi.n	800e91a <_fflush_r+0x26>
 800e910:	0599      	lsls	r1, r3, #22
 800e912:	d402      	bmi.n	800e91a <_fflush_r+0x26>
 800e914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e916:	f7ff f99b 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800e91a:	4628      	mov	r0, r5
 800e91c:	4621      	mov	r1, r4
 800e91e:	f7ff ff5b 	bl	800e7d8 <__sflush_r>
 800e922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e924:	07da      	lsls	r2, r3, #31
 800e926:	4605      	mov	r5, r0
 800e928:	d405      	bmi.n	800e936 <_fflush_r+0x42>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	059b      	lsls	r3, r3, #22
 800e92e:	d402      	bmi.n	800e936 <_fflush_r+0x42>
 800e930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e932:	f7ff f98e 	bl	800dc52 <__retarget_lock_release_recursive>
 800e936:	4628      	mov	r0, r5
 800e938:	bd38      	pop	{r3, r4, r5, pc}
 800e93a:	461d      	mov	r5, r3
 800e93c:	e7fb      	b.n	800e936 <_fflush_r+0x42>
	...

0800e940 <fiprintf>:
 800e940:	b40e      	push	{r1, r2, r3}
 800e942:	b503      	push	{r0, r1, lr}
 800e944:	4601      	mov	r1, r0
 800e946:	ab03      	add	r3, sp, #12
 800e948:	4805      	ldr	r0, [pc, #20]	; (800e960 <fiprintf+0x20>)
 800e94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e94e:	6800      	ldr	r0, [r0, #0]
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	f000 f8e1 	bl	800eb18 <_vfiprintf_r>
 800e956:	b002      	add	sp, #8
 800e958:	f85d eb04 	ldr.w	lr, [sp], #4
 800e95c:	b003      	add	sp, #12
 800e95e:	4770      	bx	lr
 800e960:	20000750 	.word	0x20000750

0800e964 <__locale_mb_cur_max>:
 800e964:	4b01      	ldr	r3, [pc, #4]	; (800e96c <__locale_mb_cur_max+0x8>)
 800e966:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800e96a:	4770      	bx	lr
 800e96c:	20000f94 	.word	0x20000f94

0800e970 <_lseek_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	4d07      	ldr	r5, [pc, #28]	; (800e990 <_lseek_r+0x20>)
 800e974:	4604      	mov	r4, r0
 800e976:	4608      	mov	r0, r1
 800e978:	4611      	mov	r1, r2
 800e97a:	2200      	movs	r2, #0
 800e97c:	602a      	str	r2, [r5, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	f000 ff10 	bl	800f7a4 <_lseek>
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	d102      	bne.n	800e98e <_lseek_r+0x1e>
 800e988:	682b      	ldr	r3, [r5, #0]
 800e98a:	b103      	cbz	r3, 800e98e <_lseek_r+0x1e>
 800e98c:	6023      	str	r3, [r4, #0]
 800e98e:	bd38      	pop	{r3, r4, r5, pc}
 800e990:	200019cc 	.word	0x200019cc

0800e994 <__swhatbuf_r>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	460e      	mov	r6, r1
 800e998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e99c:	2900      	cmp	r1, #0
 800e99e:	b096      	sub	sp, #88	; 0x58
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	461d      	mov	r5, r3
 800e9a4:	da0a      	bge.n	800e9bc <__swhatbuf_r+0x28>
 800e9a6:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800e9b0:	602b      	str	r3, [r5, #0]
 800e9b2:	d116      	bne.n	800e9e2 <__swhatbuf_r+0x4e>
 800e9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	e015      	b.n	800e9e8 <__swhatbuf_r+0x54>
 800e9bc:	466a      	mov	r2, sp
 800e9be:	f000 fe01 	bl	800f5c4 <_fstat_r>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	dbef      	blt.n	800e9a6 <__swhatbuf_r+0x12>
 800e9c6:	9a01      	ldr	r2, [sp, #4]
 800e9c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9d0:	425a      	negs	r2, r3
 800e9d2:	415a      	adcs	r2, r3
 800e9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9d8:	602a      	str	r2, [r5, #0]
 800e9da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e9de:	6023      	str	r3, [r4, #0]
 800e9e0:	e002      	b.n	800e9e8 <__swhatbuf_r+0x54>
 800e9e2:	2240      	movs	r2, #64	; 0x40
 800e9e4:	6022      	str	r2, [r4, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	b016      	add	sp, #88	; 0x58
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}

0800e9ec <__smakebuf_r>:
 800e9ec:	898b      	ldrh	r3, [r1, #12]
 800e9ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9f0:	079d      	lsls	r5, r3, #30
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	d507      	bpl.n	800ea08 <__smakebuf_r+0x1c>
 800e9f8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	6123      	str	r3, [r4, #16]
 800ea00:	2301      	movs	r3, #1
 800ea02:	6163      	str	r3, [r4, #20]
 800ea04:	b002      	add	sp, #8
 800ea06:	bd70      	pop	{r4, r5, r6, pc}
 800ea08:	ab01      	add	r3, sp, #4
 800ea0a:	466a      	mov	r2, sp
 800ea0c:	f7ff ffc2 	bl	800e994 <__swhatbuf_r>
 800ea10:	9900      	ldr	r1, [sp, #0]
 800ea12:	4605      	mov	r5, r0
 800ea14:	4630      	mov	r0, r6
 800ea16:	f7fc f92d 	bl	800ac74 <_malloc_r>
 800ea1a:	b948      	cbnz	r0, 800ea30 <__smakebuf_r+0x44>
 800ea1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea20:	059a      	lsls	r2, r3, #22
 800ea22:	d4ef      	bmi.n	800ea04 <__smakebuf_r+0x18>
 800ea24:	f023 0303 	bic.w	r3, r3, #3
 800ea28:	f043 0302 	orr.w	r3, r3, #2
 800ea2c:	81a3      	strh	r3, [r4, #12]
 800ea2e:	e7e3      	b.n	800e9f8 <__smakebuf_r+0xc>
 800ea30:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <__smakebuf_r+0x7c>)
 800ea32:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ea34:	89a3      	ldrh	r3, [r4, #12]
 800ea36:	6020      	str	r0, [r4, #0]
 800ea38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	9b00      	ldr	r3, [sp, #0]
 800ea40:	6163      	str	r3, [r4, #20]
 800ea42:	9b01      	ldr	r3, [sp, #4]
 800ea44:	6120      	str	r0, [r4, #16]
 800ea46:	b15b      	cbz	r3, 800ea60 <__smakebuf_r+0x74>
 800ea48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f000 fdcb 	bl	800f5e8 <_isatty_r>
 800ea52:	b128      	cbz	r0, 800ea60 <__smakebuf_r+0x74>
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	f023 0303 	bic.w	r3, r3, #3
 800ea5a:	f043 0301 	orr.w	r3, r3, #1
 800ea5e:	81a3      	strh	r3, [r4, #12]
 800ea60:	89a0      	ldrh	r0, [r4, #12]
 800ea62:	4305      	orrs	r5, r0
 800ea64:	81a5      	strh	r5, [r4, #12]
 800ea66:	e7cd      	b.n	800ea04 <__smakebuf_r+0x18>
 800ea68:	0800d695 	.word	0x0800d695

0800ea6c <__ascii_mbtowc>:
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	b901      	cbnz	r1, 800ea72 <__ascii_mbtowc+0x6>
 800ea70:	a901      	add	r1, sp, #4
 800ea72:	b142      	cbz	r2, 800ea86 <__ascii_mbtowc+0x1a>
 800ea74:	b14b      	cbz	r3, 800ea8a <__ascii_mbtowc+0x1e>
 800ea76:	7813      	ldrb	r3, [r2, #0]
 800ea78:	600b      	str	r3, [r1, #0]
 800ea7a:	7812      	ldrb	r2, [r2, #0]
 800ea7c:	1e10      	subs	r0, r2, #0
 800ea7e:	bf18      	it	ne
 800ea80:	2001      	movne	r0, #1
 800ea82:	b002      	add	sp, #8
 800ea84:	4770      	bx	lr
 800ea86:	4610      	mov	r0, r2
 800ea88:	e7fb      	b.n	800ea82 <__ascii_mbtowc+0x16>
 800ea8a:	f06f 0001 	mvn.w	r0, #1
 800ea8e:	e7f8      	b.n	800ea82 <__ascii_mbtowc+0x16>

0800ea90 <_read_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d07      	ldr	r5, [pc, #28]	; (800eab0 <_read_r+0x20>)
 800ea94:	4604      	mov	r4, r0
 800ea96:	4608      	mov	r0, r1
 800ea98:	4611      	mov	r1, r2
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	602a      	str	r2, [r5, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	f000 fe88 	bl	800f7b4 <_read>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	d102      	bne.n	800eaae <_read_r+0x1e>
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	b103      	cbz	r3, 800eaae <_read_r+0x1e>
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	bd38      	pop	{r3, r4, r5, pc}
 800eab0:	200019cc 	.word	0x200019cc

0800eab4 <__sprint_r>:
 800eab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab8:	6893      	ldr	r3, [r2, #8]
 800eaba:	4680      	mov	r8, r0
 800eabc:	460f      	mov	r7, r1
 800eabe:	4614      	mov	r4, r2
 800eac0:	b91b      	cbnz	r3, 800eaca <__sprint_r+0x16>
 800eac2:	6053      	str	r3, [r2, #4]
 800eac4:	4618      	mov	r0, r3
 800eac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eacc:	049d      	lsls	r5, r3, #18
 800eace:	d520      	bpl.n	800eb12 <__sprint_r+0x5e>
 800ead0:	6815      	ldr	r5, [r2, #0]
 800ead2:	3508      	adds	r5, #8
 800ead4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800ead8:	f04f 0900 	mov.w	r9, #0
 800eadc:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800eae0:	45ca      	cmp	sl, r9
 800eae2:	dc0b      	bgt.n	800eafc <__sprint_r+0x48>
 800eae4:	68a3      	ldr	r3, [r4, #8]
 800eae6:	f026 0003 	bic.w	r0, r6, #3
 800eaea:	1a18      	subs	r0, r3, r0
 800eaec:	60a0      	str	r0, [r4, #8]
 800eaee:	3508      	adds	r5, #8
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d1ef      	bne.n	800ead4 <__sprint_r+0x20>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800eafa:	e7e4      	b.n	800eac6 <__sprint_r+0x12>
 800eafc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800eb00:	463a      	mov	r2, r7
 800eb02:	4640      	mov	r0, r8
 800eb04:	f000 fd33 	bl	800f56e <_fputwc_r>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	d0f3      	beq.n	800eaf4 <__sprint_r+0x40>
 800eb0c:	f109 0901 	add.w	r9, r9, #1
 800eb10:	e7e6      	b.n	800eae0 <__sprint_r+0x2c>
 800eb12:	f7fe ff2d 	bl	800d970 <__sfvwrite_r>
 800eb16:	e7ed      	b.n	800eaf4 <__sprint_r+0x40>

0800eb18 <_vfiprintf_r>:
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	ed2d 8b02 	vpush	{d8}
 800eb20:	b0b9      	sub	sp, #228	; 0xe4
 800eb22:	460f      	mov	r7, r1
 800eb24:	9201      	str	r2, [sp, #4]
 800eb26:	461d      	mov	r5, r3
 800eb28:	461c      	mov	r4, r3
 800eb2a:	4681      	mov	r9, r0
 800eb2c:	b118      	cbz	r0, 800eb36 <_vfiprintf_r+0x1e>
 800eb2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eb30:	b90b      	cbnz	r3, 800eb36 <_vfiprintf_r+0x1e>
 800eb32:	f7fe fdcd 	bl	800d6d0 <__sinit>
 800eb36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb38:	07d8      	lsls	r0, r3, #31
 800eb3a:	d405      	bmi.n	800eb48 <_vfiprintf_r+0x30>
 800eb3c:	89bb      	ldrh	r3, [r7, #12]
 800eb3e:	0599      	lsls	r1, r3, #22
 800eb40:	d402      	bmi.n	800eb48 <_vfiprintf_r+0x30>
 800eb42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb44:	f7ff f884 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800eb48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eb4c:	049a      	lsls	r2, r3, #18
 800eb4e:	d406      	bmi.n	800eb5e <_vfiprintf_r+0x46>
 800eb50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb54:	81bb      	strh	r3, [r7, #12]
 800eb56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb5c:	667b      	str	r3, [r7, #100]	; 0x64
 800eb5e:	89bb      	ldrh	r3, [r7, #12]
 800eb60:	071e      	lsls	r6, r3, #28
 800eb62:	d501      	bpl.n	800eb68 <_vfiprintf_r+0x50>
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	b9bb      	cbnz	r3, 800eb98 <_vfiprintf_r+0x80>
 800eb68:	4639      	mov	r1, r7
 800eb6a:	4648      	mov	r0, r9
 800eb6c:	f7ff fcde 	bl	800e52c <__swsetup_r>
 800eb70:	b190      	cbz	r0, 800eb98 <_vfiprintf_r+0x80>
 800eb72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb74:	07d8      	lsls	r0, r3, #31
 800eb76:	d508      	bpl.n	800eb8a <_vfiprintf_r+0x72>
 800eb78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb7c:	9302      	str	r3, [sp, #8]
 800eb7e:	9802      	ldr	r0, [sp, #8]
 800eb80:	b039      	add	sp, #228	; 0xe4
 800eb82:	ecbd 8b02 	vpop	{d8}
 800eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8a:	89bb      	ldrh	r3, [r7, #12]
 800eb8c:	0599      	lsls	r1, r3, #22
 800eb8e:	d4f3      	bmi.n	800eb78 <_vfiprintf_r+0x60>
 800eb90:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb92:	f7ff f85e 	bl	800dc52 <__retarget_lock_release_recursive>
 800eb96:	e7ef      	b.n	800eb78 <_vfiprintf_r+0x60>
 800eb98:	89bb      	ldrh	r3, [r7, #12]
 800eb9a:	f003 021a 	and.w	r2, r3, #26
 800eb9e:	2a0a      	cmp	r2, #10
 800eba0:	d116      	bne.n	800ebd0 <_vfiprintf_r+0xb8>
 800eba2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eba6:	2a00      	cmp	r2, #0
 800eba8:	db12      	blt.n	800ebd0 <_vfiprintf_r+0xb8>
 800ebaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebac:	07d2      	lsls	r2, r2, #31
 800ebae:	d404      	bmi.n	800ebba <_vfiprintf_r+0xa2>
 800ebb0:	059e      	lsls	r6, r3, #22
 800ebb2:	d402      	bmi.n	800ebba <_vfiprintf_r+0xa2>
 800ebb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ebb6:	f7ff f84c 	bl	800dc52 <__retarget_lock_release_recursive>
 800ebba:	9a01      	ldr	r2, [sp, #4]
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	4648      	mov	r0, r9
 800ebc2:	b039      	add	sp, #228	; 0xe4
 800ebc4:	ecbd 8b02 	vpop	{d8}
 800ebc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	f000 bc3a 	b.w	800f444 <__sbprintf>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800ebd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ebda:	ae0f      	add	r6, sp, #60	; 0x3c
 800ebdc:	ee08 3a10 	vmov	s16, r3
 800ebe0:	960c      	str	r6, [sp, #48]	; 0x30
 800ebe2:	9307      	str	r3, [sp, #28]
 800ebe4:	9302      	str	r3, [sp, #8]
 800ebe6:	9b01      	ldr	r3, [sp, #4]
 800ebe8:	461d      	mov	r5, r3
 800ebea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebee:	b10a      	cbz	r2, 800ebf4 <_vfiprintf_r+0xdc>
 800ebf0:	2a25      	cmp	r2, #37	; 0x25
 800ebf2:	d1f9      	bne.n	800ebe8 <_vfiprintf_r+0xd0>
 800ebf4:	9b01      	ldr	r3, [sp, #4]
 800ebf6:	ebb5 0803 	subs.w	r8, r5, r3
 800ebfa:	d00d      	beq.n	800ec18 <_vfiprintf_r+0x100>
 800ebfc:	e9c6 3800 	strd	r3, r8, [r6]
 800ec00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec02:	4443      	add	r3, r8
 800ec04:	930e      	str	r3, [sp, #56]	; 0x38
 800ec06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec08:	3301      	adds	r3, #1
 800ec0a:	2b07      	cmp	r3, #7
 800ec0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ec0e:	dc75      	bgt.n	800ecfc <_vfiprintf_r+0x1e4>
 800ec10:	3608      	adds	r6, #8
 800ec12:	9b02      	ldr	r3, [sp, #8]
 800ec14:	4443      	add	r3, r8
 800ec16:	9302      	str	r3, [sp, #8]
 800ec18:	782b      	ldrb	r3, [r5, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 83d6 	beq.w	800f3cc <_vfiprintf_r+0x8b4>
 800ec20:	2300      	movs	r3, #0
 800ec22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ec26:	1c6a      	adds	r2, r5, #1
 800ec28:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ec2c:	9100      	str	r1, [sp, #0]
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	469a      	mov	sl, r3
 800ec32:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec36:	9201      	str	r2, [sp, #4]
 800ec38:	f1a3 0220 	sub.w	r2, r3, #32
 800ec3c:	2a5a      	cmp	r2, #90	; 0x5a
 800ec3e:	f200 831f 	bhi.w	800f280 <_vfiprintf_r+0x768>
 800ec42:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ec46:	009b      	.short	0x009b
 800ec48:	031d031d 	.word	0x031d031d
 800ec4c:	031d00a3 	.word	0x031d00a3
 800ec50:	031d031d 	.word	0x031d031d
 800ec54:	031d0082 	.word	0x031d0082
 800ec58:	00a6031d 	.word	0x00a6031d
 800ec5c:	031d00b0 	.word	0x031d00b0
 800ec60:	00b200ad 	.word	0x00b200ad
 800ec64:	00cd031d 	.word	0x00cd031d
 800ec68:	00d000d0 	.word	0x00d000d0
 800ec6c:	00d000d0 	.word	0x00d000d0
 800ec70:	00d000d0 	.word	0x00d000d0
 800ec74:	00d000d0 	.word	0x00d000d0
 800ec78:	031d00d0 	.word	0x031d00d0
 800ec7c:	031d031d 	.word	0x031d031d
 800ec80:	031d031d 	.word	0x031d031d
 800ec84:	031d031d 	.word	0x031d031d
 800ec88:	031d031d 	.word	0x031d031d
 800ec8c:	010800fa 	.word	0x010800fa
 800ec90:	031d031d 	.word	0x031d031d
 800ec94:	031d031d 	.word	0x031d031d
 800ec98:	031d031d 	.word	0x031d031d
 800ec9c:	031d031d 	.word	0x031d031d
 800eca0:	031d031d 	.word	0x031d031d
 800eca4:	031d0158 	.word	0x031d0158
 800eca8:	031d031d 	.word	0x031d031d
 800ecac:	031d01a1 	.word	0x031d01a1
 800ecb0:	031d027e 	.word	0x031d027e
 800ecb4:	029e031d 	.word	0x029e031d
 800ecb8:	031d031d 	.word	0x031d031d
 800ecbc:	031d031d 	.word	0x031d031d
 800ecc0:	031d031d 	.word	0x031d031d
 800ecc4:	031d031d 	.word	0x031d031d
 800ecc8:	031d031d 	.word	0x031d031d
 800eccc:	010a00fa 	.word	0x010a00fa
 800ecd0:	031d031d 	.word	0x031d031d
 800ecd4:	00e0031d 	.word	0x00e0031d
 800ecd8:	00f4010a 	.word	0x00f4010a
 800ecdc:	00ed031d 	.word	0x00ed031d
 800ece0:	0136031d 	.word	0x0136031d
 800ece4:	018f015a 	.word	0x018f015a
 800ece8:	031d00f4 	.word	0x031d00f4
 800ecec:	009901a1 	.word	0x009901a1
 800ecf0:	031d0280 	.word	0x031d0280
 800ecf4:	0065031d 	.word	0x0065031d
 800ecf8:	0099031d 	.word	0x0099031d
 800ecfc:	aa0c      	add	r2, sp, #48	; 0x30
 800ecfe:	4639      	mov	r1, r7
 800ed00:	4648      	mov	r0, r9
 800ed02:	f7ff fed7 	bl	800eab4 <__sprint_r>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	f040 833f 	bne.w	800f38a <_vfiprintf_r+0x872>
 800ed0c:	ae0f      	add	r6, sp, #60	; 0x3c
 800ed0e:	e780      	b.n	800ec12 <_vfiprintf_r+0xfa>
 800ed10:	4a9c      	ldr	r2, [pc, #624]	; (800ef84 <_vfiprintf_r+0x46c>)
 800ed12:	9205      	str	r2, [sp, #20]
 800ed14:	f01a 0220 	ands.w	r2, sl, #32
 800ed18:	f000 8235 	beq.w	800f186 <_vfiprintf_r+0x66e>
 800ed1c:	3407      	adds	r4, #7
 800ed1e:	f024 0207 	bic.w	r2, r4, #7
 800ed22:	4693      	mov	fp, r2
 800ed24:	6855      	ldr	r5, [r2, #4]
 800ed26:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ed2a:	f01a 0f01 	tst.w	sl, #1
 800ed2e:	d009      	beq.n	800ed44 <_vfiprintf_r+0x22c>
 800ed30:	ea54 0205 	orrs.w	r2, r4, r5
 800ed34:	bf1f      	itttt	ne
 800ed36:	2230      	movne	r2, #48	; 0x30
 800ed38:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800ed3c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800ed40:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed44:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ed48:	e11a      	b.n	800ef80 <_vfiprintf_r+0x468>
 800ed4a:	4648      	mov	r0, r9
 800ed4c:	f7fe ff7a 	bl	800dc44 <_localeconv_r>
 800ed50:	6843      	ldr	r3, [r0, #4]
 800ed52:	4618      	mov	r0, r3
 800ed54:	ee08 3a10 	vmov	s16, r3
 800ed58:	f7f1 fa3a 	bl	80001d0 <strlen>
 800ed5c:	9007      	str	r0, [sp, #28]
 800ed5e:	4648      	mov	r0, r9
 800ed60:	f7fe ff70 	bl	800dc44 <_localeconv_r>
 800ed64:	6883      	ldr	r3, [r0, #8]
 800ed66:	9306      	str	r3, [sp, #24]
 800ed68:	9b07      	ldr	r3, [sp, #28]
 800ed6a:	b12b      	cbz	r3, 800ed78 <_vfiprintf_r+0x260>
 800ed6c:	9b06      	ldr	r3, [sp, #24]
 800ed6e:	b11b      	cbz	r3, 800ed78 <_vfiprintf_r+0x260>
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	b10b      	cbz	r3, 800ed78 <_vfiprintf_r+0x260>
 800ed74:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800ed78:	9a01      	ldr	r2, [sp, #4]
 800ed7a:	e75a      	b.n	800ec32 <_vfiprintf_r+0x11a>
 800ed7c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1f9      	bne.n	800ed78 <_vfiprintf_r+0x260>
 800ed84:	2320      	movs	r3, #32
 800ed86:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ed8a:	e7f5      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ed8c:	f04a 0a01 	orr.w	sl, sl, #1
 800ed90:	e7f2      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ed92:	f854 3b04 	ldr.w	r3, [r4], #4
 800ed96:	9303      	str	r3, [sp, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	daed      	bge.n	800ed78 <_vfiprintf_r+0x260>
 800ed9c:	425b      	negs	r3, r3
 800ed9e:	9303      	str	r3, [sp, #12]
 800eda0:	f04a 0a04 	orr.w	sl, sl, #4
 800eda4:	e7e8      	b.n	800ed78 <_vfiprintf_r+0x260>
 800eda6:	232b      	movs	r3, #43	; 0x2b
 800eda8:	e7ed      	b.n	800ed86 <_vfiprintf_r+0x26e>
 800edaa:	9a01      	ldr	r2, [sp, #4]
 800edac:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edb0:	2b2a      	cmp	r3, #42	; 0x2a
 800edb2:	d112      	bne.n	800edda <_vfiprintf_r+0x2c2>
 800edb4:	f854 0b04 	ldr.w	r0, [r4], #4
 800edb8:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800edbc:	e9cd 3200 	strd	r3, r2, [sp]
 800edc0:	e7da      	b.n	800ed78 <_vfiprintf_r+0x260>
 800edc2:	9b00      	ldr	r3, [sp, #0]
 800edc4:	200a      	movs	r0, #10
 800edc6:	fb00 1303 	mla	r3, r0, r3, r1
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edd0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800edd4:	2909      	cmp	r1, #9
 800edd6:	d9f4      	bls.n	800edc2 <_vfiprintf_r+0x2aa>
 800edd8:	e72d      	b.n	800ec36 <_vfiprintf_r+0x11e>
 800edda:	2100      	movs	r1, #0
 800eddc:	9100      	str	r1, [sp, #0]
 800edde:	e7f7      	b.n	800edd0 <_vfiprintf_r+0x2b8>
 800ede0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ede4:	e7c8      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ede6:	2100      	movs	r1, #0
 800ede8:	9a01      	ldr	r2, [sp, #4]
 800edea:	9103      	str	r1, [sp, #12]
 800edec:	9903      	ldr	r1, [sp, #12]
 800edee:	3b30      	subs	r3, #48	; 0x30
 800edf0:	200a      	movs	r0, #10
 800edf2:	fb00 3301 	mla	r3, r0, r1, r3
 800edf6:	9303      	str	r3, [sp, #12]
 800edf8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edfc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee00:	2909      	cmp	r1, #9
 800ee02:	d9f3      	bls.n	800edec <_vfiprintf_r+0x2d4>
 800ee04:	e717      	b.n	800ec36 <_vfiprintf_r+0x11e>
 800ee06:	9b01      	ldr	r3, [sp, #4]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	2b68      	cmp	r3, #104	; 0x68
 800ee0c:	bf01      	itttt	eq
 800ee0e:	9b01      	ldreq	r3, [sp, #4]
 800ee10:	3301      	addeq	r3, #1
 800ee12:	9301      	streq	r3, [sp, #4]
 800ee14:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800ee18:	bf18      	it	ne
 800ee1a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800ee1e:	e7ab      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ee20:	9b01      	ldr	r3, [sp, #4]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b6c      	cmp	r3, #108	; 0x6c
 800ee26:	d105      	bne.n	800ee34 <_vfiprintf_r+0x31c>
 800ee28:	9b01      	ldr	r3, [sp, #4]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	9301      	str	r3, [sp, #4]
 800ee2e:	f04a 0a20 	orr.w	sl, sl, #32
 800ee32:	e7a1      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ee34:	f04a 0a10 	orr.w	sl, sl, #16
 800ee38:	e79e      	b.n	800ed78 <_vfiprintf_r+0x260>
 800ee3a:	46a3      	mov	fp, r4
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	f85b 3b04 	ldr.w	r3, [fp], #4
 800ee42:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ee46:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	460d      	mov	r5, r1
 800ee50:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800ee54:	e0ad      	b.n	800efb2 <_vfiprintf_r+0x49a>
 800ee56:	f04a 0a10 	orr.w	sl, sl, #16
 800ee5a:	f01a 0f20 	tst.w	sl, #32
 800ee5e:	d011      	beq.n	800ee84 <_vfiprintf_r+0x36c>
 800ee60:	3407      	adds	r4, #7
 800ee62:	f024 0307 	bic.w	r3, r4, #7
 800ee66:	469b      	mov	fp, r3
 800ee68:	685d      	ldr	r5, [r3, #4]
 800ee6a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ee6e:	2d00      	cmp	r5, #0
 800ee70:	da06      	bge.n	800ee80 <_vfiprintf_r+0x368>
 800ee72:	4264      	negs	r4, r4
 800ee74:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ee78:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ee7c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ee80:	2301      	movs	r3, #1
 800ee82:	e04a      	b.n	800ef1a <_vfiprintf_r+0x402>
 800ee84:	46a3      	mov	fp, r4
 800ee86:	f01a 0f10 	tst.w	sl, #16
 800ee8a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800ee8e:	d002      	beq.n	800ee96 <_vfiprintf_r+0x37e>
 800ee90:	462c      	mov	r4, r5
 800ee92:	17ed      	asrs	r5, r5, #31
 800ee94:	e7eb      	b.n	800ee6e <_vfiprintf_r+0x356>
 800ee96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ee9a:	d003      	beq.n	800eea4 <_vfiprintf_r+0x38c>
 800ee9c:	b22c      	sxth	r4, r5
 800ee9e:	f345 35c0 	sbfx	r5, r5, #15, #1
 800eea2:	e7e4      	b.n	800ee6e <_vfiprintf_r+0x356>
 800eea4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eea8:	d0f2      	beq.n	800ee90 <_vfiprintf_r+0x378>
 800eeaa:	b26c      	sxtb	r4, r5
 800eeac:	f345 15c0 	sbfx	r5, r5, #7, #1
 800eeb0:	e7dd      	b.n	800ee6e <_vfiprintf_r+0x356>
 800eeb2:	f01a 0f20 	tst.w	sl, #32
 800eeb6:	f104 0b04 	add.w	fp, r4, #4
 800eeba:	d007      	beq.n	800eecc <_vfiprintf_r+0x3b4>
 800eebc:	9a02      	ldr	r2, [sp, #8]
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	9902      	ldr	r1, [sp, #8]
 800eec2:	17d2      	asrs	r2, r2, #31
 800eec4:	e9c3 1200 	strd	r1, r2, [r3]
 800eec8:	465c      	mov	r4, fp
 800eeca:	e68c      	b.n	800ebe6 <_vfiprintf_r+0xce>
 800eecc:	f01a 0f10 	tst.w	sl, #16
 800eed0:	d003      	beq.n	800eeda <_vfiprintf_r+0x3c2>
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	9a02      	ldr	r2, [sp, #8]
 800eed6:	601a      	str	r2, [r3, #0]
 800eed8:	e7f6      	b.n	800eec8 <_vfiprintf_r+0x3b0>
 800eeda:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eede:	d003      	beq.n	800eee8 <_vfiprintf_r+0x3d0>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	9a02      	ldr	r2, [sp, #8]
 800eee4:	801a      	strh	r2, [r3, #0]
 800eee6:	e7ef      	b.n	800eec8 <_vfiprintf_r+0x3b0>
 800eee8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eeec:	d0f1      	beq.n	800eed2 <_vfiprintf_r+0x3ba>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	9a02      	ldr	r2, [sp, #8]
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e7e8      	b.n	800eec8 <_vfiprintf_r+0x3b0>
 800eef6:	f04a 0a10 	orr.w	sl, sl, #16
 800eefa:	f01a 0320 	ands.w	r3, sl, #32
 800eefe:	d01f      	beq.n	800ef40 <_vfiprintf_r+0x428>
 800ef00:	3407      	adds	r4, #7
 800ef02:	f024 0307 	bic.w	r3, r4, #7
 800ef06:	469b      	mov	fp, r3
 800ef08:	685d      	ldr	r5, [r3, #4]
 800ef0a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ef0e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ef12:	2300      	movs	r3, #0
 800ef14:	2200      	movs	r2, #0
 800ef16:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800ef1a:	9a00      	ldr	r2, [sp, #0]
 800ef1c:	3201      	adds	r2, #1
 800ef1e:	f000 8262 	beq.w	800f3e6 <_vfiprintf_r+0x8ce>
 800ef22:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ef26:	9204      	str	r2, [sp, #16]
 800ef28:	ea54 0205 	orrs.w	r2, r4, r5
 800ef2c:	f040 8261 	bne.w	800f3f2 <_vfiprintf_r+0x8da>
 800ef30:	9a00      	ldr	r2, [sp, #0]
 800ef32:	2a00      	cmp	r2, #0
 800ef34:	f000 8199 	beq.w	800f26a <_vfiprintf_r+0x752>
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	f040 825d 	bne.w	800f3f8 <_vfiprintf_r+0x8e0>
 800ef3e:	e139      	b.n	800f1b4 <_vfiprintf_r+0x69c>
 800ef40:	46a3      	mov	fp, r4
 800ef42:	f01a 0510 	ands.w	r5, sl, #16
 800ef46:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ef4a:	d001      	beq.n	800ef50 <_vfiprintf_r+0x438>
 800ef4c:	461d      	mov	r5, r3
 800ef4e:	e7de      	b.n	800ef0e <_vfiprintf_r+0x3f6>
 800ef50:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ef54:	d001      	beq.n	800ef5a <_vfiprintf_r+0x442>
 800ef56:	b2a4      	uxth	r4, r4
 800ef58:	e7d9      	b.n	800ef0e <_vfiprintf_r+0x3f6>
 800ef5a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ef5e:	d0d6      	beq.n	800ef0e <_vfiprintf_r+0x3f6>
 800ef60:	b2e4      	uxtb	r4, r4
 800ef62:	e7f3      	b.n	800ef4c <_vfiprintf_r+0x434>
 800ef64:	2330      	movs	r3, #48	; 0x30
 800ef66:	46a3      	mov	fp, r4
 800ef68:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ef6c:	2378      	movs	r3, #120	; 0x78
 800ef6e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800ef72:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ef76:	4b03      	ldr	r3, [pc, #12]	; (800ef84 <_vfiprintf_r+0x46c>)
 800ef78:	9305      	str	r3, [sp, #20]
 800ef7a:	2500      	movs	r5, #0
 800ef7c:	f04a 0a02 	orr.w	sl, sl, #2
 800ef80:	2302      	movs	r3, #2
 800ef82:	e7c7      	b.n	800ef14 <_vfiprintf_r+0x3fc>
 800ef84:	080146e4 	.word	0x080146e4
 800ef88:	9b00      	ldr	r3, [sp, #0]
 800ef8a:	46a3      	mov	fp, r4
 800ef8c:	2500      	movs	r5, #0
 800ef8e:	1c5c      	adds	r4, r3, #1
 800ef90:	f85b 8b04 	ldr.w	r8, [fp], #4
 800ef94:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ef98:	f000 80ce 	beq.w	800f138 <_vfiprintf_r+0x620>
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4640      	mov	r0, r8
 800efa2:	f7f1 f91d 	bl	80001e0 <memchr>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f000 8174 	beq.w	800f294 <_vfiprintf_r+0x77c>
 800efac:	eba0 0308 	sub.w	r3, r0, r8
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	9b00      	ldr	r3, [sp, #0]
 800efb4:	42ab      	cmp	r3, r5
 800efb6:	bfb8      	it	lt
 800efb8:	462b      	movlt	r3, r5
 800efba:	9304      	str	r3, [sp, #16]
 800efbc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800efc0:	b113      	cbz	r3, 800efc8 <_vfiprintf_r+0x4b0>
 800efc2:	9b04      	ldr	r3, [sp, #16]
 800efc4:	3301      	adds	r3, #1
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	f01a 0302 	ands.w	r3, sl, #2
 800efcc:	9308      	str	r3, [sp, #32]
 800efce:	bf1e      	ittt	ne
 800efd0:	9b04      	ldrne	r3, [sp, #16]
 800efd2:	3302      	addne	r3, #2
 800efd4:	9304      	strne	r3, [sp, #16]
 800efd6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800efda:	9309      	str	r3, [sp, #36]	; 0x24
 800efdc:	d11f      	bne.n	800f01e <_vfiprintf_r+0x506>
 800efde:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800efe2:	1a9c      	subs	r4, r3, r2
 800efe4:	2c00      	cmp	r4, #0
 800efe6:	dd1a      	ble.n	800f01e <_vfiprintf_r+0x506>
 800efe8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800efec:	48aa      	ldr	r0, [pc, #680]	; (800f298 <_vfiprintf_r+0x780>)
 800efee:	6030      	str	r0, [r6, #0]
 800eff0:	2c10      	cmp	r4, #16
 800eff2:	f103 0301 	add.w	r3, r3, #1
 800eff6:	f106 0108 	add.w	r1, r6, #8
 800effa:	f300 8153 	bgt.w	800f2a4 <_vfiprintf_r+0x78c>
 800effe:	6074      	str	r4, [r6, #4]
 800f000:	2b07      	cmp	r3, #7
 800f002:	4414      	add	r4, r2
 800f004:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f008:	f340 815e 	ble.w	800f2c8 <_vfiprintf_r+0x7b0>
 800f00c:	aa0c      	add	r2, sp, #48	; 0x30
 800f00e:	4639      	mov	r1, r7
 800f010:	4648      	mov	r0, r9
 800f012:	f7ff fd4f 	bl	800eab4 <__sprint_r>
 800f016:	2800      	cmp	r0, #0
 800f018:	f040 81b7 	bne.w	800f38a <_vfiprintf_r+0x872>
 800f01c:	ae0f      	add	r6, sp, #60	; 0x3c
 800f01e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f022:	b173      	cbz	r3, 800f042 <_vfiprintf_r+0x52a>
 800f024:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800f028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f02a:	6032      	str	r2, [r6, #0]
 800f02c:	2201      	movs	r2, #1
 800f02e:	6072      	str	r2, [r6, #4]
 800f030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f032:	3301      	adds	r3, #1
 800f034:	3201      	adds	r2, #1
 800f036:	2b07      	cmp	r3, #7
 800f038:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f03c:	f300 8146 	bgt.w	800f2cc <_vfiprintf_r+0x7b4>
 800f040:	3608      	adds	r6, #8
 800f042:	9b08      	ldr	r3, [sp, #32]
 800f044:	b16b      	cbz	r3, 800f062 <_vfiprintf_r+0x54a>
 800f046:	aa0b      	add	r2, sp, #44	; 0x2c
 800f048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f04a:	6032      	str	r2, [r6, #0]
 800f04c:	2202      	movs	r2, #2
 800f04e:	6072      	str	r2, [r6, #4]
 800f050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f052:	3301      	adds	r3, #1
 800f054:	3202      	adds	r2, #2
 800f056:	2b07      	cmp	r3, #7
 800f058:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f05c:	f300 813f 	bgt.w	800f2de <_vfiprintf_r+0x7c6>
 800f060:	3608      	adds	r6, #8
 800f062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f064:	2b80      	cmp	r3, #128	; 0x80
 800f066:	d11f      	bne.n	800f0a8 <_vfiprintf_r+0x590>
 800f068:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f06c:	1a9c      	subs	r4, r3, r2
 800f06e:	2c00      	cmp	r4, #0
 800f070:	dd1a      	ble.n	800f0a8 <_vfiprintf_r+0x590>
 800f072:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f076:	4889      	ldr	r0, [pc, #548]	; (800f29c <_vfiprintf_r+0x784>)
 800f078:	6030      	str	r0, [r6, #0]
 800f07a:	2c10      	cmp	r4, #16
 800f07c:	f103 0301 	add.w	r3, r3, #1
 800f080:	f106 0108 	add.w	r1, r6, #8
 800f084:	f300 8134 	bgt.w	800f2f0 <_vfiprintf_r+0x7d8>
 800f088:	6074      	str	r4, [r6, #4]
 800f08a:	2b07      	cmp	r3, #7
 800f08c:	4414      	add	r4, r2
 800f08e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f092:	f340 813f 	ble.w	800f314 <_vfiprintf_r+0x7fc>
 800f096:	aa0c      	add	r2, sp, #48	; 0x30
 800f098:	4639      	mov	r1, r7
 800f09a:	4648      	mov	r0, r9
 800f09c:	f7ff fd0a 	bl	800eab4 <__sprint_r>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f040 8172 	bne.w	800f38a <_vfiprintf_r+0x872>
 800f0a6:	ae0f      	add	r6, sp, #60	; 0x3c
 800f0a8:	9b00      	ldr	r3, [sp, #0]
 800f0aa:	1aec      	subs	r4, r5, r3
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	dd1a      	ble.n	800f0e6 <_vfiprintf_r+0x5ce>
 800f0b0:	4d7a      	ldr	r5, [pc, #488]	; (800f29c <_vfiprintf_r+0x784>)
 800f0b2:	6035      	str	r5, [r6, #0]
 800f0b4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800f0b8:	2c10      	cmp	r4, #16
 800f0ba:	f103 0301 	add.w	r3, r3, #1
 800f0be:	f106 0208 	add.w	r2, r6, #8
 800f0c2:	f300 8129 	bgt.w	800f318 <_vfiprintf_r+0x800>
 800f0c6:	6074      	str	r4, [r6, #4]
 800f0c8:	2b07      	cmp	r3, #7
 800f0ca:	440c      	add	r4, r1
 800f0cc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f0d0:	f340 8133 	ble.w	800f33a <_vfiprintf_r+0x822>
 800f0d4:	aa0c      	add	r2, sp, #48	; 0x30
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f7ff fceb 	bl	800eab4 <__sprint_r>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	f040 8153 	bne.w	800f38a <_vfiprintf_r+0x872>
 800f0e4:	ae0f      	add	r6, sp, #60	; 0x3c
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f0ea:	6073      	str	r3, [r6, #4]
 800f0ec:	4418      	add	r0, r3
 800f0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0f0:	f8c6 8000 	str.w	r8, [r6]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	2b07      	cmp	r3, #7
 800f0f8:	900e      	str	r0, [sp, #56]	; 0x38
 800f0fa:	930d      	str	r3, [sp, #52]	; 0x34
 800f0fc:	f300 811f 	bgt.w	800f33e <_vfiprintf_r+0x826>
 800f100:	f106 0308 	add.w	r3, r6, #8
 800f104:	f01a 0f04 	tst.w	sl, #4
 800f108:	f040 8121 	bne.w	800f34e <_vfiprintf_r+0x836>
 800f10c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f110:	9904      	ldr	r1, [sp, #16]
 800f112:	428a      	cmp	r2, r1
 800f114:	bfac      	ite	ge
 800f116:	189b      	addge	r3, r3, r2
 800f118:	185b      	addlt	r3, r3, r1
 800f11a:	9302      	str	r3, [sp, #8]
 800f11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f11e:	b13b      	cbz	r3, 800f130 <_vfiprintf_r+0x618>
 800f120:	aa0c      	add	r2, sp, #48	; 0x30
 800f122:	4639      	mov	r1, r7
 800f124:	4648      	mov	r0, r9
 800f126:	f7ff fcc5 	bl	800eab4 <__sprint_r>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	f040 812d 	bne.w	800f38a <_vfiprintf_r+0x872>
 800f130:	2300      	movs	r3, #0
 800f132:	930d      	str	r3, [sp, #52]	; 0x34
 800f134:	ae0f      	add	r6, sp, #60	; 0x3c
 800f136:	e6c7      	b.n	800eec8 <_vfiprintf_r+0x3b0>
 800f138:	4640      	mov	r0, r8
 800f13a:	f7f1 f849 	bl	80001d0 <strlen>
 800f13e:	9000      	str	r0, [sp, #0]
 800f140:	e737      	b.n	800efb2 <_vfiprintf_r+0x49a>
 800f142:	f04a 0a10 	orr.w	sl, sl, #16
 800f146:	f01a 0320 	ands.w	r3, sl, #32
 800f14a:	d008      	beq.n	800f15e <_vfiprintf_r+0x646>
 800f14c:	3407      	adds	r4, #7
 800f14e:	f024 0307 	bic.w	r3, r4, #7
 800f152:	469b      	mov	fp, r3
 800f154:	685d      	ldr	r5, [r3, #4]
 800f156:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f15a:	2301      	movs	r3, #1
 800f15c:	e6da      	b.n	800ef14 <_vfiprintf_r+0x3fc>
 800f15e:	46a3      	mov	fp, r4
 800f160:	f01a 0510 	ands.w	r5, sl, #16
 800f164:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f168:	d001      	beq.n	800f16e <_vfiprintf_r+0x656>
 800f16a:	461d      	mov	r5, r3
 800f16c:	e7f5      	b.n	800f15a <_vfiprintf_r+0x642>
 800f16e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f172:	d001      	beq.n	800f178 <_vfiprintf_r+0x660>
 800f174:	b2a4      	uxth	r4, r4
 800f176:	e7f0      	b.n	800f15a <_vfiprintf_r+0x642>
 800f178:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f17c:	d0ed      	beq.n	800f15a <_vfiprintf_r+0x642>
 800f17e:	b2e4      	uxtb	r4, r4
 800f180:	e7f3      	b.n	800f16a <_vfiprintf_r+0x652>
 800f182:	4a47      	ldr	r2, [pc, #284]	; (800f2a0 <_vfiprintf_r+0x788>)
 800f184:	e5c5      	b.n	800ed12 <_vfiprintf_r+0x1fa>
 800f186:	46a3      	mov	fp, r4
 800f188:	f01a 0510 	ands.w	r5, sl, #16
 800f18c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f190:	d001      	beq.n	800f196 <_vfiprintf_r+0x67e>
 800f192:	4615      	mov	r5, r2
 800f194:	e5c9      	b.n	800ed2a <_vfiprintf_r+0x212>
 800f196:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f19a:	d001      	beq.n	800f1a0 <_vfiprintf_r+0x688>
 800f19c:	b2a4      	uxth	r4, r4
 800f19e:	e5c4      	b.n	800ed2a <_vfiprintf_r+0x212>
 800f1a0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f1a4:	f43f adc1 	beq.w	800ed2a <_vfiprintf_r+0x212>
 800f1a8:	b2e4      	uxtb	r4, r4
 800f1aa:	e7f2      	b.n	800f192 <_vfiprintf_r+0x67a>
 800f1ac:	2c0a      	cmp	r4, #10
 800f1ae:	f175 0300 	sbcs.w	r3, r5, #0
 800f1b2:	d205      	bcs.n	800f1c0 <_vfiprintf_r+0x6a8>
 800f1b4:	3430      	adds	r4, #48	; 0x30
 800f1b6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800f1ba:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800f1be:	e137      	b.n	800f430 <_vfiprintf_r+0x918>
 800f1c0:	ab38      	add	r3, sp, #224	; 0xe0
 800f1c2:	9308      	str	r3, [sp, #32]
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1ca:	f04f 0a00 	mov.w	sl, #0
 800f1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d0:	9b08      	ldr	r3, [sp, #32]
 800f1d2:	220a      	movs	r2, #10
 800f1d4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800f1d8:	4620      	mov	r0, r4
 800f1da:	2300      	movs	r3, #0
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7f1 fd33 	bl	8000c48 <__aeabi_uldivmod>
 800f1e2:	9b08      	ldr	r3, [sp, #32]
 800f1e4:	3230      	adds	r2, #48	; 0x30
 800f1e6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ec:	f10a 0a01 	add.w	sl, sl, #1
 800f1f0:	b1db      	cbz	r3, 800f22a <_vfiprintf_r+0x712>
 800f1f2:	9b06      	ldr	r3, [sp, #24]
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	4553      	cmp	r3, sl
 800f1f8:	d117      	bne.n	800f22a <_vfiprintf_r+0x712>
 800f1fa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f1fe:	d014      	beq.n	800f22a <_vfiprintf_r+0x712>
 800f200:	2c0a      	cmp	r4, #10
 800f202:	f175 0300 	sbcs.w	r3, r5, #0
 800f206:	d310      	bcc.n	800f22a <_vfiprintf_r+0x712>
 800f208:	9b07      	ldr	r3, [sp, #28]
 800f20a:	eba8 0803 	sub.w	r8, r8, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	ee18 1a10 	vmov	r1, s16
 800f214:	4640      	mov	r0, r8
 800f216:	f7ff f8e8 	bl	800e3ea <strncpy>
 800f21a:	9b06      	ldr	r3, [sp, #24]
 800f21c:	785b      	ldrb	r3, [r3, #1]
 800f21e:	b1a3      	cbz	r3, 800f24a <_vfiprintf_r+0x732>
 800f220:	9b06      	ldr	r3, [sp, #24]
 800f222:	3301      	adds	r3, #1
 800f224:	9306      	str	r3, [sp, #24]
 800f226:	f04f 0a00 	mov.w	sl, #0
 800f22a:	2300      	movs	r3, #0
 800f22c:	220a      	movs	r2, #10
 800f22e:	4620      	mov	r0, r4
 800f230:	4629      	mov	r1, r5
 800f232:	f7f1 fd09 	bl	8000c48 <__aeabi_uldivmod>
 800f236:	2c0a      	cmp	r4, #10
 800f238:	f175 0300 	sbcs.w	r3, r5, #0
 800f23c:	f0c0 80f8 	bcc.w	800f430 <_vfiprintf_r+0x918>
 800f240:	4604      	mov	r4, r0
 800f242:	460d      	mov	r5, r1
 800f244:	f8cd 8020 	str.w	r8, [sp, #32]
 800f248:	e7c2      	b.n	800f1d0 <_vfiprintf_r+0x6b8>
 800f24a:	469a      	mov	sl, r3
 800f24c:	e7ed      	b.n	800f22a <_vfiprintf_r+0x712>
 800f24e:	f004 030f 	and.w	r3, r4, #15
 800f252:	9a05      	ldr	r2, [sp, #20]
 800f254:	0924      	lsrs	r4, r4, #4
 800f256:	5cd3      	ldrb	r3, [r2, r3]
 800f258:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f25c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f260:	092d      	lsrs	r5, r5, #4
 800f262:	ea54 0305 	orrs.w	r3, r4, r5
 800f266:	d1f2      	bne.n	800f24e <_vfiprintf_r+0x736>
 800f268:	e0e2      	b.n	800f430 <_vfiprintf_r+0x918>
 800f26a:	b933      	cbnz	r3, 800f27a <_vfiprintf_r+0x762>
 800f26c:	f01a 0f01 	tst.w	sl, #1
 800f270:	d003      	beq.n	800f27a <_vfiprintf_r+0x762>
 800f272:	2330      	movs	r3, #48	; 0x30
 800f274:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800f278:	e79f      	b.n	800f1ba <_vfiprintf_r+0x6a2>
 800f27a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f27e:	e0d7      	b.n	800f430 <_vfiprintf_r+0x918>
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 80a3 	beq.w	800f3cc <_vfiprintf_r+0x8b4>
 800f286:	2100      	movs	r1, #0
 800f288:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f28c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f290:	46a3      	mov	fp, r4
 800f292:	e5da      	b.n	800ee4a <_vfiprintf_r+0x332>
 800f294:	4605      	mov	r5, r0
 800f296:	e68c      	b.n	800efb2 <_vfiprintf_r+0x49a>
 800f298:	08014942 	.word	0x08014942
 800f29c:	08014952 	.word	0x08014952
 800f2a0:	080146f5 	.word	0x080146f5
 800f2a4:	2010      	movs	r0, #16
 800f2a6:	4402      	add	r2, r0
 800f2a8:	2b07      	cmp	r3, #7
 800f2aa:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f2ae:	6070      	str	r0, [r6, #4]
 800f2b0:	dd07      	ble.n	800f2c2 <_vfiprintf_r+0x7aa>
 800f2b2:	aa0c      	add	r2, sp, #48	; 0x30
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4648      	mov	r0, r9
 800f2b8:	f7ff fbfc 	bl	800eab4 <__sprint_r>
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d164      	bne.n	800f38a <_vfiprintf_r+0x872>
 800f2c0:	a90f      	add	r1, sp, #60	; 0x3c
 800f2c2:	3c10      	subs	r4, #16
 800f2c4:	460e      	mov	r6, r1
 800f2c6:	e68f      	b.n	800efe8 <_vfiprintf_r+0x4d0>
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	e6a8      	b.n	800f01e <_vfiprintf_r+0x506>
 800f2cc:	aa0c      	add	r2, sp, #48	; 0x30
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	4648      	mov	r0, r9
 800f2d2:	f7ff fbef 	bl	800eab4 <__sprint_r>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d157      	bne.n	800f38a <_vfiprintf_r+0x872>
 800f2da:	ae0f      	add	r6, sp, #60	; 0x3c
 800f2dc:	e6b1      	b.n	800f042 <_vfiprintf_r+0x52a>
 800f2de:	aa0c      	add	r2, sp, #48	; 0x30
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4648      	mov	r0, r9
 800f2e4:	f7ff fbe6 	bl	800eab4 <__sprint_r>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d14e      	bne.n	800f38a <_vfiprintf_r+0x872>
 800f2ec:	ae0f      	add	r6, sp, #60	; 0x3c
 800f2ee:	e6b8      	b.n	800f062 <_vfiprintf_r+0x54a>
 800f2f0:	2010      	movs	r0, #16
 800f2f2:	4402      	add	r2, r0
 800f2f4:	2b07      	cmp	r3, #7
 800f2f6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f2fa:	6070      	str	r0, [r6, #4]
 800f2fc:	dd07      	ble.n	800f30e <_vfiprintf_r+0x7f6>
 800f2fe:	aa0c      	add	r2, sp, #48	; 0x30
 800f300:	4639      	mov	r1, r7
 800f302:	4648      	mov	r0, r9
 800f304:	f7ff fbd6 	bl	800eab4 <__sprint_r>
 800f308:	2800      	cmp	r0, #0
 800f30a:	d13e      	bne.n	800f38a <_vfiprintf_r+0x872>
 800f30c:	a90f      	add	r1, sp, #60	; 0x3c
 800f30e:	3c10      	subs	r4, #16
 800f310:	460e      	mov	r6, r1
 800f312:	e6ae      	b.n	800f072 <_vfiprintf_r+0x55a>
 800f314:	460e      	mov	r6, r1
 800f316:	e6c7      	b.n	800f0a8 <_vfiprintf_r+0x590>
 800f318:	2010      	movs	r0, #16
 800f31a:	4401      	add	r1, r0
 800f31c:	2b07      	cmp	r3, #7
 800f31e:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f322:	6070      	str	r0, [r6, #4]
 800f324:	dd06      	ble.n	800f334 <_vfiprintf_r+0x81c>
 800f326:	aa0c      	add	r2, sp, #48	; 0x30
 800f328:	4639      	mov	r1, r7
 800f32a:	4648      	mov	r0, r9
 800f32c:	f7ff fbc2 	bl	800eab4 <__sprint_r>
 800f330:	bb58      	cbnz	r0, 800f38a <_vfiprintf_r+0x872>
 800f332:	aa0f      	add	r2, sp, #60	; 0x3c
 800f334:	3c10      	subs	r4, #16
 800f336:	4616      	mov	r6, r2
 800f338:	e6bb      	b.n	800f0b2 <_vfiprintf_r+0x59a>
 800f33a:	4616      	mov	r6, r2
 800f33c:	e6d3      	b.n	800f0e6 <_vfiprintf_r+0x5ce>
 800f33e:	aa0c      	add	r2, sp, #48	; 0x30
 800f340:	4639      	mov	r1, r7
 800f342:	4648      	mov	r0, r9
 800f344:	f7ff fbb6 	bl	800eab4 <__sprint_r>
 800f348:	b9f8      	cbnz	r0, 800f38a <_vfiprintf_r+0x872>
 800f34a:	ab0f      	add	r3, sp, #60	; 0x3c
 800f34c:	e6da      	b.n	800f104 <_vfiprintf_r+0x5ec>
 800f34e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f352:	1a54      	subs	r4, r2, r1
 800f354:	2c00      	cmp	r4, #0
 800f356:	f77f aed9 	ble.w	800f10c <_vfiprintf_r+0x5f4>
 800f35a:	4d39      	ldr	r5, [pc, #228]	; (800f440 <_vfiprintf_r+0x928>)
 800f35c:	2610      	movs	r6, #16
 800f35e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f362:	2c10      	cmp	r4, #16
 800f364:	f102 0201 	add.w	r2, r2, #1
 800f368:	601d      	str	r5, [r3, #0]
 800f36a:	dc1d      	bgt.n	800f3a8 <_vfiprintf_r+0x890>
 800f36c:	605c      	str	r4, [r3, #4]
 800f36e:	2a07      	cmp	r2, #7
 800f370:	440c      	add	r4, r1
 800f372:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800f376:	f77f aec9 	ble.w	800f10c <_vfiprintf_r+0x5f4>
 800f37a:	aa0c      	add	r2, sp, #48	; 0x30
 800f37c:	4639      	mov	r1, r7
 800f37e:	4648      	mov	r0, r9
 800f380:	f7ff fb98 	bl	800eab4 <__sprint_r>
 800f384:	2800      	cmp	r0, #0
 800f386:	f43f aec1 	beq.w	800f10c <_vfiprintf_r+0x5f4>
 800f38a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f38c:	07d9      	lsls	r1, r3, #31
 800f38e:	d405      	bmi.n	800f39c <_vfiprintf_r+0x884>
 800f390:	89bb      	ldrh	r3, [r7, #12]
 800f392:	059a      	lsls	r2, r3, #22
 800f394:	d402      	bmi.n	800f39c <_vfiprintf_r+0x884>
 800f396:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f398:	f7fe fc5b 	bl	800dc52 <__retarget_lock_release_recursive>
 800f39c:	89bb      	ldrh	r3, [r7, #12]
 800f39e:	065b      	lsls	r3, r3, #25
 800f3a0:	f57f abed 	bpl.w	800eb7e <_vfiprintf_r+0x66>
 800f3a4:	f7ff bbe8 	b.w	800eb78 <_vfiprintf_r+0x60>
 800f3a8:	3110      	adds	r1, #16
 800f3aa:	2a07      	cmp	r2, #7
 800f3ac:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800f3b0:	605e      	str	r6, [r3, #4]
 800f3b2:	dc02      	bgt.n	800f3ba <_vfiprintf_r+0x8a2>
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	3c10      	subs	r4, #16
 800f3b8:	e7d1      	b.n	800f35e <_vfiprintf_r+0x846>
 800f3ba:	aa0c      	add	r2, sp, #48	; 0x30
 800f3bc:	4639      	mov	r1, r7
 800f3be:	4648      	mov	r0, r9
 800f3c0:	f7ff fb78 	bl	800eab4 <__sprint_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1e0      	bne.n	800f38a <_vfiprintf_r+0x872>
 800f3c8:	ab0f      	add	r3, sp, #60	; 0x3c
 800f3ca:	e7f4      	b.n	800f3b6 <_vfiprintf_r+0x89e>
 800f3cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ce:	b913      	cbnz	r3, 800f3d6 <_vfiprintf_r+0x8be>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f3d4:	e7d9      	b.n	800f38a <_vfiprintf_r+0x872>
 800f3d6:	aa0c      	add	r2, sp, #48	; 0x30
 800f3d8:	4639      	mov	r1, r7
 800f3da:	4648      	mov	r0, r9
 800f3dc:	f7ff fb6a 	bl	800eab4 <__sprint_r>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0f5      	beq.n	800f3d0 <_vfiprintf_r+0x8b8>
 800f3e4:	e7d1      	b.n	800f38a <_vfiprintf_r+0x872>
 800f3e6:	ea54 0205 	orrs.w	r2, r4, r5
 800f3ea:	f8cd a010 	str.w	sl, [sp, #16]
 800f3ee:	f43f ada3 	beq.w	800ef38 <_vfiprintf_r+0x420>
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	f43f aeda 	beq.w	800f1ac <_vfiprintf_r+0x694>
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f3fe:	f43f af26 	beq.w	800f24e <_vfiprintf_r+0x736>
 800f402:	f004 0307 	and.w	r3, r4, #7
 800f406:	08e4      	lsrs	r4, r4, #3
 800f408:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f40c:	08ed      	lsrs	r5, r5, #3
 800f40e:	3330      	adds	r3, #48	; 0x30
 800f410:	ea54 0105 	orrs.w	r1, r4, r5
 800f414:	4642      	mov	r2, r8
 800f416:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f41a:	d1f2      	bne.n	800f402 <_vfiprintf_r+0x8ea>
 800f41c:	9904      	ldr	r1, [sp, #16]
 800f41e:	07c8      	lsls	r0, r1, #31
 800f420:	d506      	bpl.n	800f430 <_vfiprintf_r+0x918>
 800f422:	2b30      	cmp	r3, #48	; 0x30
 800f424:	d004      	beq.n	800f430 <_vfiprintf_r+0x918>
 800f426:	2330      	movs	r3, #48	; 0x30
 800f428:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f42c:	f1a2 0802 	sub.w	r8, r2, #2
 800f430:	ab38      	add	r3, sp, #224	; 0xe0
 800f432:	eba3 0308 	sub.w	r3, r3, r8
 800f436:	9d00      	ldr	r5, [sp, #0]
 800f438:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	e5b8      	b.n	800efb2 <_vfiprintf_r+0x49a>
 800f440:	08014942 	.word	0x08014942

0800f444 <__sbprintf>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	460c      	mov	r4, r1
 800f448:	8989      	ldrh	r1, [r1, #12]
 800f44a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f44e:	f021 0102 	bic.w	r1, r1, #2
 800f452:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f456:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f458:	911b      	str	r1, [sp, #108]	; 0x6c
 800f45a:	89e1      	ldrh	r1, [r4, #14]
 800f45c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f460:	69e1      	ldr	r1, [r4, #28]
 800f462:	9109      	str	r1, [sp, #36]	; 0x24
 800f464:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f466:	910b      	str	r1, [sp, #44]	; 0x2c
 800f468:	a91c      	add	r1, sp, #112	; 0x70
 800f46a:	9102      	str	r1, [sp, #8]
 800f46c:	9106      	str	r1, [sp, #24]
 800f46e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f472:	4606      	mov	r6, r0
 800f474:	9104      	str	r1, [sp, #16]
 800f476:	9107      	str	r1, [sp, #28]
 800f478:	a818      	add	r0, sp, #96	; 0x60
 800f47a:	2100      	movs	r1, #0
 800f47c:	e9cd 3200 	strd	r3, r2, [sp]
 800f480:	9108      	str	r1, [sp, #32]
 800f482:	f7fe fbe3 	bl	800dc4c <__retarget_lock_init_recursive>
 800f486:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f48a:	a902      	add	r1, sp, #8
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff fb43 	bl	800eb18 <_vfiprintf_r>
 800f492:	1e05      	subs	r5, r0, #0
 800f494:	db07      	blt.n	800f4a6 <__sbprintf+0x62>
 800f496:	a902      	add	r1, sp, #8
 800f498:	4630      	mov	r0, r6
 800f49a:	f7ff fa2b 	bl	800e8f4 <_fflush_r>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	bf18      	it	ne
 800f4a2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800f4a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f4aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f4ac:	065b      	lsls	r3, r3, #25
 800f4ae:	bf42      	ittt	mi
 800f4b0:	89a3      	ldrhmi	r3, [r4, #12]
 800f4b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f4b6:	81a3      	strhmi	r3, [r4, #12]
 800f4b8:	f7fe fbc9 	bl	800dc4e <__retarget_lock_close_recursive>
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}

0800f4c4 <__ascii_wctomb>:
 800f4c4:	b149      	cbz	r1, 800f4da <__ascii_wctomb+0x16>
 800f4c6:	2aff      	cmp	r2, #255	; 0xff
 800f4c8:	bf85      	ittet	hi
 800f4ca:	238a      	movhi	r3, #138	; 0x8a
 800f4cc:	6003      	strhi	r3, [r0, #0]
 800f4ce:	700a      	strbls	r2, [r1, #0]
 800f4d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f4d4:	bf98      	it	ls
 800f4d6:	2001      	movls	r0, #1
 800f4d8:	4770      	bx	lr
 800f4da:	4608      	mov	r0, r1
 800f4dc:	4770      	bx	lr

0800f4de <abort>:
 800f4de:	b508      	push	{r3, lr}
 800f4e0:	2006      	movs	r0, #6
 800f4e2:	f000 f8bb 	bl	800f65c <raise>
 800f4e6:	2001      	movs	r0, #1
 800f4e8:	f000 f974 	bl	800f7d4 <_exit>

0800f4ec <__fputwc>:
 800f4ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4f0:	4680      	mov	r8, r0
 800f4f2:	460e      	mov	r6, r1
 800f4f4:	4615      	mov	r5, r2
 800f4f6:	f7ff fa35 	bl	800e964 <__locale_mb_cur_max>
 800f4fa:	2801      	cmp	r0, #1
 800f4fc:	d11c      	bne.n	800f538 <__fputwc+0x4c>
 800f4fe:	1e73      	subs	r3, r6, #1
 800f500:	2bfe      	cmp	r3, #254	; 0xfe
 800f502:	d819      	bhi.n	800f538 <__fputwc+0x4c>
 800f504:	f88d 6004 	strb.w	r6, [sp, #4]
 800f508:	4604      	mov	r4, r0
 800f50a:	2700      	movs	r7, #0
 800f50c:	f10d 0904 	add.w	r9, sp, #4
 800f510:	42a7      	cmp	r7, r4
 800f512:	d020      	beq.n	800f556 <__fputwc+0x6a>
 800f514:	68ab      	ldr	r3, [r5, #8]
 800f516:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	60ab      	str	r3, [r5, #8]
 800f520:	da04      	bge.n	800f52c <__fputwc+0x40>
 800f522:	69aa      	ldr	r2, [r5, #24]
 800f524:	4293      	cmp	r3, r2
 800f526:	db1a      	blt.n	800f55e <__fputwc+0x72>
 800f528:	290a      	cmp	r1, #10
 800f52a:	d018      	beq.n	800f55e <__fputwc+0x72>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	602a      	str	r2, [r5, #0]
 800f532:	7019      	strb	r1, [r3, #0]
 800f534:	3701      	adds	r7, #1
 800f536:	e7eb      	b.n	800f510 <__fputwc+0x24>
 800f538:	a901      	add	r1, sp, #4
 800f53a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800f53e:	4632      	mov	r2, r6
 800f540:	4640      	mov	r0, r8
 800f542:	f000 f8f1 	bl	800f728 <_wcrtomb_r>
 800f546:	1c41      	adds	r1, r0, #1
 800f548:	4604      	mov	r4, r0
 800f54a:	d1de      	bne.n	800f50a <__fputwc+0x1e>
 800f54c:	89ab      	ldrh	r3, [r5, #12]
 800f54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f552:	81ab      	strh	r3, [r5, #12]
 800f554:	4606      	mov	r6, r0
 800f556:	4630      	mov	r0, r6
 800f558:	b003      	add	sp, #12
 800f55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f55e:	462a      	mov	r2, r5
 800f560:	4640      	mov	r0, r8
 800f562:	f000 f897 	bl	800f694 <__swbuf_r>
 800f566:	1c42      	adds	r2, r0, #1
 800f568:	d1e4      	bne.n	800f534 <__fputwc+0x48>
 800f56a:	4606      	mov	r6, r0
 800f56c:	e7f3      	b.n	800f556 <__fputwc+0x6a>

0800f56e <_fputwc_r>:
 800f56e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f572:	4614      	mov	r4, r2
 800f574:	07da      	lsls	r2, r3, #31
 800f576:	4605      	mov	r5, r0
 800f578:	d407      	bmi.n	800f58a <_fputwc_r+0x1c>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	059b      	lsls	r3, r3, #22
 800f57e:	d404      	bmi.n	800f58a <_fputwc_r+0x1c>
 800f580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f582:	9101      	str	r1, [sp, #4]
 800f584:	f7fe fb64 	bl	800dc50 <__retarget_lock_acquire_recursive>
 800f588:	9901      	ldr	r1, [sp, #4]
 800f58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58e:	0498      	lsls	r0, r3, #18
 800f590:	d406      	bmi.n	800f5a0 <_fputwc_r+0x32>
 800f592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f59a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f59e:	6663      	str	r3, [r4, #100]	; 0x64
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f7ff ffa2 	bl	800f4ec <__fputwc>
 800f5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5aa:	07da      	lsls	r2, r3, #31
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	d405      	bmi.n	800f5bc <_fputwc_r+0x4e>
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	059b      	lsls	r3, r3, #22
 800f5b4:	d402      	bmi.n	800f5bc <_fputwc_r+0x4e>
 800f5b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b8:	f7fe fb4b 	bl	800dc52 <__retarget_lock_release_recursive>
 800f5bc:	4628      	mov	r0, r5
 800f5be:	b003      	add	sp, #12
 800f5c0:	bd30      	pop	{r4, r5, pc}
	...

0800f5c4 <_fstat_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4d07      	ldr	r5, [pc, #28]	; (800f5e4 <_fstat_r+0x20>)
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	f000 f8c7 	bl	800f764 <_fstat>
 800f5d6:	1c43      	adds	r3, r0, #1
 800f5d8:	d102      	bne.n	800f5e0 <_fstat_r+0x1c>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	b103      	cbz	r3, 800f5e0 <_fstat_r+0x1c>
 800f5de:	6023      	str	r3, [r4, #0]
 800f5e0:	bd38      	pop	{r3, r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	200019cc 	.word	0x200019cc

0800f5e8 <_isatty_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d06      	ldr	r5, [pc, #24]	; (800f604 <_isatty_r+0x1c>)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	f000 f8c6 	bl	800f784 <_isatty>
 800f5f8:	1c43      	adds	r3, r0, #1
 800f5fa:	d102      	bne.n	800f602 <_isatty_r+0x1a>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b103      	cbz	r3, 800f602 <_isatty_r+0x1a>
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	bd38      	pop	{r3, r4, r5, pc}
 800f604:	200019cc 	.word	0x200019cc

0800f608 <_raise_r>:
 800f608:	291f      	cmp	r1, #31
 800f60a:	b538      	push	{r3, r4, r5, lr}
 800f60c:	4604      	mov	r4, r0
 800f60e:	460d      	mov	r5, r1
 800f610:	d904      	bls.n	800f61c <_raise_r+0x14>
 800f612:	2316      	movs	r3, #22
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800f620:	b112      	cbz	r2, 800f628 <_raise_r+0x20>
 800f622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f626:	b94b      	cbnz	r3, 800f63c <_raise_r+0x34>
 800f628:	4620      	mov	r0, r4
 800f62a:	f000 f831 	bl	800f690 <_getpid_r>
 800f62e:	462a      	mov	r2, r5
 800f630:	4601      	mov	r1, r0
 800f632:	4620      	mov	r0, r4
 800f634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f638:	f000 b818 	b.w	800f66c <_kill_r>
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d00a      	beq.n	800f656 <_raise_r+0x4e>
 800f640:	1c59      	adds	r1, r3, #1
 800f642:	d103      	bne.n	800f64c <_raise_r+0x44>
 800f644:	2316      	movs	r3, #22
 800f646:	6003      	str	r3, [r0, #0]
 800f648:	2001      	movs	r0, #1
 800f64a:	e7e6      	b.n	800f61a <_raise_r+0x12>
 800f64c:	2400      	movs	r4, #0
 800f64e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f652:	4628      	mov	r0, r5
 800f654:	4798      	blx	r3
 800f656:	2000      	movs	r0, #0
 800f658:	e7df      	b.n	800f61a <_raise_r+0x12>
	...

0800f65c <raise>:
 800f65c:	4b02      	ldr	r3, [pc, #8]	; (800f668 <raise+0xc>)
 800f65e:	4601      	mov	r1, r0
 800f660:	6818      	ldr	r0, [r3, #0]
 800f662:	f7ff bfd1 	b.w	800f608 <_raise_r>
 800f666:	bf00      	nop
 800f668:	20000750 	.word	0x20000750

0800f66c <_kill_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d07      	ldr	r5, [pc, #28]	; (800f68c <_kill_r+0x20>)
 800f670:	2300      	movs	r3, #0
 800f672:	4604      	mov	r4, r0
 800f674:	4608      	mov	r0, r1
 800f676:	4611      	mov	r1, r2
 800f678:	602b      	str	r3, [r5, #0]
 800f67a:	f000 f88b 	bl	800f794 <_kill>
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	d102      	bne.n	800f688 <_kill_r+0x1c>
 800f682:	682b      	ldr	r3, [r5, #0]
 800f684:	b103      	cbz	r3, 800f688 <_kill_r+0x1c>
 800f686:	6023      	str	r3, [r4, #0]
 800f688:	bd38      	pop	{r3, r4, r5, pc}
 800f68a:	bf00      	nop
 800f68c:	200019cc 	.word	0x200019cc

0800f690 <_getpid_r>:
 800f690:	f000 b870 	b.w	800f774 <_getpid>

0800f694 <__swbuf_r>:
 800f694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f696:	460e      	mov	r6, r1
 800f698:	4614      	mov	r4, r2
 800f69a:	4605      	mov	r5, r0
 800f69c:	b118      	cbz	r0, 800f6a6 <__swbuf_r+0x12>
 800f69e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f6a0:	b90b      	cbnz	r3, 800f6a6 <__swbuf_r+0x12>
 800f6a2:	f7fe f815 	bl	800d6d0 <__sinit>
 800f6a6:	69a3      	ldr	r3, [r4, #24]
 800f6a8:	60a3      	str	r3, [r4, #8]
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	0719      	lsls	r1, r3, #28
 800f6ae:	d529      	bpl.n	800f704 <__swbuf_r+0x70>
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	b33b      	cbz	r3, 800f704 <__swbuf_r+0x70>
 800f6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b8:	b2f6      	uxtb	r6, r6
 800f6ba:	049a      	lsls	r2, r3, #18
 800f6bc:	4637      	mov	r7, r6
 800f6be:	d52a      	bpl.n	800f716 <__swbuf_r+0x82>
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	6920      	ldr	r0, [r4, #16]
 800f6c4:	1a18      	subs	r0, r3, r0
 800f6c6:	6963      	ldr	r3, [r4, #20]
 800f6c8:	4283      	cmp	r3, r0
 800f6ca:	dc04      	bgt.n	800f6d6 <__swbuf_r+0x42>
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f7ff f910 	bl	800e8f4 <_fflush_r>
 800f6d4:	b9e0      	cbnz	r0, 800f710 <__swbuf_r+0x7c>
 800f6d6:	68a3      	ldr	r3, [r4, #8]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	60a3      	str	r3, [r4, #8]
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	1c5a      	adds	r2, r3, #1
 800f6e0:	6022      	str	r2, [r4, #0]
 800f6e2:	701e      	strb	r6, [r3, #0]
 800f6e4:	6962      	ldr	r2, [r4, #20]
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d004      	beq.n	800f6f6 <__swbuf_r+0x62>
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	07db      	lsls	r3, r3, #31
 800f6f0:	d506      	bpl.n	800f700 <__swbuf_r+0x6c>
 800f6f2:	2e0a      	cmp	r6, #10
 800f6f4:	d104      	bne.n	800f700 <__swbuf_r+0x6c>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	f7ff f8fb 	bl	800e8f4 <_fflush_r>
 800f6fe:	b938      	cbnz	r0, 800f710 <__swbuf_r+0x7c>
 800f700:	4638      	mov	r0, r7
 800f702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f704:	4621      	mov	r1, r4
 800f706:	4628      	mov	r0, r5
 800f708:	f7fe ff10 	bl	800e52c <__swsetup_r>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d0d1      	beq.n	800f6b4 <__swbuf_r+0x20>
 800f710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f714:	e7f4      	b.n	800f700 <__swbuf_r+0x6c>
 800f716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f71e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f722:	6663      	str	r3, [r4, #100]	; 0x64
 800f724:	e7cc      	b.n	800f6c0 <__swbuf_r+0x2c>
	...

0800f728 <_wcrtomb_r>:
 800f728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f72a:	4c09      	ldr	r4, [pc, #36]	; (800f750 <_wcrtomb_r+0x28>)
 800f72c:	b085      	sub	sp, #20
 800f72e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800f732:	4605      	mov	r5, r0
 800f734:	461e      	mov	r6, r3
 800f736:	b909      	cbnz	r1, 800f73c <_wcrtomb_r+0x14>
 800f738:	460a      	mov	r2, r1
 800f73a:	a901      	add	r1, sp, #4
 800f73c:	47b8      	blx	r7
 800f73e:	1c43      	adds	r3, r0, #1
 800f740:	bf01      	itttt	eq
 800f742:	2300      	moveq	r3, #0
 800f744:	6033      	streq	r3, [r6, #0]
 800f746:	238a      	moveq	r3, #138	; 0x8a
 800f748:	602b      	streq	r3, [r5, #0]
 800f74a:	b005      	add	sp, #20
 800f74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74e:	bf00      	nop
 800f750:	20000f94 	.word	0x20000f94

0800f754 <_close>:
 800f754:	4b02      	ldr	r3, [pc, #8]	; (800f760 <_close+0xc>)
 800f756:	2258      	movs	r2, #88	; 0x58
 800f758:	601a      	str	r2, [r3, #0]
 800f75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f75e:	4770      	bx	lr
 800f760:	200019cc 	.word	0x200019cc

0800f764 <_fstat>:
 800f764:	4b02      	ldr	r3, [pc, #8]	; (800f770 <_fstat+0xc>)
 800f766:	2258      	movs	r2, #88	; 0x58
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f76e:	4770      	bx	lr
 800f770:	200019cc 	.word	0x200019cc

0800f774 <_getpid>:
 800f774:	4b02      	ldr	r3, [pc, #8]	; (800f780 <_getpid+0xc>)
 800f776:	2258      	movs	r2, #88	; 0x58
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f77e:	4770      	bx	lr
 800f780:	200019cc 	.word	0x200019cc

0800f784 <_isatty>:
 800f784:	4b02      	ldr	r3, [pc, #8]	; (800f790 <_isatty+0xc>)
 800f786:	2258      	movs	r2, #88	; 0x58
 800f788:	601a      	str	r2, [r3, #0]
 800f78a:	2000      	movs	r0, #0
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	200019cc 	.word	0x200019cc

0800f794 <_kill>:
 800f794:	4b02      	ldr	r3, [pc, #8]	; (800f7a0 <_kill+0xc>)
 800f796:	2258      	movs	r2, #88	; 0x58
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f79e:	4770      	bx	lr
 800f7a0:	200019cc 	.word	0x200019cc

0800f7a4 <_lseek>:
 800f7a4:	4b02      	ldr	r3, [pc, #8]	; (800f7b0 <_lseek+0xc>)
 800f7a6:	2258      	movs	r2, #88	; 0x58
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7ae:	4770      	bx	lr
 800f7b0:	200019cc 	.word	0x200019cc

0800f7b4 <_read>:
 800f7b4:	4b02      	ldr	r3, [pc, #8]	; (800f7c0 <_read+0xc>)
 800f7b6:	2258      	movs	r2, #88	; 0x58
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7be:	4770      	bx	lr
 800f7c0:	200019cc 	.word	0x200019cc

0800f7c4 <_write>:
 800f7c4:	4b02      	ldr	r3, [pc, #8]	; (800f7d0 <_write+0xc>)
 800f7c6:	2258      	movs	r2, #88	; 0x58
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7ce:	4770      	bx	lr
 800f7d0:	200019cc 	.word	0x200019cc

0800f7d4 <_exit>:
 800f7d4:	e7fe      	b.n	800f7d4 <_exit>
	...

0800f7d8 <_init>:
 800f7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7da:	bf00      	nop
 800f7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7de:	bc08      	pop	{r3}
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	4770      	bx	lr

0800f7e4 <_fini>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	bf00      	nop
 800f7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ea:	bc08      	pop	{r3}
 800f7ec:	469e      	mov	lr, r3
 800f7ee:	4770      	bx	lr
