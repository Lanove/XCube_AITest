
F407-VA_Measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004da4  0800a2c0  0800a2c0  0001a2c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f064  0800f064  000210e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f06c  0800f06c  000210e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f06c  0800f06c  0001f06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f074  0800f074  0001f074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010e8  20000000  0800f078  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000210e8  2**0
                  CONTENTS
 10 .bss          000004b4  20001100  20001100  00021100  2**5
                  ALLOC
 11 ._user_heap_stack 00001804  200015b4  200015b4  00021100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000210e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019785  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8a  00000000  00000000  0003a89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000122e4  00000000  00000000  0003e527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb8  00000000  00000000  00050810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001980  00000000  00000000  000514c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002591f  00000000  00000000  00052e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cd3e  00000000  00000000  00078767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e401f  00000000  00000000  000954a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001794c4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003eec  00000000  00000000  00179514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  0017d400  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  0017d4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001100 	.word	0x20001100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2a8 	.word	0x0800a2a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001104 	.word	0x20001104
 80001cc:	0800a2a8 	.word	0x0800a2a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f50:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_ADC1_Init+0x78>)
 8000f54:	491d      	ldr	r1, [pc, #116]	; (8000fcc <MX_ADC1_Init+0x7c>)
 8000f56:	6001      	str	r1, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f58:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	2300      	movs	r3, #0
{
 8000f5c:	b085      	sub	sp, #20
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f5e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f62:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000f64:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f66:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	6142      	str	r2, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <MX_ADC1_Init+0x80>)
  hadc1.Init.ScanConvMode = DISABLE;
 8000f6e:	6103      	str	r3, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f70:	e9cd 3300 	strd	r3, r3, [sp]
 8000f74:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f78:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f80:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f88:	f000 fcaa 	bl	80018e0 <HAL_ADC_Init>
 8000f8c:	b968      	cbnz	r0, 8000faa <MX_ADC1_Init+0x5a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f8e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000fc0 <MX_ADC1_Init+0x70>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f92:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f96:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8000f9a:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	f000 fe4d 	bl	8001c3c <HAL_ADC_ConfigChannel>
 8000fa2:	b928      	cbnz	r0, 8000fb0 <MX_ADC1_Init+0x60>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa4:	b005      	add	sp, #20
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000faa:	f000 facb 	bl	8001544 <Error_Handler>
 8000fae:	e7ee      	b.n	8000f8e <MX_ADC1_Init+0x3e>
    Error_Handler();
 8000fb0:	f000 fac8 	bl	8001544 <Error_Handler>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	00000002 	.word	0x00000002
 8000fc4:	00000001 	.word	0x00000001
 8000fc8:	20001120 	.word	0x20001120
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	0f000001 	.word	0x0f000001

08000fd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fd4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_ADC_MspInit+0x94>)
 8000fd8:	6802      	ldr	r2, [r0, #0]
{
 8000fda:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000fde:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000fe4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000fe8:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000fea:	d001      	beq.n	8000ff0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fec:	b008      	add	sp, #32
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ff0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000ff4:	9400      	str	r4, [sp, #0]
 8000ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000ff8:	4e1c      	ldr	r6, [pc, #112]	; (800106c <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
 8001000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001002:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	9401      	str	r4, [sp, #4]
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800101c:	2204      	movs	r2, #4
 800101e:	2303      	movs	r3, #3
 8001020:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	a902      	add	r1, sp, #8
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001026:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f001 f908 	bl	8002240 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800103c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800103e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001046:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104c:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001054:	f000 ff2c 	bl	8001eb0 <HAL_DMA_Init>
 8001058:	b918      	cbnz	r0, 8001062 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800105a:	63ae      	str	r6, [r5, #56]	; 0x38
 800105c:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800105e:	b008      	add	sp, #32
 8001060:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001062:	f000 fa6f 	bl	8001544 <Error_Handler>
 8001066:	e7f8      	b.n	800105a <HAL_ADC_MspInit+0x86>
 8001068:	40012000 	.word	0x40012000
 800106c:	20001168 	.word	0x20001168
 8001070:	40020000 	.word	0x40020000
 8001074:	40026410 	.word	0x40026410

08001078 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_CRC_Init+0x18>)
{
 800107a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <MX_CRC_Init+0x1c>)
 800107e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001080:	f000 ff02 	bl	8001e88 <HAL_CRC_Init>
 8001084:	b900      	cbnz	r0, 8001088 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001086:	bd08      	pop	{r3, pc}
 8001088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800108c:	f000 ba5a 	b.w	8001544 <Error_Handler>
 8001090:	200011c8 	.word	0x200011c8
 8001094:	40023000 	.word	0x40023000

08001098 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_CRC_MspInit+0x30>)
 800109a:	6802      	ldr	r2, [r0, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d000      	beq.n	80010a2 <HAL_CRC_MspInit+0xa>
 80010a0:	4770      	bx	lr
{
 80010a2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010a4:	2200      	movs	r2, #0
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80010ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010b0:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 80010b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80010c2:	b002      	add	sp, #8
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023000 	.word	0x40023000

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010cc:	b500      	push	{lr}
 80010ce:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_DMA_Init+0x30>)
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80010dc:	6319      	str	r1, [r3, #48]	; 0x30
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e4:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010e6:	2038      	movs	r0, #56	; 0x38
 80010e8:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ec:	f000 fe66 	bl	8001dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f0:	2038      	movs	r0, #56	; 0x38

}
 80010f2:	b003      	add	sp, #12
 80010f4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f8:	f000 be9e 	b.w	8001e38 <HAL_NVIC_EnableIRQ>
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001100:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	2400      	movs	r4, #0
{
 8001104:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800110a:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_GPIO_Init+0x84>)
 8001110:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001116:	4d1c      	ldr	r5, [pc, #112]	; (8001188 <MX_GPIO_Init+0x88>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001118:	4e1c      	ldr	r6, [pc, #112]	; (800118c <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001122:	f002 0201 	and.w	r2, r2, #1
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	9401      	str	r4, [sp, #4]
 800112c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800112e:	f042 0204 	orr.w	r2, r2, #4
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800113c:	4622      	mov	r2, r4
 800113e:	4628      	mov	r0, r5
 8001140:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001144:	f001 f99c 	bl	8002480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001148:	4622      	mov	r2, r4
 800114a:	4630      	mov	r0, r6
 800114c:	2120      	movs	r1, #32
 800114e:	f001 f997 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001152:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001154:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED0_Pin;
 8001156:	2202      	movs	r2, #2
 8001158:	2301      	movs	r3, #1
 800115a:	2500      	movs	r5, #0
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800115c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = LED0_Pin;
 800115e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001162:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001166:	f001 f86b 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800116a:	2220      	movs	r2, #32
 800116c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800116e:	a902      	add	r1, sp, #8
 8001170:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_Pin;
 8001172:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001176:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800117a:	f001 f861 	bl	8002240 <HAL_GPIO_Init>

}
 800117e:	b008      	add	sp, #32
 8001180:	bd70      	pop	{r4, r5, r6, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020800 	.word	0x40020800

08001190 <aiInit>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*
 * Bootstrap
 */
int aiInit(void) {
 8001190:	b510      	push	{r4, lr}
 8001192:	b082      	sub	sp, #8
	ai_error err;

	/* Create and initialize the c-model */
	const ai_handle acts[] = { activations };
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <aiInit+0x44>)
	err = ai_network_create_and_init(&network, acts, NULL);
 8001196:	4810      	ldr	r0, [pc, #64]	; (80011d8 <aiInit+0x48>)
	const ai_handle acts[] = { activations };
 8001198:	9301      	str	r3, [sp, #4]
	err = ai_network_create_and_init(&network, acts, NULL);
 800119a:	2200      	movs	r2, #0
 800119c:	a901      	add	r1, sp, #4
 800119e:	f002 f91f 	bl	80033e0 <ai_network_create_and_init>
	if (err.type != AI_ERROR_NONE) {
 80011a2:	b2c0      	uxtb	r0, r0
 80011a4:	b988      	cbnz	r0, 80011ca <aiInit+0x3a>
		printf("Error INIT AI Network!\r\n");
	};

	/* Reteive pointers to the model's input/output tensors */
	ai_input = ai_network_inputs_get(network, NULL);
 80011a6:	4c0c      	ldr	r4, [pc, #48]	; (80011d8 <aiInit+0x48>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	6820      	ldr	r0, [r4, #0]
 80011ac:	f002 f856 	bl	800325c <ai_network_inputs_get>
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <aiInit+0x4c>)
 80011b2:	4602      	mov	r2, r0
	ai_output = ai_network_outputs_get(network, NULL);
 80011b4:	2100      	movs	r1, #0
 80011b6:	6820      	ldr	r0, [r4, #0]
	ai_input = ai_network_inputs_get(network, NULL);
 80011b8:	601a      	str	r2, [r3, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 80011ba:	f002 f85b 	bl	8003274 <ai_network_outputs_get>
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <aiInit+0x50>)
 80011c0:	4602      	mov	r2, r0

	return 0;
}
 80011c2:	2000      	movs	r0, #0
	ai_output = ai_network_outputs_get(network, NULL);
 80011c4:	601a      	str	r2, [r3, #0]
}
 80011c6:	b002      	add	sp, #8
 80011c8:	bd10      	pop	{r4, pc}
		printf("Error INIT AI Network!\r\n");
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <aiInit+0x54>)
 80011cc:	f004 fd5e 	bl	8005c8c <puts>
 80011d0:	e7e9      	b.n	80011a6 <aiInit+0x16>
 80011d2:	bf00      	nop
 80011d4:	200011e0 	.word	0x200011e0
 80011d8:	20001408 	.word	0x20001408
 80011dc:	200013e0 	.word	0x200013e0
 80011e0:	200013e4 	.word	0x200013e4
 80011e4:	0800a2d0 	.word	0x0800a2d0

080011e8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
	return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM3) {
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80011ea:	6802      	ldr	r2, [r0, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d000      	beq.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0xa>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 1);
	}
}
 80011f0:	4770      	bx	lr
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 1);
 80011f2:	4903      	ldr	r1, [pc, #12]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	f000 bc20 	b.w	8001a3c <HAL_ADC_Start_DMA>
 80011fc:	40000400 	.word	0x40000400
 8001200:	200011d0 	.word	0x200011d0
 8001204:	20001120 	.word	0x20001120

08001208 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001208:	b538      	push	{r3, r4, r5, lr}
	static int16_t prevSample;
	static unsigned int sampleCount = 0;
	static float sum = 0;
	int16_t normalized_adc = (int16_t)ADC_Value - 2000;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_ADC_ConvCpltCallback+0x70>)
	sum += (float)normalized_adc * (float)normalized_adc;
 800120c:	4c1b      	ldr	r4, [pc, #108]	; (800127c <HAL_ADC_ConvCpltCallback+0x74>)
	int16_t normalized_adc = (int16_t)ADC_Value - 2000;
 800120e:	881b      	ldrh	r3, [r3, #0]
	sum += (float)normalized_adc * (float)normalized_adc;
 8001210:	ed94 7a00 	vldr	s14, [r4]
	sampleCount++;
 8001214:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_ADC_ConvCpltCallback+0x78>)
	int16_t normalized_adc = (int16_t)ADC_Value - 2000;
 8001216:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
	sum += (float)normalized_adc * (float)normalized_adc;
 800121a:	b21b      	sxth	r3, r3
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sampleCount++;
 8001224:	6813      	ldr	r3, [r2, #0]
	sum += (float)normalized_adc * (float)normalized_adc;
 8001226:	eea7 7aa7 	vfma.f32	s14, s15, s15
	sampleCount++;
 800122a:	3301      	adds	r3, #1
	if(sampleCount >= 1000){
 800122c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
	sum += (float)normalized_adc * (float)normalized_adc;
 8001230:	ed84 7a00 	vstr	s14, [r4]
	if(sampleCount >= 1000){
 8001234:	d201      	bcs.n	800123a <HAL_ADC_ConvCpltCallback+0x32>
	sampleCount++;
 8001236:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) &voltage_rms, sizeof(voltage_rms),HAL_MAX_DELAY);
		sum = 0;
	}
	prevSample = normalized_adc;

}
 8001238:	bd38      	pop	{r3, r4, r5, pc}
		sampleCount = 0;
 800123a:	2300      	movs	r3, #0
		float voltage = sqrt(sum/1000.);
 800123c:	ee17 0a10 	vmov	r0, s14
		sampleCount = 0;
 8001240:	6013      	str	r3, [r2, #0]
		float voltage = sqrt(sum/1000.);
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_ADC_ConvCpltCallback+0x7c>)
		voltage_rms = voltage;
 8001248:	4d0f      	ldr	r5, [pc, #60]	; (8001288 <HAL_ADC_ConvCpltCallback+0x80>)
		float voltage = sqrt(sum/1000.);
 800124a:	2200      	movs	r2, #0
 800124c:	f7ff fafe 	bl	800084c <__aeabi_ddiv>
 8001250:	ec41 0b10 	vmov	d0, r0, r1
 8001254:	f004 f83a 	bl	80052cc <sqrt>
 8001258:	ec51 0b10 	vmov	r0, r1, d0
 800125c:	f7ff fca4 	bl	8000ba8 <__aeabi_d2f>
		HAL_UART_Transmit(&huart1, (uint8_t*) &voltage_rms, sizeof(voltage_rms),HAL_MAX_DELAY);
 8001260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		float voltage = sqrt(sum/1000.);
 8001264:	6028      	str	r0, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) &voltage_rms, sizeof(voltage_rms),HAL_MAX_DELAY);
 8001266:	2204      	movs	r2, #4
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <HAL_ADC_ConvCpltCallback+0x84>)
 800126a:	4629      	mov	r1, r5
 800126c:	f001 ff46 	bl	80030fc <HAL_UART_Transmit>
		sum = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	6023      	str	r3, [r4, #0]
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	200011d0 	.word	0x200011d0
 800127c:	20001438 	.word	0x20001438
 8001280:	20001434 	.word	0x20001434
 8001284:	408f4000 	.word	0x408f4000
 8001288:	2000143c 	.word	0x2000143c
 800128c:	2000149c 	.word	0x2000149c

08001290 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001290:	b500      	push	{lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001292:	2300      	movs	r3, #0
void SystemClock_Config(void) {
 8001294:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001296:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800129a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800129e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80012a2:	e9cd 3304 	strd	r3, r3, [sp, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4926      	ldr	r1, [pc, #152]	; (8001340 <SystemClock_Config+0xb0>)
 80012a8:	9300      	str	r3, [sp, #0]
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012aa:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ac:	9306      	str	r3, [sp, #24]
	__HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	6c08      	ldr	r0, [r1, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <SystemClock_Config+0xb4>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80012b6:	6408      	str	r0, [r1, #64]	; 0x40
 80012b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80012ba:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80012be:	9100      	str	r1, [sp, #0]
 80012c0:	9900      	ldr	r1, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	6813      	ldr	r3, [r2, #0]
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d2:	2102      	movs	r1, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	9801      	ldr	r0, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2002      	movs	r0, #2
 80012dc:	2100      	movs	r1, #0
 80012de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80012e2:	2008      	movs	r0, #8
 80012e4:	21a8      	movs	r1, #168	; 0xa8
 80012e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012ea:	2002      	movs	r0, #2
 80012ec:	2107      	movs	r1, #7
 80012ee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f2:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2310      	movs	r3, #16
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012f6:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012fc:	f001 f8ce 	bl	800249c <HAL_RCC_OscConfig>
 8001300:	b108      	cbz	r0, 8001306 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001302:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001304:	e7fe      	b.n	8001304 <SystemClock_Config+0x74>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001306:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001338 <SystemClock_Config+0xa8>
 800130a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800130e:	2200      	movs	r2, #0
 8001310:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001314:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800131a:	2105      	movs	r1, #5
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800131c:	ed8d 7b02 	vstr	d7, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001320:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001322:	f001 fad3 	bl	80028cc <HAL_RCC_ClockConfig>
 8001326:	b108      	cbz	r0, 800132c <SystemClock_Config+0x9c>
 8001328:	b672      	cpsid	i
	while (1) {
 800132a:	e7fe      	b.n	800132a <SystemClock_Config+0x9a>
}
 800132c:	b015      	add	sp, #84	; 0x54
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	0000000f 	.word	0x0000000f
 800133c:	00000002 	.word	0x00000002
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <main>:
int main(void) {
 8001348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	ed2d 8b04 	vpush	{d8-d9}
 8001350:	b0cb      	sub	sp, #300	; 0x12c
	HAL_Init();
 8001352:	f000 fa87 	bl	8001864 <HAL_Init>
	SystemClock_Config();
 8001356:	f7ff ff9b 	bl	8001290 <SystemClock_Config>
	MX_GPIO_Init();
 800135a:	f7ff fed1 	bl	8001100 <MX_GPIO_Init>
	MX_DMA_Init();
 800135e:	f7ff feb5 	bl	80010cc <MX_DMA_Init>
	MX_ADC1_Init();
 8001362:	f7ff fdf5 	bl	8000f50 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8001366:	f000 f9d7 	bl	8001718 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 800136a:	f000 f97b 	bl	8001664 <MX_TIM3_Init>
	MX_RNG_Init();
 800136e:	f000 f8eb 	bl	8001548 <MX_RNG_Init>
	MX_CRC_Init();
 8001372:	f7ff fe81 	bl	8001078 <MX_CRC_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001376:	4860      	ldr	r0, [pc, #384]	; (80014f8 <main+0x1b0>)
 8001378:	4e60      	ldr	r6, [pc, #384]	; (80014fc <main+0x1b4>)
 800137a:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8001534 <main+0x1ec>
 800137e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8001538 <main+0x1f0>
 8001382:	4d5f      	ldr	r5, [pc, #380]	; (8001500 <main+0x1b8>)
 8001384:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800153c <main+0x1f4>
	return min + (randomNumber / (float) UINT32_MAX) * (max - min);
 8001388:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 8001504 <main+0x1bc>
 800138c:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8001508 <main+0x1c0>
 8001390:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 800150c <main+0x1c4>
 8001394:	eddf 8a5e 	vldr	s17, [pc, #376]	; 8001510 <main+0x1c8>
 8001398:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001540 <main+0x1f8>
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800139c:	4f5d      	ldr	r7, [pc, #372]	; (8001514 <main+0x1cc>)
	HAL_TIM_Base_Start_IT(&htim3);
 800139e:	f001 fc31 	bl	8002c04 <HAL_TIM_Base_Start_IT>
	aiInit();
 80013a2:	ac06      	add	r4, sp, #24
 80013a4:	f7ff fef4 	bl	8001190 <aiInit>
 80013a8:	e02e      	b.n	8001408 <main+0xc0>
		if (input_data[i] > maxValue) {
 80013aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	f100 8088 	bmi.w	80014c6 <main+0x17e>
 80013b6:	edd5 7a04 	vldr	s15, [r5, #16]
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dc7b      	bgt.n	80014bc <main+0x174>
			sprintf(namaGangguan, "Undervoltage");
 80013c4:	4b54      	ldr	r3, [pc, #336]	; (8001518 <main+0x1d0>)
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	46a4      	mov	ip, r4
 80013ca:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80013ce:	f88c 3000 	strb.w	r3, [ip]
		sprintf(buffer, "Invoked (%.2f,%.2f) = %s\r\n", in_data[0], in_data[1],
 80013d2:	6830      	ldr	r0, [r6, #0]
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	6870      	ldr	r0, [r6, #4]
 80013de:	9402      	str	r4, [sp, #8]
 80013e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013e4:	f7ff f8b0 	bl	8000548 <__aeabi_f2d>
 80013e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ec:	e9cd 0100 	strd	r0, r1, [sp]
 80013f0:	494a      	ldr	r1, [pc, #296]	; (800151c <main+0x1d4>)
 80013f2:	a80a      	add	r0, sp, #40	; 0x28
 80013f4:	f004 fe06 	bl	8006004 <sprintf>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80013f8:	4849      	ldr	r0, [pc, #292]	; (8001520 <main+0x1d8>)
 80013fa:	2102      	movs	r1, #2
 80013fc:	f001 f844 	bl	8002488 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001404:	f000 fa5a 	bl	80018bc <HAL_Delay>
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8001408:	4621      	mov	r1, r4
 800140a:	4638      	mov	r0, r7
 800140c:	f001 fb36 	bl	8002a7c <HAL_RNG_GenerateRandomNumber>
	return min + (randomNumber / (float) UINT32_MAX) * (max - min);
 8001410:	edd4 7a00 	vldr	s15, [r4]
 8001414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001418:	eeb0 7a49 	vmov.f32	s14, s18
 800141c:	ee67 7a88 	vmul.f32	s15, s15, s16
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8001420:	4621      	mov	r1, r4
	return min + (randomNumber / (float) UINT32_MAX) * (max - min);
 8001422:	eea7 7aa9 	vfma.f32	s14, s15, s19
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8001426:	4638      	mov	r0, r7
		in_data[0] = RandomNumber(0, 120);
 8001428:	ed86 7a00 	vstr	s14, [r6]
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800142c:	f001 fb26 	bl	8002a7c <HAL_RNG_GenerateRandomNumber>
	return min + (randomNumber / (float) UINT32_MAX) * (max - min);
 8001430:	edd4 7a00 	vldr	s15, [r4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001434:	f8db 1000 	ldr.w	r1, [fp]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001438:	f8da 2000 	ldr.w	r2, [sl]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800143c:	f8d9 0000 	ldr.w	r0, [r9]
	return min + (randomNumber / (float) UINT32_MAX) * (max - min);
 8001440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001444:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8001448:	ee67 7a88 	vmul.f32	s15, s15, s16
 800144c:	eea7 7aa8 	vfma.f32	s14, s15, s17
		in_data[1] = RandomNumber(22, 418);
 8001450:	ed86 7a01 	vstr	s14, [r6, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001454:	604e      	str	r6, [r1, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001456:	6055      	str	r5, [r2, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001458:	f002 f81a 	bl	8003490 <ai_network_run>
	if (n_batch != 1) {
 800145c:	2801      	cmp	r0, #1
 800145e:	d140      	bne.n	80014e2 <main+0x19a>
	ai_float maxValue = input_data[0];
 8001460:	edd5 7a00 	vldr	s15, [r5]
		if (input_data[i] > maxValue) {
 8001464:	ed95 7a01 	vldr	s14, [r5, #4]
 8001468:	edd5 6a03 	vldr	s13, [r5, #12]
 800146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	bf48      	it	mi
 8001476:	eef0 7a47 	vmovmi.f32	s15, s14
 800147a:	ed95 7a02 	vldr	s14, [r5, #8]
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
	for (int i = 1; i < len; i++) {
 8001482:	bf4c      	ite	mi
 8001484:	2301      	movmi	r3, #1
	int maxIndex = 0;
 8001486:	2300      	movpl	r3, #0
		if (input_data[i] > maxValue) {
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d48d      	bmi.n	80013aa <main+0x62>
 800148e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d416      	bmi.n	80014c6 <main+0x17e>
 8001498:	ed95 7a04 	vldr	s14, [r5, #16]
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d40a      	bmi.n	80014bc <main+0x174>
		switch (gangguan) {
 80014a6:	bb23      	cbnz	r3, 80014f2 <main+0x1aa>
			sprintf(namaGangguan, "Normal");
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <main+0x1dc>)
 80014aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014ae:	6020      	str	r0, [r4, #0]
 80014b0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80014b4:	0c09      	lsrs	r1, r1, #16
 80014b6:	f88d 101e 	strb.w	r1, [sp, #30]
			break;
 80014ba:	e78a      	b.n	80013d2 <main+0x8a>
			sprintf(namaGangguan, "Overvoltage");
 80014bc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80014c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 80014c4:	e785      	b.n	80013d2 <main+0x8a>
		if (input_data[i] > maxValue) {
 80014c6:	edd5 7a04 	vldr	s15, [r5, #16]
 80014ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	dcf3      	bgt.n	80014bc <main+0x174>
			sprintf(namaGangguan, "Swell");
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <main+0x1e0>)
 80014d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014da:	6020      	str	r0, [r4, #0]
 80014dc:	f8ad 101c 	strh.w	r1, [sp, #28]
			break;
 80014e0:	e777      	b.n	80013d2 <main+0x8a>
		err = ai_network_get_error(network);
 80014e2:	f8d9 0000 	ldr.w	r0, [r9]
 80014e6:	f001 feb7 	bl	8003258 <ai_network_get_error>
		printf("Error Invoking Network!!\r\n");
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <main+0x1e4>)
 80014ec:	f004 fbce 	bl	8005c8c <puts>
		return 1;
 80014f0:	e7b6      	b.n	8001460 <main+0x118>
			sprintf(namaGangguan, "Sag");
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <main+0x1e8>)
 80014f4:	6023      	str	r3, [r4, #0]
			break;
 80014f6:	e76c      	b.n	80013d2 <main+0x8a>
 80014f8:	20001454 	.word	0x20001454
 80014fc:	20001400 	.word	0x20001400
 8001500:	20001420 	.word	0x20001420
 8001504:	2f800000 	.word	0x2f800000
 8001508:	42f00000 	.word	0x42f00000
 800150c:	00000000 	.word	0x00000000
 8001510:	43c60000 	.word	0x43c60000
 8001514:	20001440 	.word	0x20001440
 8001518:	0800a320 	.word	0x0800a320
 800151c:	0800a330 	.word	0x0800a330
 8001520:	40020000 	.word	0x40020000
 8001524:	0800a318 	.word	0x0800a318
 8001528:	0800a304 	.word	0x0800a304
 800152c:	0800a2e8 	.word	0x0800a2e8
 8001530:	00676153 	.word	0x00676153
 8001534:	200013e0 	.word	0x200013e0
 8001538:	200013e4 	.word	0x200013e4
 800153c:	20001408 	.word	0x20001408
 8001540:	0800a30c 	.word	0x0800a30c

08001544 <Error_Handler>:
 8001544:	b672      	cpsid	i
	while (1) {
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x2>

08001548 <MX_RNG_Init>:
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_RNG_Init+0x18>)
{
 800154a:	b508      	push	{r3, lr}
  hrng.Instance = RNG;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <MX_RNG_Init+0x1c>)
 800154e:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001550:	f001 fa7a 	bl	8002a48 <HAL_RNG_Init>
 8001554:	b900      	cbnz	r0, 8001558 <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001556:	bd08      	pop	{r3, pc}
 8001558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800155c:	f7ff bff2 	b.w	8001544 <Error_Handler>
 8001560:	20001440 	.word	0x20001440
 8001564:	50060800 	.word	0x50060800

08001568 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RNG_MspInit+0x28>)
 800156a:	6802      	ldr	r2, [r0, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d000      	beq.n	8001572 <HAL_RNG_MspInit+0xa>
 8001570:	4770      	bx	lr
{
 8001572:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_RNG_MspInit+0x2c>)
 8001576:	2200      	movs	r2, #0
 8001578:	9201      	str	r2, [sp, #4]
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800158c:	b002      	add	sp, #8
 800158e:	4770      	bx	lr
 8001590:	50060800 	.word	0x50060800
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x34>)
 800159c:	2100      	movs	r1, #0
 800159e:	9100      	str	r1, [sp, #0]
 80015a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
 80015a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	9101      	str	r1, [sp, #4]
 80015b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	b002      	add	sp, #8
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler>
 80015d2:	bf00      	nop

080015d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <HardFault_Handler>
 80015d6:	bf00      	nop

080015d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler>
 80015da:	bf00      	nop

080015dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <BusFault_Handler>
 80015de:	bf00      	nop

080015e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler>
 80015e2:	bf00      	nop

080015e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <DebugMon_Handler>:
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <PendSV_Handler>:
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 b952 	b.w	8001898 <HAL_IncTick>

080015f4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f4:	4801      	ldr	r0, [pc, #4]	; (80015fc <TIM3_IRQHandler+0x8>)
 80015f6:	f001 bbf9 	b.w	8002dec <HAL_TIM_IRQHandler>
 80015fa:	bf00      	nop
 80015fc:	20001454 	.word	0x20001454

08001600 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001600:	4801      	ldr	r0, [pc, #4]	; (8001608 <DMA2_Stream0_IRQHandler+0x8>)
 8001602:	f000 bd2d 	b.w	8002060 <HAL_DMA_IRQHandler>
 8001606:	bf00      	nop
 8001608:	20001168 	.word	0x20001168

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160e:	4c0c      	ldr	r4, [pc, #48]	; (8001640 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <_sbrk+0x38>)
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001614:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001616:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001618:	b12a      	cbz	r2, 8001626 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4410      	add	r0, r2
 800161c:	4288      	cmp	r0, r1
 800161e:	d807      	bhi.n	8001630 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001620:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001622:	4610      	mov	r0, r2
 8001624:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <_sbrk+0x40>)
 8001628:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4410      	add	r0, r2
 800162c:	4288      	cmp	r0, r1
 800162e:	d9f7      	bls.n	8001620 <_sbrk+0x14>
    errno = ENOMEM;
 8001630:	f004 f85e 	bl	80056f0 <__errno>
 8001634:	230c      	movs	r3, #12
    return (void *)-1;
 8001636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800163a:	6003      	str	r3, [r0, #0]
}
 800163c:	4610      	mov	r0, r2
 800163e:	bd10      	pop	{r4, pc}
 8001640:	20001450 	.word	0x20001450
 8001644:	2001c000 	.word	0x2001c000
 8001648:	00001000 	.word	0x00001000
 800164c:	200015b8 	.word	0x200015b8

08001650 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4a03      	ldr	r2, [pc, #12]	; (8001660 <SystemInit+0x10>)
 8001652:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001656:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001664:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <MX_TIM3_Init+0x6c>)
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <MX_TIM3_Init+0x70>)
 800166a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 169;
 800166c:	22a9      	movs	r2, #169	; 0xa9
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 169;
 8001670:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
 8001672:	2263      	movs	r2, #99	; 0x63
{
 8001674:	b087      	sub	sp, #28
  htim3.Init.Period = 99;
 8001676:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167a:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001680:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168a:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800168c:	f001 fa2c 	bl	8002ae8 <HAL_TIM_Base_Init>
 8001690:	b998      	cbnz	r0, 80016ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169a:	a902      	add	r1, sp, #8
 800169c:	f001 faee 	bl	8002c7c <HAL_TIM_ConfigClockSource>
 80016a0:	b998      	cbnz	r0, 80016ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016a2:	2220      	movs	r2, #32
 80016a4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <MX_TIM3_Init+0x6c>)
 80016a8:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016aa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ae:	f001 fc47 	bl	8002f40 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	b928      	cbnz	r0, 80016c0 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b4:	b007      	add	sp, #28
 80016b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016ba:	f7ff ff43 	bl	8001544 <Error_Handler>
 80016be:	e7e8      	b.n	8001692 <MX_TIM3_Init+0x2e>
    Error_Handler();
 80016c0:	f7ff ff40 	bl	8001544 <Error_Handler>
}
 80016c4:	b007      	add	sp, #28
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016ca:	f7ff ff3b 	bl	8001544 <Error_Handler>
 80016ce:	e7e8      	b.n	80016a2 <MX_TIM3_Init+0x3e>
 80016d0:	20001454 	.word	0x20001454
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016da:	6802      	ldr	r2, [r0, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d000      	beq.n	80016e2 <HAL_TIM_Base_MspInit+0xa>
 80016e0:	4770      	bx	lr
{
 80016e2:	b500      	push	{lr}
 80016e4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	2200      	movs	r2, #0
 80016e8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80016ec:	9201      	str	r2, [sp, #4]
 80016ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016f0:	f041 0102 	orr.w	r1, r1, #2
 80016f4:	6419      	str	r1, [r3, #64]	; 0x40
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016fe:	201d      	movs	r0, #29
 8001700:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001702:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001704:	f000 fb5a 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001708:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800170a:	b003      	add	sp, #12
 800170c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001710:	f000 bb92 	b.w	8001e38 <HAL_NVIC_EnableIRQ>
 8001714:	40000400 	.word	0x40000400

08001718 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001718:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_USART1_UART_Init+0x30>)
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 230400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 230400;
 8001720:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 230400;
 8001726:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800172a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001732:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	f001 fc47 	bl	8002fc8 <HAL_UART_Init>
 800173a:	b900      	cbnz	r0, 800173e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173c:	bd10      	pop	{r4, pc}
 800173e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001742:	f7ff beff 	b.w	8001544 <Error_Handler>
 8001746:	bf00      	nop
 8001748:	2000149c 	.word	0x2000149c
 800174c:	40011000 	.word	0x40011000

08001750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001750:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_UART_MspInit+0x70>)
 8001754:	6801      	ldr	r1, [r0, #0]
{
 8001756:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART1)
 800175a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001760:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001764:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001768:	b008      	add	sp, #32
 800176a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800176c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001774:	f040 0010 	orr.w	r0, r0, #16
 8001778:	6450      	str	r0, [r2, #68]	; 0x44
 800177a:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800177c:	f000 0010 	and.w	r0, r0, #16
 8001780:	9000      	str	r0, [sp, #0]
 8001782:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001792:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80017b8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f000 fd48 	bl	8002240 <HAL_GPIO_Init>
}
 80017b0:	b008      	add	sp, #32
 80017b2:	bd10      	pop	{r4, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	00000600 	.word	0x00000600
 80017bc:	00000002 	.word	0x00000002
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40020000 	.word	0x40020000

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ff2d 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 ff81 	bl	80056fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fda5 	bl	8001348 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	200010e8 	.word	0x200010e8
  ldr r2, =_sidata
 800180c:	0800f078 	.word	0x0800f078
  ldr r2, =_sbss
 8001810:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 8001814:	200015b4 	.word	0x200015b4

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_InitTick+0x3c>)
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_InitTick+0x40>)
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
{
 8001826:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001830:	fbb3 f0f0 	udiv	r0, r3, r0
 8001834:	f000 fb0e 	bl	8001e54 <HAL_SYSTICK_Config>
 8001838:	b908      	cbnz	r0, 800183e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	2d0f      	cmp	r5, #15
 800183c:	d901      	bls.n	8001842 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	4602      	mov	r2, r0
 8001846:	4629      	mov	r1, r5
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	f000 fab6 	bl	8001dbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_InitTick+0x44>)
 8001852:	4620      	mov	r0, r4
 8001854:	601d      	str	r5, [r3, #0]
}
 8001856:	bd38      	pop	{r3, r4, r5, pc}
 8001858:	20000004 	.word	0x20000004
 800185c:	20000000 	.word	0x20000000
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_Init>:
{
 8001864:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x30>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001876:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 fa89 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f7ff ffc8 	bl	800181c <HAL_InitTick>
  HAL_MspInit();
 800188c:	f7ff fe84 	bl	8001598 <HAL_MspInit>
}
 8001890:	2000      	movs	r0, #0
 8001892:	bd08      	pop	{r3, pc}
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x10>)
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_IncTick+0x14>)
 800189c:	6811      	ldr	r1, [r2, #0]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	440b      	add	r3, r1
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200014e0 	.word	0x200014e0
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018b0:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <HAL_GetTick+0x8>)
 80018b2:	6818      	ldr	r0, [r3, #0]
}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200014e0 	.word	0x200014e0

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b538      	push	{r3, r4, r5, lr}
 80018be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff fff6 	bl	80018b0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80018c6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80018c8:	d002      	beq.n	80018d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_Delay+0x20>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	1b43      	subs	r3, r0, r5
 80018d6:	42a3      	cmp	r3, r4
 80018d8:	d3fa      	bcc.n	80018d0 <HAL_Delay+0x14>
  {
  }
}
 80018da:	bd38      	pop	{r3, r4, r5, pc}
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f000 809f 	beq.w	8001a24 <HAL_ADC_Init+0x144>
{
 80018e6:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80018ea:	4604      	mov	r4, r0
 80018ec:	b13d      	cbz	r5, 80018fe <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f0:	06db      	lsls	r3, r3, #27
 80018f2:	d50c      	bpl.n	800190e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018f4:	2300      	movs	r3, #0
 80018f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80018fa:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80018fe:	f7ff fb69 	bl	8000fd4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001902:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001904:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001906:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190a:	06db      	lsls	r3, r3, #27
 800190c:	d4f2      	bmi.n	80018f4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800190e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8001912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001916:	f023 0302 	bic.w	r3, r3, #2
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001920:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001922:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001924:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001928:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800192a:	6851      	ldr	r1, [r2, #4]
 800192c:	6860      	ldr	r0, [r4, #4]
 800192e:	4301      	orrs	r1, r0
 8001930:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001934:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001936:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8001944:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 800194c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4302      	orrs	r2, r0
 8001952:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001954:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001956:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001958:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800195c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195e:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001960:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001962:	4302      	orrs	r2, r0
 8001964:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001966:	4a34      	ldr	r2, [pc, #208]	; (8001a38 <HAL_ADC_Init+0x158>)
 8001968:	4291      	cmp	r1, r2
 800196a:	d052      	beq.n	8001a12 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800196c:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800196e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001970:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8001974:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4311      	orrs	r1, r2
 800197a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001982:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	432a      	orrs	r2, r5
 8001988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	f022 0202 	bic.w	r2, r2, #2
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	7e21      	ldrb	r1, [r4, #24]
 8001996:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800199a:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800199c:	f894 2020 	ldrb.w	r2, [r4, #32]
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	d041      	beq.n	8001a28 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a4:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80019ac:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ae:	6858      	ldr	r0, [r3, #4]
 80019b0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80019b4:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b6:	1e51      	subs	r1, r2, #1
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019be:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019c2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c4:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	3901      	subs	r1, #1
 80019d0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80019dc:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80019e4:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80019e8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019f0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f2:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f6:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80019fa:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a00:	f023 0303 	bic.w	r3, r3, #3
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001a10:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	e7b2      	b.n	800198a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	e7c6      	b.n	80019c0 <HAL_ADC_Init+0xe0>
 8001a32:	bf00      	nop
 8001a34:	40012300 	.word	0x40012300
 8001a38:	0f000001 	.word	0x0f000001

08001a3c <HAL_ADC_Start_DMA>:
{
 8001a3c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001a3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a42:	b082      	sub	sp, #8
 8001a44:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001a46:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001a4e:	f000 8090 	beq.w	8001b72 <HAL_ADC_Start_DMA+0x136>
 8001a52:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a54:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8001a56:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	68b3      	ldr	r3, [r6, #8]
 8001a5c:	07db      	lsls	r3, r3, #31
 8001a5e:	d414      	bmi.n	8001a8a <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8001a60:	68b3      	ldr	r3, [r6, #8]
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_ADC_Start_DMA+0x148>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_ADC_Start_DMA+0x14c>)
 8001a6e:	fba3 3000 	umull	r3, r0, r3, r0
 8001a72:	0c80      	lsrs	r0, r0, #18
 8001a74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001a78:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001a7a:	9b01      	ldr	r3, [sp, #4]
 8001a7c:	b12b      	cbz	r3, 8001a8a <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8001a7e:	9c01      	ldr	r4, [sp, #4]
 8001a80:	3c01      	subs	r4, #1
 8001a82:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001a84:	9801      	ldr	r0, [sp, #4]
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a8a:	68b3      	ldr	r3, [r6, #8]
 8001a8c:	05dc      	lsls	r4, r3, #23
 8001a8e:	d503      	bpl.n	8001a98 <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a90:	68b3      	ldr	r3, [r6, #8]
 8001a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a96:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a98:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9c:	f010 0001 	ands.w	r0, r0, #1
 8001aa0:	d04e      	beq.n	8001b40 <HAL_ADC_Start_DMA+0x104>
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab0:	6873      	ldr	r3, [r6, #4]
 8001ab2:	0558      	lsls	r0, r3, #21
 8001ab4:	d505      	bpl.n	8001ac2 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ab6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac0:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aca:	bf1c      	itt	ne
 8001acc:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8001ace:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001ad4:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ada:	492c      	ldr	r1, [pc, #176]	; (8001b8c <HAL_ADC_Start_DMA+0x150>)
    __HAL_UNLOCK(hadc);   
 8001adc:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ae0:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ae2:	492b      	ldr	r1, [pc, #172]	; (8001b90 <HAL_ADC_Start_DMA+0x154>)
 8001ae4:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ae6:	492b      	ldr	r1, [pc, #172]	; (8001b94 <HAL_ADC_Start_DMA+0x158>)
 8001ae8:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aea:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8001aee:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001af0:	6871      	ldr	r1, [r6, #4]
 8001af2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001af6:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001af8:	68b1      	ldr	r1, [r6, #8]
 8001afa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001afe:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b00:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001b04:	f000 fa6c 	bl	8001fe0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_ADC_Start_DMA+0x15c>)
 8001b0a:	6858      	ldr	r0, [r3, #4]
 8001b0c:	f010 001f 	ands.w	r0, r0, #31
 8001b10:	d11f      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x116>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b12:	682a      	ldr	r2, [r5, #0]
 8001b14:	4921      	ldr	r1, [pc, #132]	; (8001b9c <HAL_ADC_Start_DMA+0x160>)
 8001b16:	428a      	cmp	r2, r1
 8001b18:	d009      	beq.n	8001b2e <HAL_ADC_Start_DMA+0xf2>
 8001b1a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d02c      	beq.n	8001b7c <HAL_ADC_Start_DMA+0x140>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b22:	491f      	ldr	r1, [pc, #124]	; (8001ba0 <HAL_ADC_Start_DMA+0x164>)
 8001b24:	428a      	cmp	r2, r1
 8001b26:	d112      	bne.n	8001b4e <HAL_ADC_Start_DMA+0x112>
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	06db      	lsls	r3, r3, #27
 8001b2c:	d40f      	bmi.n	8001b4e <HAL_ADC_Start_DMA+0x112>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b2e:	6890      	ldr	r0, [r2, #8]
 8001b30:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001b34:	d111      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x11e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b36:	6893      	ldr	r3, [r2, #8]
 8001b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b3c:	6093      	str	r3, [r2, #8]
 8001b3e:	e006      	b.n	8001b4e <HAL_ADC_Start_DMA+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	646b      	str	r3, [r5, #68]	; 0x44
}
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_ADC_Start_DMA+0x160>)
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d002      	beq.n	8001b60 <HAL_ADC_Start_DMA+0x124>
  return HAL_OK;
 8001b5a:	2000      	movs	r0, #0
}
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b60:	6898      	ldr	r0, [r3, #8]
 8001b62:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001b66:	d107      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x13c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e7ed      	b.n	8001b4e <HAL_ADC_Start_DMA+0x112>
  __HAL_LOCK(hadc);
 8001b72:	2002      	movs	r0, #2
}
 8001b74:	b002      	add	sp, #8
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001b78:	4620      	mov	r0, r4
 8001b7a:	e7e8      	b.n	8001b4e <HAL_ADC_Start_DMA+0x112>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	06d9      	lsls	r1, r3, #27
 8001b80:	d0d5      	beq.n	8001b2e <HAL_ADC_Start_DMA+0xf2>
 8001b82:	e7e4      	b.n	8001b4e <HAL_ADC_Start_DMA+0x112>
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	08001bd1 	.word	0x08001bd1
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bb9 	.word	0x08001bb9
 8001b98:	40012300 	.word	0x40012300
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	40012200 	.word	0x40012200

08001ba4 <HAL_ADC_ConvHalfCpltCallback>:
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ba8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001baa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001bac:	f7ff fffa 	bl	8001ba4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bb0:	bd08      	pop	{r3, pc}
 8001bb2:	bf00      	nop

08001bb4 <HAL_ADC_ErrorCallback>:
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001bba:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bc8:	f7ff fff4 	bl	8001bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop

08001bd0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001bd8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bdc:	d123      	bne.n	8001c26 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be6:	688a      	ldr	r2, [r1, #8]
 8001be8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001bec:	d117      	bne.n	8001c1e <ADC_DMAConvCplt+0x4e>
 8001bee:	7e1a      	ldrb	r2, [r3, #24]
 8001bf0:	b9aa      	cbnz	r2, 8001c1e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001bf8:	d002      	beq.n	8001c00 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bfa:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bfc:	0550      	lsls	r0, r2, #21
 8001bfe:	d40e      	bmi.n	8001c1e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c00:	684a      	ldr	r2, [r1, #4]
 8001c02:	f022 0220 	bic.w	r2, r2, #32
 8001c06:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c12:	04d1      	lsls	r1, r2, #19
 8001c14:	d403      	bmi.n	8001c1e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff faf2 	bl	8001208 <HAL_ADC_ConvCpltCallback>
}
 8001c24:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c26:	06d2      	lsls	r2, r2, #27
 8001c28:	d404      	bmi.n	8001c34 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ffbd 	bl	8001bb4 <HAL_ADC_ErrorCallback>
}
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <HAL_ADC_ConfigChannel>:
{
 8001c3c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8001c3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c42:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001c44:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001c46:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001c48:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001c4a:	f000 809c 	beq.w	8001d86 <HAL_ADC_ConfigChannel+0x14a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c54:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c56:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c58:	2c09      	cmp	r4, #9
 8001c5a:	d82d      	bhi.n	8001cb8 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c5c:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c5e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c60:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8001c64:	f04f 0c07 	mov.w	ip, #7
 8001c68:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001c6c:	ea25 050c 	bic.w	r5, r5, ip
 8001c70:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c72:	691d      	ldr	r5, [r3, #16]
 8001c74:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c78:	432a      	orrs	r2, r5
 8001c7a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c80:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8001c82:	d82f      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8a:	3a05      	subs	r2, #5
 8001c8c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c94:	fa0e f202 	lsl.w	r2, lr, r2
 8001c98:	ea21 0202 	bic.w	r2, r1, r2
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	ea4c 0202 	orr.w	r2, ip, r2
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_ADC_ConfigChannel+0x150>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d030      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8001cac:	2300      	movs	r3, #0
 8001cae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001cb2:	4618      	mov	r0, r3
}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cb8:	fa1f fc84 	uxth.w	ip, r4
 8001cbc:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8001cc0:	68dd      	ldr	r5, [r3, #12]
 8001cc2:	f1a2 0e1e 	sub.w	lr, r2, #30
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ccc:	ea25 0202 	bic.w	r2, r5, r2
 8001cd0:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cd2:	688a      	ldr	r2, [r1, #8]
 8001cd4:	68dd      	ldr	r5, [r3, #12]
 8001cd6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001cda:	432a      	orrs	r2, r5
 8001cdc:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001cde:	684a      	ldr	r2, [r1, #4]
 8001ce0:	2a06      	cmp	r2, #6
 8001ce2:	d9cf      	bls.n	8001c84 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8001ce4:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8001cea:	d836      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	3a23      	subs	r2, #35	; 0x23
 8001cf0:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cf2:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf6:	fa05 f202 	lsl.w	r2, r5, r2
 8001cfa:	ea21 0202 	bic.w	r2, r1, r2
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d02:	ea4c 0202 	orr.w	r2, ip, r2
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d08:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_ADC_ConfigChannel+0x150>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d1ce      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x70>
 8001d0e:	2c12      	cmp	r4, #18
 8001d10:	d032      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d12:	f1a4 0310 	sub.w	r3, r4, #16
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d8c8      	bhi.n	8001cac <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_ADC_ConfigChannel+0x154>)
 8001d1c:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d24:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d26:	d1c1      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_ADC_ConfigChannel+0x158>)
 8001d2a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001d34:	f202 3283 	addw	r2, r2, #899	; 0x383
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001d46:	9b01      	ldr	r3, [sp, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0af      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001d4c:	9b01      	ldr	r3, [sp, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001d52:	9b01      	ldr	r3, [sp, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x110>
 8001d58:	e7a8      	b.n	8001cac <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5c:	3a41      	subs	r2, #65	; 0x41
 8001d5e:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d60:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d64:	fa05 f202 	lsl.w	r2, r5, r2
 8001d68:	ea21 0202 	bic.w	r2, r1, r2
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	ea4c 0202 	orr.w	r2, ip, r2
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d76:	e796      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d78:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d84:	e792      	b.n	8001cac <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001d86:	2002      	movs	r0, #2
}
 8001d88:	b003      	add	sp, #12
 8001d8a:	bd30      	pop	{r4, r5, pc}
 8001d8c:	40012000 	.word	0x40012000
 8001d90:	40012300 	.word	0x40012300
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d9a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001daa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001db2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_NVIC_SetPriority+0x74>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc6:	f1c3 0e07 	rsb	lr, r3, #7
 8001dca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd2:	bf28      	it	cs
 8001dd4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd8:	f1bc 0f06 	cmp.w	ip, #6
 8001ddc:	d91b      	bls.n	8001e16 <HAL_NVIC_SetPriority+0x5a>
 8001dde:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001de4:	fa0c fc03 	lsl.w	ip, ip, r3
 8001de8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001df0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001df4:	ea21 010c 	bic.w	r1, r1, ip
 8001df8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e00:	db0c      	blt.n	8001e1c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e06:	0109      	lsls	r1, r1, #4
 8001e08:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e0c:	b2c9      	uxtb	r1, r1
 8001e0e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e16:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e18:	4613      	mov	r3, r2
 8001e1a:	e7e7      	b.n	8001dec <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_NVIC_SetPriority+0x78>)
 8001e1e:	f000 000f 	and.w	r0, r0, #15
 8001e22:	0109      	lsls	r1, r1, #4
 8001e24:	4403      	add	r3, r0
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	7619      	strb	r1, [r3, #24]
 8001e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	e000ecfc 	.word	0xe000ecfc

08001e38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	db08      	blt.n	8001e4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3c:	0941      	lsrs	r1, r0, #5
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_NVIC_EnableIRQ+0x18>)
 8001e40:	f000 001f 	and.w	r0, r0, #31
 8001e44:	2301      	movs	r3, #1
 8001e46:	fa03 f000 	lsl.w	r0, r3, r0
 8001e4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	3801      	subs	r0, #1
 8001e56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e5a:	d210      	bcs.n	8001e7e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	4c08      	ldr	r4, [pc, #32]	; (8001e84 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001e6a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e70:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e72:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001e76:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	6119      	str	r1, [r3, #16]
 8001e7c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e88:	b180      	cbz	r0, 8001eac <HAL_CRC_Init+0x24>
{
 8001e8a:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e8c:	7943      	ldrb	r3, [r0, #5]
 8001e8e:	4604      	mov	r4, r0
 8001e90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e94:	b11b      	cbz	r3, 8001e9e <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e96:	2301      	movs	r3, #1
 8001e98:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001e9a:	2000      	movs	r0, #0
}
 8001e9c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001e9e:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001ea0:	f7ff f8fa 	bl	8001098 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001ea8:	2000      	movs	r0, #0
}
 8001eaa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fcfc 	bl	80018b0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d052      	beq.n	8001f62 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ebc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001ebe:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001ec6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed6:	f7ff fceb 	bl	80018b0 <HAL_GetTick>
 8001eda:	1b43      	subs	r3, r0, r5
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d839      	bhi.n	8001f54 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	07d1      	lsls	r1, r2, #31
 8001ee6:	d4f6      	bmi.n	8001ed6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001eec:	68e1      	ldr	r1, [r4, #12]
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef8:	432a      	orrs	r2, r5
 8001efa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8001efe:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f00:	4302      	orrs	r2, r0
 8001f02:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f04:	4933      	ldr	r1, [pc, #204]	; (8001fd4 <HAL_DMA_Init+0x124>)
 8001f06:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	6a25      	ldr	r5, [r4, #32]
 8001f0a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f10:	2904      	cmp	r1, #4
 8001f12:	d028      	beq.n	8001f66 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f14:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f16:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f18:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f1c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f1e:	b2d8      	uxtb	r0, r3
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8001f22:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f24:	3810      	subs	r0, #16
 8001f26:	fba2 5200 	umull	r5, r2, r2, r0
 8001f2a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f32:	5c89      	ldrb	r1, [r1, r2]
 8001f34:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f36:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8001f3a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3c:	bf88      	it	hi
 8001f3e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	223f      	movs	r2, #63	; 0x3f
 8001f42:	408a      	lsls	r2, r1
 8001f44:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f46:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f56:	2220      	movs	r2, #32
 8001f58:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001f5e:	4618      	mov	r0, r3
}
 8001f60:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
}
 8001f64:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f66:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8001f6a:	4329      	orrs	r1, r5
 8001f6c:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8001f6e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001f70:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f74:	f021 0107 	bic.w	r1, r1, #7
 8001f78:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001f7a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d0cd      	beq.n	8001f1e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f82:	b178      	cbz	r0, 8001fa4 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f84:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001f88:	d016      	beq.n	8001fb8 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f8a:	2a02      	cmp	r2, #2
 8001f8c:	d903      	bls.n	8001f96 <HAL_DMA_Init+0xe6>
 8001f8e:	2a03      	cmp	r2, #3
 8001f90:	d1c5      	bne.n	8001f1e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f92:	01ea      	lsls	r2, r5, #7
 8001f94:	d5c3      	bpl.n	8001f1e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f98:	2240      	movs	r2, #64	; 0x40
 8001f9a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001fa0:	4618      	mov	r0, r3
}
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001fa4:	2a01      	cmp	r2, #1
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA_Init+0x100>
 8001fa8:	f032 0202 	bics.w	r2, r2, #2
 8001fac:	d1b7      	bne.n	8001f1e <HAL_DMA_Init+0x6e>
 8001fae:	e7f0      	b.n	8001f92 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001fb4:	d1b3      	bne.n	8001f1e <HAL_DMA_Init+0x6e>
 8001fb6:	e7ee      	b.n	8001f96 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8001fb8:	2a03      	cmp	r2, #3
 8001fba:	d8b0      	bhi.n	8001f1e <HAL_DMA_Init+0x6e>
 8001fbc:	a001      	add	r0, pc, #4	; (adr r0, 8001fc4 <HAL_DMA_Init+0x114>)
 8001fbe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001f97 	.word	0x08001f97
 8001fc8:	08001f93 	.word	0x08001f93
 8001fcc:	08001f97 	.word	0x08001f97
 8001fd0:	08001fb1 	.word	0x08001fb1
 8001fd4:	f010803f 	.word	0xf010803f
 8001fd8:	aaaaaaab 	.word	0xaaaaaaab
 8001fdc:	0800a364 	.word	0x0800a364

08001fe0 <HAL_DMA_Start_IT>:
{
 8001fe0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001fe2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001fe8:	2c01      	cmp	r4, #1
 8001fea:	d035      	beq.n	8002058 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fec:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001ff0:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff4:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8001ff6:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ffa:	d005      	beq.n	8002008 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8002002:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8002004:	2002      	movs	r0, #2
}
 8002006:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	2602      	movs	r6, #2
 800200a:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800200e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002010:	2600      	movs	r6, #0
 8002012:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002014:	6826      	ldr	r6, [r4, #0]
 8002016:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800201a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800201c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201e:	6883      	ldr	r3, [r0, #8]
 8002020:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002022:	bf0e      	itee	eq
 8002024:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002026:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002028:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800202a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800202c:	bf08      	it	eq
 800202e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002030:	233f      	movs	r3, #63	; 0x3f
 8002032:	4093      	lsls	r3, r2
 8002034:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002036:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002038:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800203a:	f043 0316 	orr.w	r3, r3, #22
 800203e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002040:	b11a      	cbz	r2, 800204a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002052:	6023      	str	r3, [r4, #0]
}
 8002054:	bc70      	pop	{r4, r5, r6}
 8002056:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002058:	2002      	movs	r0, #2
}
 800205a:	bc70      	pop	{r4, r5, r6}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <HAL_DMA_IRQHandler>:
{
 8002060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002064:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8002066:	4a74      	ldr	r2, [pc, #464]	; (8002238 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002068:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800206a:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002070:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002072:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	2208      	movs	r2, #8
 8002076:	409a      	lsls	r2, r3
 8002078:	4222      	tst	r2, r4
{
 800207a:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207c:	d004      	beq.n	8002088 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207e:	6801      	ldr	r1, [r0, #0]
 8002080:	680f      	ldr	r7, [r1, #0]
 8002082:	0778      	lsls	r0, r7, #29
 8002084:	f100 808a 	bmi.w	800219c <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	4222      	tst	r2, r4
 800208e:	d004      	beq.n	800209a <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002090:	f8d8 1000 	ldr.w	r1, [r8]
 8002094:	6949      	ldr	r1, [r1, #20]
 8002096:	0609      	lsls	r1, r1, #24
 8002098:	d478      	bmi.n	800218c <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800209a:	2204      	movs	r2, #4
 800209c:	409a      	lsls	r2, r3
 800209e:	4222      	tst	r2, r4
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a2:	f8d8 1000 	ldr.w	r1, [r8]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	078f      	lsls	r7, r1, #30
 80020aa:	d467      	bmi.n	800217c <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	2210      	movs	r2, #16
 80020ae:	409a      	lsls	r2, r3
 80020b0:	4222      	tst	r2, r4
 80020b2:	d004      	beq.n	80020be <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b4:	f8d8 1000 	ldr.w	r1, [r8]
 80020b8:	680f      	ldr	r7, [r1, #0]
 80020ba:	0738      	lsls	r0, r7, #28
 80020bc:	d449      	bmi.n	8002152 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020be:	2220      	movs	r2, #32
 80020c0:	409a      	lsls	r2, r3
 80020c2:	4222      	tst	r2, r4
 80020c4:	d017      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	f8d8 1000 	ldr.w	r1, [r8]
 80020ca:	680c      	ldr	r4, [r1, #0]
 80020cc:	06e0      	lsls	r0, r4, #27
 80020ce:	d512      	bpl.n	80020f6 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d0:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020d2:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80020d6:	2a05      	cmp	r2, #5
 80020d8:	d073      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020da:	680b      	ldr	r3, [r1, #0]
 80020dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e2:	f000 8090 	beq.w	8002206 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e6:	0319      	lsls	r1, r3, #12
 80020e8:	f140 809b 	bpl.w	8002222 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80020ec:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80020f0:	b10b      	cbz	r3, 80020f6 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80020f2:	4640      	mov	r0, r8
 80020f4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020f6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80020fa:	b33b      	cbz	r3, 800214c <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020fc:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002100:	07da      	lsls	r2, r3, #31
 8002102:	d51b      	bpl.n	800213c <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002104:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002108:	494c      	ldr	r1, [pc, #304]	; (800223c <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800210a:	2305      	movs	r3, #5
 800210c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002110:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002112:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8002116:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800211a:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e002      	b.n	8002126 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	07db      	lsls	r3, r3, #31
 8002124:	d504      	bpl.n	8002130 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8002126:	9b01      	ldr	r3, [sp, #4]
 8002128:	3301      	adds	r3, #1
 800212a:	42ab      	cmp	r3, r5
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	d9f7      	bls.n	8002120 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8002130:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002132:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002134:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002138:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800213c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002140:	b123      	cbz	r3, 800214c <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8002142:	4640      	mov	r0, r8
}
 8002144:	b002      	add	sp, #8
 8002146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800214a:	4718      	bx	r3
}
 800214c:	b002      	add	sp, #8
 800214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002152:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002154:	680a      	ldr	r2, [r1, #0]
 8002156:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215a:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	d12a      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215e:	05d7      	lsls	r7, r2, #23
 8002160:	d403      	bmi.n	800216a <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	680a      	ldr	r2, [r1, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800216a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800216e:	2a00      	cmp	r2, #0
 8002170:	d0a5      	beq.n	80020be <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8002172:	4640      	mov	r0, r8
 8002174:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002176:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800217a:	e7a0      	b.n	80020be <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800217c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800217e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002182:	f042 0204 	orr.w	r2, r2, #4
 8002186:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800218a:	e78f      	b.n	80020ac <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800218c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800218e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002192:	f042 0202 	orr.w	r2, r2, #2
 8002196:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800219a:	e77e      	b.n	800209a <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800219c:	680f      	ldr	r7, [r1, #0]
 800219e:	f027 0704 	bic.w	r7, r7, #4
 80021a2:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021a4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80021b2:	e769      	b.n	8002088 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b4:	0312      	lsls	r2, r2, #12
 80021b6:	d5d8      	bpl.n	800216a <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b8:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80021bc:	2a00      	cmp	r2, #0
 80021be:	d1d8      	bne.n	8002172 <HAL_DMA_IRQHandler+0x112>
 80021c0:	e77d      	b.n	80020be <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	680a      	ldr	r2, [r1, #0]
 80021c4:	f022 0216 	bic.w	r2, r2, #22
 80021c8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ca:	694a      	ldr	r2, [r1, #20]
 80021cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d0:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80021d6:	b352      	cbz	r2, 800222e <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	680a      	ldr	r2, [r1, #0]
 80021da:	f022 0208 	bic.w	r2, r2, #8
 80021de:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	223f      	movs	r2, #63	; 0x3f
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80021e6:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80021ec:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80021ee:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80021f0:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80021f4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80021f8:	2900      	cmp	r1, #0
 80021fa:	d0a7      	beq.n	800214c <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80021fc:	4640      	mov	r0, r8
}
 80021fe:	b002      	add	sp, #8
 8002200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002204:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002206:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800220a:	f47f af6f 	bne.w	80020ec <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800220e:	680a      	ldr	r2, [r1, #0]
 8002210:	f022 0210 	bic.w	r2, r2, #16
 8002214:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002216:	2201      	movs	r2, #1
 8002218:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800221c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8002220:	e764      	b.n	80020ec <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002222:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f af63 	bne.w	80020f2 <HAL_DMA_IRQHandler+0x92>
 800222c:	e763      	b.n	80020f6 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002232:	2a00      	cmp	r2, #0
 8002234:	d1d0      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x178>
 8002236:	e7d3      	b.n	80021e0 <HAL_DMA_IRQHandler+0x180>
 8002238:	20000000 	.word	0x20000000
 800223c:	1b4e81b5 	.word	0x1b4e81b5

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002244:	2200      	movs	r2, #0
 8002246:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002248:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002478 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224c:	4e83      	ldr	r6, [pc, #524]	; (800245c <HAL_GPIO_Init+0x21c>)
{
 800224e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002250:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	4689      	mov	r9, r1
 8002254:	e005      	b.n	8002262 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	3301      	adds	r3, #1
 8002258:	2b10      	cmp	r3, #16
 800225a:	f102 0202 	add.w	r2, r2, #2
 800225e:	f000 8089 	beq.w	8002374 <HAL_GPIO_Init+0x134>
    ioposition = 0x01U << position;
 8002262:	2101      	movs	r1, #1
 8002264:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800226a:	43a1      	bics	r1, r4
 800226c:	d1f3      	bne.n	8002256 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8002272:	f00c 0103 	and.w	r1, ip, #3
 8002276:	1e4d      	subs	r5, r1, #1
 8002278:	2d01      	cmp	r5, #1
 800227a:	d97e      	bls.n	800237a <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227c:	2903      	cmp	r1, #3
 800227e:	f040 80be 	bne.w	80023fe <HAL_GPIO_Init+0x1be>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002282:	4091      	lsls	r1, r2
 8002284:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8002286:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002288:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228a:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002290:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002292:	d0e0      	beq.n	8002256 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002294:	2100      	movs	r1, #0
 8002296:	9103      	str	r1, [sp, #12]
 8002298:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 800229c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80022a0:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 80022a4:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80022a8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80022ac:	9103      	str	r1, [sp, #12]
 80022ae:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80022b0:	f023 0103 	bic.w	r1, r3, #3
 80022b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80022b8:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022bc:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80022c0:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	00bf      	lsls	r7, r7, #2
 80022c6:	250f      	movs	r5, #15
 80022c8:	40bd      	lsls	r5, r7
 80022ca:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ce:	4d64      	ldr	r5, [pc, #400]	; (8002460 <HAL_GPIO_Init+0x220>)
 80022d0:	42a8      	cmp	r0, r5
 80022d2:	d024      	beq.n	800231e <HAL_GPIO_Init+0xde>
 80022d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d8:	42a8      	cmp	r0, r5
 80022da:	f000 8094 	beq.w	8002406 <HAL_GPIO_Init+0x1c6>
 80022de:	4d61      	ldr	r5, [pc, #388]	; (8002464 <HAL_GPIO_Init+0x224>)
 80022e0:	42a8      	cmp	r0, r5
 80022e2:	f000 8097 	beq.w	8002414 <HAL_GPIO_Init+0x1d4>
 80022e6:	4d60      	ldr	r5, [pc, #384]	; (8002468 <HAL_GPIO_Init+0x228>)
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	f000 809a 	beq.w	8002422 <HAL_GPIO_Init+0x1e2>
 80022ee:	4d5f      	ldr	r5, [pc, #380]	; (800246c <HAL_GPIO_Init+0x22c>)
 80022f0:	42a8      	cmp	r0, r5
 80022f2:	f000 809d 	beq.w	8002430 <HAL_GPIO_Init+0x1f0>
 80022f6:	4d5e      	ldr	r5, [pc, #376]	; (8002470 <HAL_GPIO_Init+0x230>)
 80022f8:	42a8      	cmp	r0, r5
 80022fa:	f000 80a0 	beq.w	800243e <HAL_GPIO_Init+0x1fe>
 80022fe:	4d5d      	ldr	r5, [pc, #372]	; (8002474 <HAL_GPIO_Init+0x234>)
 8002300:	42a8      	cmp	r0, r5
 8002302:	f000 80a3 	beq.w	800244c <HAL_GPIO_Init+0x20c>
 8002306:	f8df e174 	ldr.w	lr, [pc, #372]	; 800247c <HAL_GPIO_Init+0x23c>
 800230a:	4570      	cmp	r0, lr
 800230c:	bf0c      	ite	eq
 800230e:	f04f 0e07 	moveq.w	lr, #7
 8002312:	f04f 0e08 	movne.w	lr, #8
 8002316:	fa0e f707 	lsl.w	r7, lr, r7
 800231a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002322:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002324:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002328:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800232c:	bf0c      	ite	eq
 800232e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002330:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002334:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002336:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800233c:	bf0c      	ite	eq
 800233e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002340:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002344:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8002346:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800234c:	bf0c      	ite	eq
 800234e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002350:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002354:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002356:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8002360:	bf0c      	ite	eq
 8002362:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002364:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002368:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800236a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236c:	f102 0202 	add.w	r2, r2, #2
 8002370:	f47f af77 	bne.w	8002262 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8002374:	b005      	add	sp, #20
 8002376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800237e:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002380:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002384:	2503      	movs	r5, #3
 8002386:	fa05 fe02 	lsl.w	lr, r5, r2
 800238a:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8002392:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002394:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002396:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239a:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239e:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80023a2:	409f      	lsls	r7, r3
 80023a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023a8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80023aa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ac:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b0:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80023b4:	4097      	lsls	r7, r2
 80023b6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80023bc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	fa01 f102 	lsl.w	r1, r1, r2
 80023c2:	f47f af60 	bne.w	8002286 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80023c6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80023ca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ce:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80023d2:	f8de 7020 	ldr.w	r7, [lr, #32]
 80023d6:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023dc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	fa07 f708 	lsl.w	r7, r7, r8
 80023e4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e6:	270f      	movs	r7, #15
 80023e8:	fa07 f808 	lsl.w	r8, r7, r8
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f2:	9f01      	ldr	r7, [sp, #4]
 80023f4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80023f8:	f8ce 7020 	str.w	r7, [lr, #32]
 80023fc:	e743      	b.n	8002286 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fe:	2503      	movs	r5, #3
 8002400:	4095      	lsls	r5, r2
 8002402:	43ed      	mvns	r5, r5
 8002404:	e7d1      	b.n	80023aa <HAL_GPIO_Init+0x16a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	f04f 0e01 	mov.w	lr, #1
 800240a:	fa0e f707 	lsl.w	r7, lr, r7
 800240e:	ea48 0807 	orr.w	r8, r8, r7
 8002412:	e784      	b.n	800231e <HAL_GPIO_Init+0xde>
 8002414:	f04f 0e02 	mov.w	lr, #2
 8002418:	fa0e f707 	lsl.w	r7, lr, r7
 800241c:	ea48 0807 	orr.w	r8, r8, r7
 8002420:	e77d      	b.n	800231e <HAL_GPIO_Init+0xde>
 8002422:	f04f 0e03 	mov.w	lr, #3
 8002426:	fa0e f707 	lsl.w	r7, lr, r7
 800242a:	ea48 0807 	orr.w	r8, r8, r7
 800242e:	e776      	b.n	800231e <HAL_GPIO_Init+0xde>
 8002430:	f04f 0e04 	mov.w	lr, #4
 8002434:	fa0e f707 	lsl.w	r7, lr, r7
 8002438:	ea48 0807 	orr.w	r8, r8, r7
 800243c:	e76f      	b.n	800231e <HAL_GPIO_Init+0xde>
 800243e:	f04f 0e05 	mov.w	lr, #5
 8002442:	fa0e f707 	lsl.w	r7, lr, r7
 8002446:	ea48 0807 	orr.w	r8, r8, r7
 800244a:	e768      	b.n	800231e <HAL_GPIO_Init+0xde>
 800244c:	f04f 0e06 	mov.w	lr, #6
 8002450:	fa0e f707 	lsl.w	r7, lr, r7
 8002454:	ea48 0807 	orr.w	r8, r8, r7
 8002458:	e761      	b.n	800231e <HAL_GPIO_Init+0xde>
 800245a:	bf00      	nop
 800245c:	40013c00 	.word	0x40013c00
 8002460:	40020000 	.word	0x40020000
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40021400 	.word	0x40021400
 8002474:	40021800 	.word	0x40021800
 8002478:	40023800 	.word	0x40023800
 800247c:	40021c00 	.word	0x40021c00

08002480 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002480:	b902      	cbnz	r2, 8002484 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	0409      	lsls	r1, r1, #16
 8002484:	6181      	str	r1, [r0, #24]
  }
}
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002488:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248a:	ea01 0203 	and.w	r2, r1, r3
 800248e:	ea21 0103 	bic.w	r1, r1, r3
 8002492:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002496:	6181      	str	r1, [r0, #24]
}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop

0800249c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	2800      	cmp	r0, #0
 800249e:	f000 81a2 	beq.w	80027e6 <HAL_RCC_OscConfig+0x34a>
{
 80024a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	6803      	ldr	r3, [r0, #0]
 80024a8:	07dd      	lsls	r5, r3, #31
{
 80024aa:	b082      	sub	sp, #8
 80024ac:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	d52f      	bpl.n	8002510 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b0:	499e      	ldr	r1, [pc, #632]	; (800272c <HAL_RCC_OscConfig+0x290>)
 80024b2:	688a      	ldr	r2, [r1, #8]
 80024b4:	f002 020c 	and.w	r2, r2, #12
 80024b8:	2a04      	cmp	r2, #4
 80024ba:	f000 80ed 	beq.w	8002698 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	688a      	ldr	r2, [r1, #8]
 80024c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c4:	2a08      	cmp	r2, #8
 80024c6:	f000 80e3 	beq.w	8002690 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	6863      	ldr	r3, [r4, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	f000 80ec 	beq.w	80026ac <HAL_RCC_OscConfig+0x210>
 80024d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d8:	f000 8175 	beq.w	80027c6 <HAL_RCC_OscConfig+0x32a>
 80024dc:	4d93      	ldr	r5, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x290>)
 80024de:	682a      	ldr	r2, [r5, #0]
 80024e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024e4:	602a      	str	r2, [r5, #0]
 80024e6:	682a      	ldr	r2, [r5, #0]
 80024e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024ec:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80e1 	bne.w	80026b6 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f9dc 	bl	80018b0 <HAL_GetTick>
 80024f8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e005      	b.n	8002508 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff f9d8 	bl	80018b0 <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	2864      	cmp	r0, #100	; 0x64
 8002504:	f200 8101 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	039b      	lsls	r3, r3, #14
 800250c:	d4f6      	bmi.n	80024fc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	079f      	lsls	r7, r3, #30
 8002512:	d528      	bpl.n	8002566 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002514:	4a85      	ldr	r2, [pc, #532]	; (800272c <HAL_RCC_OscConfig+0x290>)
 8002516:	6891      	ldr	r1, [r2, #8]
 8002518:	f011 0f0c 	tst.w	r1, #12
 800251c:	f000 8090 	beq.w	8002640 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002520:	6891      	ldr	r1, [r2, #8]
 8002522:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	2908      	cmp	r1, #8
 8002528:	f000 8086 	beq.w	8002638 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800252c:	68e3      	ldr	r3, [r4, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 810e 	beq.w	8002750 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b7e      	ldr	r3, [pc, #504]	; (8002730 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4e7d      	ldr	r6, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800253c:	f7ff f9b8 	bl	80018b0 <HAL_GetTick>
 8002540:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	e005      	b.n	8002550 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff f9b4 	bl	80018b0 <HAL_GetTick>
 8002548:	1b40      	subs	r0, r0, r5
 800254a:	2802      	cmp	r0, #2
 800254c:	f200 80dd 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	0798      	lsls	r0, r3, #30
 8002554:	d5f6      	bpl.n	8002544 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	6833      	ldr	r3, [r6, #0]
 8002558:	6922      	ldr	r2, [r4, #16]
 800255a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800255e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002562:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	071a      	lsls	r2, r3, #28
 8002568:	d451      	bmi.n	800260e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256a:	0758      	lsls	r0, r3, #29
 800256c:	d52f      	bpl.n	80025ce <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4a6f      	ldr	r2, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x290>)
 8002570:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002572:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002576:	d07f      	beq.n	8002678 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002578:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4e6e      	ldr	r6, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x298>)
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	05d9      	lsls	r1, r3, #23
 8002580:	f140 80b3 	bpl.w	80026ea <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	68a3      	ldr	r3, [r4, #8]
 8002586:	2b01      	cmp	r3, #1
 8002588:	f000 80c3 	beq.w	8002712 <HAL_RCC_OscConfig+0x276>
 800258c:	2b05      	cmp	r3, #5
 800258e:	f000 812c 	beq.w	80027ea <HAL_RCC_OscConfig+0x34e>
 8002592:	4e66      	ldr	r6, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x290>)
 8002594:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	6732      	str	r2, [r6, #112]	; 0x70
 800259c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 80b9 	bne.w	800271c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff f981 	bl	80018b0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025b2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e005      	b.n	80025c2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff f97b 	bl	80018b0 <HAL_GetTick>
 80025ba:	1bc0      	subs	r0, r0, r7
 80025bc:	4540      	cmp	r0, r8
 80025be:	f200 80a4 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80025c4:	0798      	lsls	r0, r3, #30
 80025c6:	d4f6      	bmi.n	80025b6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	f040 8106 	bne.w	80027da <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	69a0      	ldr	r0, [r4, #24]
 80025d0:	b1c8      	cbz	r0, 8002606 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d2:	4d56      	ldr	r5, [pc, #344]	; (800272c <HAL_RCC_OscConfig+0x290>)
 80025d4:	68ab      	ldr	r3, [r5, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	f000 80c9 	beq.w	8002772 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x294>)
 80025e2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80025e6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e8:	f000 8109 	beq.w	80027fe <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f960 	bl	80018b0 <HAL_GetTick>
 80025f0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e005      	b.n	8002600 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f95c 	bl	80018b0 <HAL_GetTick>
 80025f8:	1b00      	subs	r0, r0, r4
 80025fa:	2802      	cmp	r0, #2
 80025fc:	f200 8085 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	d4f6      	bmi.n	80025f4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2000      	movs	r0, #0
}
 8002608:	b002      	add	sp, #8
 800260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	b30b      	cbz	r3, 8002656 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4e45      	ldr	r6, [pc, #276]	; (800272c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002616:	2201      	movs	r2, #1
 8002618:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800261c:	f7ff f948 	bl	80018b0 <HAL_GetTick>
 8002620:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e004      	b.n	800262e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7ff f944 	bl	80018b0 <HAL_GetTick>
 8002628:	1b40      	subs	r0, r0, r5
 800262a:	2802      	cmp	r0, #2
 800262c:	d86d      	bhi.n	800270a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002630:	079b      	lsls	r3, r3, #30
 8002632:	d5f7      	bpl.n	8002624 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	e798      	b.n	800256a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002638:	6852      	ldr	r2, [r2, #4]
 800263a:	0256      	lsls	r6, r2, #9
 800263c:	f53f af76 	bmi.w	800252c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002640:	4a3a      	ldr	r2, [pc, #232]	; (800272c <HAL_RCC_OscConfig+0x290>)
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	0795      	lsls	r5, r2, #30
 8002646:	d544      	bpl.n	80026d2 <HAL_RCC_OscConfig+0x236>
 8002648:	68e2      	ldr	r2, [r4, #12]
 800264a:	2a01      	cmp	r2, #1
 800264c:	d041      	beq.n	80026d2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800264e:	2001      	movs	r0, #1
}
 8002650:	b002      	add	sp, #8
 8002652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4e34      	ldr	r6, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800265a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800265e:	f7ff f927 	bl	80018b0 <HAL_GetTick>
 8002662:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e004      	b.n	8002670 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff f923 	bl	80018b0 <HAL_GetTick>
 800266a:	1b40      	subs	r0, r0, r5
 800266c:	2802      	cmp	r0, #2
 800266e:	d84c      	bhi.n	800270a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002672:	079f      	lsls	r7, r3, #30
 8002674:	d4f7      	bmi.n	8002666 <HAL_RCC_OscConfig+0x1ca>
 8002676:	e7dd      	b.n	8002634 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800268c:	2501      	movs	r5, #1
 800268e:	e774      	b.n	800257a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002690:	684a      	ldr	r2, [r1, #4]
 8002692:	0250      	lsls	r0, r2, #9
 8002694:	f57f af19 	bpl.w	80024ca <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x290>)
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	0391      	lsls	r1, r2, #14
 800269e:	f57f af37 	bpl.w	8002510 <HAL_RCC_OscConfig+0x74>
 80026a2:	6862      	ldr	r2, [r4, #4]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	f47f af33 	bne.w	8002510 <HAL_RCC_OscConfig+0x74>
 80026aa:	e7d0      	b.n	800264e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	4a1f      	ldr	r2, [pc, #124]	; (800272c <HAL_RCC_OscConfig+0x290>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026b6:	f7ff f8fb 	bl	80018b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4e1c      	ldr	r6, [pc, #112]	; (800272c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80026bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	e004      	b.n	80026ca <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff f8f6 	bl	80018b0 <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	2864      	cmp	r0, #100	; 0x64
 80026c8:	d81f      	bhi.n	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	6833      	ldr	r3, [r6, #0]
 80026cc:	039a      	lsls	r2, r3, #14
 80026ce:	d5f7      	bpl.n	80026c0 <HAL_RCC_OscConfig+0x224>
 80026d0:	e71d      	b.n	800250e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_OscConfig+0x290>)
 80026d4:	6920      	ldr	r0, [r4, #16]
 80026d6:	680a      	ldr	r2, [r1, #0]
 80026d8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80026dc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80026e0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	071a      	lsls	r2, r3, #28
 80026e4:	f57f af41 	bpl.w	800256a <HAL_RCC_OscConfig+0xce>
 80026e8:	e791      	b.n	800260e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	6833      	ldr	r3, [r6, #0]
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80026f2:	f7ff f8dd 	bl	80018b0 <HAL_GetTick>
 80026f6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	6833      	ldr	r3, [r6, #0]
 80026fa:	05da      	lsls	r2, r3, #23
 80026fc:	f53f af42 	bmi.w	8002584 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7ff f8d6 	bl	80018b0 <HAL_GetTick>
 8002704:	1bc0      	subs	r0, r0, r7
 8002706:	2802      	cmp	r0, #2
 8002708:	d9f6      	bls.n	80026f8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800270a:	2003      	movs	r0, #3
}
 800270c:	b002      	add	sp, #8
 800270e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002712:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x290>)
 8002714:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800271c:	f7ff f8c8 	bl	80018b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4f02      	ldr	r7, [pc, #8]	; (800272c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002722:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x2a6>
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	42470000 	.word	0x42470000
 8002734:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7ff f8ba 	bl	80018b0 <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	4540      	cmp	r0, r8
 8002740:	d8e3      	bhi.n	800270a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002744:	079b      	lsls	r3, r3, #30
 8002746:	d5f7      	bpl.n	8002738 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002748:	2d00      	cmp	r5, #0
 800274a:	f43f af40 	beq.w	80025ce <HAL_RCC_OscConfig+0x132>
 800274e:	e044      	b.n	80027da <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002750:	4a42      	ldr	r2, [pc, #264]	; (800285c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4e43      	ldr	r6, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002754:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002756:	f7ff f8ab 	bl	80018b0 <HAL_GetTick>
 800275a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275c:	e004      	b.n	8002768 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f8a7 	bl	80018b0 <HAL_GetTick>
 8002762:	1b40      	subs	r0, r0, r5
 8002764:	2802      	cmp	r0, #2
 8002766:	d8d0      	bhi.n	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002768:	6833      	ldr	r3, [r6, #0]
 800276a:	0799      	lsls	r1, r3, #30
 800276c:	d4f7      	bmi.n	800275e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	e6f9      	b.n	8002566 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002772:	2801      	cmp	r0, #1
 8002774:	f43f af48 	beq.w	8002608 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002778:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	4291      	cmp	r1, r2
 8002782:	f47f af64 	bne.w	800264e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278c:	4291      	cmp	r1, r2
 800278e:	f47f af5e 	bne.w	800264e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002794:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002798:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800279e:	f47f af56 	bne.w	800264e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80027aa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80027b0:	f47f af4d 	bne.w	800264e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ba:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80027be:	bf14      	ite	ne
 80027c0:	2001      	movne	r0, #1
 80027c2:	2000      	moveq	r0, #0
 80027c4:	e720      	b.n	8002608 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0x3c4>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027d6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d8:	e76d      	b.n	80026b6 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x3c4>)
 80027dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
 80027e4:	e6f3      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
}
 80027e8:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x3c4>)
 80027ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027ee:	f042 0204 	orr.w	r2, r2, #4
 80027f2:	671a      	str	r2, [r3, #112]	; 0x70
 80027f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fc:	e78e      	b.n	800271c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80027fe:	f7ff f857 	bl	80018b0 <HAL_GetTick>
 8002802:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002804:	e005      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff f853 	bl	80018b0 <HAL_GetTick>
 800280a:	1b80      	subs	r0, r0, r6
 800280c:	2802      	cmp	r0, #2
 800280e:	f63f af7c 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	0199      	lsls	r1, r3, #6
 8002816:	d4f6      	bmi.n	8002806 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002818:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800281c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800281e:	430b      	orrs	r3, r1
 8002820:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002824:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002828:	0852      	lsrs	r2, r2, #1
 800282a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800282e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002830:	490a      	ldr	r1, [pc, #40]	; (800285c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002836:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002838:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800283a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800283c:	f7ff f838 	bl	80018b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4d07      	ldr	r5, [pc, #28]	; (8002860 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002842:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	e005      	b.n	8002852 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff f833 	bl	80018b0 <HAL_GetTick>
 800284a:	1b00      	subs	r0, r0, r4
 800284c:	2802      	cmp	r0, #2
 800284e:	f63f af5c 	bhi.w	800270a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	682b      	ldr	r3, [r5, #0]
 8002854:	019a      	lsls	r2, r3, #6
 8002856:	d5f6      	bpl.n	8002846 <HAL_RCC_OscConfig+0x3aa>
 8002858:	e6d5      	b.n	8002606 <HAL_RCC_OscConfig+0x16a>
 800285a:	bf00      	nop
 800285c:	42470000 	.word	0x42470000
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002866:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002868:	688b      	ldr	r3, [r1, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d01b      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x46>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d117      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002876:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002878:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002884:	d113      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	480f      	ldr	r0, [pc, #60]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002888:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800288c:	fba1 0100 	umull	r0, r1, r1, r0
 8002890:	f7fe f9da 	bl	8000c48 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800289c:	3301      	adds	r3, #1
 800289e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80028a0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80028a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028aa:	4807      	ldr	r0, [pc, #28]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80028ac:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4806      	ldr	r0, [pc, #24]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x64>)
 80028b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80028b4:	2300      	movs	r3, #0
 80028b6:	fba1 0100 	umull	r0, r1, r1, r0
 80028ba:	f7fe f9c5 	bl	8000c48 <__aeabi_uldivmod>
 80028be:	e7e9      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x30>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	017d7840 	.word	0x017d7840

080028cc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80028cc:	2800      	cmp	r0, #0
 80028ce:	f000 8087 	beq.w	80029e0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d2:	4a48      	ldr	r2, [pc, #288]	; (80029f4 <HAL_RCC_ClockConfig+0x128>)
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	428b      	cmp	r3, r1
{
 80028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e0:	460d      	mov	r5, r1
 80028e2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	d209      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	b2cb      	uxtb	r3, r1
 80028e8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	428b      	cmp	r3, r1
 80028f2:	d002      	beq.n	80028fa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
}
 80028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	0798      	lsls	r0, r3, #30
 80028fe:	d514      	bpl.n	800292a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	0759      	lsls	r1, r3, #29
 8002902:	d504      	bpl.n	800290e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	493c      	ldr	r1, [pc, #240]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 8002906:	688a      	ldr	r2, [r1, #8]
 8002908:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800290c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	071a      	lsls	r2, r3, #28
 8002910:	d504      	bpl.n	800291c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002912:	4939      	ldr	r1, [pc, #228]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 8002914:	688a      	ldr	r2, [r1, #8]
 8002916:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800291a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4936      	ldr	r1, [pc, #216]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 800291e:	68a0      	ldr	r0, [r4, #8]
 8002920:	688a      	ldr	r2, [r1, #8]
 8002922:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002926:	4302      	orrs	r2, r0
 8002928:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	07df      	lsls	r7, r3, #31
 800292c:	d521      	bpl.n	8002972 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	2a01      	cmp	r2, #1
 8002932:	d057      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002934:	1e93      	subs	r3, r2, #2
 8002936:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 800293a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293c:	d94d      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	0799      	lsls	r1, r3, #30
 8002940:	d5d8      	bpl.n	80028f4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4e2d      	ldr	r6, [pc, #180]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 8002944:	68b3      	ldr	r3, [r6, #8]
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	4313      	orrs	r3, r2
 800294c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800294e:	f7fe ffaf 	bl	80018b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002952:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002956:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002958:	e004      	b.n	8002964 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295a:	f7fe ffa9 	bl	80018b0 <HAL_GetTick>
 800295e:	1bc0      	subs	r0, r0, r7
 8002960:	4540      	cmp	r0, r8
 8002962:	d844      	bhi.n	80029ee <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002964:	68b3      	ldr	r3, [r6, #8]
 8002966:	6862      	ldr	r2, [r4, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002970:	d1f3      	bne.n	800295a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <HAL_RCC_ClockConfig+0x128>)
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	42ab      	cmp	r3, r5
 800297c:	d906      	bls.n	800298c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	b2eb      	uxtb	r3, r5
 8002980:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	42ab      	cmp	r3, r5
 800298a:	d1b3      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	075a      	lsls	r2, r3, #29
 8002990:	d506      	bpl.n	80029a0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002992:	4919      	ldr	r1, [pc, #100]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 8002994:	68e0      	ldr	r0, [r4, #12]
 8002996:	688a      	ldr	r2, [r1, #8]
 8002998:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800299c:	4302      	orrs	r2, r0
 800299e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	071b      	lsls	r3, r3, #28
 80029a2:	d507      	bpl.n	80029b4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 80029a6:	6921      	ldr	r1, [r4, #16]
 80029a8:	6893      	ldr	r3, [r2, #8]
 80029aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b4:	f7ff ff56 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 80029ba:	4c10      	ldr	r4, [pc, #64]	; (80029fc <HAL_RCC_ClockConfig+0x130>)
 80029bc:	6892      	ldr	r2, [r2, #8]
 80029be:	4910      	ldr	r1, [pc, #64]	; (8002a00 <HAL_RCC_ClockConfig+0x134>)
 80029c0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80029c4:	4603      	mov	r3, r0
 80029c6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80029c8:	480e      	ldr	r0, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ca:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80029cc:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ce:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80029d0:	f7fe ff24 	bl	800181c <HAL_InitTick>
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
}
 80029d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	0198      	lsls	r0, r3, #6
 80029dc:	d4b1      	bmi.n	8002942 <HAL_RCC_ClockConfig+0x76>
 80029de:	e789      	b.n	80028f4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
}
 80029e2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_ClockConfig+0x12c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	039e      	lsls	r6, r3, #14
 80029ea:	d4aa      	bmi.n	8002942 <HAL_RCC_ClockConfig+0x76>
 80029ec:	e782      	b.n	80028f4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80029ee:	2003      	movs	r0, #3
 80029f0:	e781      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a>
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	0800a34c 	.word	0x0800a34c
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002a0a:	4905      	ldr	r1, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a10:	6808      	ldr	r0, [r1, #0]
 8002a12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a18:	40d8      	lsrs	r0, r3
 8002a1a:	4770      	bx	lr
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	20000000 	.word	0x20000000
 8002a24:	0800a35c 	.word	0x0800a35c

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002a2a:	4905      	ldr	r1, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a30:	6808      	ldr	r0, [r1, #0]
 8002a32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a38:	40d8      	lsrs	r0, r3
 8002a3a:	4770      	bx	lr
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	20000000 	.word	0x20000000
 8002a44:	0800a35c 	.word	0x0800a35c

08002a48 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002a48:	b1b0      	cbz	r0, 8002a78 <HAL_RNG_Init+0x30>
{
 8002a4a:	b510      	push	{r4, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002a4c:	7943      	ldrb	r3, [r0, #5]
 8002a4e:	4604      	mov	r4, r0
 8002a50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a54:	b163      	cbz	r3, 8002a70 <HAL_RNG_Init+0x28>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002a56:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002a5c:	680b      	ldr	r3, [r1, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002a5e:	2001      	movs	r0, #1
  __HAL_RNG_ENABLE(hrng);
 8002a60:	f043 0304 	orr.w	r3, r3, #4

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a64:	2200      	movs	r2, #0
  __HAL_RNG_ENABLE(hrng);
 8002a66:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 8002a68:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002a6a:	4610      	mov	r0, r2
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a6c:	60a2      	str	r2, [r4, #8]
}
 8002a6e:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 8002a70:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8002a72:	f7fe fd79 	bl	8001568 <HAL_RNG_MspInit>
 8002a76:	e7ee      	b.n	8002a56 <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a7e:	7903      	ldrb	r3, [r0, #4]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d027      	beq.n	8002ad4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a84:	7943      	ldrb	r3, [r0, #5]
  __HAL_LOCK(hrng);
 8002a86:	2201      	movs	r2, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8002a8c:	7102      	strb	r2, [r0, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a8e:	b2de      	uxtb	r6, r3
 8002a90:	d006      	beq.n	8002aa0 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a92:	2304      	movs	r3, #4
 8002a94:	6083      	str	r3, [r0, #8]
    status = HAL_ERROR;
 8002a96:	4616      	mov	r6, r2
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	7123      	strb	r3, [r4, #4]

  return status;
}
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	f7fe ff03 	bl	80018b0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002aaa:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002aac:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	07d2      	lsls	r2, r2, #31
 8002ab2:	d412      	bmi.n	8002ada <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ab4:	f7fe fefc 	bl	80018b0 <HAL_GetTick>
 8002ab8:	1bc0      	subs	r0, r0, r7
 8002aba:	2802      	cmp	r0, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002abc:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002abe:	d9f6      	bls.n	8002aae <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	f012 0201 	ands.w	r2, r2, #1
 8002ac6:	d1f2      	bne.n	8002aae <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 8002ac8:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002aca:	2302      	movs	r3, #2
          hrng->State = HAL_RNG_STATE_READY;
 8002acc:	7161      	strb	r1, [r4, #5]
          __HAL_UNLOCK(hrng);
 8002ace:	7122      	strb	r2, [r4, #4]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002ad0:	60a3      	str	r3, [r4, #8]
          return HAL_ERROR;
 8002ad2:	e7e3      	b.n	8002a9c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8002ad4:	2602      	movs	r6, #2
}
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60e3      	str	r3, [r4, #12]
    hrng->State = HAL_RNG_STATE_READY;
 8002ade:	2201      	movs	r2, #1
    *random32bit = hrng->RandomNumber;
 8002ae0:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2600      	movs	r6, #0
    hrng->State = HAL_RNG_STATE_READY;
 8002ae4:	7162      	strb	r2, [r4, #5]
 8002ae6:	e7d7      	b.n	8002a98 <HAL_RNG_GenerateRandomNumber+0x1c>

08002ae8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	f000 8087 	beq.w	8002bfc <HAL_TIM_Base_Init+0x114>
{
 8002aee:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002af4:	4604      	mov	r4, r0
 8002af6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d079      	beq.n	8002bf2 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b00:	493f      	ldr	r1, [pc, #252]	; (8002c00 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002b0a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	d05d      	beq.n	8002bca <HAL_TIM_Base_Init+0xe2>
 8002b0e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b12:	d031      	beq.n	8002b78 <HAL_TIM_Base_Init+0x90>
 8002b14:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8002b18:	428a      	cmp	r2, r1
 8002b1a:	d02d      	beq.n	8002b78 <HAL_TIM_Base_Init+0x90>
 8002b1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b20:	428a      	cmp	r2, r1
 8002b22:	d029      	beq.n	8002b78 <HAL_TIM_Base_Init+0x90>
 8002b24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b28:	428a      	cmp	r2, r1
 8002b2a:	d025      	beq.n	8002b78 <HAL_TIM_Base_Init+0x90>
 8002b2c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8002b30:	428a      	cmp	r2, r1
 8002b32:	d04a      	beq.n	8002bca <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b34:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8002b38:	428a      	cmp	r2, r1
 8002b3a:	d021      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
 8002b3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b40:	428a      	cmp	r2, r1
 8002b42:	d01d      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
 8002b44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b48:	428a      	cmp	r2, r1
 8002b4a:	d019      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
 8002b4c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8002b50:	428a      	cmp	r2, r1
 8002b52:	d015      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
 8002b54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b58:	428a      	cmp	r2, r1
 8002b5a:	d011      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
 8002b5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b60:	428a      	cmp	r2, r1
 8002b62:	d00d      	beq.n	8002b80 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b64:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b66:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002b6e:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b70:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b72:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b74:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b76:	e010      	b.n	8002b9a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8002b78:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b7e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b80:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b82:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002b92:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002b94:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b96:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b98:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ba6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002baa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
}
 8002bc8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8002bca:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bcc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bd2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bda:	69a1      	ldr	r1, [r4, #24]
 8002bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002be2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	68e3      	ldr	r3, [r4, #12]
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002be8:	6863      	ldr	r3, [r4, #4]
 8002bea:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	6963      	ldr	r3, [r4, #20]
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	e7d3      	b.n	8002b9a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8002bf2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bf6:	f7fe fd6f 	bl	80016d8 <HAL_TIM_Base_MspInit>
 8002bfa:	e780      	b.n	8002afe <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8002bfc:	2001      	movs	r0, #1
}
 8002bfe:	4770      	bx	lr
 8002c00:	40010000 	.word	0x40010000

08002c04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002c04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d12f      	bne.n	8002c6c <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0e:	4919      	ldr	r1, [pc, #100]	; (8002c74 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	2202      	movs	r2, #2
 8002c12:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c16:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c20:	d019      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d016      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_TIM_Base_Start_IT+0x74>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c46:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_Base_Start_IT+0x52>
 8002c4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d104      	bne.n	8002c60 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5c:	2a06      	cmp	r2, #6
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	4770      	bx	lr
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	4770      	bx	lr
  return HAL_OK;
 8002c70:	2000      	movs	r0, #0
}
 8002c72:	4770      	bx	lr
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400

08002c7c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d075      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xf4>
 8002c84:	4602      	mov	r2, r0
{
 8002c86:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002c8a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002c96:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ca2:	680b      	ldr	r3, [r1, #0]
 8002ca4:	2b60      	cmp	r3, #96	; 0x60
 8002ca6:	d065      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0xf8>
 8002ca8:	d824      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x78>
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d07c      	beq.n	8002da8 <HAL_TIM_ConfigClockSource+0x12c>
 8002cae:	d94b      	bls.n	8002d48 <HAL_TIM_ConfigClockSource+0xcc>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d117      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb4:	6848      	ldr	r0, [r1, #4]
 8002cb6:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cba:	6a23      	ldr	r3, [r4, #32]
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002ccc:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cdc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002ce6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002cec:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002cf0:	bc30      	pop	{r4, r5}
 8002cf2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d038      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xf0>
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d110      	bne.n	8002d22 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d00:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d04:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d06:	432b      	orrs	r3, r5
 8002d08:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002d12:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d14:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d16:	68a3      	ldr	r3, [r4, #8]
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1e:	60a3      	str	r3, [r4, #8]
      break;
 8002d20:	e7e0      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002d22:	2b70      	cmp	r3, #112	; 0x70
 8002d24:	d1de      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d26:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d2a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2c:	432b      	orrs	r3, r5
 8002d2e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d34:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002d38:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002d3a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002d3c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8002d44:	60a3      	str	r3, [r4, #8]
      break;
 8002d46:	e7cd      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d002      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xd6>
 8002d4c:	d90a      	bls.n	8002d64 <HAL_TIM_ConfigClockSource+0xe8>
 8002d4e:	2b30      	cmp	r3, #48	; 0x30
 8002d50:	d1c8      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002d52:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d54:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002d60:	60a3      	str	r3, [r4, #8]
}
 8002d62:	e7bf      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002d64:	f033 0110 	bics.w	r1, r3, #16
 8002d68:	d1bc      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
 8002d6a:	e7f2      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	e7b9      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002d70:	2002      	movs	r0, #2
}
 8002d72:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d74:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	68cb      	ldr	r3, [r1, #12]
 8002d78:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7a:	f020 0010 	bic.w	r0, r0, #16
 8002d7e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d80:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d82:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d86:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8002d8a:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8c:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d92:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002d96:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002d98:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002da4:	60a3      	str	r3, [r4, #8]
}
 8002da6:	e79d      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da8:	6848      	ldr	r0, [r1, #4]
 8002daa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002dac:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dae:	6a23      	ldr	r3, [r4, #32]
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002dc0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002dc8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002dca:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002dd6:	60a3      	str	r3, [r4, #8]
}
 8002dd8:	e784      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x68>
 8002dda:	bf00      	nop

08002ddc <HAL_TIM_OC_DelayElapsedCallback>:
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <HAL_TIM_IC_CaptureCallback>:
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <HAL_TIM_TriggerCallback>:
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop

08002dec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dec:	6803      	ldr	r3, [r0, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	0791      	lsls	r1, r2, #30
{
 8002df2:	b510      	push	{r4, lr}
 8002df4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df6:	d502      	bpl.n	8002dfe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	0792      	lsls	r2, r2, #30
 8002dfc:	d45f      	bmi.n	8002ebe <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	0750      	lsls	r0, r2, #29
 8002e02:	d502      	bpl.n	8002e0a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	0751      	lsls	r1, r2, #29
 8002e08:	d446      	bmi.n	8002e98 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	0712      	lsls	r2, r2, #28
 8002e0e:	d502      	bpl.n	8002e16 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	0710      	lsls	r0, r2, #28
 8002e14:	d42e      	bmi.n	8002e74 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	06d2      	lsls	r2, r2, #27
 8002e1a:	d502      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	06d0      	lsls	r0, r2, #27
 8002e20:	d418      	bmi.n	8002e54 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	07d1      	lsls	r1, r2, #31
 8002e26:	d502      	bpl.n	8002e2e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	07d2      	lsls	r2, r2, #31
 8002e2c:	d45d      	bmi.n	8002eea <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	0610      	lsls	r0, r2, #24
 8002e32:	d502      	bpl.n	8002e3a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	0611      	lsls	r1, r2, #24
 8002e38:	d45f      	bmi.n	8002efa <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	0652      	lsls	r2, r2, #25
 8002e3e:	d502      	bpl.n	8002e46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	0650      	lsls	r0, r2, #25
 8002e44:	d461      	bmi.n	8002f0a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	0691      	lsls	r1, r2, #26
 8002e4a:	d502      	bpl.n	8002e52 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	0692      	lsls	r2, r2, #26
 8002e50:	d443      	bmi.n	8002eda <HAL_TIM_IRQHandler+0xee>
}
 8002e52:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e54:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e58:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e5a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002e64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e66:	d064      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e68:	f7ff ffba 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e6e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	7722      	strb	r2, [r4, #28]
 8002e72:	e7d6      	b.n	8002e22 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e74:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e78:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e84:	d152      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	f7ff ffa9 	bl	8002ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ffaa 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e90:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e92:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e94:	7722      	strb	r2, [r4, #28]
 8002e96:	e7be      	b.n	8002e16 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e98:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e9e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eaa:	d13c      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eac:	f7ff ff96 	bl	8002ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff ff97 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	7722      	strb	r2, [r4, #28]
 8002ebc:	e7a5      	b.n	8002e0a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebe:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ec4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	079b      	lsls	r3, r3, #30
 8002ecc:	d025      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	f7ff ff87 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	7722      	strb	r2, [r4, #28]
 8002ed8:	e791      	b.n	8002dfe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eda:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002ede:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002ee6:	f000 b86b 	b.w	8002fc0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eea:	f06f 0201 	mvn.w	r2, #1
 8002eee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7fe f979 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	e799      	b.n	8002e2e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f00:	4620      	mov	r0, r4
 8002f02:	f000 f85f 	bl	8002fc4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	e797      	b.n	8002e3a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff ff69 	bl	8002de8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	e795      	b.n	8002e46 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	f7ff ff5f 	bl	8002ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff ff60 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f24:	e7d5      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	f7ff ff5b 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002f2a:	e7c4      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2c:	f7ff ff58 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e7ae      	b.n	8002e90 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	f7ff ff53 	bl	8002ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff54 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f3c:	e796      	b.n	8002e6c <HAL_TIM_IRQHandler+0x80>
 8002f3e:	bf00      	nop

08002f40 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d037      	beq.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4a:	2202      	movs	r2, #2
{
 8002f4c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002f52:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f54:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002f56:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f5c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01a      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d017      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f6c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00f      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f84:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002f94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002fa6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002fae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002fb2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002fb4:	4618      	mov	r0, r3
}
 8002fb6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002fb8:	2002      	movs	r0, #2
}
 8002fba:	4770      	bx	lr
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <HAL_TIMEx_CommutCallback>:
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_TIMEx_BreakCallback>:
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	f000 808f 	beq.w	80030ec <HAL_UART_Init+0x124>
{
 8002fce:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8081 	beq.w	80030e2 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	2224      	movs	r2, #36	; 0x24
 8002fe6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002ffa:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ffc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffe:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003000:	4302      	orrs	r2, r0
 8003002:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003004:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003006:	4302      	orrs	r2, r0
 8003008:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800300a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800300e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003012:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301c:	4934      	ldr	r1, [pc, #208]	; (80030f0 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800301e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003022:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003024:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003026:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003028:	d035      	beq.n	8003096 <HAL_UART_Init+0xce>
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_UART_Init+0x12c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d032      	beq.n	8003096 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff fcea 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003034:	69e3      	ldr	r3, [r4, #28]
 8003036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303a:	d032      	beq.n	80030a2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	2119      	movs	r1, #25
 8003040:	009a      	lsls	r2, r3, #2
 8003042:	fba0 0101 	umull	r0, r1, r0, r1
 8003046:	0f9b      	lsrs	r3, r3, #30
 8003048:	f7fd fdfe 	bl	8000c48 <__aeabi_uldivmod>
 800304c:	492a      	ldr	r1, [pc, #168]	; (80030f8 <HAL_UART_Init+0x130>)
 800304e:	fba1 3200 	umull	r3, r2, r1, r0
 8003052:	0952      	lsrs	r2, r2, #5
 8003054:	2564      	movs	r5, #100	; 0x64
 8003056:	fb05 0012 	mls	r0, r5, r2, r0
 800305a:	0100      	lsls	r0, r0, #4
 800305c:	3032      	adds	r0, #50	; 0x32
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	fba1 1000 	umull	r1, r0, r1, r0
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800306a:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003072:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800307c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003080:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003086:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800308a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800308e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003092:	4628      	mov	r0, r5
}
 8003094:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003096:	f7ff fcc7 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	69e3      	ldr	r3, [r4, #28]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d1cc      	bne.n	800303c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	2119      	movs	r1, #25
 80030a6:	1892      	adds	r2, r2, r2
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	415b      	adcs	r3, r3
 80030ae:	fba0 0101 	umull	r0, r1, r0, r1
 80030b2:	f7fd fdc9 	bl	8000c48 <__aeabi_uldivmod>
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_UART_Init+0x130>)
 80030b8:	fba3 2100 	umull	r2, r1, r3, r0
 80030bc:	094d      	lsrs	r5, r1, #5
 80030be:	2264      	movs	r2, #100	; 0x64
 80030c0:	fb02 0215 	mls	r2, r2, r5, r0
 80030c4:	00d2      	lsls	r2, r2, #3
 80030c6:	3232      	adds	r2, #50	; 0x32
 80030c8:	fba3 3202 	umull	r3, r2, r3, r2
 80030cc:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80030d0:	0912      	lsrs	r2, r2, #4
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80030d8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80030dc:	440a      	add	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e7c4      	b.n	800306c <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80030e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80030e6:	f7fe fb33 	bl	8001750 <HAL_UART_MspInit>
 80030ea:	e779      	b.n	8002fe0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80030ec:	2001      	movs	r0, #1
}
 80030ee:	4770      	bx	lr
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	51eb851f 	.word	0x51eb851f

080030fc <HAL_UART_Transmit>:
{
 80030fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003100:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003102:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003106:	2820      	cmp	r0, #32
 8003108:	d177      	bne.n	80031fa <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 800310a:	4689      	mov	r9, r1
 800310c:	2900      	cmp	r1, #0
 800310e:	d040      	beq.n	8003192 <HAL_UART_Transmit+0x96>
 8003110:	4614      	mov	r4, r2
 8003112:	2a00      	cmp	r2, #0
 8003114:	d03d      	beq.n	8003192 <HAL_UART_Transmit+0x96>
 8003116:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8003118:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d06c      	beq.n	80031fa <HAL_UART_Transmit+0xfe>
 8003120:	2301      	movs	r3, #1
 8003122:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003130:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003134:	f7fe fbbc 	bl	80018b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 800313a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003140:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8003142:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	d05c      	beq.n	8003200 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8003146:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003148:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800314a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800314c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003150:	2b00      	cmp	r3, #0
 8003152:	d07e      	beq.n	8003252 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003154:	682c      	ldr	r4, [r5, #0]
 8003156:	1c72      	adds	r2, r6, #1
 8003158:	d11e      	bne.n	8003198 <HAL_UART_Transmit+0x9c>
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	0613      	lsls	r3, r2, #24
 800315e:	d5fc      	bpl.n	800315a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8003160:	f1b9 0f00 	cmp.w	r9, #0
 8003164:	d044      	beq.n	80031f0 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	f819 3b01 	ldrb.w	r3, [r9], #1
 800316a:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 800316c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800316e:	3b01      	subs	r3, #1
 8003170:	b29b      	uxth	r3, r3
 8003172:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003174:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ec      	bne.n	8003156 <HAL_UART_Transmit+0x5a>
 800317c:	1c71      	adds	r1, r6, #1
 800317e:	d145      	bne.n	800320c <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	065a      	lsls	r2, r3, #25
 8003184:	d5fc      	bpl.n	8003180 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003186:	2320      	movs	r3, #32
 8003188:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 800318c:	2000      	movs	r0, #0
}
 800318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003192:	2001      	movs	r0, #1
}
 8003194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	0618      	lsls	r0, r3, #24
 800319c:	d4e0      	bmi.n	8003160 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800319e:	b12e      	cbz	r6, 80031ac <HAL_UART_Transmit+0xb0>
 80031a0:	f7fe fb86 	bl	80018b0 <HAL_GetTick>
 80031a4:	1bc0      	subs	r0, r0, r7
 80031a6:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a8:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031aa:	d2d4      	bcs.n	8003156 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f104 030c 	add.w	r3, r4, #12
 80031b0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	f104 010c 	add.w	r1, r4, #12
 80031bc:	e841 3200 	strex	r2, r3, [r1]
 80031c0:	2a00      	cmp	r2, #0
 80031c2:	d1f3      	bne.n	80031ac <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f104 0314 	add.w	r3, r4, #20
 80031c8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	f104 0114 	add.w	r1, r4, #20
 80031d4:	e841 3200 	strex	r2, r3, [r1]
 80031d8:	2a00      	cmp	r2, #0
 80031da:	d1f3      	bne.n	80031c4 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 80031dc:	2320      	movs	r3, #32
 80031de:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80031e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80031e6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 80031ea:	2003      	movs	r0, #3
}
 80031ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80031f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f8:	e7b7      	b.n	800316a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80031fa:	2002      	movs	r0, #2
}
 80031fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003200:	692b      	ldr	r3, [r5, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19f      	bne.n	8003146 <HAL_UART_Transmit+0x4a>
 8003206:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8003208:	4699      	mov	r9, r3
 800320a:	e79c      	b.n	8003146 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	065b      	lsls	r3, r3, #25
 8003210:	d4b9      	bmi.n	8003186 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003212:	b12e      	cbz	r6, 8003220 <HAL_UART_Transmit+0x124>
 8003214:	f7fe fb4c 	bl	80018b0 <HAL_GetTick>
 8003218:	1bc0      	subs	r0, r0, r7
 800321a:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321c:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800321e:	d2ad      	bcs.n	800317c <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	f104 030c 	add.w	r3, r4, #12
 8003224:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	f104 010c 	add.w	r1, r4, #12
 8003230:	e841 3200 	strex	r2, r3, [r1]
 8003234:	2a00      	cmp	r2, #0
 8003236:	d1f3      	bne.n	8003220 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f104 0314 	add.w	r3, r4, #20
 800323c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	f104 0114 	add.w	r1, r4, #20
 8003248:	e841 3200 	strex	r2, r3, [r1]
 800324c:	2a00      	cmp	r2, #0
 800324e:	d1f3      	bne.n	8003238 <HAL_UART_Transmit+0x13c>
 8003250:	e7c4      	b.n	80031dc <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003252:	682c      	ldr	r4, [r5, #0]
 8003254:	e792      	b.n	800317c <HAL_UART_Transmit+0x80>
 8003256:	bf00      	nop

08003258 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003258:	f000 ba52 	b.w	8003700 <ai_platform_network_get_error>

0800325c <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800325c:	b108      	cbz	r0, 8003262 <ai_network_inputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 800325e:	f000 bac3 	b.w	80037e8 <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003262:	4802      	ldr	r0, [pc, #8]	; (800326c <ai_network_inputs_get+0x10>)
 8003264:	4b02      	ldr	r3, [pc, #8]	; (8003270 <ai_network_inputs_get+0x14>)
 8003266:	6003      	str	r3, [r0, #0]
  return ai_platform_inputs_get(network, n_buffer);
 8003268:	f000 babe 	b.w	80037e8 <ai_platform_inputs_get>
 800326c:	20000584 	.word	0x20000584
 8003270:	a1c00100 	.word	0xa1c00100

08003274 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003274:	b108      	cbz	r0, 800327a <ai_network_outputs_get+0x6>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003276:	f000 bb8d 	b.w	8003994 <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800327a:	4802      	ldr	r0, [pc, #8]	; (8003284 <ai_network_outputs_get+0x10>)
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <ai_network_outputs_get+0x14>)
 800327e:	6003      	str	r3, [r0, #0]
  return ai_platform_outputs_get(network, n_buffer);
 8003280:	f000 bb88 	b.w	8003994 <ai_platform_outputs_get>
 8003284:	20000584 	.word	0x20000584
 8003288:	a1c00100 	.word	0xa1c00100

0800328c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800328c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003290:	4606      	mov	r6, r0
 8003292:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003294:	f000 fd24 	bl	8003ce0 <ai_platform_network_init>
  if (!net_ctx) return false;
 8003298:	4604      	mov	r4, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	d073      	beq.n	8003386 <ai_network_init+0xfa>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800329e:	4f41      	ldr	r7, [pc, #260]	; (80033a4 <ai_network_init+0x118>)
 80032a0:	462a      	mov	r2, r5
 80032a2:	2101      	movs	r1, #1
 80032a4:	4638      	mov	r0, r7
 80032a6:	f000 f961 	bl	800356c <ai_platform_get_weights_map>
 80032aa:	4680      	mov	r8, r0
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d06c      	beq.n	800338a <ai_network_init+0xfe>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80032b0:	f8df e120 	ldr.w	lr, [pc, #288]	; 80033d4 <ai_network_init+0x148>
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80032b4:	683b      	ldr	r3, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80032b6:	f8de 2000 	ldr.w	r2, [lr]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80032ba:	4f3b      	ldr	r7, [pc, #236]	; (80033a8 <ai_network_init+0x11c>)
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80032bc:	483b      	ldr	r0, [pc, #236]	; (80033ac <ai_network_init+0x120>)
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80032be:	493c      	ldr	r1, [pc, #240]	; (80033b0 <ai_network_init+0x124>)
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80032c0:	f8df a114 	ldr.w	sl, [pc, #276]	; 80033d8 <ai_network_init+0x14c>
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80032c4:	f8df c114 	ldr.w	ip, [pc, #276]	; 80033dc <ai_network_init+0x150>
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80032c8:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80032cc:	683a      	ldr	r2, [r7, #0]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80032ce:	f8ce 9000 	str.w	r9, [lr]
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80032d2:	e9ce 3302 	strd	r3, r3, [lr, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80032d6:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80032da:	6802      	ldr	r2, [r0, #0]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80032dc:	f8c7 e000 	str.w	lr, [r7]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80032e0:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80032e4:	680a      	ldr	r2, [r1, #0]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80032e6:	f8c0 e000 	str.w	lr, [r0]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80032ea:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80032ee:	f8da 2000 	ldr.w	r2, [sl]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80032f2:	f8c1 e000 	str.w	lr, [r1]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80032f6:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80032fa:	f8dc 2000 	ldr.w	r2, [ip]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80032fe:	f8ca e000 	str.w	lr, [sl]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003302:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
 8003306:	f8cc e000 	str.w	lr, [ip]
    dense_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 256);
 800330a:	f503 7e80 	add.w	lr, r3, #256	; 0x100
    dense_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 800330e:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    dense_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1536);
 8003312:	f503 67c0 	add.w	r7, r3, #1536	; 0x600
    dense_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1536);
 8003316:	e9c0 7702 	strd	r7, r7, [r0, #8]
    dense_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 1556);
 800331a:	f203 6014 	addw	r0, r3, #1556	; 0x614
    dense_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1556);
 800331e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 2068);
 8003322:	f603 0114 	addw	r1, r3, #2068	; 0x814
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 2324);
 8003326:	f603 1314 	addw	r3, r3, #2324	; 0x914
    dense_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2068);
 800332a:	e9ca 1102 	strd	r1, r1, [sl, #8]
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2324);
 800332e:	e9cc 3302 	strd	r3, r3, [ip, #8]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8003332:	4f20      	ldr	r7, [pc, #128]	; (80033b4 <ai_network_init+0x128>)
 8003334:	462a      	mov	r2, r5
 8003336:	2101      	movs	r1, #1
 8003338:	4638      	mov	r0, r7
 800333a:	f000 f96b 	bl	8003614 <ai_platform_get_activations_map>
 800333e:	4605      	mov	r5, r0
 8003340:	b348      	cbz	r0, 8003396 <ai_network_init+0x10a>
    serving_default_dense_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 248);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <ai_network_init+0x12c>)
 8003346:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 800334a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800334e:	491b      	ldr	r1, [pc, #108]	; (80033bc <ai_network_init+0x130>)
 8003350:	f503 7280 	add.w	r2, r3, #256	; 0x100
    dense_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8003354:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8003358:	4919      	ldr	r1, [pc, #100]	; (80033c0 <ai_network_init+0x134>)
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800335a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800335e:	4919      	ldr	r1, [pc, #100]	; (80033c4 <ai_network_init+0x138>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003360:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8003364:	4918      	ldr	r1, [pc, #96]	; (80033c8 <ai_network_init+0x13c>)
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8003366:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <ai_network_init+0x140>)
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800336c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <ai_network_init+0x144>)
 8003372:	3314      	adds	r3, #20
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8003374:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003378:	4630      	mov	r0, r6
 800337a:	f000 fd9f 	bl	8003ebc <ai_platform_network_post_init>
 800337e:	4028      	ands	r0, r5
 8003380:	ea08 0000 	and.w	r0, r8, r0
 8003384:	b2c0      	uxtb	r0, r0

  return ok;
}
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800338a:	2212      	movs	r2, #18
 800338c:	2130      	movs	r1, #48	; 0x30
 800338e:	4620      	mov	r0, r4
 8003390:	f000 fa24 	bl	80037dc <ai_platform_network_set_error>
  return false;
 8003394:	e7cd      	b.n	8003332 <ai_network_init+0xa6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003396:	2213      	movs	r2, #19
 8003398:	4620      	mov	r0, r4
 800339a:	2130      	movs	r1, #48	; 0x30
 800339c:	f000 fa1e 	bl	80037dc <ai_platform_network_set_error>
  return false;
 80033a0:	e7ea      	b.n	8003378 <ai_network_init+0xec>
 80033a2:	bf00      	nop
 80033a4:	20001574 	.word	0x20001574
 80033a8:	20000574 	.word	0x20000574
 80033ac:	20000500 	.word	0x20000500
 80033b0:	20000434 	.word	0x20000434
 80033b4:	20001570 	.word	0x20001570
 80033b8:	200006d0 	.word	0x200006d0
 80033bc:	20000408 	.word	0x20000408
 80033c0:	2000060c 	.word	0x2000060c
 80033c4:	200004a8 	.word	0x200004a8
 80033c8:	20000658 	.word	0x20000658
 80033cc:	20000548 	.word	0x20000548
 80033d0:	200006a4 	.word	0x200006a4
 80033d4:	20000460 	.word	0x20000460
 80033d8:	200003c0 	.word	0x200003c0
 80033dc:	200004d4 	.word	0x200004d4

080033e0 <ai_network_create_and_init>:
{
 80033e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033e4:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 80033e6:	2300      	movs	r3, #0
 80033e8:	2405      	movs	r4, #5
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	9400      	str	r4, [sp, #0]
{
 80033ee:	4689      	mov	r9, r1
 80033f0:	4615      	mov	r5, r2
  return ai_platform_network_create(
 80033f2:	4619      	mov	r1, r3
 80033f4:	4a25      	ldr	r2, [pc, #148]	; (800348c <ai_network_create_and_init+0xac>)
 80033f6:	2301      	movs	r3, #1
{
 80033f8:	4606      	mov	r6, r0
  return ai_platform_network_create(
 80033fa:	f000 fb9b 	bl	8003b34 <ai_platform_network_create>
    if (err.type != AI_ERROR_NONE)
 80033fe:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 8003402:	d002      	beq.n	800340a <ai_network_create_and_init+0x2a>
}
 8003404:	b011      	add	sp, #68	; 0x44
 8003406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_network_data_params_get(&params) != true) {
 800340a:	4607      	mov	r7, r0
 800340c:	a802      	add	r0, sp, #8
 800340e:	f000 f841 	bl	8003494 <ai_network_data_params_get>
 8003412:	b3b0      	cbz	r0, 8003482 <ai_network_create_and_init+0xa2>
    if (activations) {
 8003414:	f1b9 0f00 	cmp.w	r9, #0
 8003418:	d010      	beq.n	800343c <ai_network_create_and_init+0x5c>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800341a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800341e:	b16b      	cbz	r3, 800343c <ai_network_create_and_init+0x5c>
 8003420:	f1a9 0904 	sub.w	r9, r9, #4
 8003424:	4644      	mov	r4, r8
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003426:	4621      	mov	r1, r4
 8003428:	f859 2f04 	ldr.w	r2, [r9, #4]!
 800342c:	a805      	add	r0, sp, #20
 800342e:	f000 f889 	bl	8003544 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8003432:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003436:	3401      	adds	r4, #1
 8003438:	42a3      	cmp	r3, r4
 800343a:	dcf4      	bgt.n	8003426 <ai_network_create_and_init+0x46>
    if (weights) {
 800343c:	b17d      	cbz	r5, 800345e <ai_network_create_and_init+0x7e>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800343e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003442:	b163      	cbz	r3, 800345e <ai_network_create_and_init+0x7e>
 8003444:	3d04      	subs	r5, #4
 8003446:	2400      	movs	r4, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003448:	4621      	mov	r1, r4
 800344a:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800344e:	a803      	add	r0, sp, #12
 8003450:	f000 f878 	bl	8003544 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003454:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003458:	3401      	adds	r4, #1
 800345a:	42a3      	cmp	r3, r4
 800345c:	dcf4      	bgt.n	8003448 <ai_network_create_and_init+0x68>
    if (ai_network_init(*network, &params) != true) {
 800345e:	6830      	ldr	r0, [r6, #0]
 8003460:	a902      	add	r1, sp, #8
 8003462:	f7ff ff13 	bl	800328c <ai_network_init>
 8003466:	b128      	cbz	r0, 8003474 <ai_network_create_and_init+0x94>
    return err;
 8003468:	f368 0707 	bfi	r7, r8, #0, #8
 800346c:	4638      	mov	r0, r7
}
 800346e:	b011      	add	sp, #68	; 0x44
 8003470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 8003474:	6830      	ldr	r0, [r6, #0]
 8003476:	f000 f943 	bl	8003700 <ai_platform_network_get_error>
 800347a:	fa5f f880 	uxtb.w	r8, r0
 800347e:	4607      	mov	r7, r0
 8003480:	e7f2      	b.n	8003468 <ai_network_create_and_init+0x88>
 8003482:	6830      	ldr	r0, [r6, #0]
 8003484:	f000 f93c 	bl	8003700 <ai_platform_network_get_error>
        return err;
 8003488:	e7bc      	b.n	8003404 <ai_network_create_and_init+0x24>
 800348a:	bf00      	nop
 800348c:	20000584 	.word	0x20000584

08003490 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003490:	f000 bd9c 	b.w	8003fcc <ai_platform_network_process>

08003494 <ai_network_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8003494:	4603      	mov	r3, r0
 8003496:	b198      	cbz	r0, 80034c0 <ai_network_data_params_get+0x2c>
{
 8003498:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 800349a:	4c0a      	ldr	r4, [pc, #40]	; (80034c4 <ai_network_data_params_get+0x30>)
 800349c:	e894 0003 	ldmia.w	r4, {r0, r1}
{
 80034a0:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 80034a2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80034a4:	3408      	adds	r4, #8
  const ai_buffer_array map_activations = 
 80034a6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80034aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ae:	ac02      	add	r4, sp, #8
 80034b0:	e884 0003 	stmia.w	r4, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80034b4:	4621      	mov	r1, r4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f900 	bl	80036bc <ai_platform_bind_network_params>
}
 80034bc:	b004      	add	sp, #16
 80034be:	bd10      	pop	{r4, pc}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	0800a2c0 	.word	0x0800a2c0

080034c8 <ai_buffer_get_size>:
 80034c8:	b378      	cbz	r0, 800352a <ai_buffer_get_size+0x62>
 80034ca:	b410      	push	{r4}
 80034cc:	6803      	ldr	r3, [r0, #0]
 80034ce:	4a17      	ldr	r2, [pc, #92]	; (800352c <ai_buffer_get_size+0x64>)
 80034d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80034d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01e      	beq.n	800351a <ai_buffer_get_size+0x52>
 80034dc:	6984      	ldr	r4, [r0, #24]
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	7d03      	ldrb	r3, [r0, #20]
 80034e2:	6941      	ldr	r1, [r0, #20]
 80034e4:	f1a3 0301 	sub.w	r3, r3, #1
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80034f2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80034f6:	da0b      	bge.n	8003510 <ai_buffer_get_size+0x48>
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <ai_buffer_get_size+0x3a>
 80034fc:	2802      	cmp	r0, #2
 80034fe:	d007      	beq.n	8003510 <ai_buffer_get_size+0x48>
 8003500:	2302      	movs	r3, #2
 8003502:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003506:	3301      	adds	r3, #1
 8003508:	4298      	cmp	r0, r3
 800350a:	fb01 f202 	mul.w	r2, r1, r2
 800350e:	d1f3      	bne.n	80034f8 <ai_buffer_get_size+0x30>
 8003510:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	2900      	cmp	r1, #0
 800351c:	d0de      	beq.n	80034dc <ai_buffer_get_size+0x14>
 800351e:	6984      	ldr	r4, [r0, #24]
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	331f      	adds	r3, #31
 8003524:	f023 021f 	bic.w	r2, r3, #31
 8003528:	e7da      	b.n	80034e0 <ai_buffer_get_size+0x18>
 800352a:	4770      	bx	lr
 800352c:	000400c0 	.word	0x000400c0

08003530 <ai_buffer_array_sane>:
 8003530:	b138      	cbz	r0, 8003542 <ai_buffer_array_sane+0x12>
 8003532:	6843      	ldr	r3, [r0, #4]
 8003534:	b123      	cbz	r3, 8003540 <ai_buffer_array_sane+0x10>
 8003536:	8840      	ldrh	r0, [r0, #2]
 8003538:	3800      	subs	r0, #0
 800353a:	bf18      	it	ne
 800353c:	2001      	movne	r0, #1
 800353e:	4770      	bx	lr
 8003540:	4618      	mov	r0, r3
 8003542:	4770      	bx	lr

08003544 <ai_buffer_array_item_set_address>:
 8003544:	b150      	cbz	r0, 800355c <ai_buffer_array_item_set_address+0x18>
 8003546:	6843      	ldr	r3, [r0, #4]
 8003548:	b14b      	cbz	r3, 800355e <ai_buffer_array_item_set_address+0x1a>
 800354a:	8840      	ldrh	r0, [r0, #2]
 800354c:	b900      	cbnz	r0, 8003550 <ai_buffer_array_item_set_address+0xc>
 800354e:	4770      	bx	lr
 8003550:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003554:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003558:	2001      	movs	r0, #1
 800355a:	604a      	str	r2, [r1, #4]
 800355c:	4770      	bx	lr
 800355e:	4618      	mov	r0, r3
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <_ai_platform_acquire_crc>:
 8003564:	2001      	movs	r0, #1
 8003566:	4770      	bx	lr

08003568 <_ai_platform_release_crc>:
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <ai_platform_get_weights_map>:
 800356c:	2a00      	cmp	r2, #0
 800356e:	d037      	beq.n	80035e0 <ai_platform_get_weights_map+0x74>
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	4604      	mov	r4, r0
 8003574:	b1a0      	cbz	r0, 80035a0 <ai_platform_get_weights_map+0x34>
 8003576:	460f      	mov	r7, r1
 8003578:	b191      	cbz	r1, 80035a0 <ai_platform_get_weights_map+0x34>
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <ai_platform_get_weights_map+0xa4>)
 800357c:	6810      	ldr	r0, [r2, #0]
 800357e:	4298      	cmp	r0, r3
 8003580:	4615      	mov	r5, r2
 8003582:	d00f      	beq.n	80035a4 <ai_platform_get_weights_map+0x38>
 8003584:	6855      	ldr	r5, [r2, #4]
 8003586:	b15d      	cbz	r5, 80035a0 <ai_platform_get_weights_map+0x34>
 8003588:	682e      	ldr	r6, [r5, #0]
 800358a:	429e      	cmp	r6, r3
 800358c:	d02a      	beq.n	80035e4 <ai_platform_get_weights_map+0x78>
 800358e:	f1a1 0001 	sub.w	r0, r1, #1
 8003592:	6025      	str	r5, [r4, #0]
 8003594:	fab0 f080 	clz	r0, r0
 8003598:	0940      	lsrs	r0, r0, #5
 800359a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800359c:	42a7      	cmp	r7, r4
 800359e:	d034      	beq.n	800360a <ai_platform_get_weights_map+0x9e>
 80035a0:	2000      	movs	r0, #0
 80035a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a4:	1d10      	adds	r0, r2, #4
 80035a6:	f7ff ffc3 	bl	8003530 <ai_buffer_array_sane>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d0f8      	beq.n	80035a0 <ai_platform_get_weights_map+0x34>
 80035ae:	88eb      	ldrh	r3, [r5, #6]
 80035b0:	429f      	cmp	r7, r3
 80035b2:	d1f5      	bne.n	80035a0 <ai_platform_get_weights_map+0x34>
 80035b4:	f04f 0e00 	mov.w	lr, #0
 80035b8:	1f23      	subs	r3, r4, #4
 80035ba:	4670      	mov	r0, lr
 80035bc:	68aa      	ldr	r2, [r5, #8]
 80035be:	eb02 0c0e 	add.w	ip, r2, lr
 80035c2:	f10e 0e1c 	add.w	lr, lr, #28
 80035c6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80035ca:	b124      	cbz	r4, 80035d6 <ai_platform_get_weights_map+0x6a>
 80035cc:	3001      	adds	r0, #1
 80035ce:	4287      	cmp	r7, r0
 80035d0:	f843 4f04 	str.w	r4, [r3, #4]!
 80035d4:	d1f2      	bne.n	80035bc <ai_platform_get_weights_map+0x50>
 80035d6:	1a38      	subs	r0, r7, r0
 80035d8:	fab0 f080 	clz	r0, r0
 80035dc:	0940      	lsrs	r0, r0, #5
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	2000      	movs	r0, #0
 80035e2:	4770      	bx	lr
 80035e4:	1f23      	subs	r3, r4, #4
 80035e6:	4628      	mov	r0, r5
 80035e8:	2400      	movs	r4, #0
 80035ea:	e000      	b.n	80035ee <ai_platform_get_weights_map+0x82>
 80035ec:	4614      	mov	r4, r2
 80035ee:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80035f2:	42b2      	cmp	r2, r6
 80035f4:	d0d2      	beq.n	800359c <ai_platform_get_weights_map+0x30>
 80035f6:	f843 2f04 	str.w	r2, [r3, #4]!
 80035fa:	1c62      	adds	r2, r4, #1
 80035fc:	4297      	cmp	r7, r2
 80035fe:	d1f5      	bne.n	80035ec <ai_platform_get_weights_map+0x80>
 8003600:	3402      	adds	r4, #2
 8003602:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003606:	42b3      	cmp	r3, r6
 8003608:	d1ca      	bne.n	80035a0 <ai_platform_get_weights_map+0x34>
 800360a:	2001      	movs	r0, #1
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360e:	bf00      	nop
 8003610:	a1facade 	.word	0xa1facade

08003614 <ai_platform_get_activations_map>:
 8003614:	2a00      	cmp	r2, #0
 8003616:	d038      	beq.n	800368a <ai_platform_get_activations_map+0x76>
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	4604      	mov	r4, r0
 800361c:	b1a0      	cbz	r0, 8003648 <ai_platform_get_activations_map+0x34>
 800361e:	460f      	mov	r7, r1
 8003620:	b191      	cbz	r1, 8003648 <ai_platform_get_activations_map+0x34>
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <ai_platform_get_activations_map+0xa4>)
 8003624:	6810      	ldr	r0, [r2, #0]
 8003626:	4298      	cmp	r0, r3
 8003628:	4615      	mov	r5, r2
 800362a:	d00f      	beq.n	800364c <ai_platform_get_activations_map+0x38>
 800362c:	6a15      	ldr	r5, [r2, #32]
 800362e:	b15d      	cbz	r5, 8003648 <ai_platform_get_activations_map+0x34>
 8003630:	682e      	ldr	r6, [r5, #0]
 8003632:	429e      	cmp	r6, r3
 8003634:	d02b      	beq.n	800368e <ai_platform_get_activations_map+0x7a>
 8003636:	f1a1 0001 	sub.w	r0, r1, #1
 800363a:	6025      	str	r5, [r4, #0]
 800363c:	fab0 f080 	clz	r0, r0
 8003640:	0940      	lsrs	r0, r0, #5
 8003642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003644:	42a7      	cmp	r7, r4
 8003646:	d035      	beq.n	80036b4 <ai_platform_get_activations_map+0xa0>
 8003648:	2000      	movs	r0, #0
 800364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800364c:	f102 000c 	add.w	r0, r2, #12
 8003650:	f7ff ff6e 	bl	8003530 <ai_buffer_array_sane>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0f7      	beq.n	8003648 <ai_platform_get_activations_map+0x34>
 8003658:	89eb      	ldrh	r3, [r5, #14]
 800365a:	429f      	cmp	r7, r3
 800365c:	d1f4      	bne.n	8003648 <ai_platform_get_activations_map+0x34>
 800365e:	f04f 0e00 	mov.w	lr, #0
 8003662:	1f23      	subs	r3, r4, #4
 8003664:	4670      	mov	r0, lr
 8003666:	692a      	ldr	r2, [r5, #16]
 8003668:	eb02 0c0e 	add.w	ip, r2, lr
 800366c:	f10e 0e1c 	add.w	lr, lr, #28
 8003670:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003674:	b124      	cbz	r4, 8003680 <ai_platform_get_activations_map+0x6c>
 8003676:	3001      	adds	r0, #1
 8003678:	4287      	cmp	r7, r0
 800367a:	f843 4f04 	str.w	r4, [r3, #4]!
 800367e:	d1f2      	bne.n	8003666 <ai_platform_get_activations_map+0x52>
 8003680:	1a38      	subs	r0, r7, r0
 8003682:	fab0 f080 	clz	r0, r0
 8003686:	0940      	lsrs	r0, r0, #5
 8003688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368a:	2000      	movs	r0, #0
 800368c:	4770      	bx	lr
 800368e:	1f23      	subs	r3, r4, #4
 8003690:	4628      	mov	r0, r5
 8003692:	2400      	movs	r4, #0
 8003694:	e000      	b.n	8003698 <ai_platform_get_activations_map+0x84>
 8003696:	4614      	mov	r4, r2
 8003698:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800369c:	42b2      	cmp	r2, r6
 800369e:	d0d1      	beq.n	8003644 <ai_platform_get_activations_map+0x30>
 80036a0:	f843 2f04 	str.w	r2, [r3, #4]!
 80036a4:	1c62      	adds	r2, r4, #1
 80036a6:	4297      	cmp	r7, r2
 80036a8:	d1f5      	bne.n	8003696 <ai_platform_get_activations_map+0x82>
 80036aa:	3402      	adds	r4, #2
 80036ac:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80036b0:	42b3      	cmp	r3, r6
 80036b2:	d1c9      	bne.n	8003648 <ai_platform_get_activations_map+0x34>
 80036b4:	2001      	movs	r0, #1
 80036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b8:	a1facade 	.word	0xa1facade

080036bc <ai_platform_bind_network_params>:
 80036bc:	b1a0      	cbz	r0, 80036e8 <ai_platform_bind_network_params+0x2c>
 80036be:	b1b1      	cbz	r1, 80036ee <ai_platform_bind_network_params+0x32>
 80036c0:	b1c2      	cbz	r2, 80036f4 <ai_platform_bind_network_params+0x38>
 80036c2:	b410      	push	{r4}
 80036c4:	4603      	mov	r3, r0
 80036c6:	4c0d      	ldr	r4, [pc, #52]	; (80036fc <ai_platform_bind_network_params+0x40>)
 80036c8:	f843 4b04 	str.w	r4, [r3], #4
 80036cc:	f100 0c0c 	add.w	ip, r0, #12
 80036d0:	c903      	ldmia	r1, {r0, r1}
 80036d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80036d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80036de:	2301      	movs	r3, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	4603      	mov	r3, r0
 80036ea:	4618      	mov	r0, r3
 80036ec:	4770      	bx	lr
 80036ee:	460b      	mov	r3, r1
 80036f0:	4618      	mov	r0, r3
 80036f2:	4770      	bx	lr
 80036f4:	4613      	mov	r3, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	a1facade 	.word	0xa1facade

08003700 <ai_platform_network_get_error>:
 8003700:	b510      	push	{r4, lr}
 8003702:	b1f0      	cbz	r0, 8003742 <ai_platform_network_get_error+0x42>
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <ai_platform_network_get_error+0xc4>)
 8003706:	6802      	ldr	r2, [r0, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	4604      	mov	r4, r0
 800370c:	d119      	bne.n	8003742 <ai_platform_network_get_error+0x42>
 800370e:	f7ff ff29 	bl	8003564 <_ai_platform_acquire_crc>
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <ai_platform_network_get_error+0xc8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d03c      	beq.n	800379a <ai_platform_network_get_error+0x9a>
 8003720:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <ai_platform_network_get_error+0xcc>)
 8003722:	2301      	movs	r3, #1
 8003724:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003728:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1fb      	bne.n	8003728 <ai_platform_network_get_error+0x28>
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <ai_platform_network_get_error+0xd0>)
 8003732:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003736:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <ai_platform_network_get_error+0xd4>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d038      	beq.n	80037b2 <ai_platform_network_get_error+0xb2>
 8003740:	e7fe      	b.n	8003740 <ai_platform_network_get_error+0x40>
 8003742:	f7ff ff0f 	bl	8003564 <_ai_platform_acquire_crc>
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <ai_platform_network_get_error+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d010      	beq.n	8003776 <ai_platform_network_get_error+0x76>
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <ai_platform_network_get_error+0xcc>)
 8003756:	2301      	movs	r3, #1
 8003758:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800375c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1fb      	bne.n	800375c <ai_platform_network_get_error+0x5c>
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <ai_platform_network_get_error+0xd0>)
 8003766:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800376a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800376e:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <ai_platform_network_get_error+0xd4>)
 8003770:	429a      	cmp	r2, r3
 8003772:	d00d      	beq.n	8003790 <ai_platform_network_get_error+0x90>
 8003774:	e7fe      	b.n	8003774 <ai_platform_network_get_error+0x74>
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <ai_platform_network_get_error+0xd8>)
 8003778:	2301      	movs	r3, #1
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	6893      	ldr	r3, [r2, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1fc      	bne.n	800377c <ai_platform_network_get_error+0x7c>
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <ai_platform_network_get_error+0xd0>)
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <ai_platform_network_get_error+0xd4>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d000      	beq.n	8003790 <ai_platform_network_get_error+0x90>
 800378e:	e7fe      	b.n	800378e <ai_platform_network_get_error+0x8e>
 8003790:	f7ff feea 	bl	8003568 <_ai_platform_release_crc>
 8003794:	f241 0010 	movw	r0, #4112	; 0x1010
 8003798:	bd10      	pop	{r4, pc}
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <ai_platform_network_get_error+0xd8>)
 800379c:	2301      	movs	r3, #1
 800379e:	6093      	str	r3, [r2, #8]
 80037a0:	6893      	ldr	r3, [r2, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1fc      	bne.n	80037a0 <ai_platform_network_get_error+0xa0>
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <ai_platform_network_get_error+0xd0>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <ai_platform_network_get_error+0xd4>)
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d107      	bne.n	80037c2 <ai_platform_network_get_error+0xc2>
 80037b2:	f7ff fed9 	bl	8003568 <_ai_platform_release_crc>
 80037b6:	f104 0010 	add.w	r0, r4, #16
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037be:	f000 be8d 	b.w	80044dc <core_get_error>
 80037c2:	e7fe      	b.n	80037c2 <ai_platform_network_get_error+0xc2>
 80037c4:	a1c00100 	.word	0xa1c00100
 80037c8:	e0042000 	.word	0xe0042000
 80037cc:	58024000 	.word	0x58024000
 80037d0:	f407a5c2 	.word	0xf407a5c2
 80037d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80037d8:	40023000 	.word	0x40023000

080037dc <ai_platform_network_set_error>:
 80037dc:	b110      	cbz	r0, 80037e4 <ai_platform_network_set_error+0x8>
 80037de:	3010      	adds	r0, #16
 80037e0:	f000 be82 	b.w	80044e8 <core_set_error>
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <ai_platform_inputs_get>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	b085      	sub	sp, #20
 80037ee:	9102      	str	r1, [sp, #8]
 80037f0:	b1f0      	cbz	r0, 8003830 <ai_platform_inputs_get+0x48>
 80037f2:	4b62      	ldr	r3, [pc, #392]	; (800397c <ai_platform_inputs_get+0x194>)
 80037f4:	6802      	ldr	r2, [r0, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	4607      	mov	r7, r0
 80037fa:	d119      	bne.n	8003830 <ai_platform_inputs_get+0x48>
 80037fc:	f7ff feb2 	bl	8003564 <_ai_platform_acquire_crc>
 8003800:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <ai_platform_inputs_get+0x198>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d03d      	beq.n	800388a <ai_platform_inputs_get+0xa2>
 800380e:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <ai_platform_inputs_get+0x19c>)
 8003810:	2301      	movs	r3, #1
 8003812:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003816:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1fb      	bne.n	8003816 <ai_platform_inputs_get+0x2e>
 800381e:	4b5a      	ldr	r3, [pc, #360]	; (8003988 <ai_platform_inputs_get+0x1a0>)
 8003820:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003824:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <ai_platform_inputs_get+0x1a4>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d039      	beq.n	80038a2 <ai_platform_inputs_get+0xba>
 800382e:	e7fe      	b.n	800382e <ai_platform_inputs_get+0x46>
 8003830:	f7ff fe98 	bl	8003564 <_ai_platform_acquire_crc>
 8003834:	4b52      	ldr	r3, [pc, #328]	; (8003980 <ai_platform_inputs_get+0x198>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003840:	d010      	beq.n	8003864 <ai_platform_inputs_get+0x7c>
 8003842:	4a50      	ldr	r2, [pc, #320]	; (8003984 <ai_platform_inputs_get+0x19c>)
 8003844:	2301      	movs	r3, #1
 8003846:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800384a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1fb      	bne.n	800384a <ai_platform_inputs_get+0x62>
 8003852:	4b4d      	ldr	r3, [pc, #308]	; (8003988 <ai_platform_inputs_get+0x1a0>)
 8003854:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003858:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <ai_platform_inputs_get+0x1a4>)
 800385e:	429a      	cmp	r2, r3
 8003860:	d00d      	beq.n	800387e <ai_platform_inputs_get+0x96>
 8003862:	e7fe      	b.n	8003862 <ai_platform_inputs_get+0x7a>
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <ai_platform_inputs_get+0x1a8>)
 8003866:	2301      	movs	r3, #1
 8003868:	6093      	str	r3, [r2, #8]
 800386a:	6893      	ldr	r3, [r2, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1fc      	bne.n	800386a <ai_platform_inputs_get+0x82>
 8003870:	4b45      	ldr	r3, [pc, #276]	; (8003988 <ai_platform_inputs_get+0x1a0>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <ai_platform_inputs_get+0x1a4>)
 8003878:	429a      	cmp	r2, r3
 800387a:	d000      	beq.n	800387e <ai_platform_inputs_get+0x96>
 800387c:	e7fe      	b.n	800387c <ai_platform_inputs_get+0x94>
 800387e:	f7ff fe73 	bl	8003568 <_ai_platform_release_crc>
 8003882:	2000      	movs	r0, #0
 8003884:	b005      	add	sp, #20
 8003886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388a:	4a41      	ldr	r2, [pc, #260]	; (8003990 <ai_platform_inputs_get+0x1a8>)
 800388c:	2301      	movs	r3, #1
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1fc      	bne.n	8003890 <ai_platform_inputs_get+0xa8>
 8003896:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <ai_platform_inputs_get+0x1a0>)
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <ai_platform_inputs_get+0x1a4>)
 800389e:	429a      	cmp	r2, r3
 80038a0:	d155      	bne.n	800394e <ai_platform_inputs_get+0x166>
 80038a2:	f7ff fe61 	bl	8003568 <_ai_platform_release_crc>
 80038a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d051      	beq.n	8003950 <ai_platform_inputs_get+0x168>
 80038ac:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80038b0:	f1ba 0f00 	cmp.w	sl, #0
 80038b4:	d04c      	beq.n	8003950 <ai_platform_inputs_get+0x168>
 80038b6:	f04f 0b00 	mov.w	fp, #0
 80038ba:	465d      	mov	r5, fp
 80038bc:	9703      	str	r7, [sp, #12]
 80038be:	e016      	b.n	80038ee <ai_platform_inputs_get+0x106>
 80038c0:	9901      	ldr	r1, [sp, #4]
 80038c2:	2301      	movs	r3, #1
 80038c4:	507b      	str	r3, [r7, r1]
 80038c6:	69b1      	ldr	r1, [r6, #24]
 80038c8:	6849      	ldr	r1, [r1, #4]
 80038ca:	6121      	str	r1, [r4, #16]
 80038cc:	f04f 0301 	mov.w	r3, #1
 80038d0:	7523      	strb	r3, [r4, #20]
 80038d2:	e9c4 c200 	strd	ip, r2, [r4]
 80038d6:	6962      	ldr	r2, [r4, #20]
 80038d8:	60a0      	str	r0, [r4, #8]
 80038da:	2300      	movs	r3, #0
 80038dc:	f369 221f 	bfi	r2, r9, #8, #24
 80038e0:	f8c4 8018 	str.w	r8, [r4, #24]
 80038e4:	60e3      	str	r3, [r4, #12]
 80038e6:	3501      	adds	r5, #1
 80038e8:	f10b 0b1c 	add.w	fp, fp, #28
 80038ec:	6162      	str	r2, [r4, #20]
 80038ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80038f2:	42ab      	cmp	r3, r5
 80038f4:	b2aa      	uxth	r2, r5
 80038f6:	d93a      	bls.n	800396e <ai_platform_inputs_get+0x186>
 80038f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80038fc:	00e9      	lsls	r1, r5, #3
 80038fe:	9101      	str	r1, [sp, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d034      	beq.n	800396e <ai_platform_inputs_get+0x186>
 8003904:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003908:	2e00      	cmp	r6, #0
 800390a:	d030      	beq.n	800396e <ai_platform_inputs_get+0x186>
 800390c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003910:	69b2      	ldr	r2, [r6, #24]
 8003912:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003916:	6810      	ldr	r0, [r2, #0]
 8003918:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800391c:	68b3      	ldr	r3, [r6, #8]
 800391e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003922:	f001 fc2d 	bl	8005180 <ai_array_to_buffer_fmt>
 8003926:	69b1      	ldr	r1, [r6, #24]
 8003928:	4684      	mov	ip, r0
 800392a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800392e:	688a      	ldr	r2, [r1, #8]
 8003930:	445c      	add	r4, fp
 8003932:	2800      	cmp	r0, #0
 8003934:	d0c8      	beq.n	80038c8 <ai_platform_inputs_get+0xe0>
 8003936:	2100      	movs	r1, #0
 8003938:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800393c:	6831      	ldr	r1, [r6, #0]
 800393e:	6041      	str	r1, [r0, #4]
 8003940:	b111      	cbz	r1, 8003948 <ai_platform_inputs_get+0x160>
 8003942:	8849      	ldrh	r1, [r1, #2]
 8003944:	2900      	cmp	r1, #0
 8003946:	d1bb      	bne.n	80038c0 <ai_platform_inputs_get+0xd8>
 8003948:	69b1      	ldr	r1, [r6, #24]
 800394a:	2000      	movs	r0, #0
 800394c:	e7bc      	b.n	80038c8 <ai_platform_inputs_get+0xe0>
 800394e:	e7fe      	b.n	800394e <ai_platform_inputs_get+0x166>
 8003950:	2218      	movs	r2, #24
 8003952:	2111      	movs	r1, #17
 8003954:	f107 0010 	add.w	r0, r7, #16
 8003958:	f000 fdc6 	bl	80044e8 <core_set_error>
 800395c:	2200      	movs	r2, #0
 800395e:	4610      	mov	r0, r2
 8003960:	9b02      	ldr	r3, [sp, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d08e      	beq.n	8003884 <ai_platform_inputs_get+0x9c>
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	b005      	add	sp, #20
 800396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396e:	9f03      	ldr	r7, [sp, #12]
 8003970:	2a00      	cmp	r2, #0
 8003972:	d0ed      	beq.n	8003950 <ai_platform_inputs_get+0x168>
 8003974:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003978:	6858      	ldr	r0, [r3, #4]
 800397a:	e7f1      	b.n	8003960 <ai_platform_inputs_get+0x178>
 800397c:	a1c00100 	.word	0xa1c00100
 8003980:	e0042000 	.word	0xe0042000
 8003984:	58024000 	.word	0x58024000
 8003988:	f407a5c2 	.word	0xf407a5c2
 800398c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003990:	40023000 	.word	0x40023000

08003994 <ai_platform_outputs_get>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b085      	sub	sp, #20
 800399a:	9102      	str	r1, [sp, #8]
 800399c:	b1f0      	cbz	r0, 80039dc <ai_platform_outputs_get+0x48>
 800399e:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <ai_platform_outputs_get+0x188>)
 80039a0:	6802      	ldr	r2, [r0, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	4607      	mov	r7, r0
 80039a6:	d119      	bne.n	80039dc <ai_platform_outputs_get+0x48>
 80039a8:	f7ff fddc 	bl	8003564 <_ai_platform_acquire_crc>
 80039ac:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <ai_platform_outputs_get+0x18c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d03d      	beq.n	8003a36 <ai_platform_outputs_get+0xa2>
 80039ba:	4a5a      	ldr	r2, [pc, #360]	; (8003b24 <ai_platform_outputs_get+0x190>)
 80039bc:	2301      	movs	r3, #1
 80039be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80039c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1fb      	bne.n	80039c2 <ai_platform_outputs_get+0x2e>
 80039ca:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <ai_platform_outputs_get+0x194>)
 80039cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80039d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80039d4:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <ai_platform_outputs_get+0x198>)
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d039      	beq.n	8003a4e <ai_platform_outputs_get+0xba>
 80039da:	e7fe      	b.n	80039da <ai_platform_outputs_get+0x46>
 80039dc:	f7ff fdc2 	bl	8003564 <_ai_platform_acquire_crc>
 80039e0:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <ai_platform_outputs_get+0x18c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d010      	beq.n	8003a10 <ai_platform_outputs_get+0x7c>
 80039ee:	4a4d      	ldr	r2, [pc, #308]	; (8003b24 <ai_platform_outputs_get+0x190>)
 80039f0:	2301      	movs	r3, #1
 80039f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80039f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1fb      	bne.n	80039f6 <ai_platform_outputs_get+0x62>
 80039fe:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <ai_platform_outputs_get+0x194>)
 8003a00:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a08:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <ai_platform_outputs_get+0x198>)
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d00d      	beq.n	8003a2a <ai_platform_outputs_get+0x96>
 8003a0e:	e7fe      	b.n	8003a0e <ai_platform_outputs_get+0x7a>
 8003a10:	4a47      	ldr	r2, [pc, #284]	; (8003b30 <ai_platform_outputs_get+0x19c>)
 8003a12:	2301      	movs	r3, #1
 8003a14:	6093      	str	r3, [r2, #8]
 8003a16:	6893      	ldr	r3, [r2, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1fc      	bne.n	8003a16 <ai_platform_outputs_get+0x82>
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <ai_platform_outputs_get+0x194>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <ai_platform_outputs_get+0x198>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d000      	beq.n	8003a2a <ai_platform_outputs_get+0x96>
 8003a28:	e7fe      	b.n	8003a28 <ai_platform_outputs_get+0x94>
 8003a2a:	f7ff fd9d 	bl	8003568 <_ai_platform_release_crc>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	b005      	add	sp, #20
 8003a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <ai_platform_outputs_get+0x19c>)
 8003a38:	2301      	movs	r3, #1
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	6893      	ldr	r3, [r2, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1fc      	bne.n	8003a3c <ai_platform_outputs_get+0xa8>
 8003a42:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <ai_platform_outputs_get+0x194>)
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <ai_platform_outputs_get+0x198>)
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d150      	bne.n	8003af0 <ai_platform_outputs_get+0x15c>
 8003a4e:	f7ff fd8b 	bl	8003568 <_ai_platform_release_crc>
 8003a52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d958      	bls.n	8003b0a <ai_platform_outputs_get+0x176>
 8003a58:	f04f 0b00 	mov.w	fp, #0
 8003a5c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8003a60:	9703      	str	r7, [sp, #12]
 8003a62:	465d      	mov	r5, fp
 8003a64:	e016      	b.n	8003a94 <ai_platform_outputs_get+0x100>
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	507b      	str	r3, [r7, r1]
 8003a6c:	69b1      	ldr	r1, [r6, #24]
 8003a6e:	6849      	ldr	r1, [r1, #4]
 8003a70:	6121      	str	r1, [r4, #16]
 8003a72:	f04f 0301 	mov.w	r3, #1
 8003a76:	7523      	strb	r3, [r4, #20]
 8003a78:	e9c4 c200 	strd	ip, r2, [r4]
 8003a7c:	6962      	ldr	r2, [r4, #20]
 8003a7e:	60a0      	str	r0, [r4, #8]
 8003a80:	2300      	movs	r3, #0
 8003a82:	f369 221f 	bfi	r2, r9, #8, #24
 8003a86:	f8c4 8018 	str.w	r8, [r4, #24]
 8003a8a:	60e3      	str	r3, [r4, #12]
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	f10b 0b1c 	add.w	fp, fp, #28
 8003a92:	6162      	str	r2, [r4, #20]
 8003a94:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a98:	42ab      	cmp	r3, r5
 8003a9a:	b2aa      	uxth	r2, r5
 8003a9c:	d929      	bls.n	8003af2 <ai_platform_outputs_get+0x15e>
 8003a9e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003aa2:	00e9      	lsls	r1, r5, #3
 8003aa4:	9101      	str	r1, [sp, #4]
 8003aa6:	b323      	cbz	r3, 8003af2 <ai_platform_outputs_get+0x15e>
 8003aa8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003aac:	b30e      	cbz	r6, 8003af2 <ai_platform_outputs_get+0x15e>
 8003aae:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003ab2:	69b2      	ldr	r2, [r6, #24]
 8003ab4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003ab8:	6810      	ldr	r0, [r2, #0]
 8003aba:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003abe:	68b3      	ldr	r3, [r6, #8]
 8003ac0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003ac4:	f001 fb5c 	bl	8005180 <ai_array_to_buffer_fmt>
 8003ac8:	69b1      	ldr	r1, [r6, #24]
 8003aca:	4684      	mov	ip, r0
 8003acc:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8003ad0:	688a      	ldr	r2, [r1, #8]
 8003ad2:	445c      	add	r4, fp
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d0ca      	beq.n	8003a6e <ai_platform_outputs_get+0xda>
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	6041      	str	r1, [r0, #4]
 8003ae2:	b111      	cbz	r1, 8003aea <ai_platform_outputs_get+0x156>
 8003ae4:	8849      	ldrh	r1, [r1, #2]
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d1bd      	bne.n	8003a66 <ai_platform_outputs_get+0xd2>
 8003aea:	69b1      	ldr	r1, [r6, #24]
 8003aec:	2000      	movs	r0, #0
 8003aee:	e7be      	b.n	8003a6e <ai_platform_outputs_get+0xda>
 8003af0:	e7fe      	b.n	8003af0 <ai_platform_outputs_get+0x15c>
 8003af2:	9f03      	ldr	r7, [sp, #12]
 8003af4:	b14a      	cbz	r2, 8003b0a <ai_platform_outputs_get+0x176>
 8003af6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003afa:	6858      	ldr	r0, [r3, #4]
 8003afc:	9b02      	ldr	r3, [sp, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d096      	beq.n	8003a30 <ai_platform_outputs_get+0x9c>
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	b005      	add	sp, #20
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	2111      	movs	r1, #17
 8003b0e:	f107 0010 	add.w	r0, r7, #16
 8003b12:	f000 fce9 	bl	80044e8 <core_set_error>
 8003b16:	2200      	movs	r2, #0
 8003b18:	4610      	mov	r0, r2
 8003b1a:	e7ef      	b.n	8003afc <ai_platform_outputs_get+0x168>
 8003b1c:	a1c00100 	.word	0xa1c00100
 8003b20:	e0042000 	.word	0xe0042000
 8003b24:	58024000 	.word	0x58024000
 8003b28:	f407a5c2 	.word	0xf407a5c2
 8003b2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b30:	40023000 	.word	0x40023000

08003b34 <ai_platform_network_create>:
 8003b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003b40:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003b44:	4615      	mov	r5, r2
 8003b46:	461f      	mov	r7, r3
 8003b48:	f7ff fd0c 	bl	8003564 <_ai_platform_acquire_crc>
 8003b4c:	b188      	cbz	r0, 8003b72 <ai_platform_network_create+0x3e>
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	; (8003cc4 <ai_platform_network_create+0x190>)
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003b56:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	d00e      	beq.n	8003b7c <ai_platform_network_create+0x48>
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <ai_platform_network_create+0x194>)
 8003b60:	2118      	movs	r1, #24
 8003b62:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003b66:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003b6a:	2918      	cmp	r1, #24
 8003b6c:	d018      	beq.n	8003ba0 <ai_platform_network_create+0x6c>
 8003b6e:	f7ff fcfb 	bl	8003568 <_ai_platform_release_crc>
 8003b72:	f244 1033 	movw	r0, #16691	; 0x4133
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b7c:	4a53      	ldr	r2, [pc, #332]	; (8003ccc <ai_platform_network_create+0x198>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	6091      	str	r1, [r2, #8]
 8003b82:	2114      	movs	r1, #20
 8003b84:	e001      	b.n	8003b8a <ai_platform_network_create+0x56>
 8003b86:	3901      	subs	r1, #1
 8003b88:	d002      	beq.n	8003b90 <ai_platform_network_create+0x5c>
 8003b8a:	6894      	ldr	r4, [r2, #8]
 8003b8c:	2c00      	cmp	r4, #0
 8003b8e:	d1fa      	bne.n	8003b86 <ai_platform_network_create+0x52>
 8003b90:	4a4e      	ldr	r2, [pc, #312]	; (8003ccc <ai_platform_network_create+0x198>)
 8003b92:	6891      	ldr	r1, [r2, #8]
 8003b94:	b911      	cbnz	r1, 8003b9c <ai_platform_network_create+0x68>
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	3201      	adds	r2, #1
 8003b9a:	d008      	beq.n	8003bae <ai_platform_network_create+0x7a>
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	e7e6      	b.n	8003b6e <ai_platform_network_create+0x3a>
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003ba6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003baa:	2900      	cmp	r1, #0
 8003bac:	d1fb      	bne.n	8003ba6 <ai_platform_network_create+0x72>
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fcda 	bl	8003568 <_ai_platform_release_crc>
 8003bb4:	f7ff fcd6 	bl	8003564 <_ai_platform_acquire_crc>
 8003bb8:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <ai_platform_network_create+0x190>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d010      	beq.n	8003be8 <ai_platform_network_create+0xb4>
 8003bc6:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <ai_platform_network_create+0x194>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003bce:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d1fb      	bne.n	8003bce <ai_platform_network_create+0x9a>
 8003bd6:	4a3e      	ldr	r2, [pc, #248]	; (8003cd0 <ai_platform_network_create+0x19c>)
 8003bd8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003bdc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003be0:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <ai_platform_network_create+0x1a0>)
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d00c      	beq.n	8003c00 <ai_platform_network_create+0xcc>
 8003be6:	e7fe      	b.n	8003be6 <ai_platform_network_create+0xb2>
 8003be8:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <ai_platform_network_create+0x198>)
 8003bea:	2301      	movs	r3, #1
 8003bec:	6093      	str	r3, [r2, #8]
 8003bee:	6893      	ldr	r3, [r2, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1fc      	bne.n	8003bee <ai_platform_network_create+0xba>
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <ai_platform_network_create+0x19c>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <ai_platform_network_create+0x1a0>)
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d122      	bne.n	8003c46 <ai_platform_network_create+0x112>
 8003c00:	f7ff fcb2 	bl	8003568 <_ai_platform_release_crc>
 8003c04:	b38e      	cbz	r6, 8003c6a <ai_platform_network_create+0x136>
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <ai_platform_network_create+0x1a4>)
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	6035      	str	r5, [r6, #0]
 8003c0c:	f000 fc64 	bl	80044d8 <core_init>
 8003c10:	b1d0      	cbz	r0, 8003c48 <ai_platform_network_create+0x114>
 8003c12:	f7ff fca7 	bl	8003564 <_ai_platform_acquire_crc>
 8003c16:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <ai_platform_network_create+0x190>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d025      	beq.n	8003c70 <ai_platform_network_create+0x13c>
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <ai_platform_network_create+0x194>)
 8003c26:	2301      	movs	r3, #1
 8003c28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003c2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1fb      	bne.n	8003c2c <ai_platform_network_create+0xf8>
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <ai_platform_network_create+0x19c>)
 8003c36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003c3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <ai_platform_network_create+0x1a0>)
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d022      	beq.n	8003c8a <ai_platform_network_create+0x156>
 8003c44:	e7fe      	b.n	8003c44 <ai_platform_network_create+0x110>
 8003c46:	e7fe      	b.n	8003c46 <ai_platform_network_create+0x112>
 8003c48:	2430      	movs	r4, #48	; 0x30
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	2610      	movs	r6, #16
 8003c50:	464a      	mov	r2, r9
 8003c52:	4641      	mov	r1, r8
 8003c54:	4638      	mov	r0, r7
 8003c56:	f001 fa75 	bl	8005144 <ai_version_get>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f364 0007 	bfi	r0, r4, #0, #8
 8003c62:	64ab      	str	r3, [r5, #72]	; 0x48
 8003c64:	f366 201f 	bfi	r0, r6, #8, #24
 8003c68:	e785      	b.n	8003b76 <ai_platform_network_create+0x42>
 8003c6a:	f241 0010 	movw	r0, #4112	; 0x1010
 8003c6e:	e782      	b.n	8003b76 <ai_platform_network_create+0x42>
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <ai_platform_network_create+0x198>)
 8003c72:	2301      	movs	r3, #1
 8003c74:	6093      	str	r3, [r2, #8]
 8003c76:	6893      	ldr	r3, [r2, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1fc      	bne.n	8003c76 <ai_platform_network_create+0x142>
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <ai_platform_network_create+0x19c>)
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <ai_platform_network_create+0x1a0>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d000      	beq.n	8003c8a <ai_platform_network_create+0x156>
 8003c88:	e7fe      	b.n	8003c88 <ai_platform_network_create+0x154>
 8003c8a:	f7ff fc6d 	bl	8003568 <_ai_platform_release_crc>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4641      	mov	r1, r8
 8003c92:	4638      	mov	r0, r7
 8003c94:	f001 fa56 	bl	8005144 <ai_version_get>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	2105      	movs	r1, #5
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f001 fa50 	bl	8005144 <ai_version_get>
 8003ca4:	4284      	cmp	r4, r0
 8003ca6:	d001      	beq.n	8003cac <ai_platform_network_create+0x178>
 8003ca8:	2401      	movs	r4, #1
 8003caa:	e7ce      	b.n	8003c4a <ai_platform_network_create+0x116>
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <ai_platform_network_create+0x1a8>)
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	a801      	add	r0, sp, #4
 8003cb2:	f001 f88d 	bl	8004dd0 <ai_check_custom_types>
 8003cb6:	b110      	cbz	r0, 8003cbe <ai_platform_network_create+0x18a>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	4634      	mov	r4, r6
 8003cbc:	e7c8      	b.n	8003c50 <ai_platform_network_create+0x11c>
 8003cbe:	2402      	movs	r4, #2
 8003cc0:	e7c3      	b.n	8003c4a <ai_platform_network_create+0x116>
 8003cc2:	bf00      	nop
 8003cc4:	e0042000 	.word	0xe0042000
 8003cc8:	58024000 	.word	0x58024000
 8003ccc:	40023000 	.word	0x40023000
 8003cd0:	f407a5c2 	.word	0xf407a5c2
 8003cd4:	b5e8b5cd 	.word	0xb5e8b5cd
 8003cd8:	a1c00100 	.word	0xa1c00100
 8003cdc:	84048403 	.word	0x84048403

08003ce0 <ai_platform_network_init>:
 8003ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	b1f8      	cbz	r0, 8003d26 <ai_platform_network_init+0x46>
 8003ce6:	4b6e      	ldr	r3, [pc, #440]	; (8003ea0 <ai_platform_network_init+0x1c0>)
 8003ce8:	6802      	ldr	r2, [r0, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	4604      	mov	r4, r0
 8003cee:	d11a      	bne.n	8003d26 <ai_platform_network_init+0x46>
 8003cf0:	460e      	mov	r6, r1
 8003cf2:	f7ff fc37 	bl	8003564 <_ai_platform_acquire_crc>
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <ai_platform_network_init+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d02:	d03d      	beq.n	8003d80 <ai_platform_network_init+0xa0>
 8003d04:	4a68      	ldr	r2, [pc, #416]	; (8003ea8 <ai_platform_network_init+0x1c8>)
 8003d06:	2301      	movs	r3, #1
 8003d08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1fb      	bne.n	8003d0c <ai_platform_network_init+0x2c>
 8003d14:	4b65      	ldr	r3, [pc, #404]	; (8003eac <ai_platform_network_init+0x1cc>)
 8003d16:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003d1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003d1e:	4b64      	ldr	r3, [pc, #400]	; (8003eb0 <ai_platform_network_init+0x1d0>)
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d039      	beq.n	8003d98 <ai_platform_network_init+0xb8>
 8003d24:	e7fe      	b.n	8003d24 <ai_platform_network_init+0x44>
 8003d26:	f7ff fc1d 	bl	8003564 <_ai_platform_acquire_crc>
 8003d2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ea4 <ai_platform_network_init+0x1c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d010      	beq.n	8003d5a <ai_platform_network_init+0x7a>
 8003d38:	4a5b      	ldr	r2, [pc, #364]	; (8003ea8 <ai_platform_network_init+0x1c8>)
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1fb      	bne.n	8003d40 <ai_platform_network_init+0x60>
 8003d48:	4b58      	ldr	r3, [pc, #352]	; (8003eac <ai_platform_network_init+0x1cc>)
 8003d4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003d4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003d52:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <ai_platform_network_init+0x1d0>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d00d      	beq.n	8003d74 <ai_platform_network_init+0x94>
 8003d58:	e7fe      	b.n	8003d58 <ai_platform_network_init+0x78>
 8003d5a:	4a56      	ldr	r2, [pc, #344]	; (8003eb4 <ai_platform_network_init+0x1d4>)
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	6893      	ldr	r3, [r2, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1fc      	bne.n	8003d60 <ai_platform_network_init+0x80>
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <ai_platform_network_init+0x1cc>)
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <ai_platform_network_init+0x1d0>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d000      	beq.n	8003d74 <ai_platform_network_init+0x94>
 8003d72:	e7fe      	b.n	8003d72 <ai_platform_network_init+0x92>
 8003d74:	f7ff fbf8 	bl	8003568 <_ai_platform_release_crc>
 8003d78:	2600      	movs	r6, #0
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d80:	4a4c      	ldr	r2, [pc, #304]	; (8003eb4 <ai_platform_network_init+0x1d4>)
 8003d82:	2301      	movs	r3, #1
 8003d84:	6093      	str	r3, [r2, #8]
 8003d86:	6893      	ldr	r3, [r2, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1fc      	bne.n	8003d86 <ai_platform_network_init+0xa6>
 8003d8c:	4b47      	ldr	r3, [pc, #284]	; (8003eac <ai_platform_network_init+0x1cc>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <ai_platform_network_init+0x1d0>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d11c      	bne.n	8003dd2 <ai_platform_network_init+0xf2>
 8003d98:	f7ff fbe6 	bl	8003568 <_ai_platform_release_crc>
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d06f      	beq.n	8003e80 <ai_platform_network_init+0x1a0>
 8003da0:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <ai_platform_network_init+0x1d8>)
 8003da2:	6832      	ldr	r2, [r6, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d115      	bne.n	8003dd4 <ai_platform_network_init+0xf4>
 8003da8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003dac:	6933      	ldr	r3, [r6, #16]
 8003dae:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003db2:	89f7      	ldrh	r7, [r6, #14]
 8003db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003db6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003dba:	2303      	movs	r3, #3
 8003dbc:	84e7      	strh	r7, [r4, #38]	; 0x26
 8003dbe:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003dc2:	60e3      	str	r3, [r4, #12]
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	4626      	mov	r6, r4
 8003dc8:	f001 f82c 	bl	8004e24 <ai_layers_init_all>
 8003dcc:	4630      	mov	r0, r6
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd2:	e7fe      	b.n	8003dd2 <ai_platform_network_init+0xf2>
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4635      	mov	r5, r6
 8003dda:	6876      	ldr	r6, [r6, #4]
 8003ddc:	f7ff fb74 	bl	80034c8 <ai_buffer_get_size>
 8003de0:	f105 081c 	add.w	r8, r5, #28
 8003de4:	4681      	mov	r9, r0
 8003de6:	2101      	movs	r1, #1
 8003de8:	4640      	mov	r0, r8
 8003dea:	6a2f      	ldr	r7, [r5, #32]
 8003dec:	f7ff fb6c 	bl	80034c8 <ai_buffer_get_size>
 8003df0:	f1b9 0f00 	cmp.w	r9, #0
 8003df4:	d025      	beq.n	8003e42 <ai_platform_network_init+0x162>
 8003df6:	2201      	movs	r2, #1
 8003df8:	4696      	mov	lr, r2
 8003dfa:	bb30      	cbnz	r0, 8003e4a <ai_platform_network_init+0x16a>
 8003dfc:	4680      	mov	r8, r0
 8003dfe:	4607      	mov	r7, r0
 8003e00:	b376      	cbz	r6, 8003e60 <ai_platform_network_init+0x180>
 8003e02:	8be3      	ldrh	r3, [r4, #30]
 8003e04:	4573      	cmp	r3, lr
 8003e06:	d323      	bcc.n	8003e50 <ai_platform_network_init+0x170>
 8003e08:	b142      	cbz	r2, 8003e1c <ai_platform_network_init+0x13c>
 8003e0a:	46ac      	mov	ip, r5
 8003e0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003e10:	6a25      	ldr	r5, [r4, #32]
 8003e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e14:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003e18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e1c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e1e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003e22:	2600      	movs	r6, #0
 8003e24:	42bb      	cmp	r3, r7
 8003e26:	83a6      	strh	r6, [r4, #28]
 8003e28:	d323      	bcc.n	8003e72 <ai_platform_network_init+0x192>
 8003e2a:	b37f      	cbz	r7, 8003e8c <ai_platform_network_init+0x1ac>
 8003e2c:	46c4      	mov	ip, r8
 8003e2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003e32:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e36:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003e3a:	46b6      	mov	lr, r6
 8003e3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003e40:	e7bb      	b.n	8003dba <ai_platform_network_init+0xda>
 8003e42:	464a      	mov	r2, r9
 8003e44:	46ce      	mov	lr, r9
 8003e46:	464d      	mov	r5, r9
 8003e48:	e7d7      	b.n	8003dfa <ai_platform_network_init+0x11a>
 8003e4a:	b30f      	cbz	r7, 8003e90 <ai_platform_network_init+0x1b0>
 8003e4c:	2701      	movs	r7, #1
 8003e4e:	e7d7      	b.n	8003e00 <ai_platform_network_init+0x120>
 8003e50:	2212      	movs	r2, #18
 8003e52:	2116      	movs	r1, #22
 8003e54:	f104 0010 	add.w	r0, r4, #16
 8003e58:	f000 fb46 	bl	80044e8 <core_set_error>
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	e78c      	b.n	8003d7a <ai_platform_network_init+0x9a>
 8003e60:	f1b9 0f00 	cmp.w	r9, #0
 8003e64:	d0cd      	beq.n	8003e02 <ai_platform_network_init+0x122>
 8003e66:	2110      	movs	r1, #16
 8003e68:	2212      	movs	r2, #18
 8003e6a:	1860      	adds	r0, r4, r1
 8003e6c:	f000 fb3c 	bl	80044e8 <core_set_error>
 8003e70:	e783      	b.n	8003d7a <ai_platform_network_init+0x9a>
 8003e72:	2213      	movs	r2, #19
 8003e74:	2116      	movs	r1, #22
 8003e76:	f104 0010 	add.w	r0, r4, #16
 8003e7a:	f000 fb35 	bl	80044e8 <core_set_error>
 8003e7e:	e77c      	b.n	8003d7a <ai_platform_network_init+0x9a>
 8003e80:	2110      	movs	r1, #16
 8003e82:	2211      	movs	r2, #17
 8003e84:	1860      	adds	r0, r4, r1
 8003e86:	f000 fb2f 	bl	80044e8 <core_set_error>
 8003e8a:	e776      	b.n	8003d7a <ai_platform_network_init+0x9a>
 8003e8c:	46be      	mov	lr, r7
 8003e8e:	e794      	b.n	8003dba <ai_platform_network_init+0xda>
 8003e90:	2110      	movs	r1, #16
 8003e92:	2213      	movs	r2, #19
 8003e94:	1860      	adds	r0, r4, r1
 8003e96:	f000 fb27 	bl	80044e8 <core_set_error>
 8003e9a:	463e      	mov	r6, r7
 8003e9c:	e76d      	b.n	8003d7a <ai_platform_network_init+0x9a>
 8003e9e:	bf00      	nop
 8003ea0:	a1c00100 	.word	0xa1c00100
 8003ea4:	e0042000 	.word	0xe0042000
 8003ea8:	58024000 	.word	0x58024000
 8003eac:	f407a5c2 	.word	0xf407a5c2
 8003eb0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003eb4:	40023000 	.word	0x40023000
 8003eb8:	a1facade 	.word	0xa1facade

08003ebc <ai_platform_network_post_init>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	b1f0      	cbz	r0, 8003efe <ai_platform_network_post_init+0x42>
 8003ec0:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <ai_platform_network_post_init+0xf8>)
 8003ec2:	6802      	ldr	r2, [r0, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	d119      	bne.n	8003efe <ai_platform_network_post_init+0x42>
 8003eca:	f7ff fb4b 	bl	8003564 <_ai_platform_acquire_crc>
 8003ece:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <ai_platform_network_post_init+0xfc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d03b      	beq.n	8003f54 <ai_platform_network_post_init+0x98>
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <ai_platform_network_post_init+0x100>)
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ee4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1fb      	bne.n	8003ee4 <ai_platform_network_post_init+0x28>
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <ai_platform_network_post_init+0x104>)
 8003eee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003ef2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003ef6:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <ai_platform_network_post_init+0x108>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d037      	beq.n	8003f6c <ai_platform_network_post_init+0xb0>
 8003efc:	e7fe      	b.n	8003efc <ai_platform_network_post_init+0x40>
 8003efe:	f7ff fb31 	bl	8003564 <_ai_platform_acquire_crc>
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <ai_platform_network_post_init+0xfc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d010      	beq.n	8003f32 <ai_platform_network_post_init+0x76>
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <ai_platform_network_post_init+0x100>)
 8003f12:	2301      	movs	r3, #1
 8003f14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1fb      	bne.n	8003f18 <ai_platform_network_post_init+0x5c>
 8003f20:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <ai_platform_network_post_init+0x104>)
 8003f22:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <ai_platform_network_post_init+0x108>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d00d      	beq.n	8003f4c <ai_platform_network_post_init+0x90>
 8003f30:	e7fe      	b.n	8003f30 <ai_platform_network_post_init+0x74>
 8003f32:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <ai_platform_network_post_init+0x10c>)
 8003f34:	2301      	movs	r3, #1
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	6893      	ldr	r3, [r2, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1fc      	bne.n	8003f38 <ai_platform_network_post_init+0x7c>
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <ai_platform_network_post_init+0x104>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <ai_platform_network_post_init+0x108>)
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d000      	beq.n	8003f4c <ai_platform_network_post_init+0x90>
 8003f4a:	e7fe      	b.n	8003f4a <ai_platform_network_post_init+0x8e>
 8003f4c:	f7ff fb0c 	bl	8003568 <_ai_platform_release_crc>
 8003f50:	2000      	movs	r0, #0
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <ai_platform_network_post_init+0x10c>)
 8003f56:	2301      	movs	r3, #1
 8003f58:	6093      	str	r3, [r2, #8]
 8003f5a:	6893      	ldr	r3, [r2, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1fc      	bne.n	8003f5a <ai_platform_network_post_init+0x9e>
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <ai_platform_network_post_init+0x104>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <ai_platform_network_post_init+0x108>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d11a      	bne.n	8003fa2 <ai_platform_network_post_init+0xe6>
 8003f6c:	f7ff fafc 	bl	8003568 <_ai_platform_release_crc>
 8003f70:	68e3      	ldr	r3, [r4, #12]
 8003f72:	f013 0502 	ands.w	r5, r3, #2
 8003f76:	d015      	beq.n	8003fa4 <ai_platform_network_post_init+0xe8>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 ff61 	bl	8004e40 <ai_layers_post_init_all>
 8003f7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f80:	b16b      	cbz	r3, 8003f9e <ai_platform_network_post_init+0xe2>
 8003f82:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003f84:	e007      	b.n	8003f96 <ai_platform_network_post_init+0xda>
 8003f86:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003f8a:	4798      	blx	r3
 8003f8c:	692b      	ldr	r3, [r5, #16]
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	d005      	beq.n	8003f9e <ai_platform_network_post_init+0xe2>
 8003f92:	b123      	cbz	r3, 8003f9e <ai_platform_network_post_init+0xe2>
 8003f94:	461d      	mov	r5, r3
 8003f96:	4629      	mov	r1, r5
 8003f98:	2000      	movs	r0, #0
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	d1f3      	bne.n	8003f86 <ai_platform_network_post_init+0xca>
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
 8003fa2:	e7fe      	b.n	8003fa2 <ai_platform_network_post_init+0xe6>
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	2111      	movs	r1, #17
 8003fa8:	18a0      	adds	r0, r4, r2
 8003faa:	f000 fa9d 	bl	80044e8 <core_set_error>
 8003fae:	4628      	mov	r0, r5
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	a1c00100 	.word	0xa1c00100
 8003fb8:	e0042000 	.word	0xe0042000
 8003fbc:	58024000 	.word	0x58024000
 8003fc0:	f407a5c2 	.word	0xf407a5c2
 8003fc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8003fc8:	40023000 	.word	0x40023000

08003fcc <ai_platform_network_process>:
 8003fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd0:	460e      	mov	r6, r1
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	4693      	mov	fp, r2
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	b120      	cbz	r0, 8003fe4 <ai_platform_network_process+0x18>
 8003fda:	4bb8      	ldr	r3, [pc, #736]	; (80042bc <ai_platform_network_process+0x2f0>)
 8003fdc:	6802      	ldr	r2, [r0, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	bf18      	it	ne
 8003fe2:	2500      	movne	r5, #0
 8003fe4:	f7ff fabe 	bl	8003564 <_ai_platform_acquire_crc>
 8003fe8:	4bb5      	ldr	r3, [pc, #724]	; (80042c0 <ai_platform_network_process+0x2f4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d010      	beq.n	8004018 <ai_platform_network_process+0x4c>
 8003ff6:	4ab3      	ldr	r2, [pc, #716]	; (80042c4 <ai_platform_network_process+0x2f8>)
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ffe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1fb      	bne.n	8003ffe <ai_platform_network_process+0x32>
 8004006:	4bb0      	ldr	r3, [pc, #704]	; (80042c8 <ai_platform_network_process+0x2fc>)
 8004008:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800400c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004010:	4bae      	ldr	r3, [pc, #696]	; (80042cc <ai_platform_network_process+0x300>)
 8004012:	429a      	cmp	r2, r3
 8004014:	d00d      	beq.n	8004032 <ai_platform_network_process+0x66>
 8004016:	e7fe      	b.n	8004016 <ai_platform_network_process+0x4a>
 8004018:	4aad      	ldr	r2, [pc, #692]	; (80042d0 <ai_platform_network_process+0x304>)
 800401a:	2301      	movs	r3, #1
 800401c:	6093      	str	r3, [r2, #8]
 800401e:	6893      	ldr	r3, [r2, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1fc      	bne.n	800401e <ai_platform_network_process+0x52>
 8004024:	4ba8      	ldr	r3, [pc, #672]	; (80042c8 <ai_platform_network_process+0x2fc>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4ba8      	ldr	r3, [pc, #672]	; (80042cc <ai_platform_network_process+0x300>)
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 812c 	bne.w	800428a <ai_platform_network_process+0x2be>
 8004032:	f7ff fa99 	bl	8003568 <_ai_platform_release_crc>
 8004036:	2d00      	cmp	r5, #0
 8004038:	f000 8154 	beq.w	80042e4 <ai_platform_network_process+0x318>
 800403c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8124 	beq.w	800428c <ai_platform_network_process+0x2c0>
 8004044:	68eb      	ldr	r3, [r5, #12]
 8004046:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2700      	movs	r7, #0
 8004050:	2b03      	cmp	r3, #3
 8004052:	616f      	str	r7, [r5, #20]
 8004054:	f040 813e 	bne.w	80042d4 <ai_platform_network_process+0x308>
 8004058:	2e00      	cmp	r6, #0
 800405a:	f000 811d 	beq.w	8004298 <ai_platform_network_process+0x2cc>
 800405e:	f1ba 0f00 	cmp.w	sl, #0
 8004062:	f000 8119 	beq.w	8004298 <ai_platform_network_process+0x2cc>
 8004066:	f8ba 3000 	ldrh.w	r3, [sl]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8114 	beq.w	8004298 <ai_platform_network_process+0x2cc>
 8004070:	69b3      	ldr	r3, [r6, #24]
 8004072:	f8cd b00c 	str.w	fp, [sp, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800407c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d072      	beq.n	800416a <ai_platform_network_process+0x19e>
 8004084:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004088:	2c00      	cmp	r4, #0
 800408a:	d06e      	beq.n	800416a <ai_platform_network_process+0x19e>
 800408c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004090:	f8d3 9000 	ldr.w	r9, [r3]
 8004094:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004098:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800409c:	f000 81e0 	beq.w	8004460 <ai_platform_network_process+0x494>
 80040a0:	69a3      	ldr	r3, [r4, #24]
 80040a2:	2101      	movs	r1, #1
 80040a4:	4630      	mov	r0, r6
 80040a6:	685d      	ldr	r5, [r3, #4]
 80040a8:	f7ff fa0e 	bl	80034c8 <ai_buffer_get_size>
 80040ac:	4285      	cmp	r5, r0
 80040ae:	f0c0 811b 	bcc.w	80042e8 <ai_platform_network_process+0x31c>
 80040b2:	68e0      	ldr	r0, [r4, #12]
 80040b4:	69b1      	ldr	r1, [r6, #24]
 80040b6:	68c2      	ldr	r2, [r0, #12]
 80040b8:	68cb      	ldr	r3, [r1, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	f040 8114 	bne.w	80042e8 <ai_platform_network_process+0x31c>
 80040c0:	6882      	ldr	r2, [r0, #8]
 80040c2:	688b      	ldr	r3, [r1, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	f040 810f 	bne.w	80042e8 <ai_platform_network_process+0x31c>
 80040ca:	6842      	ldr	r2, [r0, #4]
 80040cc:	684b      	ldr	r3, [r1, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	f040 810a 	bne.w	80042e8 <ai_platform_network_process+0x31c>
 80040d4:	69a3      	ldr	r3, [r4, #24]
 80040d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040da:	f001 f8e5 	bl	80052a8 <ai_array_get_data_byte_size>
 80040de:	4605      	mov	r5, r0
 80040e0:	4620      	mov	r0, r4
 80040e2:	f001 f835 	bl	8005150 <get_tensor_byte_size>
 80040e6:	4285      	cmp	r5, r0
 80040e8:	f0c0 80fe 	bcc.w	80042e8 <ai_platform_network_process+0x31c>
 80040ec:	69a3      	ldr	r3, [r4, #24]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	f001 f846 	bl	8005180 <ai_array_to_buffer_fmt>
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	4058      	eors	r0, r3
 80040f8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80040fc:	f040 81bb 	bne.w	8004476 <ai_platform_network_process+0x4aa>
 8004100:	6873      	ldr	r3, [r6, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 81ae 	beq.w	8004464 <ai_platform_network_process+0x498>
 8004108:	69b3      	ldr	r3, [r6, #24]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 819e 	beq.w	800444e <ai_platform_network_process+0x482>
 8004112:	9a01      	ldr	r2, [sp, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	bf38      	it	cc
 8004118:	461a      	movcc	r2, r3
 800411a:	4620      	mov	r0, r4
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	f001 f817 	bl	8005150 <get_tensor_byte_size>
 8004122:	f8c8 0008 	str.w	r0, [r8, #8]
 8004126:	69b3      	ldr	r3, [r6, #24]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	f8c8 300c 	str.w	r3, [r8, #12]
 8004132:	6871      	ldr	r1, [r6, #4]
 8004134:	f8c8 1004 	str.w	r1, [r8, #4]
 8004138:	440b      	add	r3, r1
 800413a:	f849 300b 	str.w	r3, [r9, fp]
 800413e:	69a0      	ldr	r0, [r4, #24]
 8004140:	6803      	ldr	r3, [r0, #0]
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	f107 0701 	add.w	r7, r7, #1
 8004148:	f106 061c 	add.w	r6, r6, #28
 800414c:	f100 80af 	bmi.w	80042ae <ai_platform_network_process+0x2e2>
 8004150:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	4419      	add	r1, r3
 8004158:	6081      	str	r1, [r0, #8]
 800415a:	69a3      	ldr	r3, [r4, #24]
 800415c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	f8ba 3000 	ldrh.w	r3, [sl]
 8004166:	42bb      	cmp	r3, r7
 8004168:	d888      	bhi.n	800407c <ai_platform_network_process+0xb0>
 800416a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800416e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8004170:	f1bb 0f00 	cmp.w	fp, #0
 8004174:	f000 8188 	beq.w	8004488 <ai_platform_network_process+0x4bc>
 8004178:	2a01      	cmp	r2, #1
 800417a:	f240 8160 	bls.w	800443e <ai_platform_network_process+0x472>
 800417e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8004182:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8159 	beq.w	800443e <ai_platform_network_process+0x472>
 800418c:	465e      	mov	r6, fp
 800418e:	2700      	movs	r7, #0
 8004190:	462c      	mov	r4, r5
 8004192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80b4 	beq.w	8004304 <ai_platform_network_process+0x338>
 800419c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	f000 80af 	beq.w	8004304 <ai_platform_network_process+0x338>
 80041a6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80041aa:	f8d3 8000 	ldr.w	r8, [r3]
 80041ae:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80041b2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80041b6:	f000 8173 	beq.w	80044a0 <ai_platform_network_process+0x4d4>
 80041ba:	69ab      	ldr	r3, [r5, #24]
 80041bc:	2101      	movs	r1, #1
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	9302      	str	r3, [sp, #8]
 80041c2:	4630      	mov	r0, r6
 80041c4:	f7ff f980 	bl	80034c8 <ai_buffer_get_size>
 80041c8:	9b02      	ldr	r3, [sp, #8]
 80041ca:	4283      	cmp	r3, r0
 80041cc:	f0c0 8136 	bcc.w	800443c <ai_platform_network_process+0x470>
 80041d0:	68e8      	ldr	r0, [r5, #12]
 80041d2:	69b1      	ldr	r1, [r6, #24]
 80041d4:	68c2      	ldr	r2, [r0, #12]
 80041d6:	68cb      	ldr	r3, [r1, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 812f 	bne.w	800443c <ai_platform_network_process+0x470>
 80041de:	6882      	ldr	r2, [r0, #8]
 80041e0:	688b      	ldr	r3, [r1, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	f040 812a 	bne.w	800443c <ai_platform_network_process+0x470>
 80041e8:	6842      	ldr	r2, [r0, #4]
 80041ea:	684b      	ldr	r3, [r1, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 8125 	bne.w	800443c <ai_platform_network_process+0x470>
 80041f2:	69ab      	ldr	r3, [r5, #24]
 80041f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041f8:	f001 f856 	bl	80052a8 <ai_array_get_data_byte_size>
 80041fc:	9002      	str	r0, [sp, #8]
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 ffa6 	bl	8005150 <get_tensor_byte_size>
 8004204:	9b02      	ldr	r3, [sp, #8]
 8004206:	4283      	cmp	r3, r0
 8004208:	f0c0 8118 	bcc.w	800443c <ai_platform_network_process+0x470>
 800420c:	69ab      	ldr	r3, [r5, #24]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	f000 ffb6 	bl	8005180 <ai_array_to_buffer_fmt>
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	4058      	eors	r0, r3
 8004218:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800421c:	f040 8138 	bne.w	8004490 <ai_platform_network_process+0x4c4>
 8004220:	6873      	ldr	r3, [r6, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 814f 	beq.w	80044c6 <ai_platform_network_process+0x4fa>
 8004228:	69b3      	ldr	r3, [r6, #24]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8141 	beq.w	80044b4 <ai_platform_network_process+0x4e8>
 8004232:	9a01      	ldr	r2, [sp, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	bf38      	it	cc
 8004238:	461a      	movcc	r2, r3
 800423a:	4628      	mov	r0, r5
 800423c:	9201      	str	r2, [sp, #4]
 800423e:	f000 ff87 	bl	8005150 <get_tensor_byte_size>
 8004242:	f8ca 0008 	str.w	r0, [sl, #8]
 8004246:	69b3      	ldr	r3, [r6, #24]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004252:	6871      	ldr	r1, [r6, #4]
 8004254:	f8ca 1004 	str.w	r1, [sl, #4]
 8004258:	440b      	add	r3, r1
 800425a:	f848 300b 	str.w	r3, [r8, fp]
 800425e:	69a8      	ldr	r0, [r5, #24]
 8004260:	6803      	ldr	r3, [r0, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f107 0701 	add.w	r7, r7, #1
 8004268:	f106 061c 	add.w	r6, r6, #28
 800426c:	d445      	bmi.n	80042fa <ai_platform_network_process+0x32e>
 800426e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	4419      	add	r1, r3
 8004276:	6081      	str	r1, [r0, #8]
 8004278:	69ab      	ldr	r3, [r5, #24]
 800427a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004284:	429f      	cmp	r7, r3
 8004286:	d384      	bcc.n	8004192 <ai_platform_network_process+0x1c6>
 8004288:	e03c      	b.n	8004304 <ai_platform_network_process+0x338>
 800428a:	e7fe      	b.n	800428a <ai_platform_network_process+0x2be>
 800428c:	68ea      	ldr	r2, [r5, #12]
 800428e:	616b      	str	r3, [r5, #20]
 8004290:	f002 0203 	and.w	r2, r2, #3
 8004294:	2a03      	cmp	r2, #3
 8004296:	d11d      	bne.n	80042d4 <ai_platform_network_process+0x308>
 8004298:	2217      	movs	r2, #23
 800429a:	2112      	movs	r1, #18
 800429c:	f105 0010 	add.w	r0, r5, #16
 80042a0:	f000 f922 	bl	80044e8 <core_set_error>
 80042a4:	2400      	movs	r4, #0
 80042a6:	4620      	mov	r0, r4
 80042a8:	b005      	add	sp, #20
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ae:	f8ba 3000 	ldrh.w	r3, [sl]
 80042b2:	429f      	cmp	r7, r3
 80042b4:	f4ff aee2 	bcc.w	800407c <ai_platform_network_process+0xb0>
 80042b8:	e757      	b.n	800416a <ai_platform_network_process+0x19e>
 80042ba:	bf00      	nop
 80042bc:	a1c00100 	.word	0xa1c00100
 80042c0:	e0042000 	.word	0xe0042000
 80042c4:	58024000 	.word	0x58024000
 80042c8:	f407a5c2 	.word	0xf407a5c2
 80042cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80042d0:	40023000 	.word	0x40023000
 80042d4:	2230      	movs	r2, #48	; 0x30
 80042d6:	2111      	movs	r1, #17
 80042d8:	f105 0010 	add.w	r0, r5, #16
 80042dc:	f000 f904 	bl	80044e8 <core_set_error>
 80042e0:	2400      	movs	r4, #0
 80042e2:	e7e0      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80042e4:	462c      	mov	r4, r5
 80042e6:	e7de      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80042e8:	9d02      	ldr	r5, [sp, #8]
 80042ea:	2218      	movs	r2, #24
 80042ec:	2112      	movs	r1, #18
 80042ee:	f105 0010 	add.w	r0, r5, #16
 80042f2:	f000 f8f9 	bl	80044e8 <core_set_error>
 80042f6:	2400      	movs	r4, #0
 80042f8:	e7d5      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80042fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80042fe:	429f      	cmp	r7, r3
 8004300:	f4ff af47 	bcc.w	8004192 <ai_platform_network_process+0x1c6>
 8004304:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004308:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800430a:	82a3      	strh	r3, [r4, #20]
 800430c:	4625      	mov	r5, r4
 800430e:	2a00      	cmp	r2, #0
 8004310:	f040 808e 	bne.w	8004430 <ai_platform_network_process+0x464>
 8004314:	4616      	mov	r6, r2
 8004316:	4617      	mov	r7, r2
 8004318:	8aec      	ldrh	r4, [r5, #22]
 800431a:	429c      	cmp	r4, r3
 800431c:	bf38      	it	cc
 800431e:	46ab      	movcc	fp, r5
 8004320:	d2c1      	bcs.n	80042a6 <ai_platform_network_process+0x2da>
 8004322:	2e00      	cmp	r6, #0
 8004324:	d030      	beq.n	8004388 <ai_platform_network_process+0x3bc>
 8004326:	f04f 0800 	mov.w	r8, #0
 800432a:	e014      	b.n	8004356 <ai_platform_network_process+0x38a>
 800432c:	6882      	ldr	r2, [r0, #8]
 800432e:	68c5      	ldr	r5, [r0, #12]
 8004330:	6863      	ldr	r3, [r4, #4]
 8004332:	1b52      	subs	r2, r2, r5
 8004334:	4413      	add	r3, r2
 8004336:	6083      	str	r3, [r0, #8]
 8004338:	698b      	ldr	r3, [r1, #24]
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004342:	f859 200a 	ldr.w	r2, [r9, sl]
 8004346:	440b      	add	r3, r1
 8004348:	4293      	cmp	r3, r2
 800434a:	bf24      	itt	cs
 800434c:	68e3      	ldrcs	r3, [r4, #12]
 800434e:	1ad3      	subcs	r3, r2, r3
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	f108 0801 	add.w	r8, r8, #1
 8004356:	8833      	ldrh	r3, [r6, #0]
 8004358:	4543      	cmp	r3, r8
 800435a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800435e:	d913      	bls.n	8004388 <ai_platform_network_process+0x3bc>
 8004360:	6873      	ldr	r3, [r6, #4]
 8004362:	b18b      	cbz	r3, 8004388 <ai_platform_network_process+0x3bc>
 8004364:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004368:	b171      	cbz	r1, 8004388 <ai_platform_network_process+0x3bc>
 800436a:	6988      	ldr	r0, [r1, #24]
 800436c:	68b2      	ldr	r2, [r6, #8]
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	f8d2 9000 	ldr.w	r9, [r2]
 8004374:	009d      	lsls	r5, r3, #2
 8004376:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800437a:	d5d7      	bpl.n	800432c <ai_platform_network_process+0x360>
 800437c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8004380:	6880      	ldr	r0, [r0, #8]
 8004382:	f001 fc1b 	bl	8005bbc <memcpy>
 8004386:	e7da      	b.n	800433e <ai_platform_network_process+0x372>
 8004388:	4658      	mov	r0, fp
 800438a:	f000 fd6d 	bl	8004e68 <ai_layers_forward_all>
 800438e:	2f00      	cmp	r7, #0
 8004390:	d03f      	beq.n	8004412 <ai_platform_network_process+0x446>
 8004392:	2400      	movs	r4, #0
 8004394:	e016      	b.n	80043c4 <ai_platform_network_process+0x3f8>
 8004396:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800439a:	f859 100a 	ldr.w	r1, [r9, sl]
 800439e:	4413      	add	r3, r2
 80043a0:	428b      	cmp	r3, r1
 80043a2:	bf24      	itt	cs
 80043a4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80043a8:	1acb      	subcs	r3, r1, r3
 80043aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80043ae:	6981      	ldr	r1, [r0, #24]
 80043b0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80043b4:	1b52      	subs	r2, r2, r5
 80043b6:	4413      	add	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
 80043ba:	6983      	ldr	r3, [r0, #24]
 80043bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	3401      	adds	r4, #1
 80043c4:	883b      	ldrh	r3, [r7, #0]
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	d923      	bls.n	8004412 <ai_platform_network_process+0x446>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	b30b      	cbz	r3, 8004412 <ai_platform_network_process+0x446>
 80043ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80043d2:	b1f0      	cbz	r0, 8004412 <ai_platform_network_process+0x446>
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	6983      	ldr	r3, [r0, #24]
 80043d8:	f8d2 9000 	ldr.w	r9, [r2]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	0092      	lsls	r2, r2, #2
 80043e0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80043e4:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80043e8:	d5d5      	bpl.n	8004396 <ai_platform_network_process+0x3ca>
 80043ea:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80043ee:	6899      	ldr	r1, [r3, #8]
 80043f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80043f4:	f001 fbe2 	bl	8005bbc <memcpy>
 80043f8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80043fc:	f859 200a 	ldr.w	r2, [r9, sl]
 8004400:	440b      	add	r3, r1
 8004402:	4293      	cmp	r3, r2
 8004404:	bf24      	itt	cs
 8004406:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800440a:	1ad3      	subcs	r3, r2, r3
 800440c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004410:	e7d7      	b.n	80043c2 <ai_platform_network_process+0x3f6>
 8004412:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8004416:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800441a:	3401      	adds	r4, #1
 800441c:	b2a4      	uxth	r4, r4
 800441e:	42a3      	cmp	r3, r4
 8004420:	f8ab 4016 	strh.w	r4, [fp, #22]
 8004424:	f63f af7d 	bhi.w	8004322 <ai_platform_network_process+0x356>
 8004428:	4620      	mov	r0, r4
 800442a:	b005      	add	sp, #20
 800442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004430:	2a01      	cmp	r2, #1
 8004432:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004434:	d03c      	beq.n	80044b0 <ai_platform_network_process+0x4e4>
 8004436:	f106 070c 	add.w	r7, r6, #12
 800443a:	e76d      	b.n	8004318 <ai_platform_network_process+0x34c>
 800443c:	4625      	mov	r5, r4
 800443e:	2218      	movs	r2, #24
 8004440:	2113      	movs	r1, #19
 8004442:	f105 0010 	add.w	r0, r5, #16
 8004446:	f000 f84f 	bl	80044e8 <core_set_error>
 800444a:	2400      	movs	r4, #0
 800444c:	e72b      	b.n	80042a6 <ai_platform_network_process+0x2da>
 800444e:	9d02      	ldr	r5, [sp, #8]
 8004450:	4604      	mov	r4, r0
 8004452:	2221      	movs	r2, #33	; 0x21
 8004454:	2112      	movs	r1, #18
 8004456:	f105 0010 	add.w	r0, r5, #16
 800445a:	f000 f845 	bl	80044e8 <core_set_error>
 800445e:	e722      	b.n	80042a6 <ai_platform_network_process+0x2da>
 8004460:	9d02      	ldr	r5, [sp, #8]
 8004462:	e719      	b.n	8004298 <ai_platform_network_process+0x2cc>
 8004464:	9d02      	ldr	r5, [sp, #8]
 8004466:	4604      	mov	r4, r0
 8004468:	2217      	movs	r2, #23
 800446a:	2112      	movs	r1, #18
 800446c:	f105 0010 	add.w	r0, r5, #16
 8004470:	f000 f83a 	bl	80044e8 <core_set_error>
 8004474:	e717      	b.n	80042a6 <ai_platform_network_process+0x2da>
 8004476:	9d02      	ldr	r5, [sp, #8]
 8004478:	2219      	movs	r2, #25
 800447a:	2112      	movs	r1, #18
 800447c:	f105 0010 	add.w	r0, r5, #16
 8004480:	f000 f832 	bl	80044e8 <core_set_error>
 8004484:	2400      	movs	r4, #0
 8004486:	e70e      	b.n	80042a6 <ai_platform_network_process+0x2da>
 8004488:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800448c:	82ab      	strh	r3, [r5, #20]
 800448e:	e73e      	b.n	800430e <ai_platform_network_process+0x342>
 8004490:	f104 0010 	add.w	r0, r4, #16
 8004494:	2219      	movs	r2, #25
 8004496:	2113      	movs	r1, #19
 8004498:	f000 f826 	bl	80044e8 <core_set_error>
 800449c:	2400      	movs	r4, #0
 800449e:	e702      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80044a0:	f104 0010 	add.w	r0, r4, #16
 80044a4:	2217      	movs	r2, #23
 80044a6:	2113      	movs	r1, #19
 80044a8:	f000 f81e 	bl	80044e8 <core_set_error>
 80044ac:	4654      	mov	r4, sl
 80044ae:	e6fa      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80044b0:	2700      	movs	r7, #0
 80044b2:	e731      	b.n	8004318 <ai_platform_network_process+0x34c>
 80044b4:	4625      	mov	r5, r4
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	4604      	mov	r4, r0
 80044ba:	2113      	movs	r1, #19
 80044bc:	f105 0010 	add.w	r0, r5, #16
 80044c0:	f000 f812 	bl	80044e8 <core_set_error>
 80044c4:	e6ef      	b.n	80042a6 <ai_platform_network_process+0x2da>
 80044c6:	4625      	mov	r5, r4
 80044c8:	2217      	movs	r2, #23
 80044ca:	4604      	mov	r4, r0
 80044cc:	2113      	movs	r1, #19
 80044ce:	f105 0010 	add.w	r0, r5, #16
 80044d2:	f000 f809 	bl	80044e8 <core_set_error>
 80044d6:	e6e6      	b.n	80042a6 <ai_platform_network_process+0x2da>

080044d8 <core_init>:
 80044d8:	2001      	movs	r0, #1
 80044da:	4770      	bx	lr

080044dc <core_get_error>:
 80044dc:	4603      	mov	r3, r0
 80044de:	2200      	movs	r2, #0
 80044e0:	6800      	ldr	r0, [r0, #0]
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <core_set_error>:
 80044e8:	4603      	mov	r3, r0
 80044ea:	7800      	ldrb	r0, [r0, #0]
 80044ec:	b108      	cbz	r0, 80044f2 <core_set_error+0xa>
 80044ee:	2000      	movs	r0, #0
 80044f0:	4770      	bx	lr
 80044f2:	7019      	strb	r1, [r3, #0]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	f362 211f 	bfi	r1, r2, #8, #24
 80044fa:	2001      	movs	r0, #1
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	4770      	bx	lr

08004500 <forward_dense>:
 8004500:	6983      	ldr	r3, [r0, #24]
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	2a00      	cmp	r2, #0
 8004506:	f000 8181 	beq.w	800480c <forward_dense+0x30c>
 800450a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450e:	ed2d 8b02 	vpush	{d8}
 8004512:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004516:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800451a:	b095      	sub	sp, #84	; 0x54
 800451c:	b105      	cbz	r5, 8004520 <forward_dense+0x20>
 800451e:	682d      	ldr	r5, [r5, #0]
 8004520:	2a01      	cmp	r2, #1
 8004522:	f000 828f 	beq.w	8004a44 <forward_dense+0x544>
 8004526:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800452a:	b106      	cbz	r6, 800452e <forward_dense+0x2e>
 800452c:	6836      	ldr	r6, [r6, #0]
 800452e:	2a02      	cmp	r2, #2
 8004530:	f000 816e 	beq.w	8004810 <forward_dense+0x310>
 8004534:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8004538:	930b      	str	r3, [sp, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8274 	beq.w	8004a28 <forward_dense+0x528>
 8004540:	4619      	mov	r1, r3
 8004542:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8004546:	6809      	ldr	r1, [r1, #0]
 8004548:	910d      	str	r1, [sp, #52]	; 0x34
 800454a:	2b01      	cmp	r3, #1
 800454c:	f240 826e 	bls.w	8004a2c <forward_dense+0x52c>
 8004550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	930b      	str	r3, [sp, #44]	; 0x2c
 8004556:	460b      	mov	r3, r1
 8004558:	68e8      	ldr	r0, [r5, #12]
 800455a:	68f7      	ldr	r7, [r6, #12]
 800455c:	6840      	ldr	r0, [r0, #4]
 800455e:	6999      	ldr	r1, [r3, #24]
 8004560:	9013      	str	r0, [sp, #76]	; 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	9012      	str	r0, [sp, #72]	; 0x48
 8004568:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800456c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004570:	fb00 f404 	mul.w	r4, r0, r4
 8004574:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004578:	fa4e f000 	asr.w	r0, lr, r0
 800457c:	2a03      	cmp	r2, #3
 800457e:	9010      	str	r0, [sp, #64]	; 0x40
 8004580:	f000 825d 	beq.w	8004a3e <forward_dense+0x53e>
 8004584:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8004588:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800458c:	2a00      	cmp	r2, #0
 800458e:	f000 8246 	beq.w	8004a1e <forward_dense+0x51e>
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	2a00      	cmp	r2, #0
 8004596:	f000 8242 	beq.w	8004a1e <forward_dense+0x51e>
 800459a:	2b04      	cmp	r3, #4
 800459c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80045a0:	f000 822c 	beq.w	80049fc <forward_dense+0x4fc>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	f000 8229 	beq.w	80049fc <forward_dense+0x4fc>
 80045aa:	f04f 0b00 	mov.w	fp, #0
 80045ae:	69b2      	ldr	r2, [r6, #24]
 80045b0:	69ab      	ldr	r3, [r5, #24]
 80045b2:	6891      	ldr	r1, [r2, #8]
 80045b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	6952      	ldr	r2, [r2, #20]
 80045ba:	9106      	str	r1, [sp, #24]
 80045bc:	fb07 f404 	mul.w	r4, r7, r4
 80045c0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80045c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045c6:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80045ca:	4281      	cmp	r1, r0
 80045cc:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80045d0:	900e      	str	r0, [sp, #56]	; 0x38
 80045d2:	940c      	str	r4, [sp, #48]	; 0x30
 80045d4:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80045d8:	f080 8113 	bcs.w	8004802 <forward_dense+0x302>
 80045dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80045de:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800482c <forward_dense+0x32c>
 80045e2:	f021 0201 	bic.w	r2, r1, #1
 80045e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80045ea:	9204      	str	r2, [sp, #16]
 80045ec:	f001 0201 	and.w	r2, r1, #1
 80045f0:	08c8      	lsrs	r0, r1, #3
 80045f2:	9208      	str	r2, [sp, #32]
 80045f4:	008a      	lsls	r2, r1, #2
 80045f6:	f001 0a07 	and.w	sl, r1, #7
 80045fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80045fc:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004600:	3320      	adds	r3, #32
 8004602:	465c      	mov	r4, fp
 8004604:	9007      	str	r0, [sp, #28]
 8004606:	46cb      	mov	fp, r9
 8004608:	9205      	str	r2, [sp, #20]
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	46c1      	mov	r9, r8
 800460e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	9b02      	ldr	r3, [sp, #8]
 800461a:	3b20      	subs	r3, #32
 800461c:	930a      	str	r3, [sp, #40]	; 0x28
 800461e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004620:	b10b      	cbz	r3, 8004626 <forward_dense+0x126>
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2c00      	cmp	r4, #0
 8004628:	f000 81da 	beq.w	80049e0 <forward_dense+0x4e0>
 800462c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800462e:	2904      	cmp	r1, #4
 8004630:	9906      	ldr	r1, [sp, #24]
 8004632:	f000 80fd 	beq.w	8004830 <forward_dense+0x330>
 8004636:	4549      	cmp	r1, r9
 8004638:	f080 80d2 	bcs.w	80047e0 <forward_dense+0x2e0>
 800463c:	460f      	mov	r7, r1
 800463e:	9907      	ldr	r1, [sp, #28]
 8004640:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004644:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004648:	1c4e      	adds	r6, r1, #1
 800464a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800464e:	4694      	mov	ip, r2
 8004650:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004652:	468e      	mov	lr, r1
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80de 	beq.w	8004816 <forward_dense+0x316>
 800465a:	ecf3 2a01 	vldmia	r3!, {s5}
 800465e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800482c <forward_dense+0x32c>
 8004662:	f1be 0f00 	cmp.w	lr, #0
 8004666:	f000 80de 	beq.w	8004826 <forward_dense+0x326>
 800466a:	f10c 0108 	add.w	r1, ip, #8
 800466e:	4640      	mov	r0, r8
 8004670:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004674:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8004678:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800467c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004680:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004684:	ed10 5a04 	vldr	s10, [r0, #-16]
 8004688:	ed50 5a03 	vldr	s11, [r0, #-12]
 800468c:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004690:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004694:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004698:	edd5 7a00 	vldr	s15, [r5]
 800469c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80046a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046a4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80046a8:	ed95 3a00 	vldr	s6, [r5]
 80046ac:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80046b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80046b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046b8:	3108      	adds	r1, #8
 80046ba:	edd5 3a00 	vldr	s7, [r5]
 80046be:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80046c2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80046c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046ca:	3020      	adds	r0, #32
 80046cc:	ed95 4a00 	vldr	s8, [r5]
 80046d0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80046d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80046d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046dc:	edd5 4a00 	vldr	s9, [r5]
 80046e0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80046e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80046e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046ec:	ed95 5a00 	vldr	s10, [r5]
 80046f0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80046f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80046f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80046fc:	edd5 5a00 	vldr	s11, [r5]
 8004700:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004704:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004708:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800470c:	428e      	cmp	r6, r1
 800470e:	ed95 6a00 	vldr	s12, [r5]
 8004712:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471a:	d1a9      	bne.n	8004670 <forward_dense+0x170>
 800471c:	f1a6 0108 	sub.w	r1, r6, #8
 8004720:	4650      	mov	r0, sl
 8004722:	2a00      	cmp	r2, #0
 8004724:	d04a      	beq.n	80047bc <forward_dense+0x2bc>
 8004726:	780d      	ldrb	r5, [r1, #0]
 8004728:	edd0 6a00 	vldr	s13, [r0]
 800472c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004730:	edd5 7a00 	vldr	s15, [r5]
 8004734:	2a01      	cmp	r2, #1
 8004736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800473a:	d03f      	beq.n	80047bc <forward_dense+0x2bc>
 800473c:	784d      	ldrb	r5, [r1, #1]
 800473e:	edd0 6a01 	vldr	s13, [r0, #4]
 8004742:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004746:	edd5 7a00 	vldr	s15, [r5]
 800474a:	2a02      	cmp	r2, #2
 800474c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004750:	d034      	beq.n	80047bc <forward_dense+0x2bc>
 8004752:	788d      	ldrb	r5, [r1, #2]
 8004754:	edd0 6a02 	vldr	s13, [r0, #8]
 8004758:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800475c:	edd5 7a00 	vldr	s15, [r5]
 8004760:	2a03      	cmp	r2, #3
 8004762:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004766:	d029      	beq.n	80047bc <forward_dense+0x2bc>
 8004768:	78cd      	ldrb	r5, [r1, #3]
 800476a:	edd0 6a03 	vldr	s13, [r0, #12]
 800476e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004772:	edd5 7a00 	vldr	s15, [r5]
 8004776:	2a04      	cmp	r2, #4
 8004778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800477c:	d01e      	beq.n	80047bc <forward_dense+0x2bc>
 800477e:	790d      	ldrb	r5, [r1, #4]
 8004780:	edd0 6a04 	vldr	s13, [r0, #16]
 8004784:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004788:	edd5 7a00 	vldr	s15, [r5]
 800478c:	2a05      	cmp	r2, #5
 800478e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004792:	d013      	beq.n	80047bc <forward_dense+0x2bc>
 8004794:	794d      	ldrb	r5, [r1, #5]
 8004796:	edd0 6a05 	vldr	s13, [r0, #20]
 800479a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800479e:	edd5 7a00 	vldr	s15, [r5]
 80047a2:	2a06      	cmp	r2, #6
 80047a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80047a8:	d008      	beq.n	80047bc <forward_dense+0x2bc>
 80047aa:	7989      	ldrb	r1, [r1, #6]
 80047ac:	edd0 7a06 	vldr	s15, [r0, #24]
 80047b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80047b4:	edd1 6a00 	vldr	s13, [r1]
 80047b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80047bc:	44dc      	add	ip, fp
 80047be:	445e      	add	r6, fp
 80047c0:	ee32 7a87 	vadd.f32	s14, s5, s14
 80047c4:	eca7 7a01 	vstmia	r7!, {s14}
 80047c8:	454f      	cmp	r7, r9
 80047ca:	f4ff af43 	bcc.w	8004654 <forward_dense+0x154>
 80047ce:	9a06      	ldr	r2, [sp, #24]
 80047d0:	eba9 0302 	sub.w	r3, r9, r2
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	3304      	adds	r3, #4
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	9306      	str	r3, [sp, #24]
 80047e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047e2:	9a05      	ldr	r2, [sp, #20]
 80047e4:	4499      	add	r9, r3
 80047e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047e8:	441a      	add	r2, r3
 80047ea:	9205      	str	r2, [sp, #20]
 80047ec:	9a02      	ldr	r2, [sp, #8]
 80047ee:	441a      	add	r2, r3
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	9a04      	ldr	r2, [sp, #16]
 80047f4:	441a      	add	r2, r3
 80047f6:	9204      	str	r2, [sp, #16]
 80047f8:	9b06      	ldr	r3, [sp, #24]
 80047fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f4ff af08 	bcc.w	8004612 <forward_dense+0x112>
 8004802:	b015      	add	sp, #84	; 0x54
 8004804:	ecbd 8b02 	vpop	{d8}
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480c:	6853      	ldr	r3, [r2, #4]
 800480e:	deff      	udf	#255	; 0xff
 8004810:	2300      	movs	r3, #0
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	deff      	udf	#255	; 0xff
 8004816:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800482c <forward_dense+0x32c>
 800481a:	eef0 2a48 	vmov.f32	s5, s16
 800481e:	f1be 0f00 	cmp.w	lr, #0
 8004822:	f47f af22 	bne.w	800466a <forward_dense+0x16a>
 8004826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004828:	4661      	mov	r1, ip
 800482a:	e77a      	b.n	8004722 <forward_dense+0x222>
 800482c:	00000000 	.word	0x00000000
 8004830:	4549      	cmp	r1, r9
 8004832:	d2d5      	bcs.n	80047e0 <forward_dense+0x2e0>
 8004834:	9807      	ldr	r0, [sp, #28]
 8004836:	9103      	str	r1, [sp, #12]
 8004838:	9904      	ldr	r1, [sp, #16]
 800483a:	f100 0c01 	add.w	ip, r0, #1
 800483e:	3901      	subs	r1, #1
 8004840:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004844:	9109      	str	r1, [sp, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80b2 	beq.w	80049b0 <forward_dense+0x4b0>
 800484c:	9907      	ldr	r1, [sp, #28]
 800484e:	ecf3 2a01 	vldmia	r3!, {s5}
 8004852:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800482c <forward_dense+0x32c>
 8004856:	2900      	cmp	r1, #0
 8004858:	f000 80b2 	beq.w	80049c0 <forward_dense+0x4c0>
 800485c:	9902      	ldr	r1, [sp, #8]
 800485e:	1d10      	adds	r0, r2, #4
 8004860:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004864:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004868:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800486c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004870:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004874:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004878:	ed11 5a04 	vldr	s10, [r1, #-16]
 800487c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004880:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004884:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004888:	f006 070f 	and.w	r7, r6, #15
 800488c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004890:	edd7 7a00 	vldr	s15, [r7]
 8004894:	0936      	lsrs	r6, r6, #4
 8004896:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800489a:	ed96 3a00 	vldr	s6, [r6]
 800489e:	ee67 7a82 	vmul.f32	s15, s15, s4
 80048a2:	092e      	lsrs	r6, r5, #4
 80048a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80048a8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80048ac:	f005 050f 	and.w	r5, r5, #15
 80048b0:	edd6 3a00 	vldr	s7, [r6]
 80048b4:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80048b8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80048bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048c0:	0937      	lsrs	r7, r6, #4
 80048c2:	ed95 4a00 	vldr	s8, [r5]
 80048c6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80048ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80048ce:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80048d2:	f006 060f 	and.w	r6, r6, #15
 80048d6:	edd7 4a00 	vldr	s9, [r7]
 80048da:	eee4 7a85 	vfma.f32	s15, s9, s10
 80048de:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80048e2:	3004      	adds	r0, #4
 80048e4:	ed96 5a00 	vldr	s10, [r6]
 80048e8:	092e      	lsrs	r6, r5, #4
 80048ea:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80048f2:	f005 050f 	and.w	r5, r5, #15
 80048f6:	edd6 5a00 	vldr	s11, [r6]
 80048fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004902:	4584      	cmp	ip, r0
 8004904:	ed95 6a00 	vldr	s12, [r5]
 8004908:	eee6 7a26 	vfma.f32	s15, s12, s13
 800490c:	f101 0120 	add.w	r1, r1, #32
 8004910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004914:	d1a4      	bne.n	8004860 <forward_dense+0x360>
 8004916:	f8dd e014 	ldr.w	lr, [sp, #20]
 800491a:	f1ac 0804 	sub.w	r8, ip, #4
 800491e:	9904      	ldr	r1, [sp, #16]
 8004920:	458e      	cmp	lr, r1
 8004922:	d22a      	bcs.n	800497a <forward_dense+0x47a>
 8004924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004926:	eba1 070e 	sub.w	r7, r1, lr
 800492a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800492e:	f10e 0008 	add.w	r0, lr, #8
 8004932:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8004936:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800493a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800493e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004942:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004946:	f001 050f 	and.w	r5, r1, #15
 800494a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800494e:	edd5 7a00 	vldr	s15, [r5]
 8004952:	0909      	lsrs	r1, r1, #4
 8004954:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004958:	ed91 6a00 	vldr	s12, [r1]
 800495c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004960:	42b7      	cmp	r7, r6
 8004962:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004966:	f100 0008 	add.w	r0, r0, #8
 800496a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800496e:	d1e4      	bne.n	800493a <forward_dense+0x43a>
 8004970:	f10a 0a01 	add.w	sl, sl, #1
 8004974:	44d0      	add	r8, sl
 8004976:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800497a:	9908      	ldr	r1, [sp, #32]
 800497c:	b321      	cbz	r1, 80049c8 <forward_dense+0x4c8>
 800497e:	f898 1000 	ldrb.w	r1, [r8]
 8004982:	edde 7a00 	vldr	s15, [lr]
 8004986:	0909      	lsrs	r1, r1, #4
 8004988:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800498c:	edd1 6a00 	vldr	s13, [r1]
 8004990:	9903      	ldr	r1, [sp, #12]
 8004992:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004996:	445a      	add	r2, fp
 8004998:	44dc      	add	ip, fp
 800499a:	ee72 2a87 	vadd.f32	s5, s5, s14
 800499e:	ece1 2a01 	vstmia	r1!, {s5}
 80049a2:	4589      	cmp	r9, r1
 80049a4:	9103      	str	r1, [sp, #12]
 80049a6:	f67f af12 	bls.w	80047ce <forward_dense+0x2ce>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f47f af4e 	bne.w	800484c <forward_dense+0x34c>
 80049b0:	9907      	ldr	r1, [sp, #28]
 80049b2:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800482c <forward_dense+0x32c>
 80049b6:	eef0 2a48 	vmov.f32	s5, s16
 80049ba:	2900      	cmp	r1, #0
 80049bc:	f47f af4e 	bne.w	800485c <forward_dense+0x35c>
 80049c0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80049c4:	4690      	mov	r8, r2
 80049c6:	e7aa      	b.n	800491e <forward_dense+0x41e>
 80049c8:	9903      	ldr	r1, [sp, #12]
 80049ca:	ee32 7a87 	vadd.f32	s14, s5, s14
 80049ce:	445a      	add	r2, fp
 80049d0:	eca1 7a01 	vstmia	r1!, {s14}
 80049d4:	4549      	cmp	r1, r9
 80049d6:	9103      	str	r1, [sp, #12]
 80049d8:	44dc      	add	ip, fp
 80049da:	f4ff af34 	bcc.w	8004846 <forward_dense+0x346>
 80049de:	e6f6      	b.n	80047ce <forward_dense+0x2ce>
 80049e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80049e2:	9d06      	ldr	r5, [sp, #24]
 80049e4:	9101      	str	r1, [sp, #4]
 80049e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80049e8:	9100      	str	r1, [sp, #0]
 80049ea:	4628      	mov	r0, r5
 80049ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049ee:	f000 fa85 	bl	8004efc <lite_dense_if32of32wf32>
 80049f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f4:	462b      	mov	r3, r5
 80049f6:	4413      	add	r3, r2
 80049f8:	9306      	str	r3, [sp, #24]
 80049fa:	e6f1      	b.n	80047e0 <forward_dense+0x2e0>
 80049fc:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004a00:	f1b9 0f00 	cmp.w	r9, #0
 8004a04:	d016      	beq.n	8004a34 <forward_dense+0x534>
 8004a06:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004a0a:	f000 fc25 	bl	8005258 <ai_array_get_byte_size>
 8004a0e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004a12:	4602      	mov	r2, r0
 8004a14:	4641      	mov	r1, r8
 8004a16:	4658      	mov	r0, fp
 8004a18:	f001 f8d0 	bl	8005bbc <memcpy>
 8004a1c:	e5c7      	b.n	80045ae <forward_dense+0xae>
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00a      	beq.n	8004a38 <forward_dense+0x538>
 8004a22:	f04f 0900 	mov.w	r9, #0
 8004a26:	e5bd      	b.n	80045a4 <forward_dense+0xa4>
 8004a28:	930d      	str	r3, [sp, #52]	; 0x34
 8004a2a:	e595      	b.n	8004558 <forward_dense+0x58>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a30:	460b      	mov	r3, r1
 8004a32:	e591      	b.n	8004558 <forward_dense+0x58>
 8004a34:	46c3      	mov	fp, r8
 8004a36:	e5ba      	b.n	80045ae <forward_dense+0xae>
 8004a38:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004a3c:	e5b7      	b.n	80045ae <forward_dense+0xae>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	deff      	udf	#255	; 0xff
 8004a44:	2300      	movs	r3, #0
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	deff      	udf	#255	; 0xff
 8004a4a:	bf00      	nop

08004a4c <forward_relu>:
 8004a4c:	6982      	ldr	r2, [r0, #24]
 8004a4e:	8813      	ldrh	r3, [r2, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05b      	beq.n	8004b0c <forward_relu+0xc0>
 8004a54:	6851      	ldr	r1, [r2, #4]
 8004a56:	684a      	ldr	r2, [r1, #4]
 8004a58:	b102      	cbz	r2, 8004a5c <forward_relu+0x10>
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f000 8123 	beq.w	8004ca8 <forward_relu+0x25c>
 8004a62:	b470      	push	{r4, r5, r6}
 8004a64:	6909      	ldr	r1, [r1, #16]
 8004a66:	b101      	cbz	r1, 8004a6a <forward_relu+0x1e>
 8004a68:	6809      	ldr	r1, [r1, #0]
 8004a6a:	69c6      	ldr	r6, [r0, #28]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	f000 8097 	beq.w	8004ba0 <forward_relu+0x154>
 8004a72:	6873      	ldr	r3, [r6, #4]
 8004a74:	6988      	ldr	r0, [r1, #24]
 8004a76:	6991      	ldr	r1, [r2, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f000 80c1 	beq.w	8004c00 <forward_relu+0x1b4>
 8004a7e:	6893      	ldr	r3, [r2, #8]
 8004a80:	6880      	ldr	r0, [r0, #8]
 8004a82:	688c      	ldr	r4, [r1, #8]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f000 80f2 	beq.w	8004c6e <forward_relu+0x222>
 8004a8a:	68d5      	ldr	r5, [r2, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	fb01 f202 	mul.w	r2, r1, r2
 8004a9c:	d1f9      	bne.n	8004a92 <forward_relu+0x46>
 8004a9e:	68b3      	ldr	r3, [r6, #8]
 8004aa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004aa4:	edd3 6a00 	vldr	s13, [r3]
 8004aa8:	ed93 6a01 	vldr	s12, [r3, #4]
 8004aac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004ab0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004abe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004ac2:	d425      	bmi.n	8004b10 <forward_relu+0xc4>
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	d81f      	bhi.n	8004b08 <forward_relu+0xbc>
 8004ac8:	1d1a      	adds	r2, r3, #4
 8004aca:	1d01      	adds	r1, r0, #4
 8004acc:	e00d      	b.n	8004aea <forward_relu+0x9e>
 8004ace:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	db03      	blt.n	8004ae0 <forward_relu+0x94>
 8004ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004adc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	ed61 7a01 	vstmdb	r1!, {s15}
 8004ae8:	d80e      	bhi.n	8004b08 <forward_relu+0xbc>
 8004aea:	4613      	mov	r3, r2
 8004aec:	ed72 7a01 	vldmdb	r2!, {s15}
 8004af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	d9e9      	bls.n	8004ace <forward_relu+0x82>
 8004afa:	3b08      	subs	r3, #8
 8004afc:	eef0 7a47 	vmov.f32	s15, s14
 8004b00:	429c      	cmp	r4, r3
 8004b02:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b06:	d9f0      	bls.n	8004aea <forward_relu+0x9e>
 8004b08:	bc70      	pop	{r4, r5, r6}
 8004b0a:	4770      	bx	lr
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	deff      	udf	#255	; 0xff
 8004b10:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	d11f      	bne.n	8004b5a <forward_relu+0x10e>
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d8f4      	bhi.n	8004b08 <forward_relu+0xbc>
 8004b1e:	1b1c      	subs	r4, r3, r4
 8004b20:	f024 0403 	bic.w	r4, r4, #3
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	2500      	movs	r5, #0
 8004b28:	1b1b      	subs	r3, r3, r4
 8004b2a:	1d01      	adds	r1, r0, #4
 8004b2c:	ed72 7a01 	vldmdb	r2!, {s15}
 8004b30:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	dc0a      	bgt.n	8004b50 <forward_relu+0x104>
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004b40:	d0e2      	beq.n	8004b08 <forward_relu+0xbc>
 8004b42:	ed72 7a01 	vldmdb	r2!, {s15}
 8004b46:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	ddf4      	ble.n	8004b3a <forward_relu+0xee>
 8004b50:	429a      	cmp	r2, r3
 8004b52:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b56:	d1e9      	bne.n	8004b2c <forward_relu+0xe0>
 8004b58:	e7d6      	b.n	8004b08 <forward_relu+0xbc>
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d8d4      	bhi.n	8004b08 <forward_relu+0xbc>
 8004b5e:	1b1c      	subs	r4, r3, r4
 8004b60:	f024 0403 	bic.w	r4, r4, #3
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	1d01      	adds	r1, r0, #4
 8004b68:	1b1b      	subs	r3, r3, r4
 8004b6a:	ed72 7a01 	vldmdb	r2!, {s15}
 8004b6e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	db0e      	blt.n	8004b96 <forward_relu+0x14a>
 8004b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004b82:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b86:	d0bf      	beq.n	8004b08 <forward_relu+0xbc>
 8004b88:	ed72 7a01 	vldmdb	r2!, {s15}
 8004b8c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	daf0      	bge.n	8004b78 <forward_relu+0x12c>
 8004b96:	4293      	cmp	r3, r2
 8004b98:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b9c:	d1e5      	bne.n	8004b6a <forward_relu+0x11e>
 8004b9e:	e7b3      	b.n	8004b08 <forward_relu+0xbc>
 8004ba0:	6893      	ldr	r3, [r2, #8]
 8004ba2:	6989      	ldr	r1, [r1, #24]
 8004ba4:	6990      	ldr	r0, [r2, #24]
 8004ba6:	6889      	ldr	r1, [r1, #8]
 8004ba8:	6884      	ldr	r4, [r0, #8]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	d075      	beq.n	8004c9a <forward_relu+0x24e>
 8004bae:	68d5      	ldr	r5, [r2, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004bb6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004bba:	429d      	cmp	r5, r3
 8004bbc:	fb00 f202 	mul.w	r2, r0, r2
 8004bc0:	d1f9      	bne.n	8004bb6 <forward_relu+0x16a>
 8004bc2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004bcc:	4294      	cmp	r4, r2
 8004bce:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004bd2:	d899      	bhi.n	8004b08 <forward_relu+0xbc>
 8004bd4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004cb0 <forward_relu+0x264>
 8004bd8:	3204      	adds	r2, #4
 8004bda:	3104      	adds	r1, #4
 8004bdc:	4613      	mov	r3, r2
 8004bde:	ed72 7a01 	vldmdb	r2!, {s15}
 8004be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	f1a3 0308 	sub.w	r3, r3, #8
 8004bee:	bfb8      	it	lt
 8004bf0:	eef0 7a47 	vmovlt.f32	s15, s14
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	ed61 7a01 	vstmdb	r1!, {s15}
 8004bfa:	d9ef      	bls.n	8004bdc <forward_relu+0x190>
 8004bfc:	bc70      	pop	{r4, r5, r6}
 8004bfe:	4770      	bx	lr
 8004c00:	688c      	ldr	r4, [r1, #8]
 8004c02:	6891      	ldr	r1, [r2, #8]
 8004c04:	6880      	ldr	r0, [r0, #8]
 8004c06:	0a09      	lsrs	r1, r1, #8
 8004c08:	d049      	beq.n	8004c9e <forward_relu+0x252>
 8004c0a:	68d5      	ldr	r5, [r2, #12]
 8004c0c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004c10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004c14:	42aa      	cmp	r2, r5
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	d1f9      	bne.n	8004c10 <forward_relu+0x1c4>
 8004c1c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004c20:	3a01      	subs	r2, #1
 8004c22:	68b1      	ldr	r1, [r6, #8]
 8004c24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	ed91 7a00 	vldr	s14, [r1]
 8004c2e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004c32:	f63f af69 	bhi.w	8004b08 <forward_relu+0xbc>
 8004c36:	2500      	movs	r5, #0
 8004c38:	3304      	adds	r3, #4
 8004c3a:	1d02      	adds	r2, r0, #4
 8004c3c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c48:	f1a3 0104 	sub.w	r1, r3, #4
 8004c4c:	f1a3 0308 	sub.w	r3, r3, #8
 8004c50:	d406      	bmi.n	8004c60 <forward_relu+0x214>
 8004c52:	429c      	cmp	r4, r3
 8004c54:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004c58:	f63f af56 	bhi.w	8004b08 <forward_relu+0xbc>
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	e7ed      	b.n	8004c3c <forward_relu+0x1f0>
 8004c60:	429c      	cmp	r4, r3
 8004c62:	ed62 7a01 	vstmdb	r2!, {s15}
 8004c66:	f63f af4f 	bhi.w	8004b08 <forward_relu+0xbc>
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	e7e6      	b.n	8004c3c <forward_relu+0x1f0>
 8004c6e:	68b3      	ldr	r3, [r6, #8]
 8004c70:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c74:	edd3 6a00 	vldr	s13, [r3]
 8004c78:	ed93 6a01 	vldr	s12, [r3, #4]
 8004c7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d401      	bmi.n	8004c8a <forward_relu+0x23e>
 8004c86:	4623      	mov	r3, r4
 8004c88:	e71e      	b.n	8004ac8 <forward_relu+0x7c>
 8004c8a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	4623      	mov	r3, r4
 8004c94:	f47f af63 	bne.w	8004b5e <forward_relu+0x112>
 8004c98:	e741      	b.n	8004b1e <forward_relu+0xd2>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	e79a      	b.n	8004bd4 <forward_relu+0x188>
 8004c9e:	68b2      	ldr	r2, [r6, #8]
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	ed92 7a00 	vldr	s14, [r2]
 8004ca6:	e7c6      	b.n	8004c36 <forward_relu+0x1ea>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	deff      	udf	#255	; 0xff
 8004cae:	bf00      	nop
 8004cb0:	00000000 	.word	0x00000000

08004cb4 <forward_sm>:
 8004cb4:	6982      	ldr	r2, [r0, #24]
 8004cb6:	8813      	ldrh	r3, [r2, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d07c      	beq.n	8004db6 <forward_sm+0x102>
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	ed2d 8b04 	vpush	{d8-d9}
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	6854      	ldr	r4, [r2, #4]
 8004cc8:	b085      	sub	sp, #20
 8004cca:	b104      	cbz	r4, 8004cce <forward_sm+0x1a>
 8004ccc:	6824      	ldr	r4, [r4, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d076      	beq.n	8004dc0 <forward_sm+0x10c>
 8004cd2:	6913      	ldr	r3, [r2, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d076      	beq.n	8004dc6 <forward_sm+0x112>
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	68e0      	ldr	r0, [r4, #12]
 8004cde:	68f2      	ldr	r2, [r6, #12]
 8004ce0:	6845      	ldr	r5, [r0, #4]
 8004ce2:	6857      	ldr	r7, [r2, #4]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	d068      	beq.n	8004dba <forward_sm+0x106>
 8004ce8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004cec:	2201      	movs	r2, #1
 8004cee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004cf2:	4298      	cmp	r0, r3
 8004cf4:	fb01 f202 	mul.w	r2, r1, r2
 8004cf8:	d1f9      	bne.n	8004cee <forward_sm+0x3a>
 8004cfa:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004cfe:	69a2      	ldr	r2, [r4, #24]
 8004d00:	69b3      	ldr	r3, [r6, #24]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004d08:	eb02 0309 	add.w	r3, r2, r9
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	d24c      	bcs.n	8004dac <forward_sm+0xf8>
 8004d12:	00bb      	lsls	r3, r7, #2
 8004d14:	9303      	str	r3, [sp, #12]
 8004d16:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8004d1a:	00ab      	lsls	r3, r5, #2
 8004d1c:	2d01      	cmp	r5, #1
 8004d1e:	ed92 8a00 	vldr	s16, [r2]
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004d28:	463e      	mov	r6, r7
 8004d2a:	d93c      	bls.n	8004da6 <forward_sm+0xf2>
 8004d2c:	1d13      	adds	r3, r2, #4
 8004d2e:	ecf3 7a01 	vldmia	r3!, {s15}
 8004d32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	bfb8      	it	lt
 8004d3c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004d40:	429e      	cmp	r6, r3
 8004d42:	d1f4      	bne.n	8004d2e <forward_sm+0x7a>
 8004d44:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004dcc <forward_sm+0x118>
 8004d48:	4692      	mov	sl, r2
 8004d4a:	46c3      	mov	fp, r8
 8004d4c:	46c1      	mov	r9, r8
 8004d4e:	2400      	movs	r4, #0
 8004d50:	ecba 0a01 	vldmia	sl!, {s0}
 8004d54:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004d58:	f000 fae4 	bl	8005324 <expf>
 8004d5c:	3401      	adds	r4, #1
 8004d5e:	42a5      	cmp	r5, r4
 8004d60:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004d64:	eca9 0a01 	vstmia	r9!, {s0}
 8004d68:	d8f2      	bhi.n	8004d50 <forward_sm+0x9c>
 8004d6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	d00b      	beq.n	8004d8c <forward_sm+0xd8>
 8004d74:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004d78:	2300      	movs	r3, #0
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	429d      	cmp	r5, r3
 8004d7e:	eddb 7a00 	vldr	s15, [fp]
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	eceb 7a01 	vstmia	fp!, {s15}
 8004d8a:	d8f6      	bhi.n	8004d7a <forward_sm+0xc6>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	9901      	ldr	r1, [sp, #4]
 8004d90:	4498      	add	r8, r3
 8004d92:	9b02      	ldr	r3, [sp, #8]
 8004d94:	42b9      	cmp	r1, r7
 8004d96:	463a      	mov	r2, r7
 8004d98:	441e      	add	r6, r3
 8004d9a:	d907      	bls.n	8004dac <forward_sm+0xf8>
 8004d9c:	2d01      	cmp	r5, #1
 8004d9e:	ed92 8a00 	vldr	s16, [r2]
 8004da2:	441f      	add	r7, r3
 8004da4:	d8c2      	bhi.n	8004d2c <forward_sm+0x78>
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	d0f0      	beq.n	8004d8c <forward_sm+0xd8>
 8004daa:	e7cb      	b.n	8004d44 <forward_sm+0x90>
 8004dac:	b005      	add	sp, #20
 8004dae:	ecbd 8b04 	vpop	{d8-d9}
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	deff      	udf	#255	; 0xff
 8004dba:	f04f 0904 	mov.w	r9, #4
 8004dbe:	e79e      	b.n	8004cfe <forward_sm+0x4a>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	deff      	udf	#255	; 0xff
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	deff      	udf	#255	; 0xff
 8004dca:	bf00      	nop
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <ai_check_custom_types>:
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <ai_check_custom_types+0x50>)
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	b118      	cbz	r0, 8004de0 <ai_check_custom_types+0x10>
 8004dd8:	7803      	ldrb	r3, [r0, #0]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d002      	beq.n	8004de4 <ai_check_custom_types+0x14>
 8004dde:	2000      	movs	r0, #0
 8004de0:	b002      	add	sp, #8
 8004de2:	4770      	bx	lr
 8004de4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <ai_check_custom_types+0x26>
 8004dec:	2001      	movs	r0, #1
 8004dee:	f080 0001 	eor.w	r0, r0, #1
 8004df2:	b002      	add	sp, #8
 8004df4:	4770      	bx	lr
 8004df6:	7842      	ldrb	r2, [r0, #1]
 8004df8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f100 0001 	add.w	r0, r0, #1
 8004e02:	d1f3      	bne.n	8004dec <ai_check_custom_types+0x1c>
 8004e04:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004e08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1ed      	bne.n	8004dec <ai_check_custom_types+0x1c>
 8004e10:	7842      	ldrb	r2, [r0, #1]
 8004e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d1e8      	bne.n	8004dec <ai_check_custom_types+0x1c>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e7e7      	b.n	8004dee <ai_check_custom_types+0x1e>
 8004e1e:	bf00      	nop
 8004e20:	84048403 	.word	0x84048403

08004e24 <ai_layers_init_all>:
 8004e24:	4601      	mov	r1, r0
 8004e26:	2000      	movs	r0, #0
 8004e28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e2a:	b143      	cbz	r3, 8004e3e <ai_layers_init_all+0x1a>
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	60d9      	str	r1, [r3, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	f100 0001 	add.w	r0, r0, #1
 8004e36:	d002      	beq.n	8004e3e <ai_layers_init_all+0x1a>
 8004e38:	b10a      	cbz	r2, 8004e3e <ai_layers_init_all+0x1a>
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	e7f5      	b.n	8004e2a <ai_layers_init_all+0x6>
 8004e3e:	4770      	bx	lr

08004e40 <ai_layers_post_init_all>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004e44:	2500      	movs	r5, #0
 8004e46:	b16c      	cbz	r4, 8004e64 <ai_layers_post_init_all+0x24>
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	07db      	lsls	r3, r3, #31
 8004e4c:	d504      	bpl.n	8004e58 <ai_layers_post_init_all+0x18>
 8004e4e:	6a23      	ldr	r3, [r4, #32]
 8004e50:	4620      	mov	r0, r4
 8004e52:	b10b      	cbz	r3, 8004e58 <ai_layers_post_init_all+0x18>
 8004e54:	4798      	blx	r3
 8004e56:	3501      	adds	r5, #1
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	d002      	beq.n	8004e64 <ai_layers_post_init_all+0x24>
 8004e5e:	b10b      	cbz	r3, 8004e64 <ai_layers_post_init_all+0x24>
 8004e60:	461c      	mov	r4, r3
 8004e62:	e7f0      	b.n	8004e46 <ai_layers_post_init_all+0x6>
 8004e64:	4628      	mov	r0, r5
 8004e66:	bd38      	pop	{r3, r4, r5, pc}

08004e68 <ai_layers_forward_all>:
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004e70:	4604      	mov	r4, r0
 8004e72:	f1b8 0f00 	cmp.w	r8, #0
 8004e76:	d02b      	beq.n	8004ed0 <ai_layers_forward_all+0x68>
 8004e78:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004e7a:	6381      	str	r1, [r0, #56]	; 0x38
 8004e7c:	b321      	cbz	r1, 8004ec8 <ai_layers_forward_all+0x60>
 8004e7e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e80:	2001      	movs	r0, #1
 8004e82:	47c0      	blx	r8
 8004e84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004e86:	b1fe      	cbz	r6, 8004ec8 <ai_layers_forward_all+0x60>
 8004e88:	2700      	movs	r7, #0
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e8e:	2002      	movs	r0, #2
 8004e90:	47c0      	blx	r8
 8004e92:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004e94:	4628      	mov	r0, r5
 8004e96:	696b      	ldr	r3, [r5, #20]
 8004e98:	4798      	blx	r3
 8004e9a:	692e      	ldr	r6, [r5, #16]
 8004e9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ea0:	42b5      	cmp	r5, r6
 8004ea2:	f04f 0003 	mov.w	r0, #3
 8004ea6:	d007      	beq.n	8004eb8 <ai_layers_forward_all+0x50>
 8004ea8:	47c0      	blx	r8
 8004eaa:	3701      	adds	r7, #1
 8004eac:	63a6      	str	r6, [r4, #56]	; 0x38
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	d1eb      	bne.n	8004e8a <ai_layers_forward_all+0x22>
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	2003      	movs	r0, #3
 8004eba:	47c0      	blx	r8
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	3701      	adds	r7, #1
 8004ec0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	2700      	movs	r7, #0
 8004eca:	4638      	mov	r0, r7
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004ed2:	6385      	str	r5, [r0, #56]	; 0x38
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	d0f7      	beq.n	8004ec8 <ai_layers_forward_all+0x60>
 8004ed8:	4647      	mov	r7, r8
 8004eda:	696b      	ldr	r3, [r5, #20]
 8004edc:	4628      	mov	r0, r5
 8004ede:	4798      	blx	r3
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	692d      	ldr	r5, [r5, #16]
 8004ee4:	429d      	cmp	r5, r3
 8004ee6:	d004      	beq.n	8004ef2 <ai_layers_forward_all+0x8a>
 8004ee8:	63a5      	str	r5, [r4, #56]	; 0x38
 8004eea:	3701      	adds	r7, #1
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d1f4      	bne.n	8004eda <ai_layers_forward_all+0x72>
 8004ef0:	e7df      	b.n	8004eb2 <ai_layers_forward_all+0x4a>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ef6:	3701      	adds	r7, #1
 8004ef8:	e7db      	b.n	8004eb2 <ai_layers_forward_all+0x4a>
 8004efa:	bf00      	nop

08004efc <lite_dense_if32of32wf32>:
 8004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f00:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8004f04:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8004f08:	4287      	cmp	r7, r0
 8004f0a:	f240 8106 	bls.w	800511a <lite_dense_if32of32wf32+0x21e>
 8004f0e:	f1a6 0810 	sub.w	r8, r6, #16
 8004f12:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8004f1e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004f22:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8004f26:	4605      	mov	r5, r0
 8004f28:	f006 0a0f 	and.w	sl, r6, #15
 8004f2c:	2e0f      	cmp	r6, #15
 8004f2e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005140 <lite_dense_if32of32wf32+0x244>
 8004f32:	f240 8101 	bls.w	8005138 <lite_dense_if32of32wf32+0x23c>
 8004f36:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8004f3a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8004f3e:	46b6      	mov	lr, r6
 8004f40:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8004f44:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8004f48:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8004f4c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8004f50:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8004f54:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8004f58:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8004f5c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8004f60:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8004f64:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8004f68:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8004f6c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8004f70:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8004f74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004f78:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8004f7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f80:	f1ae 0e10 	sub.w	lr, lr, #16
 8004f84:	f1be 0f0f 	cmp.w	lr, #15
 8004f88:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8004f8c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8004f90:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004f94:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8004f98:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004f9c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8004fa0:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8004fa4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004fa8:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8004fac:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8004fb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fb4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8004fb8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8004fbc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004fc0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8004fc4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8004fc8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004fcc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8004fd0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8004fd4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004fd8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8004fdc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8004fe0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fe4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8004fe8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8004fec:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ff0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8004ff4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8004ff8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004ffc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005000:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005004:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005008:	eee5 7a25 	vfma.f32	s15, s10, s11
 800500c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005014:	d894      	bhi.n	8004f40 <lite_dense_if32of32wf32+0x44>
 8005016:	eb02 0e0b 	add.w	lr, r2, fp
 800501a:	4654      	mov	r4, sl
 800501c:	46c4      	mov	ip, r8
 800501e:	2c00      	cmp	r4, #0
 8005020:	d075      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005022:	eddc 6a00 	vldr	s13, [ip]
 8005026:	edde 7a00 	vldr	s15, [lr]
 800502a:	2c01      	cmp	r4, #1
 800502c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005030:	d06d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005032:	eddc 6a01 	vldr	s13, [ip, #4]
 8005036:	edde 7a01 	vldr	s15, [lr, #4]
 800503a:	2c02      	cmp	r4, #2
 800503c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005040:	d065      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005042:	eddc 6a02 	vldr	s13, [ip, #8]
 8005046:	edde 7a02 	vldr	s15, [lr, #8]
 800504a:	2c03      	cmp	r4, #3
 800504c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005050:	d05d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005052:	eddc 6a03 	vldr	s13, [ip, #12]
 8005056:	edde 7a03 	vldr	s15, [lr, #12]
 800505a:	2c04      	cmp	r4, #4
 800505c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005060:	d055      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005062:	eddc 6a04 	vldr	s13, [ip, #16]
 8005066:	edde 7a04 	vldr	s15, [lr, #16]
 800506a:	2c05      	cmp	r4, #5
 800506c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005070:	d04d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005072:	eddc 6a05 	vldr	s13, [ip, #20]
 8005076:	edde 7a05 	vldr	s15, [lr, #20]
 800507a:	2c06      	cmp	r4, #6
 800507c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005080:	d045      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005082:	eddc 6a06 	vldr	s13, [ip, #24]
 8005086:	edde 7a06 	vldr	s15, [lr, #24]
 800508a:	2c07      	cmp	r4, #7
 800508c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005090:	d03d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005092:	eddc 6a07 	vldr	s13, [ip, #28]
 8005096:	edde 7a07 	vldr	s15, [lr, #28]
 800509a:	2c08      	cmp	r4, #8
 800509c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050a0:	d035      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050a2:	eddc 6a08 	vldr	s13, [ip, #32]
 80050a6:	edde 7a08 	vldr	s15, [lr, #32]
 80050aa:	2c09      	cmp	r4, #9
 80050ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050b0:	d02d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050b2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80050b6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80050ba:	2c0a      	cmp	r4, #10
 80050bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050c0:	d025      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050c2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80050c6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80050ca:	2c0b      	cmp	r4, #11
 80050cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050d0:	d01d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050d2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80050d6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80050da:	2c0c      	cmp	r4, #12
 80050dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050e0:	d015      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050e2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80050e6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80050ea:	3c0d      	subs	r4, #13
 80050ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050f0:	d00d      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 80050f2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80050f6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80050fa:	2c01      	cmp	r4, #1
 80050fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005100:	d005      	beq.n	800510e <lite_dense_if32of32wf32+0x212>
 8005102:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8005106:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800510a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800510e:	444a      	add	r2, r9
 8005110:	eca5 7a01 	vstmia	r5!, {s14}
 8005114:	42af      	cmp	r7, r5
 8005116:	f63f af09 	bhi.w	8004f2c <lite_dense_if32of32wf32+0x30>
 800511a:	b15b      	cbz	r3, 8005134 <lite_dense_if32of32wf32+0x238>
 800511c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800511e:	b14a      	cbz	r2, 8005134 <lite_dense_if32of32wf32+0x238>
 8005120:	edd0 7a00 	vldr	s15, [r0]
 8005124:	ecb3 7a01 	vldmia	r3!, {s14}
 8005128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800512c:	ece0 7a01 	vstmia	r0!, {s15}
 8005130:	4287      	cmp	r7, r0
 8005132:	d1f5      	bne.n	8005120 <lite_dense_if32of32wf32+0x224>
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	4634      	mov	r4, r6
 800513a:	4696      	mov	lr, r2
 800513c:	468c      	mov	ip, r1
 800513e:	e76e      	b.n	800501e <lite_dense_if32of32wf32+0x122>
 8005140:	00000000 	.word	0x00000000

08005144 <ai_version_get>:
 8005144:	0212      	lsls	r2, r2, #8
 8005146:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800514a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800514e:	4770      	bx	lr

08005150 <get_tensor_byte_size>:
 8005150:	b410      	push	{r4}
 8005152:	6983      	ldr	r3, [r0, #24]
 8005154:	68c4      	ldr	r4, [r0, #12]
 8005156:	6941      	ldr	r1, [r0, #20]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	4a07      	ldr	r2, [pc, #28]	; (800517c <get_tensor_byte_size+0x2c>)
 800515e:	68c9      	ldr	r1, [r1, #12]
 8005160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005164:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800516c:	fb01 f000 	mul.w	r0, r1, r0
 8005170:	4293      	cmp	r3, r2
 8005172:	bf04      	itt	eq
 8005174:	3007      	addeq	r0, #7
 8005176:	08c0      	lsreq	r0, r0, #3
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	000400c0 	.word	0x000400c0

08005180 <ai_array_to_buffer_fmt>:
 8005180:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005184:	2b02      	cmp	r3, #2
 8005186:	d050      	beq.n	800522a <ai_array_to_buffer_fmt+0xaa>
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <ai_array_to_buffer_fmt+0xb4>)
 800518a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800518e:	429a      	cmp	r2, r3
 8005190:	d00b      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 8005192:	dc1c      	bgt.n	80051ce <ai_array_to_buffer_fmt+0x4e>
 8005194:	4b28      	ldr	r3, [pc, #160]	; (8005238 <ai_array_to_buffer_fmt+0xb8>)
 8005196:	429a      	cmp	r2, r3
 8005198:	d007      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 800519a:	dd0b      	ble.n	80051b4 <ai_array_to_buffer_fmt+0x34>
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <ai_array_to_buffer_fmt+0xbc>)
 800519e:	429a      	cmp	r2, r3
 80051a0:	d003      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051a2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d131      	bne.n	800520e <ai_array_to_buffer_fmt+0x8e>
 80051aa:	4613      	mov	r3, r2
 80051ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80051b0:	4318      	orrs	r0, r3
 80051b2:	4770      	bx	lr
 80051b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0f6      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051bc:	dd2c      	ble.n	8005218 <ai_array_to_buffer_fmt+0x98>
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <ai_array_to_buffer_fmt+0xc0>)
 80051c0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bf18      	it	ne
 80051c8:	2340      	movne	r3, #64	; 0x40
 80051ca:	4318      	orrs	r0, r3
 80051cc:	4770      	bx	lr
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <ai_array_to_buffer_fmt+0xc4>)
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d0ea      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051d4:	dd0e      	ble.n	80051f4 <ai_array_to_buffer_fmt+0x74>
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <ai_array_to_buffer_fmt+0xc8>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d0e6      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051dc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d0e2      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <ai_array_to_buffer_fmt+0xcc>)
 80051e6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf18      	it	ne
 80051ee:	2340      	movne	r3, #64	; 0x40
 80051f0:	4318      	orrs	r0, r3
 80051f2:	4770      	bx	lr
 80051f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d0d6      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 80051fc:	3307      	adds	r3, #7
 80051fe:	429a      	cmp	r2, r3
 8005200:	d0d3      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 8005202:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8005206:	429a      	cmp	r2, r3
 8005208:	bf18      	it	ne
 800520a:	2340      	movne	r3, #64	; 0x40
 800520c:	e7ce      	b.n	80051ac <ai_array_to_buffer_fmt+0x2c>
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <ai_array_to_buffer_fmt+0xd0>)
 8005210:	429a      	cmp	r2, r3
 8005212:	bf18      	it	ne
 8005214:	2340      	movne	r3, #64	; 0x40
 8005216:	e7c9      	b.n	80051ac <ai_array_to_buffer_fmt+0x2c>
 8005218:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800521c:	429a      	cmp	r2, r3
 800521e:	d0c4      	beq.n	80051aa <ai_array_to_buffer_fmt+0x2a>
 8005220:	3380      	adds	r3, #128	; 0x80
 8005222:	429a      	cmp	r2, r3
 8005224:	bf18      	it	ne
 8005226:	2340      	movne	r3, #64	; 0x40
 8005228:	e7c0      	b.n	80051ac <ai_array_to_buffer_fmt+0x2c>
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <ai_array_to_buffer_fmt+0xd4>)
 800522c:	4003      	ands	r3, r0
 800522e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005232:	e7bb      	b.n	80051ac <ai_array_to_buffer_fmt+0x2c>
 8005234:	00840040 	.word	0x00840040
 8005238:	00040840 	.word	0x00040840
 800523c:	00041040 	.word	0x00041040
 8005240:	00040447 	.word	0x00040447
 8005244:	00840840 	.word	0x00840840
 8005248:	00841040 	.word	0x00841040
 800524c:	0084084f 	.word	0x0084084f
 8005250:	0004084f 	.word	0x0004084f
 8005254:	00803fff 	.word	0x00803fff

08005258 <ai_array_get_byte_size>:
 8005258:	b319      	cbz	r1, 80052a2 <ai_array_get_byte_size+0x4a>
 800525a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800525e:	fb03 f101 	mul.w	r1, r3, r1
 8005262:	3107      	adds	r1, #7
 8005264:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8005268:	f021 0307 	bic.w	r3, r1, #7
 800526c:	2a04      	cmp	r2, #4
 800526e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8005272:	fa23 f101 	lsr.w	r1, r3, r1
 8005276:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800527a:	d00b      	beq.n	8005294 <ai_array_get_byte_size+0x3c>
 800527c:	2a08      	cmp	r2, #8
 800527e:	d002      	beq.n	8005286 <ai_array_get_byte_size+0x2e>
 8005280:	3107      	adds	r1, #7
 8005282:	08c8      	lsrs	r0, r1, #3
 8005284:	4770      	bx	lr
 8005286:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800528a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800528e:	3107      	adds	r1, #7
 8005290:	08c8      	lsrs	r0, r1, #3
 8005292:	4770      	bx	lr
 8005294:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005298:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800529c:	3107      	adds	r1, #7
 800529e:	08c8      	lsrs	r0, r1, #3
 80052a0:	4770      	bx	lr
 80052a2:	4608      	mov	r0, r1
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop

080052a8 <ai_array_get_data_byte_size>:
 80052a8:	b169      	cbz	r1, 80052c6 <ai_array_get_data_byte_size+0x1e>
 80052aa:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80052ae:	fb02 f101 	mul.w	r1, r2, r1
 80052b2:	1dcb      	adds	r3, r1, #7
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80052bc:	fa23 f000 	lsr.w	r0, r3, r0
 80052c0:	3007      	adds	r0, #7
 80052c2:	08c0      	lsrs	r0, r0, #3
 80052c4:	4770      	bx	lr
 80052c6:	4608      	mov	r0, r1
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop

080052cc <sqrt>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	ed2d 8b02 	vpush	{d8}
 80052d2:	ec55 4b10 	vmov	r4, r5, d0
 80052d6:	f000 f85b 	bl	8005390 <__ieee754_sqrt>
 80052da:	4622      	mov	r2, r4
 80052dc:	462b      	mov	r3, r5
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	eeb0 8a40 	vmov.f32	s16, s0
 80052e6:	eef0 8a60 	vmov.f32	s17, s1
 80052ea:	f7fb fc1f 	bl	8000b2c <__aeabi_dcmpun>
 80052ee:	b990      	cbnz	r0, 8005316 <sqrt+0x4a>
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7fb fbf0 	bl	8000adc <__aeabi_dcmplt>
 80052fc:	b158      	cbz	r0, 8005316 <sqrt+0x4a>
 80052fe:	f000 f9f7 	bl	80056f0 <__errno>
 8005302:	2321      	movs	r3, #33	; 0x21
 8005304:	6003      	str	r3, [r0, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	f7fb fa9d 	bl	800084c <__aeabi_ddiv>
 8005312:	ec41 0b18 	vmov	d8, r0, r1
 8005316:	eeb0 0a48 	vmov.f32	s0, s16
 800531a:	eef0 0a68 	vmov.f32	s1, s17
 800531e:	ecbd 8b02 	vpop	{d8}
 8005322:	bd38      	pop	{r3, r4, r5, pc}

08005324 <expf>:
 8005324:	b508      	push	{r3, lr}
 8005326:	ed2d 8b02 	vpush	{d8}
 800532a:	eef0 8a40 	vmov.f32	s17, s0
 800532e:	f000 f8e1 	bl	80054f4 <__ieee754_expf>
 8005332:	eeb0 8a40 	vmov.f32	s16, s0
 8005336:	eeb0 0a68 	vmov.f32	s0, s17
 800533a:	f000 f9cb 	bl	80056d4 <finitef>
 800533e:	b160      	cbz	r0, 800535a <expf+0x36>
 8005340:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005380 <expf+0x5c>
 8005344:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	dd0a      	ble.n	8005364 <expf+0x40>
 800534e:	f000 f9cf 	bl	80056f0 <__errno>
 8005352:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8005384 <expf+0x60>
 8005356:	2322      	movs	r3, #34	; 0x22
 8005358:	6003      	str	r3, [r0, #0]
 800535a:	eeb0 0a48 	vmov.f32	s0, s16
 800535e:	ecbd 8b02 	vpop	{d8}
 8005362:	bd08      	pop	{r3, pc}
 8005364:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005388 <expf+0x64>
 8005368:	eef4 8ae7 	vcmpe.f32	s17, s15
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	d5f3      	bpl.n	800535a <expf+0x36>
 8005372:	f000 f9bd 	bl	80056f0 <__errno>
 8005376:	2322      	movs	r3, #34	; 0x22
 8005378:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800538c <expf+0x68>
 800537c:	6003      	str	r3, [r0, #0]
 800537e:	e7ec      	b.n	800535a <expf+0x36>
 8005380:	42b17180 	.word	0x42b17180
 8005384:	7f800000 	.word	0x7f800000
 8005388:	c2cff1b5 	.word	0xc2cff1b5
 800538c:	00000000 	.word	0x00000000

08005390 <__ieee754_sqrt>:
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	ec55 4b10 	vmov	r4, r5, d0
 8005398:	4e55      	ldr	r6, [pc, #340]	; (80054f0 <__ieee754_sqrt+0x160>)
 800539a:	43ae      	bics	r6, r5
 800539c:	ee10 0a10 	vmov	r0, s0
 80053a0:	ee10 3a10 	vmov	r3, s0
 80053a4:	462a      	mov	r2, r5
 80053a6:	4629      	mov	r1, r5
 80053a8:	d110      	bne.n	80053cc <__ieee754_sqrt+0x3c>
 80053aa:	ee10 2a10 	vmov	r2, s0
 80053ae:	462b      	mov	r3, r5
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4620      	mov	r0, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	f7fa ff66 	bl	800028c <__adddf3>
 80053c0:	4604      	mov	r4, r0
 80053c2:	460d      	mov	r5, r1
 80053c4:	ec45 4b10 	vmov	d0, r4, r5
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	dc10      	bgt.n	80053f2 <__ieee754_sqrt+0x62>
 80053d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80053d4:	4330      	orrs	r0, r6
 80053d6:	d0f5      	beq.n	80053c4 <__ieee754_sqrt+0x34>
 80053d8:	b15d      	cbz	r5, 80053f2 <__ieee754_sqrt+0x62>
 80053da:	ee10 2a10 	vmov	r2, s0
 80053de:	462b      	mov	r3, r5
 80053e0:	ee10 0a10 	vmov	r0, s0
 80053e4:	f7fa ff50 	bl	8000288 <__aeabi_dsub>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	f7fb fa2e 	bl	800084c <__aeabi_ddiv>
 80053f0:	e7e6      	b.n	80053c0 <__ieee754_sqrt+0x30>
 80053f2:	1512      	asrs	r2, r2, #20
 80053f4:	d074      	beq.n	80054e0 <__ieee754_sqrt+0x150>
 80053f6:	07d4      	lsls	r4, r2, #31
 80053f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80053fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005404:	bf5e      	ittt	pl
 8005406:	0fda      	lsrpl	r2, r3, #31
 8005408:	005b      	lslpl	r3, r3, #1
 800540a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800540e:	2400      	movs	r4, #0
 8005410:	0fda      	lsrs	r2, r3, #31
 8005412:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005416:	107f      	asrs	r7, r7, #1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	2516      	movs	r5, #22
 800541c:	4620      	mov	r0, r4
 800541e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005422:	1886      	adds	r6, r0, r2
 8005424:	428e      	cmp	r6, r1
 8005426:	bfde      	ittt	le
 8005428:	1b89      	suble	r1, r1, r6
 800542a:	18b0      	addle	r0, r6, r2
 800542c:	18a4      	addle	r4, r4, r2
 800542e:	0049      	lsls	r1, r1, #1
 8005430:	3d01      	subs	r5, #1
 8005432:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005436:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800543a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800543e:	d1f0      	bne.n	8005422 <__ieee754_sqrt+0x92>
 8005440:	462a      	mov	r2, r5
 8005442:	f04f 0e20 	mov.w	lr, #32
 8005446:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800544a:	4281      	cmp	r1, r0
 800544c:	eb06 0c05 	add.w	ip, r6, r5
 8005450:	dc02      	bgt.n	8005458 <__ieee754_sqrt+0xc8>
 8005452:	d113      	bne.n	800547c <__ieee754_sqrt+0xec>
 8005454:	459c      	cmp	ip, r3
 8005456:	d811      	bhi.n	800547c <__ieee754_sqrt+0xec>
 8005458:	f1bc 0f00 	cmp.w	ip, #0
 800545c:	eb0c 0506 	add.w	r5, ip, r6
 8005460:	da43      	bge.n	80054ea <__ieee754_sqrt+0x15a>
 8005462:	2d00      	cmp	r5, #0
 8005464:	db41      	blt.n	80054ea <__ieee754_sqrt+0x15a>
 8005466:	f100 0801 	add.w	r8, r0, #1
 800546a:	1a09      	subs	r1, r1, r0
 800546c:	459c      	cmp	ip, r3
 800546e:	bf88      	it	hi
 8005470:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005474:	eba3 030c 	sub.w	r3, r3, ip
 8005478:	4432      	add	r2, r6
 800547a:	4640      	mov	r0, r8
 800547c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005480:	f1be 0e01 	subs.w	lr, lr, #1
 8005484:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005488:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800548c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005490:	d1db      	bne.n	800544a <__ieee754_sqrt+0xba>
 8005492:	430b      	orrs	r3, r1
 8005494:	d006      	beq.n	80054a4 <__ieee754_sqrt+0x114>
 8005496:	1c50      	adds	r0, r2, #1
 8005498:	bf13      	iteet	ne
 800549a:	3201      	addne	r2, #1
 800549c:	3401      	addeq	r4, #1
 800549e:	4672      	moveq	r2, lr
 80054a0:	f022 0201 	bicne.w	r2, r2, #1
 80054a4:	1063      	asrs	r3, r4, #1
 80054a6:	0852      	lsrs	r2, r2, #1
 80054a8:	07e1      	lsls	r1, r4, #31
 80054aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80054ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80054b2:	bf48      	it	mi
 80054b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80054b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80054bc:	4614      	mov	r4, r2
 80054be:	e781      	b.n	80053c4 <__ieee754_sqrt+0x34>
 80054c0:	0ad9      	lsrs	r1, r3, #11
 80054c2:	3815      	subs	r0, #21
 80054c4:	055b      	lsls	r3, r3, #21
 80054c6:	2900      	cmp	r1, #0
 80054c8:	d0fa      	beq.n	80054c0 <__ieee754_sqrt+0x130>
 80054ca:	02cd      	lsls	r5, r1, #11
 80054cc:	d50a      	bpl.n	80054e4 <__ieee754_sqrt+0x154>
 80054ce:	f1c2 0420 	rsb	r4, r2, #32
 80054d2:	fa23 f404 	lsr.w	r4, r3, r4
 80054d6:	1e55      	subs	r5, r2, #1
 80054d8:	4093      	lsls	r3, r2
 80054da:	4321      	orrs	r1, r4
 80054dc:	1b42      	subs	r2, r0, r5
 80054de:	e78a      	b.n	80053f6 <__ieee754_sqrt+0x66>
 80054e0:	4610      	mov	r0, r2
 80054e2:	e7f0      	b.n	80054c6 <__ieee754_sqrt+0x136>
 80054e4:	0049      	lsls	r1, r1, #1
 80054e6:	3201      	adds	r2, #1
 80054e8:	e7ef      	b.n	80054ca <__ieee754_sqrt+0x13a>
 80054ea:	4680      	mov	r8, r0
 80054ec:	e7bd      	b.n	800546a <__ieee754_sqrt+0xda>
 80054ee:	bf00      	nop
 80054f0:	7ff00000 	.word	0x7ff00000

080054f4 <__ieee754_expf>:
 80054f4:	ee10 2a10 	vmov	r2, s0
 80054f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80054fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005500:	d902      	bls.n	8005508 <__ieee754_expf+0x14>
 8005502:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005506:	4770      	bx	lr
 8005508:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800550c:	d106      	bne.n	800551c <__ieee754_expf+0x28>
 800550e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8005648 <__ieee754_expf+0x154>
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf18      	it	ne
 8005516:	eeb0 0a67 	vmovne.f32	s0, s15
 800551a:	4770      	bx	lr
 800551c:	484b      	ldr	r0, [pc, #300]	; (800564c <__ieee754_expf+0x158>)
 800551e:	4282      	cmp	r2, r0
 8005520:	dd02      	ble.n	8005528 <__ieee754_expf+0x34>
 8005522:	2000      	movs	r0, #0
 8005524:	f000 b8d0 	b.w	80056c8 <__math_oflowf>
 8005528:	2a00      	cmp	r2, #0
 800552a:	da05      	bge.n	8005538 <__ieee754_expf+0x44>
 800552c:	4a48      	ldr	r2, [pc, #288]	; (8005650 <__ieee754_expf+0x15c>)
 800552e:	4291      	cmp	r1, r2
 8005530:	d902      	bls.n	8005538 <__ieee754_expf+0x44>
 8005532:	2000      	movs	r0, #0
 8005534:	f000 b8c2 	b.w	80056bc <__math_uflowf>
 8005538:	4a46      	ldr	r2, [pc, #280]	; (8005654 <__ieee754_expf+0x160>)
 800553a:	4291      	cmp	r1, r2
 800553c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005540:	d952      	bls.n	80055e8 <__ieee754_expf+0xf4>
 8005542:	4a45      	ldr	r2, [pc, #276]	; (8005658 <__ieee754_expf+0x164>)
 8005544:	4291      	cmp	r1, r2
 8005546:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800554a:	d834      	bhi.n	80055b6 <__ieee754_expf+0xc2>
 800554c:	4943      	ldr	r1, [pc, #268]	; (800565c <__ieee754_expf+0x168>)
 800554e:	4411      	add	r1, r2
 8005550:	ed91 7a00 	vldr	s14, [r1]
 8005554:	4942      	ldr	r1, [pc, #264]	; (8005660 <__ieee754_expf+0x16c>)
 8005556:	440a      	add	r2, r1
 8005558:	edd2 7a00 	vldr	s15, [r2]
 800555c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8005560:	f1c3 0201 	rsb	r2, r3, #1
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	ee37 0a67 	vsub.f32	s0, s14, s15
 800556a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800556e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8005664 <__ieee754_expf+0x170>
 8005572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005668 <__ieee754_expf+0x174>
 8005576:	eee6 6a05 	vfma.f32	s13, s12, s10
 800557a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800566c <__ieee754_expf+0x178>
 800557e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005582:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005670 <__ieee754_expf+0x17c>
 8005586:	eee5 6a06 	vfma.f32	s13, s10, s12
 800558a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8005674 <__ieee754_expf+0x180>
 800558e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005592:	eef0 6a40 	vmov.f32	s13, s0
 8005596:	eee5 6a46 	vfms.f32	s13, s10, s12
 800559a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800559e:	ee20 5a26 	vmul.f32	s10, s0, s13
 80055a2:	bb92      	cbnz	r2, 800560a <__ieee754_expf+0x116>
 80055a4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80055a8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80055ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80055b0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80055b4:	4770      	bx	lr
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <__ieee754_expf+0x184>)
 80055b8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800567c <__ieee754_expf+0x188>
 80055bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005680 <__ieee754_expf+0x18c>
 80055c0:	4413      	add	r3, r2
 80055c2:	edd3 7a00 	vldr	s15, [r3]
 80055c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80055ca:	eeb0 7a40 	vmov.f32	s14, s0
 80055ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d2:	ee17 2a90 	vmov	r2, s15
 80055d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80055de:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005684 <__ieee754_expf+0x190>
 80055e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055e6:	e7be      	b.n	8005566 <__ieee754_expf+0x72>
 80055e8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80055ec:	d20b      	bcs.n	8005606 <__ieee754_expf+0x112>
 80055ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005688 <__ieee754_expf+0x194>
 80055f2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80055f6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	dd02      	ble.n	8005606 <__ieee754_expf+0x112>
 8005600:	ee30 0a25 	vadd.f32	s0, s0, s11
 8005604:	4770      	bx	lr
 8005606:	2200      	movs	r2, #0
 8005608:	e7af      	b.n	800556a <__ieee754_expf+0x76>
 800560a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800560e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8005612:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8005616:	bfb8      	it	lt
 8005618:	3264      	addlt	r2, #100	; 0x64
 800561a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800561e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005622:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8005626:	ee17 3a90 	vmov	r3, s15
 800562a:	bfab      	itete	ge
 800562c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8005630:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8005634:	ee00 3a10 	vmovge	s0, r3
 8005638:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800568c <__ieee754_expf+0x198>
 800563c:	bfbc      	itt	lt
 800563e:	ee00 3a10 	vmovlt	s0, r3
 8005642:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8005646:	4770      	bx	lr
 8005648:	00000000 	.word	0x00000000
 800564c:	42b17217 	.word	0x42b17217
 8005650:	42cff1b5 	.word	0x42cff1b5
 8005654:	3eb17218 	.word	0x3eb17218
 8005658:	3f851591 	.word	0x3f851591
 800565c:	0800ecc0 	.word	0x0800ecc0
 8005660:	0800ecc8 	.word	0x0800ecc8
 8005664:	3331bb4c 	.word	0x3331bb4c
 8005668:	b5ddea0e 	.word	0xb5ddea0e
 800566c:	388ab355 	.word	0x388ab355
 8005670:	bb360b61 	.word	0xbb360b61
 8005674:	3e2aaaab 	.word	0x3e2aaaab
 8005678:	0800ecb8 	.word	0x0800ecb8
 800567c:	3fb8aa3b 	.word	0x3fb8aa3b
 8005680:	3f317180 	.word	0x3f317180
 8005684:	3717f7d1 	.word	0x3717f7d1
 8005688:	7149f2ca 	.word	0x7149f2ca
 800568c:	0d800000 	.word	0x0d800000

08005690 <with_errnof>:
 8005690:	b513      	push	{r0, r1, r4, lr}
 8005692:	4604      	mov	r4, r0
 8005694:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005698:	f000 f82a 	bl	80056f0 <__errno>
 800569c:	ed9d 0a01 	vldr	s0, [sp, #4]
 80056a0:	6004      	str	r4, [r0, #0]
 80056a2:	b002      	add	sp, #8
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <xflowf>:
 80056a6:	b130      	cbz	r0, 80056b6 <xflowf+0x10>
 80056a8:	eef1 7a40 	vneg.f32	s15, s0
 80056ac:	ee27 0a80 	vmul.f32	s0, s15, s0
 80056b0:	2022      	movs	r0, #34	; 0x22
 80056b2:	f7ff bfed 	b.w	8005690 <with_errnof>
 80056b6:	eef0 7a40 	vmov.f32	s15, s0
 80056ba:	e7f7      	b.n	80056ac <xflowf+0x6>

080056bc <__math_uflowf>:
 80056bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80056c4 <__math_uflowf+0x8>
 80056c0:	f7ff bff1 	b.w	80056a6 <xflowf>
 80056c4:	10000000 	.word	0x10000000

080056c8 <__math_oflowf>:
 80056c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80056d0 <__math_oflowf+0x8>
 80056cc:	f7ff bfeb 	b.w	80056a6 <xflowf>
 80056d0:	70000000 	.word	0x70000000

080056d4 <finitef>:
 80056d4:	b082      	sub	sp, #8
 80056d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80056da:	9801      	ldr	r0, [sp, #4]
 80056dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80056e0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80056e4:	bfac      	ite	ge
 80056e6:	2000      	movge	r0, #0
 80056e8:	2001      	movlt	r0, #1
 80056ea:	b002      	add	sp, #8
 80056ec:	4770      	bx	lr
	...

080056f0 <__errno>:
 80056f0:	4b01      	ldr	r3, [pc, #4]	; (80056f8 <__errno+0x8>)
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000738 	.word	0x20000738

080056fc <__libc_init_array>:
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	4d0d      	ldr	r5, [pc, #52]	; (8005734 <__libc_init_array+0x38>)
 8005700:	4c0d      	ldr	r4, [pc, #52]	; (8005738 <__libc_init_array+0x3c>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	2600      	movs	r6, #0
 8005708:	42a6      	cmp	r6, r4
 800570a:	d109      	bne.n	8005720 <__libc_init_array+0x24>
 800570c:	4d0b      	ldr	r5, [pc, #44]	; (800573c <__libc_init_array+0x40>)
 800570e:	4c0c      	ldr	r4, [pc, #48]	; (8005740 <__libc_init_array+0x44>)
 8005710:	f004 fdca 	bl	800a2a8 <_init>
 8005714:	1b64      	subs	r4, r4, r5
 8005716:	10a4      	asrs	r4, r4, #2
 8005718:	2600      	movs	r6, #0
 800571a:	42a6      	cmp	r6, r4
 800571c:	d105      	bne.n	800572a <__libc_init_array+0x2e>
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	f855 3b04 	ldr.w	r3, [r5], #4
 8005724:	4798      	blx	r3
 8005726:	3601      	adds	r6, #1
 8005728:	e7ee      	b.n	8005708 <__libc_init_array+0xc>
 800572a:	f855 3b04 	ldr.w	r3, [r5], #4
 800572e:	4798      	blx	r3
 8005730:	3601      	adds	r6, #1
 8005732:	e7f2      	b.n	800571a <__libc_init_array+0x1e>
 8005734:	0800f06c 	.word	0x0800f06c
 8005738:	0800f06c 	.word	0x0800f06c
 800573c:	0800f06c 	.word	0x0800f06c
 8005740:	0800f074 	.word	0x0800f074

08005744 <_malloc_r>:
 8005744:	f101 030b 	add.w	r3, r1, #11
 8005748:	2b16      	cmp	r3, #22
 800574a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574e:	4605      	mov	r5, r0
 8005750:	d906      	bls.n	8005760 <_malloc_r+0x1c>
 8005752:	f033 0707 	bics.w	r7, r3, #7
 8005756:	d504      	bpl.n	8005762 <_malloc_r+0x1e>
 8005758:	230c      	movs	r3, #12
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	2400      	movs	r4, #0
 800575e:	e1a5      	b.n	8005aac <_malloc_r+0x368>
 8005760:	2710      	movs	r7, #16
 8005762:	42b9      	cmp	r1, r7
 8005764:	d8f8      	bhi.n	8005758 <_malloc_r+0x14>
 8005766:	4628      	mov	r0, r5
 8005768:	f000 fa3e 	bl	8005be8 <__malloc_lock>
 800576c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8005770:	4eb0      	ldr	r6, [pc, #704]	; (8005a34 <_malloc_r+0x2f0>)
 8005772:	d237      	bcs.n	80057e4 <_malloc_r+0xa0>
 8005774:	f107 0208 	add.w	r2, r7, #8
 8005778:	4432      	add	r2, r6
 800577a:	f1a2 0108 	sub.w	r1, r2, #8
 800577e:	6854      	ldr	r4, [r2, #4]
 8005780:	428c      	cmp	r4, r1
 8005782:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8005786:	d102      	bne.n	800578e <_malloc_r+0x4a>
 8005788:	68d4      	ldr	r4, [r2, #12]
 800578a:	42a2      	cmp	r2, r4
 800578c:	d010      	beq.n	80057b0 <_malloc_r+0x6c>
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	60ca      	str	r2, [r1, #12]
 800579a:	4423      	add	r3, r4
 800579c:	6091      	str	r1, [r2, #8]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fa24 	bl	8005bf4 <__malloc_unlock>
 80057ac:	3408      	adds	r4, #8
 80057ae:	e17d      	b.n	8005aac <_malloc_r+0x368>
 80057b0:	3302      	adds	r3, #2
 80057b2:	6934      	ldr	r4, [r6, #16]
 80057b4:	49a0      	ldr	r1, [pc, #640]	; (8005a38 <_malloc_r+0x2f4>)
 80057b6:	428c      	cmp	r4, r1
 80057b8:	d077      	beq.n	80058aa <_malloc_r+0x166>
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	f022 0c03 	bic.w	ip, r2, #3
 80057c0:	ebac 0007 	sub.w	r0, ip, r7
 80057c4:	280f      	cmp	r0, #15
 80057c6:	dd48      	ble.n	800585a <_malloc_r+0x116>
 80057c8:	19e2      	adds	r2, r4, r7
 80057ca:	f040 0301 	orr.w	r3, r0, #1
 80057ce:	f047 0701 	orr.w	r7, r7, #1
 80057d2:	6067      	str	r7, [r4, #4]
 80057d4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80057d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	f844 000c 	str.w	r0, [r4, ip]
 80057e2:	e7e0      	b.n	80057a6 <_malloc_r+0x62>
 80057e4:	0a7b      	lsrs	r3, r7, #9
 80057e6:	d02a      	beq.n	800583e <_malloc_r+0xfa>
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d812      	bhi.n	8005812 <_malloc_r+0xce>
 80057ec:	09bb      	lsrs	r3, r7, #6
 80057ee:	3338      	adds	r3, #56	; 0x38
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80057f6:	f1a2 0c08 	sub.w	ip, r2, #8
 80057fa:	6854      	ldr	r4, [r2, #4]
 80057fc:	4564      	cmp	r4, ip
 80057fe:	d006      	beq.n	800580e <_malloc_r+0xca>
 8005800:	6862      	ldr	r2, [r4, #4]
 8005802:	f022 0203 	bic.w	r2, r2, #3
 8005806:	1bd0      	subs	r0, r2, r7
 8005808:	280f      	cmp	r0, #15
 800580a:	dd1c      	ble.n	8005846 <_malloc_r+0x102>
 800580c:	3b01      	subs	r3, #1
 800580e:	3301      	adds	r3, #1
 8005810:	e7cf      	b.n	80057b2 <_malloc_r+0x6e>
 8005812:	2b14      	cmp	r3, #20
 8005814:	d801      	bhi.n	800581a <_malloc_r+0xd6>
 8005816:	335b      	adds	r3, #91	; 0x5b
 8005818:	e7ea      	b.n	80057f0 <_malloc_r+0xac>
 800581a:	2b54      	cmp	r3, #84	; 0x54
 800581c:	d802      	bhi.n	8005824 <_malloc_r+0xe0>
 800581e:	0b3b      	lsrs	r3, r7, #12
 8005820:	336e      	adds	r3, #110	; 0x6e
 8005822:	e7e5      	b.n	80057f0 <_malloc_r+0xac>
 8005824:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005828:	d802      	bhi.n	8005830 <_malloc_r+0xec>
 800582a:	0bfb      	lsrs	r3, r7, #15
 800582c:	3377      	adds	r3, #119	; 0x77
 800582e:	e7df      	b.n	80057f0 <_malloc_r+0xac>
 8005830:	f240 5254 	movw	r2, #1364	; 0x554
 8005834:	4293      	cmp	r3, r2
 8005836:	d804      	bhi.n	8005842 <_malloc_r+0xfe>
 8005838:	0cbb      	lsrs	r3, r7, #18
 800583a:	337c      	adds	r3, #124	; 0x7c
 800583c:	e7d8      	b.n	80057f0 <_malloc_r+0xac>
 800583e:	233f      	movs	r3, #63	; 0x3f
 8005840:	e7d6      	b.n	80057f0 <_malloc_r+0xac>
 8005842:	237e      	movs	r3, #126	; 0x7e
 8005844:	e7d4      	b.n	80057f0 <_malloc_r+0xac>
 8005846:	2800      	cmp	r0, #0
 8005848:	68e1      	ldr	r1, [r4, #12]
 800584a:	db04      	blt.n	8005856 <_malloc_r+0x112>
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	60d9      	str	r1, [r3, #12]
 8005850:	608b      	str	r3, [r1, #8]
 8005852:	18a3      	adds	r3, r4, r2
 8005854:	e7a3      	b.n	800579e <_malloc_r+0x5a>
 8005856:	460c      	mov	r4, r1
 8005858:	e7d0      	b.n	80057fc <_malloc_r+0xb8>
 800585a:	2800      	cmp	r0, #0
 800585c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8005860:	db07      	blt.n	8005872 <_malloc_r+0x12e>
 8005862:	44a4      	add	ip, r4
 8005864:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	f8cc 3004 	str.w	r3, [ip, #4]
 8005870:	e799      	b.n	80057a6 <_malloc_r+0x62>
 8005872:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005876:	6870      	ldr	r0, [r6, #4]
 8005878:	f080 8096 	bcs.w	80059a8 <_malloc_r+0x264>
 800587c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8005880:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8005884:	f04f 0c01 	mov.w	ip, #1
 8005888:	3201      	adds	r2, #1
 800588a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800588e:	ea4c 0000 	orr.w	r0, ip, r0
 8005892:	6070      	str	r0, [r6, #4]
 8005894:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8005898:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800589c:	3808      	subs	r0, #8
 800589e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80058a2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80058a6:	f8cc 400c 	str.w	r4, [ip, #12]
 80058aa:	2001      	movs	r0, #1
 80058ac:	109a      	asrs	r2, r3, #2
 80058ae:	fa00 f202 	lsl.w	r2, r0, r2
 80058b2:	6870      	ldr	r0, [r6, #4]
 80058b4:	4290      	cmp	r0, r2
 80058b6:	d326      	bcc.n	8005906 <_malloc_r+0x1c2>
 80058b8:	4210      	tst	r0, r2
 80058ba:	d106      	bne.n	80058ca <_malloc_r+0x186>
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	0052      	lsls	r2, r2, #1
 80058c2:	4210      	tst	r0, r2
 80058c4:	f103 0304 	add.w	r3, r3, #4
 80058c8:	d0fa      	beq.n	80058c0 <_malloc_r+0x17c>
 80058ca:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80058ce:	46c1      	mov	r9, r8
 80058d0:	469e      	mov	lr, r3
 80058d2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80058d6:	454c      	cmp	r4, r9
 80058d8:	f040 80ba 	bne.w	8005a50 <_malloc_r+0x30c>
 80058dc:	f10e 0e01 	add.w	lr, lr, #1
 80058e0:	f01e 0f03 	tst.w	lr, #3
 80058e4:	f109 0908 	add.w	r9, r9, #8
 80058e8:	d1f3      	bne.n	80058d2 <_malloc_r+0x18e>
 80058ea:	0798      	lsls	r0, r3, #30
 80058ec:	f040 80e4 	bne.w	8005ab8 <_malloc_r+0x374>
 80058f0:	6873      	ldr	r3, [r6, #4]
 80058f2:	ea23 0302 	bic.w	r3, r3, r2
 80058f6:	6073      	str	r3, [r6, #4]
 80058f8:	6870      	ldr	r0, [r6, #4]
 80058fa:	0052      	lsls	r2, r2, #1
 80058fc:	4290      	cmp	r0, r2
 80058fe:	d302      	bcc.n	8005906 <_malloc_r+0x1c2>
 8005900:	2a00      	cmp	r2, #0
 8005902:	f040 80e6 	bne.w	8005ad2 <_malloc_r+0x38e>
 8005906:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800590a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800590e:	f023 0903 	bic.w	r9, r3, #3
 8005912:	45b9      	cmp	r9, r7
 8005914:	d304      	bcc.n	8005920 <_malloc_r+0x1dc>
 8005916:	eba9 0207 	sub.w	r2, r9, r7
 800591a:	2a0f      	cmp	r2, #15
 800591c:	f300 8142 	bgt.w	8005ba4 <_malloc_r+0x460>
 8005920:	4b46      	ldr	r3, [pc, #280]	; (8005a3c <_malloc_r+0x2f8>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	3110      	adds	r1, #16
 8005926:	4439      	add	r1, r7
 8005928:	2008      	movs	r0, #8
 800592a:	9101      	str	r1, [sp, #4]
 800592c:	f001 fd70 	bl	8007410 <sysconf>
 8005930:	4a43      	ldr	r2, [pc, #268]	; (8005a40 <_malloc_r+0x2fc>)
 8005932:	9901      	ldr	r1, [sp, #4]
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	bf1f      	itttt	ne
 800593a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800593e:	1809      	addne	r1, r1, r0
 8005940:	4243      	negne	r3, r0
 8005942:	4019      	andne	r1, r3
 8005944:	4680      	mov	r8, r0
 8005946:	4628      	mov	r0, r5
 8005948:	9101      	str	r1, [sp, #4]
 800594a:	f000 fb4b 	bl	8005fe4 <_sbrk_r>
 800594e:	1c42      	adds	r2, r0, #1
 8005950:	eb0a 0b09 	add.w	fp, sl, r9
 8005954:	4604      	mov	r4, r0
 8005956:	f000 80f8 	beq.w	8005b4a <_malloc_r+0x406>
 800595a:	4583      	cmp	fp, r0
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	4a38      	ldr	r2, [pc, #224]	; (8005a40 <_malloc_r+0x2fc>)
 8005960:	d902      	bls.n	8005968 <_malloc_r+0x224>
 8005962:	45b2      	cmp	sl, r6
 8005964:	f040 80f1 	bne.w	8005b4a <_malloc_r+0x406>
 8005968:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <_malloc_r+0x300>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	45a3      	cmp	fp, r4
 800596e:	eb00 0e01 	add.w	lr, r0, r1
 8005972:	f8c3 e000 	str.w	lr, [r3]
 8005976:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800597a:	f040 80ac 	bne.w	8005ad6 <_malloc_r+0x392>
 800597e:	ea1b 0f0c 	tst.w	fp, ip
 8005982:	f040 80a8 	bne.w	8005ad6 <_malloc_r+0x392>
 8005986:	68b2      	ldr	r2, [r6, #8]
 8005988:	4449      	add	r1, r9
 800598a:	f041 0101 	orr.w	r1, r1, #1
 800598e:	6051      	str	r1, [r2, #4]
 8005990:	4a2d      	ldr	r2, [pc, #180]	; (8005a48 <_malloc_r+0x304>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	428b      	cmp	r3, r1
 8005998:	bf88      	it	hi
 800599a:	6013      	strhi	r3, [r2, #0]
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <_malloc_r+0x308>)
 800599e:	6811      	ldr	r1, [r2, #0]
 80059a0:	428b      	cmp	r3, r1
 80059a2:	bf88      	it	hi
 80059a4:	6013      	strhi	r3, [r2, #0]
 80059a6:	e0d0      	b.n	8005b4a <_malloc_r+0x406>
 80059a8:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80059ac:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80059b0:	d218      	bcs.n	80059e4 <_malloc_r+0x2a0>
 80059b2:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80059b6:	3238      	adds	r2, #56	; 0x38
 80059b8:	f102 0e01 	add.w	lr, r2, #1
 80059bc:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80059c0:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80059c4:	45f0      	cmp	r8, lr
 80059c6:	d12b      	bne.n	8005a20 <_malloc_r+0x2dc>
 80059c8:	1092      	asrs	r2, r2, #2
 80059ca:	f04f 0c01 	mov.w	ip, #1
 80059ce:	fa0c f202 	lsl.w	r2, ip, r2
 80059d2:	4310      	orrs	r0, r2
 80059d4:	6070      	str	r0, [r6, #4]
 80059d6:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80059da:	f8c8 4008 	str.w	r4, [r8, #8]
 80059de:	f8ce 400c 	str.w	r4, [lr, #12]
 80059e2:	e762      	b.n	80058aa <_malloc_r+0x166>
 80059e4:	2a14      	cmp	r2, #20
 80059e6:	d801      	bhi.n	80059ec <_malloc_r+0x2a8>
 80059e8:	325b      	adds	r2, #91	; 0x5b
 80059ea:	e7e5      	b.n	80059b8 <_malloc_r+0x274>
 80059ec:	2a54      	cmp	r2, #84	; 0x54
 80059ee:	d803      	bhi.n	80059f8 <_malloc_r+0x2b4>
 80059f0:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80059f4:	326e      	adds	r2, #110	; 0x6e
 80059f6:	e7df      	b.n	80059b8 <_malloc_r+0x274>
 80059f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80059fc:	d803      	bhi.n	8005a06 <_malloc_r+0x2c2>
 80059fe:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005a02:	3277      	adds	r2, #119	; 0x77
 8005a04:	e7d8      	b.n	80059b8 <_malloc_r+0x274>
 8005a06:	f240 5e54 	movw	lr, #1364	; 0x554
 8005a0a:	4572      	cmp	r2, lr
 8005a0c:	bf9a      	itte	ls
 8005a0e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8005a12:	327c      	addls	r2, #124	; 0x7c
 8005a14:	227e      	movhi	r2, #126	; 0x7e
 8005a16:	e7cf      	b.n	80059b8 <_malloc_r+0x274>
 8005a18:	f8de e008 	ldr.w	lr, [lr, #8]
 8005a1c:	45f0      	cmp	r8, lr
 8005a1e:	d005      	beq.n	8005a2c <_malloc_r+0x2e8>
 8005a20:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005a24:	f022 0203 	bic.w	r2, r2, #3
 8005a28:	4562      	cmp	r2, ip
 8005a2a:	d8f5      	bhi.n	8005a18 <_malloc_r+0x2d4>
 8005a2c:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005a30:	e7d1      	b.n	80059d6 <_malloc_r+0x292>
 8005a32:	bf00      	nop
 8005a34:	20000b68 	.word	0x20000b68
 8005a38:	20000b70 	.word	0x20000b70
 8005a3c:	200015a8 	.word	0x200015a8
 8005a40:	20000f70 	.word	0x20000f70
 8005a44:	20001578 	.word	0x20001578
 8005a48:	200015a0 	.word	0x200015a0
 8005a4c:	200015a4 	.word	0x200015a4
 8005a50:	6860      	ldr	r0, [r4, #4]
 8005a52:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005a56:	f020 0003 	bic.w	r0, r0, #3
 8005a5a:	eba0 0a07 	sub.w	sl, r0, r7
 8005a5e:	f1ba 0f0f 	cmp.w	sl, #15
 8005a62:	dd12      	ble.n	8005a8a <_malloc_r+0x346>
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	19e2      	adds	r2, r4, r7
 8005a68:	f047 0701 	orr.w	r7, r7, #1
 8005a6c:	6067      	str	r7, [r4, #4]
 8005a6e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005a72:	f8cc 3008 	str.w	r3, [ip, #8]
 8005a76:	f04a 0301 	orr.w	r3, sl, #1
 8005a7a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8005a7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8005a82:	6053      	str	r3, [r2, #4]
 8005a84:	f844 a000 	str.w	sl, [r4, r0]
 8005a88:	e68d      	b.n	80057a6 <_malloc_r+0x62>
 8005a8a:	f1ba 0f00 	cmp.w	sl, #0
 8005a8e:	db11      	blt.n	8005ab4 <_malloc_r+0x370>
 8005a90:	4420      	add	r0, r4
 8005a92:	6843      	ldr	r3, [r0, #4]
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	6043      	str	r3, [r0, #4]
 8005a9a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005aa4:	f8cc 3008 	str.w	r3, [ip, #8]
 8005aa8:	f000 f8a4 	bl	8005bf4 <__malloc_unlock>
 8005aac:	4620      	mov	r0, r4
 8005aae:	b003      	add	sp, #12
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	4664      	mov	r4, ip
 8005ab6:	e70e      	b.n	80058d6 <_malloc_r+0x192>
 8005ab8:	f858 0908 	ldr.w	r0, [r8], #-8
 8005abc:	4540      	cmp	r0, r8
 8005abe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005ac2:	f43f af12 	beq.w	80058ea <_malloc_r+0x1a6>
 8005ac6:	e717      	b.n	80058f8 <_malloc_r+0x1b4>
 8005ac8:	3304      	adds	r3, #4
 8005aca:	0052      	lsls	r2, r2, #1
 8005acc:	4210      	tst	r0, r2
 8005ace:	d0fb      	beq.n	8005ac8 <_malloc_r+0x384>
 8005ad0:	e6fb      	b.n	80058ca <_malloc_r+0x186>
 8005ad2:	4673      	mov	r3, lr
 8005ad4:	e7fa      	b.n	8005acc <_malloc_r+0x388>
 8005ad6:	6810      	ldr	r0, [r2, #0]
 8005ad8:	3001      	adds	r0, #1
 8005ada:	bf1b      	ittet	ne
 8005adc:	eba4 0b0b 	subne.w	fp, r4, fp
 8005ae0:	eb0b 020e 	addne.w	r2, fp, lr
 8005ae4:	6014      	streq	r4, [r2, #0]
 8005ae6:	601a      	strne	r2, [r3, #0]
 8005ae8:	f014 0b07 	ands.w	fp, r4, #7
 8005aec:	bf1a      	itte	ne
 8005aee:	f1cb 0008 	rsbne	r0, fp, #8
 8005af2:	1824      	addne	r4, r4, r0
 8005af4:	4658      	moveq	r0, fp
 8005af6:	1862      	adds	r2, r4, r1
 8005af8:	ea02 010c 	and.w	r1, r2, ip
 8005afc:	4480      	add	r8, r0
 8005afe:	eba8 0801 	sub.w	r8, r8, r1
 8005b02:	ea08 080c 	and.w	r8, r8, ip
 8005b06:	4641      	mov	r1, r8
 8005b08:	4628      	mov	r0, r5
 8005b0a:	9201      	str	r2, [sp, #4]
 8005b0c:	f000 fa6a 	bl	8005fe4 <_sbrk_r>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	9a01      	ldr	r2, [sp, #4]
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <_malloc_r+0x474>)
 8005b16:	d107      	bne.n	8005b28 <_malloc_r+0x3e4>
 8005b18:	f1bb 0f00 	cmp.w	fp, #0
 8005b1c:	d023      	beq.n	8005b66 <_malloc_r+0x422>
 8005b1e:	f1ab 0008 	sub.w	r0, fp, #8
 8005b22:	4410      	add	r0, r2
 8005b24:	f04f 0800 	mov.w	r8, #0
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	60b4      	str	r4, [r6, #8]
 8005b2c:	1b00      	subs	r0, r0, r4
 8005b2e:	4440      	add	r0, r8
 8005b30:	4442      	add	r2, r8
 8005b32:	f040 0001 	orr.w	r0, r0, #1
 8005b36:	45b2      	cmp	sl, r6
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	6060      	str	r0, [r4, #4]
 8005b3c:	f43f af28 	beq.w	8005990 <_malloc_r+0x24c>
 8005b40:	f1b9 0f0f 	cmp.w	r9, #15
 8005b44:	d812      	bhi.n	8005b6c <_malloc_r+0x428>
 8005b46:	2301      	movs	r3, #1
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	68b3      	ldr	r3, [r6, #8]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	42bb      	cmp	r3, r7
 8005b54:	eba3 0207 	sub.w	r2, r3, r7
 8005b58:	d301      	bcc.n	8005b5e <_malloc_r+0x41a>
 8005b5a:	2a0f      	cmp	r2, #15
 8005b5c:	dc22      	bgt.n	8005ba4 <_malloc_r+0x460>
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 f848 	bl	8005bf4 <__malloc_unlock>
 8005b64:	e5fa      	b.n	800575c <_malloc_r+0x18>
 8005b66:	4610      	mov	r0, r2
 8005b68:	46d8      	mov	r8, fp
 8005b6a:	e7dd      	b.n	8005b28 <_malloc_r+0x3e4>
 8005b6c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005b70:	f1a9 090c 	sub.w	r9, r9, #12
 8005b74:	f029 0907 	bic.w	r9, r9, #7
 8005b78:	f002 0201 	and.w	r2, r2, #1
 8005b7c:	ea42 0209 	orr.w	r2, r2, r9
 8005b80:	f8ca 2004 	str.w	r2, [sl, #4]
 8005b84:	2105      	movs	r1, #5
 8005b86:	eb0a 0209 	add.w	r2, sl, r9
 8005b8a:	f1b9 0f0f 	cmp.w	r9, #15
 8005b8e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8005b92:	f67f aefd 	bls.w	8005990 <_malloc_r+0x24c>
 8005b96:	f10a 0108 	add.w	r1, sl, #8
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f002 fb90 	bl	80082c0 <_free_r>
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <_malloc_r+0x474>)
 8005ba2:	e6f5      	b.n	8005990 <_malloc_r+0x24c>
 8005ba4:	68b4      	ldr	r4, [r6, #8]
 8005ba6:	f047 0301 	orr.w	r3, r7, #1
 8005baa:	4427      	add	r7, r4
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	60b7      	str	r7, [r6, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	e5f6      	b.n	80057a6 <_malloc_r+0x62>
 8005bb8:	20001578 	.word	0x20001578

08005bbc <memcpy>:
 8005bbc:	440a      	add	r2, r1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bc4:	d100      	bne.n	8005bc8 <memcpy+0xc>
 8005bc6:	4770      	bx	lr
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	d1f9      	bne.n	8005bca <memcpy+0xe>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <memset>:
 8005bd8:	4402      	add	r2, r0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d100      	bne.n	8005be2 <memset+0xa>
 8005be0:	4770      	bx	lr
 8005be2:	f803 1b01 	strb.w	r1, [r3], #1
 8005be6:	e7f9      	b.n	8005bdc <memset+0x4>

08005be8 <__malloc_lock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__malloc_lock+0x8>)
 8005bea:	f002 bd99 	b.w	8008720 <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	200015ad 	.word	0x200015ad

08005bf4 <__malloc_unlock>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__malloc_unlock+0x8>)
 8005bf6:	f002 bd94 	b.w	8008722 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	200015ad 	.word	0x200015ad

08005c00 <_puts_r>:
 8005c00:	b530      	push	{r4, r5, lr}
 8005c02:	4605      	mov	r5, r0
 8005c04:	b089      	sub	sp, #36	; 0x24
 8005c06:	4608      	mov	r0, r1
 8005c08:	460c      	mov	r4, r1
 8005c0a:	f7fa fae1 	bl	80001d0 <strlen>
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <_puts_r+0x88>)
 8005c10:	9306      	str	r3, [sp, #24]
 8005c12:	2301      	movs	r3, #1
 8005c14:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8005c18:	9307      	str	r3, [sp, #28]
 8005c1a:	4418      	add	r0, r3
 8005c1c:	ab04      	add	r3, sp, #16
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	2302      	movs	r3, #2
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c26:	68ac      	ldr	r4, [r5, #8]
 8005c28:	9003      	str	r0, [sp, #12]
 8005c2a:	b913      	cbnz	r3, 8005c32 <_puts_r+0x32>
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f002 fab7 	bl	80081a0 <__sinit>
 8005c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c34:	07db      	lsls	r3, r3, #31
 8005c36:	d405      	bmi.n	8005c44 <_puts_r+0x44>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	0598      	lsls	r0, r3, #22
 8005c3c:	d402      	bmi.n	8005c44 <_puts_r+0x44>
 8005c3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c40:	f002 fd6e 	bl	8008720 <__retarget_lock_acquire_recursive>
 8005c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c48:	0499      	lsls	r1, r3, #18
 8005c4a:	d406      	bmi.n	8005c5a <_puts_r+0x5a>
 8005c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c58:	6663      	str	r3, [r4, #100]	; 0x64
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	aa01      	add	r2, sp, #4
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f002 fbee 	bl	8008440 <__sfvwrite_r>
 8005c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c66:	2800      	cmp	r0, #0
 8005c68:	bf14      	ite	ne
 8005c6a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8005c6e:	250a      	moveq	r5, #10
 8005c70:	07da      	lsls	r2, r3, #31
 8005c72:	d405      	bmi.n	8005c80 <_puts_r+0x80>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	059b      	lsls	r3, r3, #22
 8005c78:	d402      	bmi.n	8005c80 <_puts_r+0x80>
 8005c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7c:	f002 fd51 	bl	8008722 <__retarget_lock_release_recursive>
 8005c80:	4628      	mov	r0, r5
 8005c82:	b009      	add	sp, #36	; 0x24
 8005c84:	bd30      	pop	{r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	0800ef36 	.word	0x0800ef36

08005c8c <puts>:
 8005c8c:	4b02      	ldr	r3, [pc, #8]	; (8005c98 <puts+0xc>)
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f7ff bfb5 	b.w	8005c00 <_puts_r>
 8005c96:	bf00      	nop
 8005c98:	20000738 	.word	0x20000738

08005c9c <_realloc_r>:
 8005c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	b929      	cbnz	r1, 8005cb2 <_realloc_r+0x16>
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	b003      	add	sp, #12
 8005caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cae:	f7ff bd49 	b.w	8005744 <_malloc_r>
 8005cb2:	9201      	str	r2, [sp, #4]
 8005cb4:	f7ff ff98 	bl	8005be8 <__malloc_lock>
 8005cb8:	9a01      	ldr	r2, [sp, #4]
 8005cba:	f102 080b 	add.w	r8, r2, #11
 8005cbe:	f1b8 0f16 	cmp.w	r8, #22
 8005cc2:	d90b      	bls.n	8005cdc <_realloc_r+0x40>
 8005cc4:	f038 0807 	bics.w	r8, r8, #7
 8005cc8:	d50a      	bpl.n	8005ce0 <_realloc_r+0x44>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8c9 3000 	str.w	r3, [r9]
 8005cd0:	f04f 0b00 	mov.w	fp, #0
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	f04f 0810 	mov.w	r8, #16
 8005ce0:	4590      	cmp	r8, r2
 8005ce2:	d3f2      	bcc.n	8005cca <_realloc_r+0x2e>
 8005ce4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005ce8:	f025 0603 	bic.w	r6, r5, #3
 8005cec:	45b0      	cmp	r8, r6
 8005cee:	f1a4 0a08 	sub.w	sl, r4, #8
 8005cf2:	f340 816e 	ble.w	8005fd2 <_realloc_r+0x336>
 8005cf6:	499b      	ldr	r1, [pc, #620]	; (8005f64 <_realloc_r+0x2c8>)
 8005cf8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005cfc:	eb0a 0306 	add.w	r3, sl, r6
 8005d00:	459c      	cmp	ip, r3
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	d005      	beq.n	8005d12 <_realloc_r+0x76>
 8005d06:	f021 0001 	bic.w	r0, r1, #1
 8005d0a:	4418      	add	r0, r3
 8005d0c:	6840      	ldr	r0, [r0, #4]
 8005d0e:	07c7      	lsls	r7, r0, #31
 8005d10:	d427      	bmi.n	8005d62 <_realloc_r+0xc6>
 8005d12:	f021 0103 	bic.w	r1, r1, #3
 8005d16:	459c      	cmp	ip, r3
 8005d18:	eb06 0701 	add.w	r7, r6, r1
 8005d1c:	d119      	bne.n	8005d52 <_realloc_r+0xb6>
 8005d1e:	f108 0010 	add.w	r0, r8, #16
 8005d22:	42b8      	cmp	r0, r7
 8005d24:	dc1f      	bgt.n	8005d66 <_realloc_r+0xca>
 8005d26:	eb0a 0308 	add.w	r3, sl, r8
 8005d2a:	4a8e      	ldr	r2, [pc, #568]	; (8005f64 <_realloc_r+0x2c8>)
 8005d2c:	eba7 0708 	sub.w	r7, r7, r8
 8005d30:	f047 0701 	orr.w	r7, r7, #1
 8005d34:	6093      	str	r3, [r2, #8]
 8005d36:	605f      	str	r7, [r3, #4]
 8005d38:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	ea43 0308 	orr.w	r3, r3, r8
 8005d44:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d48:	4648      	mov	r0, r9
 8005d4a:	f7ff ff53 	bl	8005bf4 <__malloc_unlock>
 8005d4e:	46a3      	mov	fp, r4
 8005d50:	e7c0      	b.n	8005cd4 <_realloc_r+0x38>
 8005d52:	45b8      	cmp	r8, r7
 8005d54:	dc07      	bgt.n	8005d66 <_realloc_r+0xca>
 8005d56:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	6093      	str	r3, [r2, #8]
 8005d5e:	4655      	mov	r5, sl
 8005d60:	e07f      	b.n	8005e62 <_realloc_r+0x1c6>
 8005d62:	2100      	movs	r1, #0
 8005d64:	460b      	mov	r3, r1
 8005d66:	07e8      	lsls	r0, r5, #31
 8005d68:	f100 80e5 	bmi.w	8005f36 <_realloc_r+0x29a>
 8005d6c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005d70:	ebaa 0505 	sub.w	r5, sl, r5
 8005d74:	6868      	ldr	r0, [r5, #4]
 8005d76:	f020 0003 	bic.w	r0, r0, #3
 8005d7a:	eb00 0b06 	add.w	fp, r0, r6
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80a5 	beq.w	8005ece <_realloc_r+0x232>
 8005d84:	459c      	cmp	ip, r3
 8005d86:	eb01 070b 	add.w	r7, r1, fp
 8005d8a:	d14a      	bne.n	8005e22 <_realloc_r+0x186>
 8005d8c:	f108 0310 	add.w	r3, r8, #16
 8005d90:	42bb      	cmp	r3, r7
 8005d92:	f300 809c 	bgt.w	8005ece <_realloc_r+0x232>
 8005d96:	46ab      	mov	fp, r5
 8005d98:	68eb      	ldr	r3, [r5, #12]
 8005d9a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8005d9e:	60d3      	str	r3, [r2, #12]
 8005da0:	609a      	str	r2, [r3, #8]
 8005da2:	1f32      	subs	r2, r6, #4
 8005da4:	2a24      	cmp	r2, #36	; 0x24
 8005da6:	d837      	bhi.n	8005e18 <_realloc_r+0x17c>
 8005da8:	2a13      	cmp	r2, #19
 8005daa:	d933      	bls.n	8005e14 <_realloc_r+0x178>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	60ab      	str	r3, [r5, #8]
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	60eb      	str	r3, [r5, #12]
 8005db4:	2a1b      	cmp	r2, #27
 8005db6:	d81b      	bhi.n	8005df0 <_realloc_r+0x154>
 8005db8:	3408      	adds	r4, #8
 8005dba:	f105 0310 	add.w	r3, r5, #16
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	68a2      	ldr	r2, [r4, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
 8005dca:	eb05 0308 	add.w	r3, r5, r8
 8005dce:	4a65      	ldr	r2, [pc, #404]	; (8005f64 <_realloc_r+0x2c8>)
 8005dd0:	eba7 0708 	sub.w	r7, r7, r8
 8005dd4:	f047 0701 	orr.w	r7, r7, #1
 8005dd8:	6093      	str	r3, [r2, #8]
 8005dda:	605f      	str	r7, [r3, #4]
 8005ddc:	686b      	ldr	r3, [r5, #4]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	ea43 0308 	orr.w	r3, r3, r8
 8005de6:	606b      	str	r3, [r5, #4]
 8005de8:	4648      	mov	r0, r9
 8005dea:	f7ff ff03 	bl	8005bf4 <__malloc_unlock>
 8005dee:	e771      	b.n	8005cd4 <_realloc_r+0x38>
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	612b      	str	r3, [r5, #16]
 8005df4:	68e3      	ldr	r3, [r4, #12]
 8005df6:	616b      	str	r3, [r5, #20]
 8005df8:	2a24      	cmp	r2, #36	; 0x24
 8005dfa:	bf01      	itttt	eq
 8005dfc:	6923      	ldreq	r3, [r4, #16]
 8005dfe:	61ab      	streq	r3, [r5, #24]
 8005e00:	6962      	ldreq	r2, [r4, #20]
 8005e02:	61ea      	streq	r2, [r5, #28]
 8005e04:	bf19      	ittee	ne
 8005e06:	3410      	addne	r4, #16
 8005e08:	f105 0318 	addne.w	r3, r5, #24
 8005e0c:	f105 0320 	addeq.w	r3, r5, #32
 8005e10:	3418      	addeq	r4, #24
 8005e12:	e7d4      	b.n	8005dbe <_realloc_r+0x122>
 8005e14:	465b      	mov	r3, fp
 8005e16:	e7d2      	b.n	8005dbe <_realloc_r+0x122>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4658      	mov	r0, fp
 8005e1c:	f002 fc82 	bl	8008724 <memmove>
 8005e20:	e7d3      	b.n	8005dca <_realloc_r+0x12e>
 8005e22:	45b8      	cmp	r8, r7
 8005e24:	dc53      	bgt.n	8005ece <_realloc_r+0x232>
 8005e26:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	6093      	str	r3, [r2, #8]
 8005e30:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005e34:	68eb      	ldr	r3, [r5, #12]
 8005e36:	60d3      	str	r3, [r2, #12]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	1f32      	subs	r2, r6, #4
 8005e3c:	2a24      	cmp	r2, #36	; 0x24
 8005e3e:	d842      	bhi.n	8005ec6 <_realloc_r+0x22a>
 8005e40:	2a13      	cmp	r2, #19
 8005e42:	d908      	bls.n	8005e56 <_realloc_r+0x1ba>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	60ab      	str	r3, [r5, #8]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	60eb      	str	r3, [r5, #12]
 8005e4c:	2a1b      	cmp	r2, #27
 8005e4e:	d828      	bhi.n	8005ea2 <_realloc_r+0x206>
 8005e50:	3408      	adds	r4, #8
 8005e52:	f105 0010 	add.w	r0, r5, #16
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6003      	str	r3, [r0, #0]
 8005e5a:	6863      	ldr	r3, [r4, #4]
 8005e5c:	6043      	str	r3, [r0, #4]
 8005e5e:	68a3      	ldr	r3, [r4, #8]
 8005e60:	6083      	str	r3, [r0, #8]
 8005e62:	686b      	ldr	r3, [r5, #4]
 8005e64:	eba7 0008 	sub.w	r0, r7, r8
 8005e68:	280f      	cmp	r0, #15
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	eb05 0207 	add.w	r2, r5, r7
 8005e72:	f240 80b0 	bls.w	8005fd6 <_realloc_r+0x33a>
 8005e76:	eb05 0108 	add.w	r1, r5, r8
 8005e7a:	ea48 0303 	orr.w	r3, r8, r3
 8005e7e:	f040 0001 	orr.w	r0, r0, #1
 8005e82:	606b      	str	r3, [r5, #4]
 8005e84:	6048      	str	r0, [r1, #4]
 8005e86:	6853      	ldr	r3, [r2, #4]
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	3108      	adds	r1, #8
 8005e90:	4648      	mov	r0, r9
 8005e92:	f002 fa15 	bl	80082c0 <_free_r>
 8005e96:	4648      	mov	r0, r9
 8005e98:	f7ff feac 	bl	8005bf4 <__malloc_unlock>
 8005e9c:	f105 0b08 	add.w	fp, r5, #8
 8005ea0:	e718      	b.n	8005cd4 <_realloc_r+0x38>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	612b      	str	r3, [r5, #16]
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	616b      	str	r3, [r5, #20]
 8005eaa:	2a24      	cmp	r2, #36	; 0x24
 8005eac:	bf01      	itttt	eq
 8005eae:	6923      	ldreq	r3, [r4, #16]
 8005eb0:	61ab      	streq	r3, [r5, #24]
 8005eb2:	6963      	ldreq	r3, [r4, #20]
 8005eb4:	61eb      	streq	r3, [r5, #28]
 8005eb6:	bf19      	ittee	ne
 8005eb8:	3410      	addne	r4, #16
 8005eba:	f105 0018 	addne.w	r0, r5, #24
 8005ebe:	f105 0020 	addeq.w	r0, r5, #32
 8005ec2:	3418      	addeq	r4, #24
 8005ec4:	e7c7      	b.n	8005e56 <_realloc_r+0x1ba>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	f002 fc2c 	bl	8008724 <memmove>
 8005ecc:	e7c9      	b.n	8005e62 <_realloc_r+0x1c6>
 8005ece:	45d8      	cmp	r8, fp
 8005ed0:	dc31      	bgt.n	8005f36 <_realloc_r+0x29a>
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	68eb      	ldr	r3, [r5, #12]
 8005ed6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005eda:	60d3      	str	r3, [r2, #12]
 8005edc:	609a      	str	r2, [r3, #8]
 8005ede:	1f32      	subs	r2, r6, #4
 8005ee0:	2a24      	cmp	r2, #36	; 0x24
 8005ee2:	d824      	bhi.n	8005f2e <_realloc_r+0x292>
 8005ee4:	2a13      	cmp	r2, #19
 8005ee6:	d908      	bls.n	8005efa <_realloc_r+0x25e>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	60ab      	str	r3, [r5, #8]
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	60eb      	str	r3, [r5, #12]
 8005ef0:	2a1b      	cmp	r2, #27
 8005ef2:	d80a      	bhi.n	8005f0a <_realloc_r+0x26e>
 8005ef4:	3408      	adds	r4, #8
 8005ef6:	f105 0010 	add.w	r0, r5, #16
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6003      	str	r3, [r0, #0]
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	6043      	str	r3, [r0, #4]
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	6083      	str	r3, [r0, #8]
 8005f06:	465f      	mov	r7, fp
 8005f08:	e7ab      	b.n	8005e62 <_realloc_r+0x1c6>
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	612b      	str	r3, [r5, #16]
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	616b      	str	r3, [r5, #20]
 8005f12:	2a24      	cmp	r2, #36	; 0x24
 8005f14:	bf01      	itttt	eq
 8005f16:	6923      	ldreq	r3, [r4, #16]
 8005f18:	61ab      	streq	r3, [r5, #24]
 8005f1a:	6963      	ldreq	r3, [r4, #20]
 8005f1c:	61eb      	streq	r3, [r5, #28]
 8005f1e:	bf19      	ittee	ne
 8005f20:	3410      	addne	r4, #16
 8005f22:	f105 0018 	addne.w	r0, r5, #24
 8005f26:	f105 0020 	addeq.w	r0, r5, #32
 8005f2a:	3418      	addeq	r4, #24
 8005f2c:	e7e5      	b.n	8005efa <_realloc_r+0x25e>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	f002 fbf8 	bl	8008724 <memmove>
 8005f34:	e7e7      	b.n	8005f06 <_realloc_r+0x26a>
 8005f36:	4611      	mov	r1, r2
 8005f38:	4648      	mov	r0, r9
 8005f3a:	f7ff fc03 	bl	8005744 <_malloc_r>
 8005f3e:	4683      	mov	fp, r0
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f43f af51 	beq.w	8005de8 <_realloc_r+0x14c>
 8005f46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	4453      	add	r3, sl
 8005f50:	f1a0 0208 	sub.w	r2, r0, #8
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d107      	bne.n	8005f68 <_realloc_r+0x2cc>
 8005f58:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005f5c:	f027 0703 	bic.w	r7, r7, #3
 8005f60:	4437      	add	r7, r6
 8005f62:	e6fc      	b.n	8005d5e <_realloc_r+0xc2>
 8005f64:	20000b68 	.word	0x20000b68
 8005f68:	1f32      	subs	r2, r6, #4
 8005f6a:	2a24      	cmp	r2, #36	; 0x24
 8005f6c:	d82d      	bhi.n	8005fca <_realloc_r+0x32e>
 8005f6e:	2a13      	cmp	r2, #19
 8005f70:	d928      	bls.n	8005fc4 <_realloc_r+0x328>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	6043      	str	r3, [r0, #4]
 8005f7a:	2a1b      	cmp	r2, #27
 8005f7c:	d80e      	bhi.n	8005f9c <_realloc_r+0x300>
 8005f7e:	f104 0208 	add.w	r2, r4, #8
 8005f82:	f100 0308 	add.w	r3, r0, #8
 8005f86:	6811      	ldr	r1, [r2, #0]
 8005f88:	6019      	str	r1, [r3, #0]
 8005f8a:	6851      	ldr	r1, [r2, #4]
 8005f8c:	6059      	str	r1, [r3, #4]
 8005f8e:	6892      	ldr	r2, [r2, #8]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	4621      	mov	r1, r4
 8005f94:	4648      	mov	r0, r9
 8005f96:	f002 f993 	bl	80082c0 <_free_r>
 8005f9a:	e725      	b.n	8005de8 <_realloc_r+0x14c>
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	6083      	str	r3, [r0, #8]
 8005fa0:	68e3      	ldr	r3, [r4, #12]
 8005fa2:	60c3      	str	r3, [r0, #12]
 8005fa4:	2a24      	cmp	r2, #36	; 0x24
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6923      	ldreq	r3, [r4, #16]
 8005faa:	6103      	streq	r3, [r0, #16]
 8005fac:	6961      	ldreq	r1, [r4, #20]
 8005fae:	6141      	streq	r1, [r0, #20]
 8005fb0:	bf19      	ittee	ne
 8005fb2:	f104 0210 	addne.w	r2, r4, #16
 8005fb6:	f100 0310 	addne.w	r3, r0, #16
 8005fba:	f104 0218 	addeq.w	r2, r4, #24
 8005fbe:	f100 0318 	addeq.w	r3, r0, #24
 8005fc2:	e7e0      	b.n	8005f86 <_realloc_r+0x2ea>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	e7dd      	b.n	8005f86 <_realloc_r+0x2ea>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f002 fbaa 	bl	8008724 <memmove>
 8005fd0:	e7df      	b.n	8005f92 <_realloc_r+0x2f6>
 8005fd2:	4637      	mov	r7, r6
 8005fd4:	e6c3      	b.n	8005d5e <_realloc_r+0xc2>
 8005fd6:	431f      	orrs	r7, r3
 8005fd8:	606f      	str	r7, [r5, #4]
 8005fda:	6853      	ldr	r3, [r2, #4]
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6053      	str	r3, [r2, #4]
 8005fe2:	e758      	b.n	8005e96 <_realloc_r+0x1fa>

08005fe4 <_sbrk_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d06      	ldr	r5, [pc, #24]	; (8006000 <_sbrk_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fb fb0c 	bl	800160c <_sbrk>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_sbrk_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_sbrk_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	200015b0 	.word	0x200015b0

08006004 <sprintf>:
 8006004:	b40e      	push	{r1, r2, r3}
 8006006:	b500      	push	{lr}
 8006008:	b09c      	sub	sp, #112	; 0x70
 800600a:	ab1d      	add	r3, sp, #116	; 0x74
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006014:	4809      	ldr	r0, [pc, #36]	; (800603c <sprintf+0x38>)
 8006016:	9107      	str	r1, [sp, #28]
 8006018:	9104      	str	r1, [sp, #16]
 800601a:	4909      	ldr	r1, [pc, #36]	; (8006040 <sprintf+0x3c>)
 800601c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006020:	9105      	str	r1, [sp, #20]
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	a902      	add	r1, sp, #8
 8006028:	f000 f80e 	bl	8006048 <_svfprintf_r>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	b01c      	add	sp, #112	; 0x70
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b003      	add	sp, #12
 800603a:	4770      	bx	lr
 800603c:	20000738 	.word	0x20000738
 8006040:	ffff0208 	.word	0xffff0208
 8006044:	00000000 	.word	0x00000000

08006048 <_svfprintf_r>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	ed2d 8b04 	vpush	{d8-d9}
 8006050:	b0cf      	sub	sp, #316	; 0x13c
 8006052:	4688      	mov	r8, r1
 8006054:	4691      	mov	r9, r2
 8006056:	461e      	mov	r6, r3
 8006058:	4682      	mov	sl, r0
 800605a:	f002 fb5b 	bl	8008714 <_localeconv_r>
 800605e:	6803      	ldr	r3, [r0, #0]
 8006060:	9313      	str	r3, [sp, #76]	; 0x4c
 8006062:	4618      	mov	r0, r3
 8006064:	f7fa f8b4 	bl	80001d0 <strlen>
 8006068:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800606c:	900d      	str	r0, [sp, #52]	; 0x34
 800606e:	0618      	lsls	r0, r3, #24
 8006070:	d51a      	bpl.n	80060a8 <_svfprintf_r+0x60>
 8006072:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006076:	b9bb      	cbnz	r3, 80060a8 <_svfprintf_r+0x60>
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	4650      	mov	r0, sl
 800607c:	f7ff fb62 	bl	8005744 <_malloc_r>
 8006080:	f8c8 0000 	str.w	r0, [r8]
 8006084:	f8c8 0010 	str.w	r0, [r8, #16]
 8006088:	b958      	cbnz	r0, 80060a2 <_svfprintf_r+0x5a>
 800608a:	230c      	movs	r3, #12
 800608c:	f8ca 3000 	str.w	r3, [sl]
 8006090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006094:	930c      	str	r3, [sp, #48]	; 0x30
 8006096:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006098:	b04f      	add	sp, #316	; 0x13c
 800609a:	ecbd 8b04 	vpop	{d8-d9}
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	f8c8 3014 	str.w	r3, [r8, #20]
 80060a8:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80062f8 <_svfprintf_r+0x2b0>
 80060ac:	2500      	movs	r5, #0
 80060ae:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80060b2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80060b6:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80060ba:	ac25      	add	r4, sp, #148	; 0x94
 80060bc:	9422      	str	r4, [sp, #136]	; 0x88
 80060be:	9505      	str	r5, [sp, #20]
 80060c0:	950a      	str	r5, [sp, #40]	; 0x28
 80060c2:	9512      	str	r5, [sp, #72]	; 0x48
 80060c4:	9514      	str	r5, [sp, #80]	; 0x50
 80060c6:	950c      	str	r5, [sp, #48]	; 0x30
 80060c8:	464b      	mov	r3, r9
 80060ca:	461d      	mov	r5, r3
 80060cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d0:	b10a      	cbz	r2, 80060d6 <_svfprintf_r+0x8e>
 80060d2:	2a25      	cmp	r2, #37	; 0x25
 80060d4:	d1f9      	bne.n	80060ca <_svfprintf_r+0x82>
 80060d6:	ebb5 0709 	subs.w	r7, r5, r9
 80060da:	d00d      	beq.n	80060f8 <_svfprintf_r+0xb0>
 80060dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060de:	443b      	add	r3, r7
 80060e0:	9324      	str	r3, [sp, #144]	; 0x90
 80060e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060e4:	3301      	adds	r3, #1
 80060e6:	2b07      	cmp	r3, #7
 80060e8:	e9c4 9700 	strd	r9, r7, [r4]
 80060ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80060ee:	dc79      	bgt.n	80061e4 <_svfprintf_r+0x19c>
 80060f0:	3408      	adds	r4, #8
 80060f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f4:	443b      	add	r3, r7
 80060f6:	930c      	str	r3, [sp, #48]	; 0x30
 80060f8:	782b      	ldrb	r3, [r5, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f001 8148 	beq.w	8007390 <_svfprintf_r+0x1348>
 8006100:	2300      	movs	r3, #0
 8006102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006106:	9204      	str	r2, [sp, #16]
 8006108:	3501      	adds	r5, #1
 800610a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800610e:	9310      	str	r3, [sp, #64]	; 0x40
 8006110:	469b      	mov	fp, r3
 8006112:	270a      	movs	r7, #10
 8006114:	222b      	movs	r2, #43	; 0x2b
 8006116:	462b      	mov	r3, r5
 8006118:	f813 1b01 	ldrb.w	r1, [r3], #1
 800611c:	9106      	str	r1, [sp, #24]
 800611e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006120:	9b06      	ldr	r3, [sp, #24]
 8006122:	3b20      	subs	r3, #32
 8006124:	2b5a      	cmp	r3, #90	; 0x5a
 8006126:	f200 85bf 	bhi.w	8006ca8 <_svfprintf_r+0xc60>
 800612a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800612e:	007e      	.short	0x007e
 8006130:	05bd05bd 	.word	0x05bd05bd
 8006134:	05bd0086 	.word	0x05bd0086
 8006138:	05bd05bd 	.word	0x05bd05bd
 800613c:	05bd0065 	.word	0x05bd0065
 8006140:	008905bd 	.word	0x008905bd
 8006144:	05bd0093 	.word	0x05bd0093
 8006148:	00960090 	.word	0x00960090
 800614c:	00b305bd 	.word	0x00b305bd
 8006150:	00b600b6 	.word	0x00b600b6
 8006154:	00b600b6 	.word	0x00b600b6
 8006158:	00b600b6 	.word	0x00b600b6
 800615c:	00b600b6 	.word	0x00b600b6
 8006160:	05bd00b6 	.word	0x05bd00b6
 8006164:	05bd05bd 	.word	0x05bd05bd
 8006168:	05bd05bd 	.word	0x05bd05bd
 800616c:	05bd05bd 	.word	0x05bd05bd
 8006170:	05bd012c 	.word	0x05bd012c
 8006174:	00fc00e9 	.word	0x00fc00e9
 8006178:	012c012c 	.word	0x012c012c
 800617c:	05bd012c 	.word	0x05bd012c
 8006180:	05bd05bd 	.word	0x05bd05bd
 8006184:	00c605bd 	.word	0x00c605bd
 8006188:	05bd05bd 	.word	0x05bd05bd
 800618c:	05bd0498 	.word	0x05bd0498
 8006190:	05bd05bd 	.word	0x05bd05bd
 8006194:	05bd04e2 	.word	0x05bd04e2
 8006198:	05bd0503 	.word	0x05bd0503
 800619c:	052505bd 	.word	0x052505bd
 80061a0:	05bd05bd 	.word	0x05bd05bd
 80061a4:	05bd05bd 	.word	0x05bd05bd
 80061a8:	05bd05bd 	.word	0x05bd05bd
 80061ac:	05bd05bd 	.word	0x05bd05bd
 80061b0:	05bd012c 	.word	0x05bd012c
 80061b4:	00fe00e9 	.word	0x00fe00e9
 80061b8:	012c012c 	.word	0x012c012c
 80061bc:	00c9012c 	.word	0x00c9012c
 80061c0:	00dd00fe 	.word	0x00dd00fe
 80061c4:	00d605bd 	.word	0x00d605bd
 80061c8:	047305bd 	.word	0x047305bd
 80061cc:	04d0049a 	.word	0x04d0049a
 80061d0:	05bd00dd 	.word	0x05bd00dd
 80061d4:	007c04e2 	.word	0x007c04e2
 80061d8:	05bd0505 	.word	0x05bd0505
 80061dc:	054405bd 	.word	0x054405bd
 80061e0:	007c05bd 	.word	0x007c05bd
 80061e4:	aa22      	add	r2, sp, #136	; 0x88
 80061e6:	4641      	mov	r1, r8
 80061e8:	4650      	mov	r0, sl
 80061ea:	f002 fe79 	bl	8008ee0 <__ssprint_r>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 8137 	bne.w	8006462 <_svfprintf_r+0x41a>
 80061f4:	ac25      	add	r4, sp, #148	; 0x94
 80061f6:	e77c      	b.n	80060f2 <_svfprintf_r+0xaa>
 80061f8:	4650      	mov	r0, sl
 80061fa:	f002 fa8b 	bl	8008714 <_localeconv_r>
 80061fe:	6843      	ldr	r3, [r0, #4]
 8006200:	9314      	str	r3, [sp, #80]	; 0x50
 8006202:	4618      	mov	r0, r3
 8006204:	f7f9 ffe4 	bl	80001d0 <strlen>
 8006208:	9012      	str	r0, [sp, #72]	; 0x48
 800620a:	4650      	mov	r0, sl
 800620c:	f002 fa82 	bl	8008714 <_localeconv_r>
 8006210:	6883      	ldr	r3, [r0, #8]
 8006212:	930a      	str	r3, [sp, #40]	; 0x28
 8006214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006216:	222b      	movs	r2, #43	; 0x2b
 8006218:	b12b      	cbz	r3, 8006226 <_svfprintf_r+0x1de>
 800621a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621c:	b11b      	cbz	r3, 8006226 <_svfprintf_r+0x1de>
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b10b      	cbz	r3, 8006226 <_svfprintf_r+0x1de>
 8006222:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8006226:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006228:	e775      	b.n	8006116 <_svfprintf_r+0xce>
 800622a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f9      	bne.n	8006226 <_svfprintf_r+0x1de>
 8006232:	2320      	movs	r3, #32
 8006234:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006238:	e7f5      	b.n	8006226 <_svfprintf_r+0x1de>
 800623a:	f04b 0b01 	orr.w	fp, fp, #1
 800623e:	e7f2      	b.n	8006226 <_svfprintf_r+0x1de>
 8006240:	f856 3b04 	ldr.w	r3, [r6], #4
 8006244:	9310      	str	r3, [sp, #64]	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	daed      	bge.n	8006226 <_svfprintf_r+0x1de>
 800624a:	425b      	negs	r3, r3
 800624c:	9310      	str	r3, [sp, #64]	; 0x40
 800624e:	f04b 0b04 	orr.w	fp, fp, #4
 8006252:	e7e8      	b.n	8006226 <_svfprintf_r+0x1de>
 8006254:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006258:	e7e5      	b.n	8006226 <_svfprintf_r+0x1de>
 800625a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800625c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006260:	9306      	str	r3, [sp, #24]
 8006262:	2b2a      	cmp	r3, #42	; 0x2a
 8006264:	d113      	bne.n	800628e <_svfprintf_r+0x246>
 8006266:	f856 0b04 	ldr.w	r0, [r6], #4
 800626a:	950b      	str	r5, [sp, #44]	; 0x2c
 800626c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	e7d8      	b.n	8006226 <_svfprintf_r+0x1de>
 8006274:	9904      	ldr	r1, [sp, #16]
 8006276:	fb07 3301 	mla	r3, r7, r1, r3
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006280:	9306      	str	r3, [sp, #24]
 8006282:	9b06      	ldr	r3, [sp, #24]
 8006284:	3b30      	subs	r3, #48	; 0x30
 8006286:	2b09      	cmp	r3, #9
 8006288:	d9f4      	bls.n	8006274 <_svfprintf_r+0x22c>
 800628a:	950b      	str	r5, [sp, #44]	; 0x2c
 800628c:	e748      	b.n	8006120 <_svfprintf_r+0xd8>
 800628e:	2300      	movs	r3, #0
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	e7f6      	b.n	8006282 <_svfprintf_r+0x23a>
 8006294:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006298:	e7c5      	b.n	8006226 <_svfprintf_r+0x1de>
 800629a:	2300      	movs	r3, #0
 800629c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800629e:	9310      	str	r3, [sp, #64]	; 0x40
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80062a4:	3b30      	subs	r3, #48	; 0x30
 80062a6:	fb07 3301 	mla	r3, r7, r1, r3
 80062aa:	9310      	str	r3, [sp, #64]	; 0x40
 80062ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062b0:	9306      	str	r3, [sp, #24]
 80062b2:	3b30      	subs	r3, #48	; 0x30
 80062b4:	2b09      	cmp	r3, #9
 80062b6:	d9f3      	bls.n	80062a0 <_svfprintf_r+0x258>
 80062b8:	e7e7      	b.n	800628a <_svfprintf_r+0x242>
 80062ba:	f04b 0b08 	orr.w	fp, fp, #8
 80062be:	e7b2      	b.n	8006226 <_svfprintf_r+0x1de>
 80062c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b68      	cmp	r3, #104	; 0x68
 80062c6:	bf01      	itttt	eq
 80062c8:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80062ca:	3301      	addeq	r3, #1
 80062cc:	930b      	streq	r3, [sp, #44]	; 0x2c
 80062ce:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80062d2:	bf18      	it	ne
 80062d4:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80062d8:	e7a5      	b.n	8006226 <_svfprintf_r+0x1de>
 80062da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b6c      	cmp	r3, #108	; 0x6c
 80062e0:	d105      	bne.n	80062ee <_svfprintf_r+0x2a6>
 80062e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e4:	3301      	adds	r3, #1
 80062e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e8:	f04b 0b20 	orr.w	fp, fp, #32
 80062ec:	e79b      	b.n	8006226 <_svfprintf_r+0x1de>
 80062ee:	f04b 0b10 	orr.w	fp, fp, #16
 80062f2:	e798      	b.n	8006226 <_svfprintf_r+0x1de>
 80062f4:	f3af 8000 	nop.w
	...
 8006300:	4632      	mov	r2, r6
 8006302:	2000      	movs	r0, #0
 8006304:	f852 3b04 	ldr.w	r3, [r2], #4
 8006308:	9207      	str	r2, [sp, #28]
 800630a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800630e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006312:	2301      	movs	r3, #1
 8006314:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8006318:	9003      	str	r0, [sp, #12]
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	4606      	mov	r6, r0
 800631e:	4605      	mov	r5, r0
 8006320:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8006324:	e1bc      	b.n	80066a0 <_svfprintf_r+0x658>
 8006326:	f04b 0b10 	orr.w	fp, fp, #16
 800632a:	f01b 0f20 	tst.w	fp, #32
 800632e:	d012      	beq.n	8006356 <_svfprintf_r+0x30e>
 8006330:	1df3      	adds	r3, r6, #7
 8006332:	f023 0307 	bic.w	r3, r3, #7
 8006336:	461a      	mov	r2, r3
 8006338:	685d      	ldr	r5, [r3, #4]
 800633a:	f852 6b08 	ldr.w	r6, [r2], #8
 800633e:	9207      	str	r2, [sp, #28]
 8006340:	2d00      	cmp	r5, #0
 8006342:	da06      	bge.n	8006352 <_svfprintf_r+0x30a>
 8006344:	4276      	negs	r6, r6
 8006346:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800634a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800634e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006352:	2301      	movs	r3, #1
 8006354:	e396      	b.n	8006a84 <_svfprintf_r+0xa3c>
 8006356:	4633      	mov	r3, r6
 8006358:	f01b 0f10 	tst.w	fp, #16
 800635c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	d002      	beq.n	800636a <_svfprintf_r+0x322>
 8006364:	462e      	mov	r6, r5
 8006366:	17ed      	asrs	r5, r5, #31
 8006368:	e7ea      	b.n	8006340 <_svfprintf_r+0x2f8>
 800636a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800636e:	d003      	beq.n	8006378 <_svfprintf_r+0x330>
 8006370:	b22e      	sxth	r6, r5
 8006372:	f345 35c0 	sbfx	r5, r5, #15, #1
 8006376:	e7e3      	b.n	8006340 <_svfprintf_r+0x2f8>
 8006378:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800637c:	d0f2      	beq.n	8006364 <_svfprintf_r+0x31c>
 800637e:	b26e      	sxtb	r6, r5
 8006380:	f345 15c0 	sbfx	r5, r5, #7, #1
 8006384:	e7dc      	b.n	8006340 <_svfprintf_r+0x2f8>
 8006386:	3607      	adds	r6, #7
 8006388:	f026 0307 	bic.w	r3, r6, #7
 800638c:	ecb3 7b02 	vldmia	r3!, {d7}
 8006390:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006394:	9307      	str	r3, [sp, #28]
 8006396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006398:	ee09 3a10 	vmov	s18, r3
 800639c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800639e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a2:	ee09 3a90 	vmov	s19, r3
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063aa:	4b3a      	ldr	r3, [pc, #232]	; (8006494 <_svfprintf_r+0x44c>)
 80063ac:	ec51 0b19 	vmov	r0, r1, d9
 80063b0:	f7fa fbbc 	bl	8000b2c <__aeabi_dcmpun>
 80063b4:	bb10      	cbnz	r0, 80063fc <_svfprintf_r+0x3b4>
 80063b6:	4b37      	ldr	r3, [pc, #220]	; (8006494 <_svfprintf_r+0x44c>)
 80063b8:	ec51 0b19 	vmov	r0, r1, d9
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063c0:	f7fa fb96 	bl	8000af0 <__aeabi_dcmple>
 80063c4:	b9d0      	cbnz	r0, 80063fc <_svfprintf_r+0x3b4>
 80063c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063ca:	2200      	movs	r2, #0
 80063cc:	2300      	movs	r3, #0
 80063ce:	f7fa fb85 	bl	8000adc <__aeabi_dcmplt>
 80063d2:	b110      	cbz	r0, 80063da <_svfprintf_r+0x392>
 80063d4:	232d      	movs	r3, #45	; 0x2d
 80063d6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80063da:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <_svfprintf_r+0x450>)
 80063dc:	482f      	ldr	r0, [pc, #188]	; (800649c <_svfprintf_r+0x454>)
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	2100      	movs	r1, #0
 80063e2:	2b47      	cmp	r3, #71	; 0x47
 80063e4:	bfd4      	ite	le
 80063e6:	4691      	movle	r9, r2
 80063e8:	4681      	movgt	r9, r0
 80063ea:	2303      	movs	r3, #3
 80063ec:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80063f0:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80063f4:	2600      	movs	r6, #0
 80063f6:	4633      	mov	r3, r6
 80063f8:	f001 b800 	b.w	80073fc <_svfprintf_r+0x13b4>
 80063fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f7fa fb92 	bl	8000b2c <__aeabi_dcmpun>
 8006408:	b140      	cbz	r0, 800641c <_svfprintf_r+0x3d4>
 800640a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800640c:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <_svfprintf_r+0x458>)
 800640e:	4825      	ldr	r0, [pc, #148]	; (80064a4 <_svfprintf_r+0x45c>)
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfbc      	itt	lt
 8006414:	232d      	movlt	r3, #45	; 0x2d
 8006416:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800641a:	e7e0      	b.n	80063de <_svfprintf_r+0x396>
 800641c:	9b06      	ldr	r3, [sp, #24]
 800641e:	f023 0320 	bic.w	r3, r3, #32
 8006422:	2b41      	cmp	r3, #65	; 0x41
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	d125      	bne.n	8006474 <_svfprintf_r+0x42c>
 8006428:	2330      	movs	r3, #48	; 0x30
 800642a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800642e:	9b06      	ldr	r3, [sp, #24]
 8006430:	2b61      	cmp	r3, #97	; 0x61
 8006432:	bf0c      	ite	eq
 8006434:	2378      	moveq	r3, #120	; 0x78
 8006436:	2358      	movne	r3, #88	; 0x58
 8006438:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	2b63      	cmp	r3, #99	; 0x63
 8006440:	f04b 0b02 	orr.w	fp, fp, #2
 8006444:	dd30      	ble.n	80064a8 <_svfprintf_r+0x460>
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	4650      	mov	r0, sl
 800644a:	f7ff f97b 	bl	8005744 <_malloc_r>
 800644e:	4681      	mov	r9, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	f040 81fd 	bne.w	8006850 <_svfprintf_r+0x808>
 8006456:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800645a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800645e:	f8a8 300c 	strh.w	r3, [r8, #12]
 8006462:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006466:	f013 0f40 	tst.w	r3, #64	; 0x40
 800646a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800646c:	bf18      	it	ne
 800646e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006472:	e60f      	b.n	8006094 <_svfprintf_r+0x4c>
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	3301      	adds	r3, #1
 8006478:	f000 81ec 	beq.w	8006854 <_svfprintf_r+0x80c>
 800647c:	9b08      	ldr	r3, [sp, #32]
 800647e:	2b47      	cmp	r3, #71	; 0x47
 8006480:	f040 81eb 	bne.w	800685a <_svfprintf_r+0x812>
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 81e7 	bne.w	800685a <_svfprintf_r+0x812>
 800648c:	9303      	str	r3, [sp, #12]
 800648e:	2301      	movs	r3, #1
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	e00c      	b.n	80064ae <_svfprintf_r+0x466>
 8006494:	7fefffff 	.word	0x7fefffff
 8006498:	0800ecd4 	.word	0x0800ecd4
 800649c:	0800ecd8 	.word	0x0800ecd8
 80064a0:	0800ecdc 	.word	0x0800ecdc
 80064a4:	0800ece0 	.word	0x0800ece0
 80064a8:	9003      	str	r0, [sp, #12]
 80064aa:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 80064ae:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 80064b2:	9311      	str	r3, [sp, #68]	; 0x44
 80064b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f280 81d1 	bge.w	800685e <_svfprintf_r+0x816>
 80064bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064be:	ee08 3a10 	vmov	s16, r3
 80064c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	ee08 3a90 	vmov	s17, r3
 80064cc:	232d      	movs	r3, #45	; 0x2d
 80064ce:	9318      	str	r3, [sp, #96]	; 0x60
 80064d0:	9b08      	ldr	r3, [sp, #32]
 80064d2:	2b41      	cmp	r3, #65	; 0x41
 80064d4:	f040 81e1 	bne.w	800689a <_svfprintf_r+0x852>
 80064d8:	eeb0 0a48 	vmov.f32	s0, s16
 80064dc:	eef0 0a68 	vmov.f32	s1, s17
 80064e0:	a81c      	add	r0, sp, #112	; 0x70
 80064e2:	f002 fc6f 	bl	8008dc4 <frexp>
 80064e6:	2200      	movs	r2, #0
 80064e8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80064ec:	ec51 0b10 	vmov	r0, r1, d0
 80064f0:	f7fa f882 	bl	80005f8 <__aeabi_dmul>
 80064f4:	2200      	movs	r2, #0
 80064f6:	2300      	movs	r3, #0
 80064f8:	4606      	mov	r6, r0
 80064fa:	460f      	mov	r7, r1
 80064fc:	f7fa fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006500:	b108      	cbz	r0, 8006506 <_svfprintf_r+0x4be>
 8006502:	2301      	movs	r3, #1
 8006504:	931c      	str	r3, [sp, #112]	; 0x70
 8006506:	4ba7      	ldr	r3, [pc, #668]	; (80067a4 <_svfprintf_r+0x75c>)
 8006508:	4aa7      	ldr	r2, [pc, #668]	; (80067a8 <_svfprintf_r+0x760>)
 800650a:	9906      	ldr	r1, [sp, #24]
 800650c:	2961      	cmp	r1, #97	; 0x61
 800650e:	bf18      	it	ne
 8006510:	461a      	movne	r2, r3
 8006512:	9b04      	ldr	r3, [sp, #16]
 8006514:	9217      	str	r2, [sp, #92]	; 0x5c
 8006516:	3b01      	subs	r3, #1
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	464d      	mov	r5, r9
 800651c:	4ba3      	ldr	r3, [pc, #652]	; (80067ac <_svfprintf_r+0x764>)
 800651e:	2200      	movs	r2, #0
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	460f      	mov	r7, r1
 800652a:	4606      	mov	r6, r0
 800652c:	f7fa fb14 	bl	8000b58 <__aeabi_d2iz>
 8006530:	9019      	str	r0, [sp, #100]	; 0x64
 8006532:	f7f9 fff7 	bl	8000524 <__aeabi_i2d>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f7f9 fea3 	bl	8000288 <__aeabi_dsub>
 8006542:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006546:	5c9b      	ldrb	r3, [r3, r2]
 8006548:	f805 3b01 	strb.w	r3, [r5], #1
 800654c:	9b05      	ldr	r3, [sp, #20]
 800654e:	9309      	str	r3, [sp, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	d007      	beq.n	8006568 <_svfprintf_r+0x520>
 8006558:	3b01      	subs	r3, #1
 800655a:	9305      	str	r3, [sp, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	f7fa fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006564:	2800      	cmp	r0, #0
 8006566:	d0d9      	beq.n	800651c <_svfprintf_r+0x4d4>
 8006568:	4b91      	ldr	r3, [pc, #580]	; (80067b0 <_svfprintf_r+0x768>)
 800656a:	2200      	movs	r2, #0
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f7fa fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8006574:	b960      	cbnz	r0, 8006590 <_svfprintf_r+0x548>
 8006576:	4b8e      	ldr	r3, [pc, #568]	; (80067b0 <_svfprintf_r+0x768>)
 8006578:	2200      	movs	r2, #0
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7fa faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006582:	2800      	cmp	r0, #0
 8006584:	f000 8184 	beq.w	8006890 <_svfprintf_r+0x848>
 8006588:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800658a:	07db      	lsls	r3, r3, #31
 800658c:	f140 8180 	bpl.w	8006890 <_svfprintf_r+0x848>
 8006590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006592:	9520      	str	r5, [sp, #128]	; 0x80
 8006594:	7bd9      	ldrb	r1, [r3, #15]
 8006596:	2030      	movs	r0, #48	; 0x30
 8006598:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800659a:	1e53      	subs	r3, r2, #1
 800659c:	9320      	str	r3, [sp, #128]	; 0x80
 800659e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80065a2:	428b      	cmp	r3, r1
 80065a4:	f000 8163 	beq.w	800686e <_svfprintf_r+0x826>
 80065a8:	2b39      	cmp	r3, #57	; 0x39
 80065aa:	bf0b      	itete	eq
 80065ac:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80065ae:	3301      	addne	r3, #1
 80065b0:	7a9b      	ldrbeq	r3, [r3, #10]
 80065b2:	b2db      	uxtbne	r3, r3
 80065b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065b8:	eba5 0309 	sub.w	r3, r5, r9
 80065bc:	9305      	str	r3, [sp, #20]
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80065c2:	2b47      	cmp	r3, #71	; 0x47
 80065c4:	f040 81b1 	bne.w	800692a <_svfprintf_r+0x8e2>
 80065c8:	1cef      	adds	r7, r5, #3
 80065ca:	db03      	blt.n	80065d4 <_svfprintf_r+0x58c>
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	42ab      	cmp	r3, r5
 80065d0:	f280 81d6 	bge.w	8006980 <_svfprintf_r+0x938>
 80065d4:	9b06      	ldr	r3, [sp, #24]
 80065d6:	3b02      	subs	r3, #2
 80065d8:	9306      	str	r3, [sp, #24]
 80065da:	9906      	ldr	r1, [sp, #24]
 80065dc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80065e0:	f021 0120 	bic.w	r1, r1, #32
 80065e4:	2941      	cmp	r1, #65	; 0x41
 80065e6:	bf08      	it	eq
 80065e8:	320f      	addeq	r2, #15
 80065ea:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80065ee:	bf06      	itte	eq
 80065f0:	b2d2      	uxtbeq	r2, r2
 80065f2:	2101      	moveq	r1, #1
 80065f4:	2100      	movne	r1, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	931c      	str	r3, [sp, #112]	; 0x70
 80065fa:	bfb8      	it	lt
 80065fc:	f1c5 0301 	rsblt	r3, r5, #1
 8006600:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006604:	bfb4      	ite	lt
 8006606:	222d      	movlt	r2, #45	; 0x2d
 8006608:	222b      	movge	r2, #43	; 0x2b
 800660a:	2b09      	cmp	r3, #9
 800660c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006610:	f340 81a4 	ble.w	800695c <_svfprintf_r+0x914>
 8006614:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8006618:	260a      	movs	r6, #10
 800661a:	4611      	mov	r1, r2
 800661c:	fb93 f5f6 	sdiv	r5, r3, r6
 8006620:	fb06 3015 	mls	r0, r6, r5, r3
 8006624:	3030      	adds	r0, #48	; 0x30
 8006626:	f801 0c01 	strb.w	r0, [r1, #-1]
 800662a:	4618      	mov	r0, r3
 800662c:	2863      	cmp	r0, #99	; 0x63
 800662e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006632:	462b      	mov	r3, r5
 8006634:	dcf1      	bgt.n	800661a <_svfprintf_r+0x5d2>
 8006636:	3330      	adds	r3, #48	; 0x30
 8006638:	1e88      	subs	r0, r1, #2
 800663a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800663e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006642:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006646:	4603      	mov	r3, r0
 8006648:	42ab      	cmp	r3, r5
 800664a:	f0c0 8182 	bcc.w	8006952 <_svfprintf_r+0x90a>
 800664e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006652:	1a52      	subs	r2, r2, r1
 8006654:	42a8      	cmp	r0, r5
 8006656:	bf88      	it	hi
 8006658:	2200      	movhi	r2, #0
 800665a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800665e:	441a      	add	r2, r3
 8006660:	ab1e      	add	r3, sp, #120	; 0x78
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	9a05      	ldr	r2, [sp, #20]
 8006666:	9315      	str	r3, [sp, #84]	; 0x54
 8006668:	2a01      	cmp	r2, #1
 800666a:	4413      	add	r3, r2
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	dc02      	bgt.n	8006676 <_svfprintf_r+0x62e>
 8006670:	f01b 0f01 	tst.w	fp, #1
 8006674:	d003      	beq.n	800667e <_svfprintf_r+0x636>
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800667a:	4413      	add	r3, r2
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8006682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006686:	9311      	str	r3, [sp, #68]	; 0x44
 8006688:	2300      	movs	r3, #0
 800668a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800668e:	461d      	mov	r5, r3
 8006690:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006692:	b113      	cbz	r3, 800669a <_svfprintf_r+0x652>
 8006694:	232d      	movs	r3, #45	; 0x2d
 8006696:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800669a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800669e:	2600      	movs	r6, #0
 80066a0:	9b04      	ldr	r3, [sp, #16]
 80066a2:	42b3      	cmp	r3, r6
 80066a4:	bfb8      	it	lt
 80066a6:	4633      	movlt	r3, r6
 80066a8:	9311      	str	r3, [sp, #68]	; 0x44
 80066aa:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80066ae:	b113      	cbz	r3, 80066b6 <_svfprintf_r+0x66e>
 80066b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b2:	3301      	adds	r3, #1
 80066b4:	9311      	str	r3, [sp, #68]	; 0x44
 80066b6:	f01b 0302 	ands.w	r3, fp, #2
 80066ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80066bc:	bf1e      	ittt	ne
 80066be:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80066c0:	3302      	addne	r3, #2
 80066c2:	9311      	strne	r3, [sp, #68]	; 0x44
 80066c4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80066c8:	9318      	str	r3, [sp, #96]	; 0x60
 80066ca:	d11f      	bne.n	800670c <_svfprintf_r+0x6c4>
 80066cc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80066d0:	1a9f      	subs	r7, r3, r2
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	dd1a      	ble.n	800670c <_svfprintf_r+0x6c4>
 80066d6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80066da:	4836      	ldr	r0, [pc, #216]	; (80067b4 <_svfprintf_r+0x76c>)
 80066dc:	6020      	str	r0, [r4, #0]
 80066de:	2f10      	cmp	r7, #16
 80066e0:	f103 0301 	add.w	r3, r3, #1
 80066e4:	f104 0108 	add.w	r1, r4, #8
 80066e8:	f300 82ed 	bgt.w	8006cc6 <_svfprintf_r+0xc7e>
 80066ec:	6067      	str	r7, [r4, #4]
 80066ee:	2b07      	cmp	r3, #7
 80066f0:	4417      	add	r7, r2
 80066f2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80066f6:	f340 82f9 	ble.w	8006cec <_svfprintf_r+0xca4>
 80066fa:	aa22      	add	r2, sp, #136	; 0x88
 80066fc:	4641      	mov	r1, r8
 80066fe:	4650      	mov	r0, sl
 8006700:	f002 fbee 	bl	8008ee0 <__ssprint_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	f040 8621 	bne.w	800734c <_svfprintf_r+0x1304>
 800670a:	ac25      	add	r4, sp, #148	; 0x94
 800670c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006710:	b173      	cbz	r3, 8006730 <_svfprintf_r+0x6e8>
 8006712:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	2301      	movs	r3, #1
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800671e:	3301      	adds	r3, #1
 8006720:	9324      	str	r3, [sp, #144]	; 0x90
 8006722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006724:	3301      	adds	r3, #1
 8006726:	2b07      	cmp	r3, #7
 8006728:	9323      	str	r3, [sp, #140]	; 0x8c
 800672a:	f300 82e1 	bgt.w	8006cf0 <_svfprintf_r+0xca8>
 800672e:	3408      	adds	r4, #8
 8006730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006732:	b16b      	cbz	r3, 8006750 <_svfprintf_r+0x708>
 8006734:	ab1b      	add	r3, sp, #108	; 0x6c
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	2302      	movs	r3, #2
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800673e:	3302      	adds	r3, #2
 8006740:	9324      	str	r3, [sp, #144]	; 0x90
 8006742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006744:	3301      	adds	r3, #1
 8006746:	2b07      	cmp	r3, #7
 8006748:	9323      	str	r3, [sp, #140]	; 0x8c
 800674a:	f300 82db 	bgt.w	8006d04 <_svfprintf_r+0xcbc>
 800674e:	3408      	adds	r4, #8
 8006750:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d11f      	bne.n	8006796 <_svfprintf_r+0x74e>
 8006756:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800675a:	1a9f      	subs	r7, r3, r2
 800675c:	2f00      	cmp	r7, #0
 800675e:	dd1a      	ble.n	8006796 <_svfprintf_r+0x74e>
 8006760:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006764:	4814      	ldr	r0, [pc, #80]	; (80067b8 <_svfprintf_r+0x770>)
 8006766:	6020      	str	r0, [r4, #0]
 8006768:	2f10      	cmp	r7, #16
 800676a:	f103 0301 	add.w	r3, r3, #1
 800676e:	f104 0108 	add.w	r1, r4, #8
 8006772:	f300 82d1 	bgt.w	8006d18 <_svfprintf_r+0xcd0>
 8006776:	6067      	str	r7, [r4, #4]
 8006778:	2b07      	cmp	r3, #7
 800677a:	4417      	add	r7, r2
 800677c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006780:	f340 82dd 	ble.w	8006d3e <_svfprintf_r+0xcf6>
 8006784:	aa22      	add	r2, sp, #136	; 0x88
 8006786:	4641      	mov	r1, r8
 8006788:	4650      	mov	r0, sl
 800678a:	f002 fba9 	bl	8008ee0 <__ssprint_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	f040 85dc 	bne.w	800734c <_svfprintf_r+0x1304>
 8006794:	ac25      	add	r4, sp, #148	; 0x94
 8006796:	9b04      	ldr	r3, [sp, #16]
 8006798:	1af6      	subs	r6, r6, r3
 800679a:	2e00      	cmp	r6, #0
 800679c:	dd28      	ble.n	80067f0 <_svfprintf_r+0x7a8>
 800679e:	4f06      	ldr	r7, [pc, #24]	; (80067b8 <_svfprintf_r+0x770>)
 80067a0:	e00c      	b.n	80067bc <_svfprintf_r+0x774>
 80067a2:	bf00      	nop
 80067a4:	0800ecf5 	.word	0x0800ecf5
 80067a8:	0800ece4 	.word	0x0800ece4
 80067ac:	40300000 	.word	0x40300000
 80067b0:	3fe00000 	.word	0x3fe00000
 80067b4:	0800ed08 	.word	0x0800ed08
 80067b8:	0800ed18 	.word	0x0800ed18
 80067bc:	6027      	str	r7, [r4, #0]
 80067be:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80067c2:	2e10      	cmp	r6, #16
 80067c4:	f103 0301 	add.w	r3, r3, #1
 80067c8:	f104 0108 	add.w	r1, r4, #8
 80067cc:	f300 82b9 	bgt.w	8006d42 <_svfprintf_r+0xcfa>
 80067d0:	6066      	str	r6, [r4, #4]
 80067d2:	2b07      	cmp	r3, #7
 80067d4:	4416      	add	r6, r2
 80067d6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80067da:	f340 82c5 	ble.w	8006d68 <_svfprintf_r+0xd20>
 80067de:	aa22      	add	r2, sp, #136	; 0x88
 80067e0:	4641      	mov	r1, r8
 80067e2:	4650      	mov	r0, sl
 80067e4:	f002 fb7c 	bl	8008ee0 <__ssprint_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 85af 	bne.w	800734c <_svfprintf_r+0x1304>
 80067ee:	ac25      	add	r4, sp, #148	; 0x94
 80067f0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80067f4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80067f6:	f040 82bd 	bne.w	8006d74 <_svfprintf_r+0xd2c>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	f8c4 9000 	str.w	r9, [r4]
 8006800:	441e      	add	r6, r3
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	9624      	str	r6, [sp, #144]	; 0x90
 8006806:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006808:	3301      	adds	r3, #1
 800680a:	2b07      	cmp	r3, #7
 800680c:	9323      	str	r3, [sp, #140]	; 0x8c
 800680e:	f300 82f6 	bgt.w	8006dfe <_svfprintf_r+0xdb6>
 8006812:	3408      	adds	r4, #8
 8006814:	f01b 0f04 	tst.w	fp, #4
 8006818:	f040 857a 	bne.w	8007310 <_svfprintf_r+0x12c8>
 800681c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8006820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006822:	428a      	cmp	r2, r1
 8006824:	bfac      	ite	ge
 8006826:	189b      	addge	r3, r3, r2
 8006828:	185b      	addlt	r3, r3, r1
 800682a:	930c      	str	r3, [sp, #48]	; 0x30
 800682c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800682e:	b13b      	cbz	r3, 8006840 <_svfprintf_r+0x7f8>
 8006830:	aa22      	add	r2, sp, #136	; 0x88
 8006832:	4641      	mov	r1, r8
 8006834:	4650      	mov	r0, sl
 8006836:	f002 fb53 	bl	8008ee0 <__ssprint_r>
 800683a:	2800      	cmp	r0, #0
 800683c:	f040 8586 	bne.w	800734c <_svfprintf_r+0x1304>
 8006840:	2300      	movs	r3, #0
 8006842:	9323      	str	r3, [sp, #140]	; 0x8c
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 859c 	bne.w	8007384 <_svfprintf_r+0x133c>
 800684c:	ac25      	add	r4, sp, #148	; 0x94
 800684e:	e0ec      	b.n	8006a2a <_svfprintf_r+0x9e2>
 8006850:	9003      	str	r0, [sp, #12]
 8006852:	e62c      	b.n	80064ae <_svfprintf_r+0x466>
 8006854:	9003      	str	r0, [sp, #12]
 8006856:	2306      	movs	r3, #6
 8006858:	e61a      	b.n	8006490 <_svfprintf_r+0x448>
 800685a:	9003      	str	r0, [sp, #12]
 800685c:	e627      	b.n	80064ae <_svfprintf_r+0x466>
 800685e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006862:	2300      	movs	r3, #0
 8006864:	eeb0 8a47 	vmov.f32	s16, s14
 8006868:	eef0 8a67 	vmov.f32	s17, s15
 800686c:	e62f      	b.n	80064ce <_svfprintf_r+0x486>
 800686e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006872:	e691      	b.n	8006598 <_svfprintf_r+0x550>
 8006874:	f803 0b01 	strb.w	r0, [r3], #1
 8006878:	1aca      	subs	r2, r1, r3
 800687a:	2a00      	cmp	r2, #0
 800687c:	dafa      	bge.n	8006874 <_svfprintf_r+0x82c>
 800687e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	3201      	adds	r2, #1
 8006884:	f103 0301 	add.w	r3, r3, #1
 8006888:	bfb8      	it	lt
 800688a:	2300      	movlt	r3, #0
 800688c:	441d      	add	r5, r3
 800688e:	e693      	b.n	80065b8 <_svfprintf_r+0x570>
 8006890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006892:	462b      	mov	r3, r5
 8006894:	18a9      	adds	r1, r5, r2
 8006896:	2030      	movs	r0, #48	; 0x30
 8006898:	e7ee      	b.n	8006878 <_svfprintf_r+0x830>
 800689a:	9b08      	ldr	r3, [sp, #32]
 800689c:	2b46      	cmp	r3, #70	; 0x46
 800689e:	d005      	beq.n	80068ac <_svfprintf_r+0x864>
 80068a0:	2b45      	cmp	r3, #69	; 0x45
 80068a2:	d11b      	bne.n	80068dc <_svfprintf_r+0x894>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	1c5d      	adds	r5, r3, #1
 80068a8:	2102      	movs	r1, #2
 80068aa:	e001      	b.n	80068b0 <_svfprintf_r+0x868>
 80068ac:	9d04      	ldr	r5, [sp, #16]
 80068ae:	2103      	movs	r1, #3
 80068b0:	ab20      	add	r3, sp, #128	; 0x80
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	ab1d      	add	r3, sp, #116	; 0x74
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	462a      	mov	r2, r5
 80068ba:	ab1c      	add	r3, sp, #112	; 0x70
 80068bc:	4650      	mov	r0, sl
 80068be:	eeb0 0a48 	vmov.f32	s0, s16
 80068c2:	eef0 0a68 	vmov.f32	s1, s17
 80068c6:	f000 fe4f 	bl	8007568 <_dtoa_r>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	2b47      	cmp	r3, #71	; 0x47
 80068ce:	4681      	mov	r9, r0
 80068d0:	d106      	bne.n	80068e0 <_svfprintf_r+0x898>
 80068d2:	f01b 0f01 	tst.w	fp, #1
 80068d6:	d103      	bne.n	80068e0 <_svfprintf_r+0x898>
 80068d8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80068da:	e66d      	b.n	80065b8 <_svfprintf_r+0x570>
 80068dc:	9d04      	ldr	r5, [sp, #16]
 80068de:	e7e3      	b.n	80068a8 <_svfprintf_r+0x860>
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	2b46      	cmp	r3, #70	; 0x46
 80068e4:	eb09 0605 	add.w	r6, r9, r5
 80068e8:	d10f      	bne.n	800690a <_svfprintf_r+0x8c2>
 80068ea:	f899 3000 	ldrb.w	r3, [r9]
 80068ee:	2b30      	cmp	r3, #48	; 0x30
 80068f0:	d109      	bne.n	8006906 <_svfprintf_r+0x8be>
 80068f2:	ec51 0b18 	vmov	r0, r1, d8
 80068f6:	2200      	movs	r2, #0
 80068f8:	2300      	movs	r3, #0
 80068fa:	f7fa f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80068fe:	b910      	cbnz	r0, 8006906 <_svfprintf_r+0x8be>
 8006900:	f1c5 0501 	rsb	r5, r5, #1
 8006904:	951c      	str	r5, [sp, #112]	; 0x70
 8006906:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006908:	441e      	add	r6, r3
 800690a:	ec51 0b18 	vmov	r0, r1, d8
 800690e:	2200      	movs	r2, #0
 8006910:	2300      	movs	r3, #0
 8006912:	f7fa f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006916:	b100      	cbz	r0, 800691a <_svfprintf_r+0x8d2>
 8006918:	9620      	str	r6, [sp, #128]	; 0x80
 800691a:	2230      	movs	r2, #48	; 0x30
 800691c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800691e:	429e      	cmp	r6, r3
 8006920:	d9da      	bls.n	80068d8 <_svfprintf_r+0x890>
 8006922:	1c59      	adds	r1, r3, #1
 8006924:	9120      	str	r1, [sp, #128]	; 0x80
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e7f8      	b.n	800691c <_svfprintf_r+0x8d4>
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	2b46      	cmp	r3, #70	; 0x46
 800692e:	f47f ae54 	bne.w	80065da <_svfprintf_r+0x592>
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	f00b 0301 	and.w	r3, fp, #1
 8006938:	2d00      	cmp	r5, #0
 800693a:	ea43 0302 	orr.w	r3, r3, r2
 800693e:	dd1a      	ble.n	8006976 <_svfprintf_r+0x92e>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d034      	beq.n	80069ae <_svfprintf_r+0x966>
 8006944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006946:	18eb      	adds	r3, r5, r3
 8006948:	441a      	add	r2, r3
 800694a:	9204      	str	r2, [sp, #16]
 800694c:	2366      	movs	r3, #102	; 0x66
 800694e:	9306      	str	r3, [sp, #24]
 8006950:	e033      	b.n	80069ba <_svfprintf_r+0x972>
 8006952:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006956:	f802 6b01 	strb.w	r6, [r2], #1
 800695a:	e675      	b.n	8006648 <_svfprintf_r+0x600>
 800695c:	b941      	cbnz	r1, 8006970 <_svfprintf_r+0x928>
 800695e:	2230      	movs	r2, #48	; 0x30
 8006960:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006964:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006968:	3330      	adds	r3, #48	; 0x30
 800696a:	f802 3b01 	strb.w	r3, [r2], #1
 800696e:	e677      	b.n	8006660 <_svfprintf_r+0x618>
 8006970:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006974:	e7f8      	b.n	8006968 <_svfprintf_r+0x920>
 8006976:	b1e3      	cbz	r3, 80069b2 <_svfprintf_r+0x96a>
 8006978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697a:	9a04      	ldr	r2, [sp, #16]
 800697c:	3301      	adds	r3, #1
 800697e:	e7e3      	b.n	8006948 <_svfprintf_r+0x900>
 8006980:	9b05      	ldr	r3, [sp, #20]
 8006982:	429d      	cmp	r5, r3
 8006984:	db07      	blt.n	8006996 <_svfprintf_r+0x94e>
 8006986:	f01b 0f01 	tst.w	fp, #1
 800698a:	d02d      	beq.n	80069e8 <_svfprintf_r+0x9a0>
 800698c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800698e:	18eb      	adds	r3, r5, r3
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	2367      	movs	r3, #103	; 0x67
 8006994:	e7db      	b.n	800694e <_svfprintf_r+0x906>
 8006996:	9b05      	ldr	r3, [sp, #20]
 8006998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800699a:	2d00      	cmp	r5, #0
 800699c:	4413      	add	r3, r2
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	dcf7      	bgt.n	8006992 <_svfprintf_r+0x94a>
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	f1c5 0301 	rsb	r3, r5, #1
 80069a8:	441a      	add	r2, r3
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	e7f1      	b.n	8006992 <_svfprintf_r+0x94a>
 80069ae:	9504      	str	r5, [sp, #16]
 80069b0:	e7cc      	b.n	800694c <_svfprintf_r+0x904>
 80069b2:	2366      	movs	r3, #102	; 0x66
 80069b4:	9306      	str	r3, [sp, #24]
 80069b6:	2301      	movs	r3, #1
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	d025      	beq.n	8006a0e <_svfprintf_r+0x9c6>
 80069c2:	2300      	movs	r3, #0
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80069ca:	f77f ae61 	ble.w	8006690 <_svfprintf_r+0x648>
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2bff      	cmp	r3, #255	; 0xff
 80069d4:	d10a      	bne.n	80069ec <_svfprintf_r+0x9a4>
 80069d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80069dc:	4413      	add	r3, r2
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	fb01 2303 	mla	r3, r1, r3, r2
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	e653      	b.n	8006690 <_svfprintf_r+0x648>
 80069e8:	9504      	str	r5, [sp, #16]
 80069ea:	e7d2      	b.n	8006992 <_svfprintf_r+0x94a>
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	daf2      	bge.n	80069d6 <_svfprintf_r+0x98e>
 80069f0:	1aed      	subs	r5, r5, r3
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	b133      	cbz	r3, 8006a06 <_svfprintf_r+0x9be>
 80069f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fa:	3301      	adds	r3, #1
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a00:	3301      	adds	r3, #1
 8006a02:	930a      	str	r3, [sp, #40]	; 0x28
 8006a04:	e7e3      	b.n	80069ce <_svfprintf_r+0x986>
 8006a06:	9b08      	ldr	r3, [sp, #32]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	9308      	str	r3, [sp, #32]
 8006a0c:	e7df      	b.n	80069ce <_svfprintf_r+0x986>
 8006a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a10:	9308      	str	r3, [sp, #32]
 8006a12:	e63d      	b.n	8006690 <_svfprintf_r+0x648>
 8006a14:	1d33      	adds	r3, r6, #4
 8006a16:	f01b 0f20 	tst.w	fp, #32
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	d00a      	beq.n	8006a34 <_svfprintf_r+0x9ec>
 8006a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a24:	17d2      	asrs	r2, r2, #31
 8006a26:	e9c3 1200 	strd	r1, r2, [r3]
 8006a2a:	9e07      	ldr	r6, [sp, #28]
 8006a2c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006a30:	f7ff bb4a 	b.w	80060c8 <_svfprintf_r+0x80>
 8006a34:	f01b 0f10 	tst.w	fp, #16
 8006a38:	d003      	beq.n	8006a42 <_svfprintf_r+0x9fa>
 8006a3a:	6833      	ldr	r3, [r6, #0]
 8006a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	e7f3      	b.n	8006a2a <_svfprintf_r+0x9e2>
 8006a42:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006a46:	d003      	beq.n	8006a50 <_svfprintf_r+0xa08>
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e7ec      	b.n	8006a2a <_svfprintf_r+0x9e2>
 8006a50:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006a54:	d0f1      	beq.n	8006a3a <_svfprintf_r+0x9f2>
 8006a56:	6833      	ldr	r3, [r6, #0]
 8006a58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	e7e5      	b.n	8006a2a <_svfprintf_r+0x9e2>
 8006a5e:	f04b 0b10 	orr.w	fp, fp, #16
 8006a62:	f01b 0320 	ands.w	r3, fp, #32
 8006a66:	d01f      	beq.n	8006aa8 <_svfprintf_r+0xa60>
 8006a68:	1df3      	adds	r3, r6, #7
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	461a      	mov	r2, r3
 8006a70:	685d      	ldr	r5, [r3, #4]
 8006a72:	f852 6b08 	ldr.w	r6, [r2], #8
 8006a76:	9207      	str	r2, [sp, #28]
 8006a78:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006a84:	9a04      	ldr	r2, [sp, #16]
 8006a86:	3201      	adds	r2, #1
 8006a88:	f000 848d 	beq.w	80073a6 <_svfprintf_r+0x135e>
 8006a8c:	ea56 0205 	orrs.w	r2, r6, r5
 8006a90:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8006a94:	f040 848c 	bne.w	80073b0 <_svfprintf_r+0x1368>
 8006a98:	9a04      	ldr	r2, [sp, #16]
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	f000 80f9 	beq.w	8006c92 <_svfprintf_r+0xc4a>
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	f040 8488 	bne.w	80073b6 <_svfprintf_r+0x136e>
 8006aa6:	e09f      	b.n	8006be8 <_svfprintf_r+0xba0>
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	f01b 0510 	ands.w	r5, fp, #16
 8006aae:	f852 6b04 	ldr.w	r6, [r2], #4
 8006ab2:	9207      	str	r2, [sp, #28]
 8006ab4:	d001      	beq.n	8006aba <_svfprintf_r+0xa72>
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	e7de      	b.n	8006a78 <_svfprintf_r+0xa30>
 8006aba:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006abe:	d001      	beq.n	8006ac4 <_svfprintf_r+0xa7c>
 8006ac0:	b2b6      	uxth	r6, r6
 8006ac2:	e7d9      	b.n	8006a78 <_svfprintf_r+0xa30>
 8006ac4:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8006ac8:	d0d6      	beq.n	8006a78 <_svfprintf_r+0xa30>
 8006aca:	b2f6      	uxtb	r6, r6
 8006acc:	e7f3      	b.n	8006ab6 <_svfprintf_r+0xa6e>
 8006ace:	4633      	mov	r3, r6
 8006ad0:	2278      	movs	r2, #120	; 0x78
 8006ad2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006ade:	4ba3      	ldr	r3, [pc, #652]	; (8006d6c <_svfprintf_r+0xd24>)
 8006ae0:	9316      	str	r3, [sp, #88]	; 0x58
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f04b 0b02 	orr.w	fp, fp, #2
 8006ae8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006aec:	2302      	movs	r3, #2
 8006aee:	9206      	str	r2, [sp, #24]
 8006af0:	e7c5      	b.n	8006a7e <_svfprintf_r+0xa36>
 8006af2:	4633      	mov	r3, r6
 8006af4:	2500      	movs	r5, #0
 8006af6:	f853 9b04 	ldr.w	r9, [r3], #4
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8006b02:	1c58      	adds	r0, r3, #1
 8006b04:	d010      	beq.n	8006b28 <_svfprintf_r+0xae0>
 8006b06:	461a      	mov	r2, r3
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f7f9 fb68 	bl	80001e0 <memchr>
 8006b10:	9003      	str	r0, [sp, #12]
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f000 80d4 	beq.w	8006cc0 <_svfprintf_r+0xc78>
 8006b18:	eba0 0309 	sub.w	r3, r0, r9
 8006b1c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8006b20:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8006b24:	462e      	mov	r6, r5
 8006b26:	e5bb      	b.n	80066a0 <_svfprintf_r+0x658>
 8006b28:	4648      	mov	r0, r9
 8006b2a:	f7f9 fb51 	bl	80001d0 <strlen>
 8006b2e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8006b32:	e45f      	b.n	80063f4 <_svfprintf_r+0x3ac>
 8006b34:	f04b 0b10 	orr.w	fp, fp, #16
 8006b38:	f01b 0320 	ands.w	r3, fp, #32
 8006b3c:	d009      	beq.n	8006b52 <_svfprintf_r+0xb0a>
 8006b3e:	1df3      	adds	r3, r6, #7
 8006b40:	f023 0307 	bic.w	r3, r3, #7
 8006b44:	461a      	mov	r2, r3
 8006b46:	685d      	ldr	r5, [r3, #4]
 8006b48:	f852 6b08 	ldr.w	r6, [r2], #8
 8006b4c:	9207      	str	r2, [sp, #28]
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e795      	b.n	8006a7e <_svfprintf_r+0xa36>
 8006b52:	4632      	mov	r2, r6
 8006b54:	f01b 0510 	ands.w	r5, fp, #16
 8006b58:	f852 6b04 	ldr.w	r6, [r2], #4
 8006b5c:	9207      	str	r2, [sp, #28]
 8006b5e:	d001      	beq.n	8006b64 <_svfprintf_r+0xb1c>
 8006b60:	461d      	mov	r5, r3
 8006b62:	e7f4      	b.n	8006b4e <_svfprintf_r+0xb06>
 8006b64:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006b68:	d001      	beq.n	8006b6e <_svfprintf_r+0xb26>
 8006b6a:	b2b6      	uxth	r6, r6
 8006b6c:	e7ef      	b.n	8006b4e <_svfprintf_r+0xb06>
 8006b6e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8006b72:	d0ec      	beq.n	8006b4e <_svfprintf_r+0xb06>
 8006b74:	b2f6      	uxtb	r6, r6
 8006b76:	e7f3      	b.n	8006b60 <_svfprintf_r+0xb18>
 8006b78:	4b7d      	ldr	r3, [pc, #500]	; (8006d70 <_svfprintf_r+0xd28>)
 8006b7a:	9316      	str	r3, [sp, #88]	; 0x58
 8006b7c:	f01b 0320 	ands.w	r3, fp, #32
 8006b80:	d01b      	beq.n	8006bba <_svfprintf_r+0xb72>
 8006b82:	1df3      	adds	r3, r6, #7
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	461a      	mov	r2, r3
 8006b8a:	685d      	ldr	r5, [r3, #4]
 8006b8c:	f852 6b08 	ldr.w	r6, [r2], #8
 8006b90:	9207      	str	r2, [sp, #28]
 8006b92:	f01b 0f01 	tst.w	fp, #1
 8006b96:	d00a      	beq.n	8006bae <_svfprintf_r+0xb66>
 8006b98:	ea56 0305 	orrs.w	r3, r6, r5
 8006b9c:	d007      	beq.n	8006bae <_svfprintf_r+0xb66>
 8006b9e:	2330      	movs	r3, #48	; 0x30
 8006ba0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006baa:	f04b 0b02 	orr.w	fp, fp, #2
 8006bae:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e763      	b.n	8006a7e <_svfprintf_r+0xa36>
 8006bb6:	4b6d      	ldr	r3, [pc, #436]	; (8006d6c <_svfprintf_r+0xd24>)
 8006bb8:	e7df      	b.n	8006b7a <_svfprintf_r+0xb32>
 8006bba:	4632      	mov	r2, r6
 8006bbc:	f01b 0510 	ands.w	r5, fp, #16
 8006bc0:	f852 6b04 	ldr.w	r6, [r2], #4
 8006bc4:	9207      	str	r2, [sp, #28]
 8006bc6:	d001      	beq.n	8006bcc <_svfprintf_r+0xb84>
 8006bc8:	461d      	mov	r5, r3
 8006bca:	e7e2      	b.n	8006b92 <_svfprintf_r+0xb4a>
 8006bcc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006bd0:	d001      	beq.n	8006bd6 <_svfprintf_r+0xb8e>
 8006bd2:	b2b6      	uxth	r6, r6
 8006bd4:	e7dd      	b.n	8006b92 <_svfprintf_r+0xb4a>
 8006bd6:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8006bda:	d0da      	beq.n	8006b92 <_svfprintf_r+0xb4a>
 8006bdc:	b2f6      	uxtb	r6, r6
 8006bde:	e7f3      	b.n	8006bc8 <_svfprintf_r+0xb80>
 8006be0:	2e0a      	cmp	r6, #10
 8006be2:	f175 0300 	sbcs.w	r3, r5, #0
 8006be6:	d205      	bcs.n	8006bf4 <_svfprintf_r+0xbac>
 8006be8:	3630      	adds	r6, #48	; 0x30
 8006bea:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8006bee:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8006bf2:	e3fb      	b.n	80073ec <_svfprintf_r+0x13a4>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8006bfc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8006c00:	9303      	str	r3, [sp, #12]
 8006c02:	220a      	movs	r2, #10
 8006c04:	2300      	movs	r3, #0
 8006c06:	4630      	mov	r0, r6
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7fa f81d 	bl	8000c48 <__aeabi_uldivmod>
 8006c0e:	9b05      	ldr	r3, [sp, #20]
 8006c10:	3301      	adds	r3, #1
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	3230      	adds	r2, #48	; 0x30
 8006c18:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 8006c1c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8006c20:	b1d3      	cbz	r3, 8006c58 <_svfprintf_r+0xc10>
 8006c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d115      	bne.n	8006c58 <_svfprintf_r+0xc10>
 8006c2c:	2aff      	cmp	r2, #255	; 0xff
 8006c2e:	d013      	beq.n	8006c58 <_svfprintf_r+0xc10>
 8006c30:	2e0a      	cmp	r6, #10
 8006c32:	f175 0300 	sbcs.w	r3, r5, #0
 8006c36:	d30f      	bcc.n	8006c58 <_svfprintf_r+0xc10>
 8006c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006c3c:	eba9 0903 	sub.w	r9, r9, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	4648      	mov	r0, r9
 8006c44:	f002 f939 	bl	8008eba <strncpy>
 8006c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	b11b      	cbz	r3, 8006c56 <_svfprintf_r+0xc0e>
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c50:	3301      	adds	r3, #1
 8006c52:	930a      	str	r3, [sp, #40]	; 0x28
 8006c54:	2300      	movs	r3, #0
 8006c56:	9305      	str	r3, [sp, #20]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fff2 	bl	8000c48 <__aeabi_uldivmod>
 8006c64:	2e0a      	cmp	r6, #10
 8006c66:	f175 0300 	sbcs.w	r3, r5, #0
 8006c6a:	f0c0 83bf 	bcc.w	80073ec <_svfprintf_r+0x13a4>
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460d      	mov	r5, r1
 8006c72:	46cb      	mov	fp, r9
 8006c74:	e7c5      	b.n	8006c02 <_svfprintf_r+0xbba>
 8006c76:	f006 030f 	and.w	r3, r6, #15
 8006c7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c7c:	0936      	lsrs	r6, r6, #4
 8006c7e:	5cd3      	ldrb	r3, [r2, r3]
 8006c80:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8006c84:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8006c88:	092d      	lsrs	r5, r5, #4
 8006c8a:	ea56 0305 	orrs.w	r3, r6, r5
 8006c8e:	d1f2      	bne.n	8006c76 <_svfprintf_r+0xc2e>
 8006c90:	e3ac      	b.n	80073ec <_svfprintf_r+0x13a4>
 8006c92:	b933      	cbnz	r3, 8006ca2 <_svfprintf_r+0xc5a>
 8006c94:	f01b 0f01 	tst.w	fp, #1
 8006c98:	d003      	beq.n	8006ca2 <_svfprintf_r+0xc5a>
 8006c9a:	2330      	movs	r3, #48	; 0x30
 8006c9c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8006ca0:	e7a5      	b.n	8006bee <_svfprintf_r+0xba6>
 8006ca2:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8006ca6:	e3a1      	b.n	80073ec <_svfprintf_r+0x13a4>
 8006ca8:	9b06      	ldr	r3, [sp, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8370 	beq.w	8007390 <_svfprintf_r+0x1348>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006cb6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006cba:	9607      	str	r6, [sp, #28]
 8006cbc:	f7ff bb29 	b.w	8006312 <_svfprintf_r+0x2ca>
 8006cc0:	9e03      	ldr	r6, [sp, #12]
 8006cc2:	f7ff bb98 	b.w	80063f6 <_svfprintf_r+0x3ae>
 8006cc6:	2010      	movs	r0, #16
 8006cc8:	4402      	add	r2, r0
 8006cca:	2b07      	cmp	r3, #7
 8006ccc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006cd0:	6060      	str	r0, [r4, #4]
 8006cd2:	dd08      	ble.n	8006ce6 <_svfprintf_r+0xc9e>
 8006cd4:	aa22      	add	r2, sp, #136	; 0x88
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	4650      	mov	r0, sl
 8006cda:	f002 f901 	bl	8008ee0 <__ssprint_r>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f040 8334 	bne.w	800734c <_svfprintf_r+0x1304>
 8006ce4:	a925      	add	r1, sp, #148	; 0x94
 8006ce6:	3f10      	subs	r7, #16
 8006ce8:	460c      	mov	r4, r1
 8006cea:	e4f4      	b.n	80066d6 <_svfprintf_r+0x68e>
 8006cec:	460c      	mov	r4, r1
 8006cee:	e50d      	b.n	800670c <_svfprintf_r+0x6c4>
 8006cf0:	aa22      	add	r2, sp, #136	; 0x88
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	4650      	mov	r0, sl
 8006cf6:	f002 f8f3 	bl	8008ee0 <__ssprint_r>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f040 8326 	bne.w	800734c <_svfprintf_r+0x1304>
 8006d00:	ac25      	add	r4, sp, #148	; 0x94
 8006d02:	e515      	b.n	8006730 <_svfprintf_r+0x6e8>
 8006d04:	aa22      	add	r2, sp, #136	; 0x88
 8006d06:	4641      	mov	r1, r8
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f002 f8e9 	bl	8008ee0 <__ssprint_r>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f040 831c 	bne.w	800734c <_svfprintf_r+0x1304>
 8006d14:	ac25      	add	r4, sp, #148	; 0x94
 8006d16:	e51b      	b.n	8006750 <_svfprintf_r+0x708>
 8006d18:	2010      	movs	r0, #16
 8006d1a:	4402      	add	r2, r0
 8006d1c:	2b07      	cmp	r3, #7
 8006d1e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006d22:	6060      	str	r0, [r4, #4]
 8006d24:	dd08      	ble.n	8006d38 <_svfprintf_r+0xcf0>
 8006d26:	aa22      	add	r2, sp, #136	; 0x88
 8006d28:	4641      	mov	r1, r8
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f002 f8d8 	bl	8008ee0 <__ssprint_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f040 830b 	bne.w	800734c <_svfprintf_r+0x1304>
 8006d36:	a925      	add	r1, sp, #148	; 0x94
 8006d38:	3f10      	subs	r7, #16
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	e510      	b.n	8006760 <_svfprintf_r+0x718>
 8006d3e:	460c      	mov	r4, r1
 8006d40:	e529      	b.n	8006796 <_svfprintf_r+0x74e>
 8006d42:	2010      	movs	r0, #16
 8006d44:	4402      	add	r2, r0
 8006d46:	2b07      	cmp	r3, #7
 8006d48:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006d4c:	6060      	str	r0, [r4, #4]
 8006d4e:	dd08      	ble.n	8006d62 <_svfprintf_r+0xd1a>
 8006d50:	aa22      	add	r2, sp, #136	; 0x88
 8006d52:	4641      	mov	r1, r8
 8006d54:	4650      	mov	r0, sl
 8006d56:	f002 f8c3 	bl	8008ee0 <__ssprint_r>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f040 82f6 	bne.w	800734c <_svfprintf_r+0x1304>
 8006d60:	a925      	add	r1, sp, #148	; 0x94
 8006d62:	3e10      	subs	r6, #16
 8006d64:	460c      	mov	r4, r1
 8006d66:	e529      	b.n	80067bc <_svfprintf_r+0x774>
 8006d68:	460c      	mov	r4, r1
 8006d6a:	e541      	b.n	80067f0 <_svfprintf_r+0x7a8>
 8006d6c:	0800ece4 	.word	0x0800ece4
 8006d70:	0800ecf5 	.word	0x0800ecf5
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	2b65      	cmp	r3, #101	; 0x65
 8006d78:	f340 8230 	ble.w	80071dc <_svfprintf_r+0x1194>
 8006d7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	f7f9 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d068      	beq.n	8006e5e <_svfprintf_r+0xe16>
 8006d8c:	4b6d      	ldr	r3, [pc, #436]	; (8006f44 <_svfprintf_r+0xefc>)
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	2301      	movs	r3, #1
 8006d92:	441e      	add	r6, r3
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d98:	9624      	str	r6, [sp, #144]	; 0x90
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	2b07      	cmp	r3, #7
 8006d9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006da0:	dc37      	bgt.n	8006e12 <_svfprintf_r+0xdca>
 8006da2:	3408      	adds	r4, #8
 8006da4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006da6:	9a05      	ldr	r2, [sp, #20]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	db03      	blt.n	8006db4 <_svfprintf_r+0xd6c>
 8006dac:	f01b 0f01 	tst.w	fp, #1
 8006db0:	f43f ad30 	beq.w	8006814 <_svfprintf_r+0x7cc>
 8006db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006dc0:	4413      	add	r3, r2
 8006dc2:	9324      	str	r3, [sp, #144]	; 0x90
 8006dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	2b07      	cmp	r3, #7
 8006dca:	9323      	str	r3, [sp, #140]	; 0x8c
 8006dcc:	dc2b      	bgt.n	8006e26 <_svfprintf_r+0xdde>
 8006dce:	3408      	adds	r4, #8
 8006dd0:	9b05      	ldr	r3, [sp, #20]
 8006dd2:	1e5d      	subs	r5, r3, #1
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	f77f ad1d 	ble.w	8006814 <_svfprintf_r+0x7cc>
 8006dda:	4e5b      	ldr	r6, [pc, #364]	; (8006f48 <_svfprintf_r+0xf00>)
 8006ddc:	2710      	movs	r7, #16
 8006dde:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006de2:	2d10      	cmp	r5, #16
 8006de4:	f103 0301 	add.w	r3, r3, #1
 8006de8:	f104 0108 	add.w	r1, r4, #8
 8006dec:	6026      	str	r6, [r4, #0]
 8006dee:	dc24      	bgt.n	8006e3a <_svfprintf_r+0xdf2>
 8006df0:	6065      	str	r5, [r4, #4]
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	4415      	add	r5, r2
 8006df6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006dfa:	f340 8286 	ble.w	800730a <_svfprintf_r+0x12c2>
 8006dfe:	aa22      	add	r2, sp, #136	; 0x88
 8006e00:	4641      	mov	r1, r8
 8006e02:	4650      	mov	r0, sl
 8006e04:	f002 f86c 	bl	8008ee0 <__ssprint_r>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f040 829f 	bne.w	800734c <_svfprintf_r+0x1304>
 8006e0e:	ac25      	add	r4, sp, #148	; 0x94
 8006e10:	e500      	b.n	8006814 <_svfprintf_r+0x7cc>
 8006e12:	aa22      	add	r2, sp, #136	; 0x88
 8006e14:	4641      	mov	r1, r8
 8006e16:	4650      	mov	r0, sl
 8006e18:	f002 f862 	bl	8008ee0 <__ssprint_r>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f040 8295 	bne.w	800734c <_svfprintf_r+0x1304>
 8006e22:	ac25      	add	r4, sp, #148	; 0x94
 8006e24:	e7be      	b.n	8006da4 <_svfprintf_r+0xd5c>
 8006e26:	aa22      	add	r2, sp, #136	; 0x88
 8006e28:	4641      	mov	r1, r8
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f002 f858 	bl	8008ee0 <__ssprint_r>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f040 828b 	bne.w	800734c <_svfprintf_r+0x1304>
 8006e36:	ac25      	add	r4, sp, #148	; 0x94
 8006e38:	e7ca      	b.n	8006dd0 <_svfprintf_r+0xd88>
 8006e3a:	3210      	adds	r2, #16
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006e42:	6067      	str	r7, [r4, #4]
 8006e44:	dd08      	ble.n	8006e58 <_svfprintf_r+0xe10>
 8006e46:	aa22      	add	r2, sp, #136	; 0x88
 8006e48:	4641      	mov	r1, r8
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	f002 f848 	bl	8008ee0 <__ssprint_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f040 827b 	bne.w	800734c <_svfprintf_r+0x1304>
 8006e56:	a925      	add	r1, sp, #148	; 0x94
 8006e58:	3d10      	subs	r5, #16
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	e7bf      	b.n	8006dde <_svfprintf_r+0xd96>
 8006e5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc73      	bgt.n	8006f4c <_svfprintf_r+0xf04>
 8006e64:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <_svfprintf_r+0xefc>)
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	441e      	add	r6, r3
 8006e6c:	6063      	str	r3, [r4, #4]
 8006e6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e70:	9624      	str	r6, [sp, #144]	; 0x90
 8006e72:	3301      	adds	r3, #1
 8006e74:	2b07      	cmp	r3, #7
 8006e76:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e78:	dc3d      	bgt.n	8006ef6 <_svfprintf_r+0xeae>
 8006e7a:	3408      	adds	r4, #8
 8006e7c:	9905      	ldr	r1, [sp, #20]
 8006e7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e82:	430a      	orrs	r2, r1
 8006e84:	f00b 0101 	and.w	r1, fp, #1
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	f43f acc3 	beq.w	8006814 <_svfprintf_r+0x7cc>
 8006e8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e90:	6022      	str	r2, [r4, #0]
 8006e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e94:	6062      	str	r2, [r4, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	9324      	str	r3, [sp, #144]	; 0x90
 8006e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	2b07      	cmp	r3, #7
 8006ea0:	9323      	str	r3, [sp, #140]	; 0x8c
 8006ea2:	dc32      	bgt.n	8006f0a <_svfprintf_r+0xec2>
 8006ea4:	3408      	adds	r4, #8
 8006ea6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	da1b      	bge.n	8006ee4 <_svfprintf_r+0xe9c>
 8006eac:	4e26      	ldr	r6, [pc, #152]	; (8006f48 <_svfprintf_r+0xf00>)
 8006eae:	426d      	negs	r5, r5
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	2710      	movs	r7, #16
 8006eb4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8006eb8:	2d10      	cmp	r5, #16
 8006eba:	f102 0201 	add.w	r2, r2, #1
 8006ebe:	f104 0408 	add.w	r4, r4, #8
 8006ec2:	601e      	str	r6, [r3, #0]
 8006ec4:	dc2b      	bgt.n	8006f1e <_svfprintf_r+0xed6>
 8006ec6:	605d      	str	r5, [r3, #4]
 8006ec8:	2a07      	cmp	r2, #7
 8006eca:	440d      	add	r5, r1
 8006ecc:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8006ed0:	dd08      	ble.n	8006ee4 <_svfprintf_r+0xe9c>
 8006ed2:	aa22      	add	r2, sp, #136	; 0x88
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f002 f802 	bl	8008ee0 <__ssprint_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 8235 	bne.w	800734c <_svfprintf_r+0x1304>
 8006ee2:	ac25      	add	r4, sp, #148	; 0x94
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	9a05      	ldr	r2, [sp, #20]
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006eec:	f8c4 9000 	str.w	r9, [r4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	9324      	str	r3, [sp, #144]	; 0x90
 8006ef4:	e487      	b.n	8006806 <_svfprintf_r+0x7be>
 8006ef6:	aa22      	add	r2, sp, #136	; 0x88
 8006ef8:	4641      	mov	r1, r8
 8006efa:	4650      	mov	r0, sl
 8006efc:	f001 fff0 	bl	8008ee0 <__ssprint_r>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f040 8223 	bne.w	800734c <_svfprintf_r+0x1304>
 8006f06:	ac25      	add	r4, sp, #148	; 0x94
 8006f08:	e7b8      	b.n	8006e7c <_svfprintf_r+0xe34>
 8006f0a:	aa22      	add	r2, sp, #136	; 0x88
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f001 ffe6 	bl	8008ee0 <__ssprint_r>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 8219 	bne.w	800734c <_svfprintf_r+0x1304>
 8006f1a:	ac25      	add	r4, sp, #148	; 0x94
 8006f1c:	e7c3      	b.n	8006ea6 <_svfprintf_r+0xe5e>
 8006f1e:	3110      	adds	r1, #16
 8006f20:	2a07      	cmp	r2, #7
 8006f22:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8006f26:	605f      	str	r7, [r3, #4]
 8006f28:	dd08      	ble.n	8006f3c <_svfprintf_r+0xef4>
 8006f2a:	aa22      	add	r2, sp, #136	; 0x88
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f001 ffd6 	bl	8008ee0 <__ssprint_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f040 8209 	bne.w	800734c <_svfprintf_r+0x1304>
 8006f3a:	ac25      	add	r4, sp, #148	; 0x94
 8006f3c:	3d10      	subs	r5, #16
 8006f3e:	4623      	mov	r3, r4
 8006f40:	e7b8      	b.n	8006eb4 <_svfprintf_r+0xe6c>
 8006f42:	bf00      	nop
 8006f44:	0800ed06 	.word	0x0800ed06
 8006f48:	0800ed18 	.word	0x0800ed18
 8006f4c:	9f05      	ldr	r7, [sp, #20]
 8006f4e:	42af      	cmp	r7, r5
 8006f50:	bfa8      	it	ge
 8006f52:	462f      	movge	r7, r5
 8006f54:	2f00      	cmp	r7, #0
 8006f56:	dd0a      	ble.n	8006f6e <_svfprintf_r+0xf26>
 8006f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	443e      	add	r6, r7
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	e9c4 9700 	strd	r9, r7, [r4]
 8006f64:	9624      	str	r6, [sp, #144]	; 0x90
 8006f66:	9323      	str	r3, [sp, #140]	; 0x8c
 8006f68:	f300 8085 	bgt.w	8007076 <_svfprintf_r+0x102e>
 8006f6c:	3408      	adds	r4, #8
 8006f6e:	2f00      	cmp	r7, #0
 8006f70:	bfac      	ite	ge
 8006f72:	1bee      	subge	r6, r5, r7
 8006f74:	462e      	movlt	r6, r5
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	dd19      	ble.n	8006fae <_svfprintf_r+0xf66>
 8006f7a:	4f97      	ldr	r7, [pc, #604]	; (80071d8 <_svfprintf_r+0x1190>)
 8006f7c:	6027      	str	r7, [r4, #0]
 8006f7e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006f82:	2e10      	cmp	r6, #16
 8006f84:	f103 0301 	add.w	r3, r3, #1
 8006f88:	f104 0108 	add.w	r1, r4, #8
 8006f8c:	dc7d      	bgt.n	800708a <_svfprintf_r+0x1042>
 8006f8e:	6066      	str	r6, [r4, #4]
 8006f90:	2b07      	cmp	r3, #7
 8006f92:	4416      	add	r6, r2
 8006f94:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006f98:	f340 808a 	ble.w	80070b0 <_svfprintf_r+0x1068>
 8006f9c:	aa22      	add	r2, sp, #136	; 0x88
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	4650      	mov	r0, sl
 8006fa2:	f001 ff9d 	bl	8008ee0 <__ssprint_r>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f040 81d0 	bne.w	800734c <_svfprintf_r+0x1304>
 8006fac:	ac25      	add	r4, sp, #148	; 0x94
 8006fae:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8006fb2:	444d      	add	r5, r9
 8006fb4:	d00a      	beq.n	8006fcc <_svfprintf_r+0xf84>
 8006fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d17b      	bne.n	80070b4 <_svfprintf_r+0x106c>
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d17b      	bne.n	80070ba <_svfprintf_r+0x1072>
 8006fc2:	9b05      	ldr	r3, [sp, #20]
 8006fc4:	444b      	add	r3, r9
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	bf28      	it	cs
 8006fca:	461d      	movcs	r5, r3
 8006fcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006fce:	9a05      	ldr	r2, [sp, #20]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	db02      	blt.n	8006fda <_svfprintf_r+0xf92>
 8006fd4:	f01b 0f01 	tst.w	fp, #1
 8006fd8:	d00e      	beq.n	8006ff8 <_svfprintf_r+0xfb0>
 8006fda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006fe6:	4413      	add	r3, r2
 8006fe8:	9324      	str	r3, [sp, #144]	; 0x90
 8006fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fec:	3301      	adds	r3, #1
 8006fee:	2b07      	cmp	r3, #7
 8006ff0:	9323      	str	r3, [sp, #140]	; 0x8c
 8006ff2:	f300 80dd 	bgt.w	80071b0 <_svfprintf_r+0x1168>
 8006ff6:	3408      	adds	r4, #8
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8006ffc:	eb09 0203 	add.w	r2, r9, r3
 8007000:	1b9e      	subs	r6, r3, r6
 8007002:	1b52      	subs	r2, r2, r5
 8007004:	4296      	cmp	r6, r2
 8007006:	bfa8      	it	ge
 8007008:	4616      	movge	r6, r2
 800700a:	2e00      	cmp	r6, #0
 800700c:	dd0b      	ble.n	8007026 <_svfprintf_r+0xfde>
 800700e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007010:	4433      	add	r3, r6
 8007012:	9324      	str	r3, [sp, #144]	; 0x90
 8007014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007016:	3301      	adds	r3, #1
 8007018:	2b07      	cmp	r3, #7
 800701a:	e9c4 5600 	strd	r5, r6, [r4]
 800701e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007020:	f300 80d0 	bgt.w	80071c4 <_svfprintf_r+0x117c>
 8007024:	3408      	adds	r4, #8
 8007026:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	2e00      	cmp	r6, #0
 800702c:	eba3 0505 	sub.w	r5, r3, r5
 8007030:	bfa8      	it	ge
 8007032:	1bad      	subge	r5, r5, r6
 8007034:	2d00      	cmp	r5, #0
 8007036:	f77f abed 	ble.w	8006814 <_svfprintf_r+0x7cc>
 800703a:	4e67      	ldr	r6, [pc, #412]	; (80071d8 <_svfprintf_r+0x1190>)
 800703c:	2710      	movs	r7, #16
 800703e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007042:	2d10      	cmp	r5, #16
 8007044:	f103 0301 	add.w	r3, r3, #1
 8007048:	f104 0108 	add.w	r1, r4, #8
 800704c:	6026      	str	r6, [r4, #0]
 800704e:	f77f aecf 	ble.w	8006df0 <_svfprintf_r+0xda8>
 8007052:	3210      	adds	r2, #16
 8007054:	2b07      	cmp	r3, #7
 8007056:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800705a:	6067      	str	r7, [r4, #4]
 800705c:	dd08      	ble.n	8007070 <_svfprintf_r+0x1028>
 800705e:	aa22      	add	r2, sp, #136	; 0x88
 8007060:	4641      	mov	r1, r8
 8007062:	4650      	mov	r0, sl
 8007064:	f001 ff3c 	bl	8008ee0 <__ssprint_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	f040 816f 	bne.w	800734c <_svfprintf_r+0x1304>
 800706e:	a925      	add	r1, sp, #148	; 0x94
 8007070:	3d10      	subs	r5, #16
 8007072:	460c      	mov	r4, r1
 8007074:	e7e3      	b.n	800703e <_svfprintf_r+0xff6>
 8007076:	aa22      	add	r2, sp, #136	; 0x88
 8007078:	4641      	mov	r1, r8
 800707a:	4650      	mov	r0, sl
 800707c:	f001 ff30 	bl	8008ee0 <__ssprint_r>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 8163 	bne.w	800734c <_svfprintf_r+0x1304>
 8007086:	ac25      	add	r4, sp, #148	; 0x94
 8007088:	e771      	b.n	8006f6e <_svfprintf_r+0xf26>
 800708a:	2010      	movs	r0, #16
 800708c:	4402      	add	r2, r0
 800708e:	2b07      	cmp	r3, #7
 8007090:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007094:	6060      	str	r0, [r4, #4]
 8007096:	dd08      	ble.n	80070aa <_svfprintf_r+0x1062>
 8007098:	aa22      	add	r2, sp, #136	; 0x88
 800709a:	4641      	mov	r1, r8
 800709c:	4650      	mov	r0, sl
 800709e:	f001 ff1f 	bl	8008ee0 <__ssprint_r>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f040 8152 	bne.w	800734c <_svfprintf_r+0x1304>
 80070a8:	a925      	add	r1, sp, #148	; 0x94
 80070aa:	3e10      	subs	r6, #16
 80070ac:	460c      	mov	r4, r1
 80070ae:	e765      	b.n	8006f7c <_svfprintf_r+0xf34>
 80070b0:	460c      	mov	r4, r1
 80070b2:	e77c      	b.n	8006fae <_svfprintf_r+0xf66>
 80070b4:	9b08      	ldr	r3, [sp, #32]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d04a      	beq.n	8007150 <_svfprintf_r+0x1108>
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	3b01      	subs	r3, #1
 80070be:	9308      	str	r3, [sp, #32]
 80070c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c8:	6063      	str	r3, [r4, #4]
 80070ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070cc:	4413      	add	r3, r2
 80070ce:	9324      	str	r3, [sp, #144]	; 0x90
 80070d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070d2:	3301      	adds	r3, #1
 80070d4:	2b07      	cmp	r3, #7
 80070d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80070d8:	dc41      	bgt.n	800715e <_svfprintf_r+0x1116>
 80070da:	3408      	adds	r4, #8
 80070dc:	9b05      	ldr	r3, [sp, #20]
 80070de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070e0:	eb09 0703 	add.w	r7, r9, r3
 80070e4:	1b7b      	subs	r3, r7, r5
 80070e6:	7817      	ldrb	r7, [r2, #0]
 80070e8:	429f      	cmp	r7, r3
 80070ea:	bfa8      	it	ge
 80070ec:	461f      	movge	r7, r3
 80070ee:	2f00      	cmp	r7, #0
 80070f0:	dd0a      	ble.n	8007108 <_svfprintf_r+0x10c0>
 80070f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070f4:	443b      	add	r3, r7
 80070f6:	9324      	str	r3, [sp, #144]	; 0x90
 80070f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070fa:	3301      	adds	r3, #1
 80070fc:	2b07      	cmp	r3, #7
 80070fe:	e9c4 5700 	strd	r5, r7, [r4]
 8007102:	9323      	str	r3, [sp, #140]	; 0x8c
 8007104:	dc35      	bgt.n	8007172 <_svfprintf_r+0x112a>
 8007106:	3408      	adds	r4, #8
 8007108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710a:	781e      	ldrb	r6, [r3, #0]
 800710c:	2f00      	cmp	r7, #0
 800710e:	bfa8      	it	ge
 8007110:	1bf6      	subge	r6, r6, r7
 8007112:	2e00      	cmp	r6, #0
 8007114:	dd18      	ble.n	8007148 <_svfprintf_r+0x1100>
 8007116:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800711a:	482f      	ldr	r0, [pc, #188]	; (80071d8 <_svfprintf_r+0x1190>)
 800711c:	6020      	str	r0, [r4, #0]
 800711e:	2e10      	cmp	r6, #16
 8007120:	f103 0301 	add.w	r3, r3, #1
 8007124:	f104 0108 	add.w	r1, r4, #8
 8007128:	dc2d      	bgt.n	8007186 <_svfprintf_r+0x113e>
 800712a:	4432      	add	r2, r6
 800712c:	2b07      	cmp	r3, #7
 800712e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007132:	6066      	str	r6, [r4, #4]
 8007134:	dd3a      	ble.n	80071ac <_svfprintf_r+0x1164>
 8007136:	aa22      	add	r2, sp, #136	; 0x88
 8007138:	4641      	mov	r1, r8
 800713a:	4650      	mov	r0, sl
 800713c:	f001 fed0 	bl	8008ee0 <__ssprint_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	f040 8103 	bne.w	800734c <_svfprintf_r+0x1304>
 8007146:	ac25      	add	r4, sp, #148	; 0x94
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	441d      	add	r5, r3
 800714e:	e732      	b.n	8006fb6 <_svfprintf_r+0xf6e>
 8007150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007152:	3b01      	subs	r3, #1
 8007154:	930a      	str	r3, [sp, #40]	; 0x28
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	3b01      	subs	r3, #1
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	e7b0      	b.n	80070c0 <_svfprintf_r+0x1078>
 800715e:	aa22      	add	r2, sp, #136	; 0x88
 8007160:	4641      	mov	r1, r8
 8007162:	4650      	mov	r0, sl
 8007164:	f001 febc 	bl	8008ee0 <__ssprint_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	f040 80ef 	bne.w	800734c <_svfprintf_r+0x1304>
 800716e:	ac25      	add	r4, sp, #148	; 0x94
 8007170:	e7b4      	b.n	80070dc <_svfprintf_r+0x1094>
 8007172:	aa22      	add	r2, sp, #136	; 0x88
 8007174:	4641      	mov	r1, r8
 8007176:	4650      	mov	r0, sl
 8007178:	f001 feb2 	bl	8008ee0 <__ssprint_r>
 800717c:	2800      	cmp	r0, #0
 800717e:	f040 80e5 	bne.w	800734c <_svfprintf_r+0x1304>
 8007182:	ac25      	add	r4, sp, #148	; 0x94
 8007184:	e7c0      	b.n	8007108 <_svfprintf_r+0x10c0>
 8007186:	2010      	movs	r0, #16
 8007188:	4402      	add	r2, r0
 800718a:	2b07      	cmp	r3, #7
 800718c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007190:	6060      	str	r0, [r4, #4]
 8007192:	dd08      	ble.n	80071a6 <_svfprintf_r+0x115e>
 8007194:	aa22      	add	r2, sp, #136	; 0x88
 8007196:	4641      	mov	r1, r8
 8007198:	4650      	mov	r0, sl
 800719a:	f001 fea1 	bl	8008ee0 <__ssprint_r>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f040 80d4 	bne.w	800734c <_svfprintf_r+0x1304>
 80071a4:	a925      	add	r1, sp, #148	; 0x94
 80071a6:	3e10      	subs	r6, #16
 80071a8:	460c      	mov	r4, r1
 80071aa:	e7b4      	b.n	8007116 <_svfprintf_r+0x10ce>
 80071ac:	460c      	mov	r4, r1
 80071ae:	e7cb      	b.n	8007148 <_svfprintf_r+0x1100>
 80071b0:	aa22      	add	r2, sp, #136	; 0x88
 80071b2:	4641      	mov	r1, r8
 80071b4:	4650      	mov	r0, sl
 80071b6:	f001 fe93 	bl	8008ee0 <__ssprint_r>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f040 80c6 	bne.w	800734c <_svfprintf_r+0x1304>
 80071c0:	ac25      	add	r4, sp, #148	; 0x94
 80071c2:	e719      	b.n	8006ff8 <_svfprintf_r+0xfb0>
 80071c4:	aa22      	add	r2, sp, #136	; 0x88
 80071c6:	4641      	mov	r1, r8
 80071c8:	4650      	mov	r0, sl
 80071ca:	f001 fe89 	bl	8008ee0 <__ssprint_r>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 80bc 	bne.w	800734c <_svfprintf_r+0x1304>
 80071d4:	ac25      	add	r4, sp, #148	; 0x94
 80071d6:	e726      	b.n	8007026 <_svfprintf_r+0xfde>
 80071d8:	0800ed18 	.word	0x0800ed18
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071e0:	2a01      	cmp	r2, #1
 80071e2:	f106 0601 	add.w	r6, r6, #1
 80071e6:	f103 0301 	add.w	r3, r3, #1
 80071ea:	f104 0508 	add.w	r5, r4, #8
 80071ee:	dc02      	bgt.n	80071f6 <_svfprintf_r+0x11ae>
 80071f0:	f01b 0f01 	tst.w	fp, #1
 80071f4:	d07e      	beq.n	80072f4 <_svfprintf_r+0x12ac>
 80071f6:	2201      	movs	r2, #1
 80071f8:	2b07      	cmp	r3, #7
 80071fa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80071fe:	f8c4 9000 	str.w	r9, [r4]
 8007202:	6062      	str	r2, [r4, #4]
 8007204:	dd08      	ble.n	8007218 <_svfprintf_r+0x11d0>
 8007206:	aa22      	add	r2, sp, #136	; 0x88
 8007208:	4641      	mov	r1, r8
 800720a:	4650      	mov	r0, sl
 800720c:	f001 fe68 	bl	8008ee0 <__ssprint_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	f040 809b 	bne.w	800734c <_svfprintf_r+0x1304>
 8007216:	ad25      	add	r5, sp, #148	; 0x94
 8007218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007220:	606b      	str	r3, [r5, #4]
 8007222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007224:	4413      	add	r3, r2
 8007226:	9324      	str	r3, [sp, #144]	; 0x90
 8007228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800722a:	3301      	adds	r3, #1
 800722c:	2b07      	cmp	r3, #7
 800722e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007230:	dc32      	bgt.n	8007298 <_svfprintf_r+0x1250>
 8007232:	3508      	adds	r5, #8
 8007234:	9b05      	ldr	r3, [sp, #20]
 8007236:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800723a:	1e5c      	subs	r4, r3, #1
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	f7f9 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007244:	2800      	cmp	r0, #0
 8007246:	d130      	bne.n	80072aa <_svfprintf_r+0x1262>
 8007248:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800724a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800724c:	9a05      	ldr	r2, [sp, #20]
 800724e:	3101      	adds	r1, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	f109 0001 	add.w	r0, r9, #1
 8007256:	4413      	add	r3, r2
 8007258:	2907      	cmp	r1, #7
 800725a:	e9c5 0400 	strd	r0, r4, [r5]
 800725e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8007262:	dd50      	ble.n	8007306 <_svfprintf_r+0x12be>
 8007264:	aa22      	add	r2, sp, #136	; 0x88
 8007266:	4641      	mov	r1, r8
 8007268:	4650      	mov	r0, sl
 800726a:	f001 fe39 	bl	8008ee0 <__ssprint_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	d16c      	bne.n	800734c <_svfprintf_r+0x1304>
 8007272:	ad25      	add	r5, sp, #148	; 0x94
 8007274:	ab1e      	add	r3, sp, #120	; 0x78
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800727a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800727c:	606b      	str	r3, [r5, #4]
 800727e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007280:	4413      	add	r3, r2
 8007282:	9324      	str	r3, [sp, #144]	; 0x90
 8007284:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007286:	3301      	adds	r3, #1
 8007288:	2b07      	cmp	r3, #7
 800728a:	9323      	str	r3, [sp, #140]	; 0x8c
 800728c:	f73f adb7 	bgt.w	8006dfe <_svfprintf_r+0xdb6>
 8007290:	f105 0408 	add.w	r4, r5, #8
 8007294:	f7ff babe 	b.w	8006814 <_svfprintf_r+0x7cc>
 8007298:	aa22      	add	r2, sp, #136	; 0x88
 800729a:	4641      	mov	r1, r8
 800729c:	4650      	mov	r0, sl
 800729e:	f001 fe1f 	bl	8008ee0 <__ssprint_r>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d152      	bne.n	800734c <_svfprintf_r+0x1304>
 80072a6:	ad25      	add	r5, sp, #148	; 0x94
 80072a8:	e7c4      	b.n	8007234 <_svfprintf_r+0x11ec>
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	dde2      	ble.n	8007274 <_svfprintf_r+0x122c>
 80072ae:	4e56      	ldr	r6, [pc, #344]	; (8007408 <_svfprintf_r+0x13c0>)
 80072b0:	2710      	movs	r7, #16
 80072b2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80072b6:	2c10      	cmp	r4, #16
 80072b8:	f103 0301 	add.w	r3, r3, #1
 80072bc:	f105 0108 	add.w	r1, r5, #8
 80072c0:	602e      	str	r6, [r5, #0]
 80072c2:	dc07      	bgt.n	80072d4 <_svfprintf_r+0x128c>
 80072c4:	606c      	str	r4, [r5, #4]
 80072c6:	2b07      	cmp	r3, #7
 80072c8:	4414      	add	r4, r2
 80072ca:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80072ce:	dcc9      	bgt.n	8007264 <_svfprintf_r+0x121c>
 80072d0:	460d      	mov	r5, r1
 80072d2:	e7cf      	b.n	8007274 <_svfprintf_r+0x122c>
 80072d4:	3210      	adds	r2, #16
 80072d6:	2b07      	cmp	r3, #7
 80072d8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80072dc:	606f      	str	r7, [r5, #4]
 80072de:	dd06      	ble.n	80072ee <_svfprintf_r+0x12a6>
 80072e0:	aa22      	add	r2, sp, #136	; 0x88
 80072e2:	4641      	mov	r1, r8
 80072e4:	4650      	mov	r0, sl
 80072e6:	f001 fdfb 	bl	8008ee0 <__ssprint_r>
 80072ea:	bb78      	cbnz	r0, 800734c <_svfprintf_r+0x1304>
 80072ec:	a925      	add	r1, sp, #148	; 0x94
 80072ee:	3c10      	subs	r4, #16
 80072f0:	460d      	mov	r5, r1
 80072f2:	e7de      	b.n	80072b2 <_svfprintf_r+0x126a>
 80072f4:	2201      	movs	r2, #1
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80072fc:	f8c4 9000 	str.w	r9, [r4]
 8007300:	6062      	str	r2, [r4, #4]
 8007302:	ddb7      	ble.n	8007274 <_svfprintf_r+0x122c>
 8007304:	e7ae      	b.n	8007264 <_svfprintf_r+0x121c>
 8007306:	3508      	adds	r5, #8
 8007308:	e7b4      	b.n	8007274 <_svfprintf_r+0x122c>
 800730a:	460c      	mov	r4, r1
 800730c:	f7ff ba82 	b.w	8006814 <_svfprintf_r+0x7cc>
 8007310:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007314:	1a9d      	subs	r5, r3, r2
 8007316:	2d00      	cmp	r5, #0
 8007318:	f77f aa80 	ble.w	800681c <_svfprintf_r+0x7d4>
 800731c:	4e3b      	ldr	r6, [pc, #236]	; (800740c <_svfprintf_r+0x13c4>)
 800731e:	2710      	movs	r7, #16
 8007320:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007324:	2d10      	cmp	r5, #16
 8007326:	f103 0301 	add.w	r3, r3, #1
 800732a:	6026      	str	r6, [r4, #0]
 800732c:	dc18      	bgt.n	8007360 <_svfprintf_r+0x1318>
 800732e:	6065      	str	r5, [r4, #4]
 8007330:	2b07      	cmp	r3, #7
 8007332:	4415      	add	r5, r2
 8007334:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007338:	f77f aa70 	ble.w	800681c <_svfprintf_r+0x7d4>
 800733c:	aa22      	add	r2, sp, #136	; 0x88
 800733e:	4641      	mov	r1, r8
 8007340:	4650      	mov	r0, sl
 8007342:	f001 fdcd 	bl	8008ee0 <__ssprint_r>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f aa68 	beq.w	800681c <_svfprintf_r+0x7d4>
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f43f a887 	beq.w	8006462 <_svfprintf_r+0x41a>
 8007354:	4619      	mov	r1, r3
 8007356:	4650      	mov	r0, sl
 8007358:	f000 ffb2 	bl	80082c0 <_free_r>
 800735c:	f7ff b881 	b.w	8006462 <_svfprintf_r+0x41a>
 8007360:	3210      	adds	r2, #16
 8007362:	2b07      	cmp	r3, #7
 8007364:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007368:	6067      	str	r7, [r4, #4]
 800736a:	dc02      	bgt.n	8007372 <_svfprintf_r+0x132a>
 800736c:	3408      	adds	r4, #8
 800736e:	3d10      	subs	r5, #16
 8007370:	e7d6      	b.n	8007320 <_svfprintf_r+0x12d8>
 8007372:	aa22      	add	r2, sp, #136	; 0x88
 8007374:	4641      	mov	r1, r8
 8007376:	4650      	mov	r0, sl
 8007378:	f001 fdb2 	bl	8008ee0 <__ssprint_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	d1e5      	bne.n	800734c <_svfprintf_r+0x1304>
 8007380:	ac25      	add	r4, sp, #148	; 0x94
 8007382:	e7f4      	b.n	800736e <_svfprintf_r+0x1326>
 8007384:	9903      	ldr	r1, [sp, #12]
 8007386:	4650      	mov	r0, sl
 8007388:	f000 ff9a 	bl	80082c0 <_free_r>
 800738c:	f7ff ba5e 	b.w	800684c <_svfprintf_r+0x804>
 8007390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007392:	2b00      	cmp	r3, #0
 8007394:	f43f a865 	beq.w	8006462 <_svfprintf_r+0x41a>
 8007398:	aa22      	add	r2, sp, #136	; 0x88
 800739a:	4641      	mov	r1, r8
 800739c:	4650      	mov	r0, sl
 800739e:	f001 fd9f 	bl	8008ee0 <__ssprint_r>
 80073a2:	f7ff b85e 	b.w	8006462 <_svfprintf_r+0x41a>
 80073a6:	ea56 0205 	orrs.w	r2, r6, r5
 80073aa:	465f      	mov	r7, fp
 80073ac:	f43f ab78 	beq.w	8006aa0 <_svfprintf_r+0xa58>
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f43f ac15 	beq.w	8006be0 <_svfprintf_r+0xb98>
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80073bc:	f43f ac5b 	beq.w	8006c76 <_svfprintf_r+0xc2e>
 80073c0:	f006 0307 	and.w	r3, r6, #7
 80073c4:	08f6      	lsrs	r6, r6, #3
 80073c6:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 80073ca:	08ed      	lsrs	r5, r5, #3
 80073cc:	3330      	adds	r3, #48	; 0x30
 80073ce:	ea56 0105 	orrs.w	r1, r6, r5
 80073d2:	464a      	mov	r2, r9
 80073d4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80073d8:	d1f2      	bne.n	80073c0 <_svfprintf_r+0x1378>
 80073da:	07f9      	lsls	r1, r7, #31
 80073dc:	d506      	bpl.n	80073ec <_svfprintf_r+0x13a4>
 80073de:	2b30      	cmp	r3, #48	; 0x30
 80073e0:	d004      	beq.n	80073ec <_svfprintf_r+0x13a4>
 80073e2:	2330      	movs	r3, #48	; 0x30
 80073e4:	f809 3c01 	strb.w	r3, [r9, #-1]
 80073e8:	f1a2 0902 	sub.w	r9, r2, #2
 80073ec:	ab4e      	add	r3, sp, #312	; 0x138
 80073ee:	eba3 0309 	sub.w	r3, r3, r9
 80073f2:	9e04      	ldr	r6, [sp, #16]
 80073f4:	9304      	str	r3, [sp, #16]
 80073f6:	2300      	movs	r3, #0
 80073f8:	46bb      	mov	fp, r7
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8007400:	461d      	mov	r5, r3
 8007402:	f7ff b94d 	b.w	80066a0 <_svfprintf_r+0x658>
 8007406:	bf00      	nop
 8007408:	0800ed18 	.word	0x0800ed18
 800740c:	0800ed08 	.word	0x0800ed08

08007410 <sysconf>:
 8007410:	2808      	cmp	r0, #8
 8007412:	b508      	push	{r3, lr}
 8007414:	d006      	beq.n	8007424 <sysconf+0x14>
 8007416:	f7fe f96b 	bl	80056f0 <__errno>
 800741a:	2316      	movs	r3, #22
 800741c:	6003      	str	r3, [r0, #0]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007422:	bd08      	pop	{r3, pc}
 8007424:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007428:	e7fb      	b.n	8007422 <sysconf+0x12>
	...

0800742c <register_fini>:
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <register_fini+0xc>)
 800742e:	b113      	cbz	r3, 8007436 <register_fini+0xa>
 8007430:	4802      	ldr	r0, [pc, #8]	; (800743c <register_fini+0x10>)
 8007432:	f000 b805 	b.w	8007440 <atexit>
 8007436:	4770      	bx	lr
 8007438:	00000000 	.word	0x00000000
 800743c:	080081f1 	.word	0x080081f1

08007440 <atexit>:
 8007440:	2300      	movs	r3, #0
 8007442:	4601      	mov	r1, r0
 8007444:	461a      	mov	r2, r3
 8007446:	4618      	mov	r0, r3
 8007448:	f001 be30 	b.w	80090ac <__register_exitproc>

0800744c <quorem>:
 800744c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	6903      	ldr	r3, [r0, #16]
 8007452:	690c      	ldr	r4, [r1, #16]
 8007454:	42a3      	cmp	r3, r4
 8007456:	4607      	mov	r7, r0
 8007458:	f2c0 8081 	blt.w	800755e <quorem+0x112>
 800745c:	3c01      	subs	r4, #1
 800745e:	f101 0814 	add.w	r8, r1, #20
 8007462:	f100 0514 	add.w	r5, r0, #20
 8007466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007474:	3301      	adds	r3, #1
 8007476:	429a      	cmp	r2, r3
 8007478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800747c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007480:	fbb2 f6f3 	udiv	r6, r2, r3
 8007484:	d331      	bcc.n	80074ea <quorem+0x9e>
 8007486:	f04f 0e00 	mov.w	lr, #0
 800748a:	4640      	mov	r0, r8
 800748c:	46ac      	mov	ip, r5
 800748e:	46f2      	mov	sl, lr
 8007490:	f850 2b04 	ldr.w	r2, [r0], #4
 8007494:	b293      	uxth	r3, r2
 8007496:	fb06 e303 	mla	r3, r6, r3, lr
 800749a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ebaa 0303 	sub.w	r3, sl, r3
 80074a4:	f8dc a000 	ldr.w	sl, [ip]
 80074a8:	0c12      	lsrs	r2, r2, #16
 80074aa:	fa13 f38a 	uxtah	r3, r3, sl
 80074ae:	fb06 e202 	mla	r2, r6, r2, lr
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074ba:	b292      	uxth	r2, r2
 80074bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80074c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80074c8:	4581      	cmp	r9, r0
 80074ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ce:	f84c 3b04 	str.w	r3, [ip], #4
 80074d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074d6:	d2db      	bcs.n	8007490 <quorem+0x44>
 80074d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80074dc:	b92b      	cbnz	r3, 80074ea <quorem+0x9e>
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	429d      	cmp	r5, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	d32e      	bcc.n	8007546 <quorem+0xfa>
 80074e8:	613c      	str	r4, [r7, #16]
 80074ea:	4638      	mov	r0, r7
 80074ec:	f001 fb68 	bl	8008bc0 <__mcmp>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	db24      	blt.n	800753e <quorem+0xf2>
 80074f4:	3601      	adds	r6, #1
 80074f6:	4628      	mov	r0, r5
 80074f8:	f04f 0c00 	mov.w	ip, #0
 80074fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007500:	f8d0 e000 	ldr.w	lr, [r0]
 8007504:	b293      	uxth	r3, r2
 8007506:	ebac 0303 	sub.w	r3, ip, r3
 800750a:	0c12      	lsrs	r2, r2, #16
 800750c:	fa13 f38e 	uxtah	r3, r3, lr
 8007510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007518:	b29b      	uxth	r3, r3
 800751a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751e:	45c1      	cmp	r9, r8
 8007520:	f840 3b04 	str.w	r3, [r0], #4
 8007524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007528:	d2e8      	bcs.n	80074fc <quorem+0xb0>
 800752a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007532:	b922      	cbnz	r2, 800753e <quorem+0xf2>
 8007534:	3b04      	subs	r3, #4
 8007536:	429d      	cmp	r5, r3
 8007538:	461a      	mov	r2, r3
 800753a:	d30a      	bcc.n	8007552 <quorem+0x106>
 800753c:	613c      	str	r4, [r7, #16]
 800753e:	4630      	mov	r0, r6
 8007540:	b003      	add	sp, #12
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	3b04      	subs	r3, #4
 800754a:	2a00      	cmp	r2, #0
 800754c:	d1cc      	bne.n	80074e8 <quorem+0x9c>
 800754e:	3c01      	subs	r4, #1
 8007550:	e7c7      	b.n	80074e2 <quorem+0x96>
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	3b04      	subs	r3, #4
 8007556:	2a00      	cmp	r2, #0
 8007558:	d1f0      	bne.n	800753c <quorem+0xf0>
 800755a:	3c01      	subs	r4, #1
 800755c:	e7eb      	b.n	8007536 <quorem+0xea>
 800755e:	2000      	movs	r0, #0
 8007560:	e7ee      	b.n	8007540 <quorem+0xf4>
 8007562:	0000      	movs	r0, r0
 8007564:	0000      	movs	r0, r0
	...

08007568 <_dtoa_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	ed2d 8b04 	vpush	{d8-d9}
 8007570:	b093      	sub	sp, #76	; 0x4c
 8007572:	ec57 6b10 	vmov	r6, r7, d0
 8007576:	9106      	str	r1, [sp, #24]
 8007578:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800757a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800757c:	9209      	str	r2, [sp, #36]	; 0x24
 800757e:	ee10 aa10 	vmov	sl, s0
 8007582:	4604      	mov	r4, r0
 8007584:	930c      	str	r3, [sp, #48]	; 0x30
 8007586:	46bb      	mov	fp, r7
 8007588:	b141      	cbz	r1, 800759c <_dtoa_r+0x34>
 800758a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800758c:	604a      	str	r2, [r1, #4]
 800758e:	2301      	movs	r3, #1
 8007590:	4093      	lsls	r3, r2
 8007592:	608b      	str	r3, [r1, #8]
 8007594:	f001 f905 	bl	80087a2 <_Bfree>
 8007598:	2300      	movs	r3, #0
 800759a:	6423      	str	r3, [r4, #64]	; 0x40
 800759c:	1e3b      	subs	r3, r7, #0
 800759e:	bfaa      	itet	ge
 80075a0:	2300      	movge	r3, #0
 80075a2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80075a6:	602b      	strge	r3, [r5, #0]
 80075a8:	4ba3      	ldr	r3, [pc, #652]	; (8007838 <_dtoa_r+0x2d0>)
 80075aa:	bfbc      	itt	lt
 80075ac:	2201      	movlt	r2, #1
 80075ae:	602a      	strlt	r2, [r5, #0]
 80075b0:	ea33 030b 	bics.w	r3, r3, fp
 80075b4:	d11b      	bne.n	80075ee <_dtoa_r+0x86>
 80075b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075c2:	4333      	orrs	r3, r6
 80075c4:	f000 8590 	beq.w	80080e8 <_dtoa_r+0xb80>
 80075c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ca:	b90b      	cbnz	r3, 80075d0 <_dtoa_r+0x68>
 80075cc:	4b9b      	ldr	r3, [pc, #620]	; (800783c <_dtoa_r+0x2d4>)
 80075ce:	e022      	b.n	8007616 <_dtoa_r+0xae>
 80075d0:	4b9a      	ldr	r3, [pc, #616]	; (800783c <_dtoa_r+0x2d4>)
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	3303      	adds	r3, #3
 80075d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	9801      	ldr	r0, [sp, #4]
 80075dc:	b013      	add	sp, #76	; 0x4c
 80075de:	ecbd 8b04 	vpop	{d8-d9}
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	4b96      	ldr	r3, [pc, #600]	; (8007840 <_dtoa_r+0x2d8>)
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	3308      	adds	r3, #8
 80075ec:	e7f3      	b.n	80075d6 <_dtoa_r+0x6e>
 80075ee:	2200      	movs	r2, #0
 80075f0:	2300      	movs	r3, #0
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	f7f9 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80075fa:	ec4b ab19 	vmov	d9, sl, fp
 80075fe:	4680      	mov	r8, r0
 8007600:	b158      	cbz	r0, 800761a <_dtoa_r+0xb2>
 8007602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007604:	2301      	movs	r3, #1
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8569 	beq.w	80080e2 <_dtoa_r+0xb7a>
 8007610:	488c      	ldr	r0, [pc, #560]	; (8007844 <_dtoa_r+0x2dc>)
 8007612:	6018      	str	r0, [r3, #0]
 8007614:	1e43      	subs	r3, r0, #1
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	e7df      	b.n	80075da <_dtoa_r+0x72>
 800761a:	ec4b ab10 	vmov	d0, sl, fp
 800761e:	aa10      	add	r2, sp, #64	; 0x40
 8007620:	a911      	add	r1, sp, #68	; 0x44
 8007622:	4620      	mov	r0, r4
 8007624:	f001 fb72 	bl	8008d0c <__d2b>
 8007628:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800762c:	ee08 0a10 	vmov	s16, r0
 8007630:	2d00      	cmp	r5, #0
 8007632:	f000 8082 	beq.w	800773a <_dtoa_r+0x1d2>
 8007636:	ee19 3a90 	vmov	r3, s19
 800763a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800763e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007642:	4656      	mov	r6, sl
 8007644:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007648:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800764c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007650:	4b7d      	ldr	r3, [pc, #500]	; (8007848 <_dtoa_r+0x2e0>)
 8007652:	2200      	movs	r2, #0
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	f7f8 fe16 	bl	8000288 <__aeabi_dsub>
 800765c:	a370      	add	r3, pc, #448	; (adr r3, 8007820 <_dtoa_r+0x2b8>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f8 ffc9 	bl	80005f8 <__aeabi_dmul>
 8007666:	a370      	add	r3, pc, #448	; (adr r3, 8007828 <_dtoa_r+0x2c0>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 fe0e 	bl	800028c <__adddf3>
 8007670:	4606      	mov	r6, r0
 8007672:	4628      	mov	r0, r5
 8007674:	460f      	mov	r7, r1
 8007676:	f7f8 ff55 	bl	8000524 <__aeabi_i2d>
 800767a:	a36d      	add	r3, pc, #436	; (adr r3, 8007830 <_dtoa_r+0x2c8>)
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f7f8 ffba 	bl	80005f8 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f8 fdfe 	bl	800028c <__adddf3>
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	f7f9 fa60 	bl	8000b58 <__aeabi_d2iz>
 8007698:	2200      	movs	r2, #0
 800769a:	9000      	str	r0, [sp, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 fa1b 	bl	8000adc <__aeabi_dcmplt>
 80076a6:	b150      	cbz	r0, 80076be <_dtoa_r+0x156>
 80076a8:	9800      	ldr	r0, [sp, #0]
 80076aa:	f7f8 ff3b 	bl	8000524 <__aeabi_i2d>
 80076ae:	4632      	mov	r2, r6
 80076b0:	463b      	mov	r3, r7
 80076b2:	f7f9 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b6:	b910      	cbnz	r0, 80076be <_dtoa_r+0x156>
 80076b8:	9b00      	ldr	r3, [sp, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	9b00      	ldr	r3, [sp, #0]
 80076c0:	2b16      	cmp	r3, #22
 80076c2:	d858      	bhi.n	8007776 <_dtoa_r+0x20e>
 80076c4:	9a00      	ldr	r2, [sp, #0]
 80076c6:	4b61      	ldr	r3, [pc, #388]	; (800784c <_dtoa_r+0x2e4>)
 80076c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	ec51 0b19 	vmov	r0, r1, d9
 80076d4:	f7f9 fa02 	bl	8000adc <__aeabi_dcmplt>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d04e      	beq.n	800777a <_dtoa_r+0x212>
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076e8:	1b5d      	subs	r5, r3, r5
 80076ea:	1e6b      	subs	r3, r5, #1
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	bf45      	ittet	mi
 80076f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80076f4:	9304      	strmi	r3, [sp, #16]
 80076f6:	2300      	movpl	r3, #0
 80076f8:	2300      	movmi	r3, #0
 80076fa:	bf4c      	ite	mi
 80076fc:	9305      	strmi	r3, [sp, #20]
 80076fe:	9304      	strpl	r3, [sp, #16]
 8007700:	9b00      	ldr	r3, [sp, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	db3b      	blt.n	800777e <_dtoa_r+0x216>
 8007706:	9b05      	ldr	r3, [sp, #20]
 8007708:	9a00      	ldr	r2, [sp, #0]
 800770a:	920a      	str	r2, [sp, #40]	; 0x28
 800770c:	4413      	add	r3, r2
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	2300      	movs	r3, #0
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	2b09      	cmp	r3, #9
 8007718:	d869      	bhi.n	80077ee <_dtoa_r+0x286>
 800771a:	2b05      	cmp	r3, #5
 800771c:	bfc4      	itt	gt
 800771e:	3b04      	subgt	r3, #4
 8007720:	9306      	strgt	r3, [sp, #24]
 8007722:	9b06      	ldr	r3, [sp, #24]
 8007724:	f1a3 0302 	sub.w	r3, r3, #2
 8007728:	bfcc      	ite	gt
 800772a:	2500      	movgt	r5, #0
 800772c:	2501      	movle	r5, #1
 800772e:	2b03      	cmp	r3, #3
 8007730:	d868      	bhi.n	8007804 <_dtoa_r+0x29c>
 8007732:	e8df f003 	tbb	[pc, r3]
 8007736:	3a2d      	.short	0x3a2d
 8007738:	5a38      	.short	0x5a38
 800773a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800773e:	441d      	add	r5, r3
 8007740:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007744:	2b20      	cmp	r3, #32
 8007746:	bfc1      	itttt	gt
 8007748:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800774c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007750:	fa0b f303 	lslgt.w	r3, fp, r3
 8007754:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007758:	bfda      	itte	le
 800775a:	f1c3 0320 	rsble	r3, r3, #32
 800775e:	fa06 f003 	lslle.w	r0, r6, r3
 8007762:	4318      	orrgt	r0, r3
 8007764:	f7f8 fece 	bl	8000504 <__aeabi_ui2d>
 8007768:	2301      	movs	r3, #1
 800776a:	4606      	mov	r6, r0
 800776c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007770:	3d01      	subs	r5, #1
 8007772:	930e      	str	r3, [sp, #56]	; 0x38
 8007774:	e76c      	b.n	8007650 <_dtoa_r+0xe8>
 8007776:	2301      	movs	r3, #1
 8007778:	e7b4      	b.n	80076e4 <_dtoa_r+0x17c>
 800777a:	900b      	str	r0, [sp, #44]	; 0x2c
 800777c:	e7b3      	b.n	80076e6 <_dtoa_r+0x17e>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	9a00      	ldr	r2, [sp, #0]
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	4253      	negs	r3, r2
 8007788:	9307      	str	r3, [sp, #28]
 800778a:	2300      	movs	r3, #0
 800778c:	930a      	str	r3, [sp, #40]	; 0x28
 800778e:	e7c1      	b.n	8007714 <_dtoa_r+0x1ac>
 8007790:	2300      	movs	r3, #0
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc37      	bgt.n	800780a <_dtoa_r+0x2a2>
 800779a:	2301      	movs	r3, #1
 800779c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077a0:	461a      	mov	r2, r3
 80077a2:	9209      	str	r2, [sp, #36]	; 0x24
 80077a4:	e00c      	b.n	80077c0 <_dtoa_r+0x258>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7f3      	b.n	8007792 <_dtoa_r+0x22a>
 80077aa:	2300      	movs	r3, #0
 80077ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ae:	9308      	str	r3, [sp, #32]
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	4413      	add	r3, r2
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	3301      	adds	r3, #1
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	9303      	str	r3, [sp, #12]
 80077bc:	bfb8      	it	lt
 80077be:	2301      	movlt	r3, #1
 80077c0:	2200      	movs	r2, #0
 80077c2:	6462      	str	r2, [r4, #68]	; 0x44
 80077c4:	2204      	movs	r2, #4
 80077c6:	f102 0014 	add.w	r0, r2, #20
 80077ca:	4298      	cmp	r0, r3
 80077cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80077ce:	d920      	bls.n	8007812 <_dtoa_r+0x2aa>
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 ffc1 	bl	8008758 <_Balloc>
 80077d6:	9001      	str	r0, [sp, #4]
 80077d8:	2800      	cmp	r0, #0
 80077da:	d13d      	bne.n	8007858 <_dtoa_r+0x2f0>
 80077dc:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <_dtoa_r+0x2e8>)
 80077de:	4602      	mov	r2, r0
 80077e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077e4:	481b      	ldr	r0, [pc, #108]	; (8007854 <_dtoa_r+0x2ec>)
 80077e6:	f001 fca3 	bl	8009130 <__assert_func>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7de      	b.n	80077ac <_dtoa_r+0x244>
 80077ee:	2501      	movs	r5, #1
 80077f0:	2300      	movs	r3, #0
 80077f2:	9306      	str	r3, [sp, #24]
 80077f4:	9508      	str	r5, [sp, #32]
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	2312      	movs	r3, #18
 8007802:	e7ce      	b.n	80077a2 <_dtoa_r+0x23a>
 8007804:	2301      	movs	r3, #1
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	e7f5      	b.n	80077f6 <_dtoa_r+0x28e>
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007810:	e7d6      	b.n	80077c0 <_dtoa_r+0x258>
 8007812:	3101      	adds	r1, #1
 8007814:	6461      	str	r1, [r4, #68]	; 0x44
 8007816:	0052      	lsls	r2, r2, #1
 8007818:	e7d5      	b.n	80077c6 <_dtoa_r+0x25e>
 800781a:	bf00      	nop
 800781c:	f3af 8000 	nop.w
 8007820:	636f4361 	.word	0x636f4361
 8007824:	3fd287a7 	.word	0x3fd287a7
 8007828:	8b60c8b3 	.word	0x8b60c8b3
 800782c:	3fc68a28 	.word	0x3fc68a28
 8007830:	509f79fb 	.word	0x509f79fb
 8007834:	3fd34413 	.word	0x3fd34413
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	0800ed28 	.word	0x0800ed28
 8007840:	0800ed2c 	.word	0x0800ed2c
 8007844:	0800ed07 	.word	0x0800ed07
 8007848:	3ff80000 	.word	0x3ff80000
 800784c:	0800ee28 	.word	0x0800ee28
 8007850:	0800ed35 	.word	0x0800ed35
 8007854:	0800ed46 	.word	0x0800ed46
 8007858:	9b01      	ldr	r3, [sp, #4]
 800785a:	6423      	str	r3, [r4, #64]	; 0x40
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	2b0e      	cmp	r3, #14
 8007860:	f200 809d 	bhi.w	800799e <_dtoa_r+0x436>
 8007864:	2d00      	cmp	r5, #0
 8007866:	f000 809a 	beq.w	800799e <_dtoa_r+0x436>
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd32      	ble.n	80078d6 <_dtoa_r+0x36e>
 8007870:	4ab7      	ldr	r2, [pc, #732]	; (8007b50 <_dtoa_r+0x5e8>)
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800787a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	05d8      	lsls	r0, r3, #23
 8007882:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007886:	d516      	bpl.n	80078b6 <_dtoa_r+0x34e>
 8007888:	4bb2      	ldr	r3, [pc, #712]	; (8007b54 <_dtoa_r+0x5ec>)
 800788a:	ec51 0b19 	vmov	r0, r1, d9
 800788e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007892:	f7f8 ffdb 	bl	800084c <__aeabi_ddiv>
 8007896:	f007 070f 	and.w	r7, r7, #15
 800789a:	4682      	mov	sl, r0
 800789c:	468b      	mov	fp, r1
 800789e:	2503      	movs	r5, #3
 80078a0:	4eac      	ldr	r6, [pc, #688]	; (8007b54 <_dtoa_r+0x5ec>)
 80078a2:	b957      	cbnz	r7, 80078ba <_dtoa_r+0x352>
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	f7f8 ffce 	bl	800084c <__aeabi_ddiv>
 80078b0:	4682      	mov	sl, r0
 80078b2:	468b      	mov	fp, r1
 80078b4:	e028      	b.n	8007908 <_dtoa_r+0x3a0>
 80078b6:	2502      	movs	r5, #2
 80078b8:	e7f2      	b.n	80078a0 <_dtoa_r+0x338>
 80078ba:	07f9      	lsls	r1, r7, #31
 80078bc:	d508      	bpl.n	80078d0 <_dtoa_r+0x368>
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c6:	f7f8 fe97 	bl	80005f8 <__aeabi_dmul>
 80078ca:	3501      	adds	r5, #1
 80078cc:	4680      	mov	r8, r0
 80078ce:	4689      	mov	r9, r1
 80078d0:	107f      	asrs	r7, r7, #1
 80078d2:	3608      	adds	r6, #8
 80078d4:	e7e5      	b.n	80078a2 <_dtoa_r+0x33a>
 80078d6:	f000 809b 	beq.w	8007a10 <_dtoa_r+0x4a8>
 80078da:	9b00      	ldr	r3, [sp, #0]
 80078dc:	4f9d      	ldr	r7, [pc, #628]	; (8007b54 <_dtoa_r+0x5ec>)
 80078de:	425e      	negs	r6, r3
 80078e0:	4b9b      	ldr	r3, [pc, #620]	; (8007b50 <_dtoa_r+0x5e8>)
 80078e2:	f006 020f 	and.w	r2, r6, #15
 80078e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	ec51 0b19 	vmov	r0, r1, d9
 80078f2:	f7f8 fe81 	bl	80005f8 <__aeabi_dmul>
 80078f6:	1136      	asrs	r6, r6, #4
 80078f8:	4682      	mov	sl, r0
 80078fa:	468b      	mov	fp, r1
 80078fc:	2300      	movs	r3, #0
 80078fe:	2502      	movs	r5, #2
 8007900:	2e00      	cmp	r6, #0
 8007902:	d17a      	bne.n	80079fa <_dtoa_r+0x492>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1d3      	bne.n	80078b0 <_dtoa_r+0x348>
 8007908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8082 	beq.w	8007a14 <_dtoa_r+0x4ac>
 8007910:	4b91      	ldr	r3, [pc, #580]	; (8007b58 <_dtoa_r+0x5f0>)
 8007912:	2200      	movs	r2, #0
 8007914:	4650      	mov	r0, sl
 8007916:	4659      	mov	r1, fp
 8007918:	f7f9 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800791c:	2800      	cmp	r0, #0
 800791e:	d079      	beq.n	8007a14 <_dtoa_r+0x4ac>
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d076      	beq.n	8007a14 <_dtoa_r+0x4ac>
 8007926:	9b02      	ldr	r3, [sp, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd36      	ble.n	800799a <_dtoa_r+0x432>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	4650      	mov	r0, sl
 8007930:	4659      	mov	r1, fp
 8007932:	1e5f      	subs	r7, r3, #1
 8007934:	2200      	movs	r2, #0
 8007936:	4b89      	ldr	r3, [pc, #548]	; (8007b5c <_dtoa_r+0x5f4>)
 8007938:	f7f8 fe5e 	bl	80005f8 <__aeabi_dmul>
 800793c:	9e02      	ldr	r6, [sp, #8]
 800793e:	4682      	mov	sl, r0
 8007940:	468b      	mov	fp, r1
 8007942:	3501      	adds	r5, #1
 8007944:	4628      	mov	r0, r5
 8007946:	f7f8 fded 	bl	8000524 <__aeabi_i2d>
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	4b83      	ldr	r3, [pc, #524]	; (8007b60 <_dtoa_r+0x5f8>)
 8007954:	2200      	movs	r2, #0
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	46d0      	mov	r8, sl
 800795c:	46d9      	mov	r9, fp
 800795e:	4682      	mov	sl, r0
 8007960:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007964:	2e00      	cmp	r6, #0
 8007966:	d158      	bne.n	8007a1a <_dtoa_r+0x4b2>
 8007968:	4b7e      	ldr	r3, [pc, #504]	; (8007b64 <_dtoa_r+0x5fc>)
 800796a:	2200      	movs	r2, #0
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f8 fc8a 	bl	8000288 <__aeabi_dsub>
 8007974:	4652      	mov	r2, sl
 8007976:	465b      	mov	r3, fp
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f7f9 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8007980:	2800      	cmp	r0, #0
 8007982:	f040 8296 	bne.w	8007eb2 <_dtoa_r+0x94a>
 8007986:	4652      	mov	r2, sl
 8007988:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	f7f9 f8a4 	bl	8000adc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	f040 828a 	bne.w	8007eae <_dtoa_r+0x946>
 800799a:	ec5b ab19 	vmov	sl, fp, d9
 800799e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f2c0 8149 	blt.w	8007c38 <_dtoa_r+0x6d0>
 80079a6:	9a00      	ldr	r2, [sp, #0]
 80079a8:	2a0e      	cmp	r2, #14
 80079aa:	f300 8145 	bgt.w	8007c38 <_dtoa_r+0x6d0>
 80079ae:	4b68      	ldr	r3, [pc, #416]	; (8007b50 <_dtoa_r+0x5e8>)
 80079b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f280 80d6 	bge.w	8007b6c <_dtoa_r+0x604>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f300 80d2 	bgt.w	8007b6c <_dtoa_r+0x604>
 80079c8:	f040 8270 	bne.w	8007eac <_dtoa_r+0x944>
 80079cc:	4b65      	ldr	r3, [pc, #404]	; (8007b64 <_dtoa_r+0x5fc>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	4652      	mov	r2, sl
 80079da:	465b      	mov	r3, fp
 80079dc:	f7f9 f892 	bl	8000b04 <__aeabi_dcmpge>
 80079e0:	9e03      	ldr	r6, [sp, #12]
 80079e2:	4637      	mov	r7, r6
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f040 8246 	bne.w	8007e76 <_dtoa_r+0x90e>
 80079ea:	9d01      	ldr	r5, [sp, #4]
 80079ec:	2331      	movs	r3, #49	; 0x31
 80079ee:	f805 3b01 	strb.w	r3, [r5], #1
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	e241      	b.n	8007e7e <_dtoa_r+0x916>
 80079fa:	07f2      	lsls	r2, r6, #31
 80079fc:	d505      	bpl.n	8007a0a <_dtoa_r+0x4a2>
 80079fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	3501      	adds	r5, #1
 8007a08:	2301      	movs	r3, #1
 8007a0a:	1076      	asrs	r6, r6, #1
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	e777      	b.n	8007900 <_dtoa_r+0x398>
 8007a10:	2502      	movs	r5, #2
 8007a12:	e779      	b.n	8007908 <_dtoa_r+0x3a0>
 8007a14:	9f00      	ldr	r7, [sp, #0]
 8007a16:	9e03      	ldr	r6, [sp, #12]
 8007a18:	e794      	b.n	8007944 <_dtoa_r+0x3dc>
 8007a1a:	9901      	ldr	r1, [sp, #4]
 8007a1c:	4b4c      	ldr	r3, [pc, #304]	; (8007b50 <_dtoa_r+0x5e8>)
 8007a1e:	4431      	add	r1, r6
 8007a20:	910d      	str	r1, [sp, #52]	; 0x34
 8007a22:	9908      	ldr	r1, [sp, #32]
 8007a24:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d043      	beq.n	8007ab8 <_dtoa_r+0x550>
 8007a30:	494d      	ldr	r1, [pc, #308]	; (8007b68 <_dtoa_r+0x600>)
 8007a32:	2000      	movs	r0, #0
 8007a34:	f7f8 ff0a 	bl	800084c <__aeabi_ddiv>
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	f7f8 fc24 	bl	8000288 <__aeabi_dsub>
 8007a40:	9d01      	ldr	r5, [sp, #4]
 8007a42:	4682      	mov	sl, r0
 8007a44:	468b      	mov	fp, r1
 8007a46:	4649      	mov	r1, r9
 8007a48:	4640      	mov	r0, r8
 8007a4a:	f7f9 f885 	bl	8000b58 <__aeabi_d2iz>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	f7f8 fd68 	bl	8000524 <__aeabi_i2d>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f8 fc14 	bl	8000288 <__aeabi_dsub>
 8007a60:	3630      	adds	r6, #48	; 0x30
 8007a62:	f805 6b01 	strb.w	r6, [r5], #1
 8007a66:	4652      	mov	r2, sl
 8007a68:	465b      	mov	r3, fp
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	4689      	mov	r9, r1
 8007a6e:	f7f9 f835 	bl	8000adc <__aeabi_dcmplt>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d163      	bne.n	8007b3e <_dtoa_r+0x5d6>
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4937      	ldr	r1, [pc, #220]	; (8007b58 <_dtoa_r+0x5f0>)
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7f8 fc03 	bl	8000288 <__aeabi_dsub>
 8007a82:	4652      	mov	r2, sl
 8007a84:	465b      	mov	r3, fp
 8007a86:	f7f9 f829 	bl	8000adc <__aeabi_dcmplt>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f040 80b6 	bne.w	8007bfc <_dtoa_r+0x694>
 8007a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a92:	429d      	cmp	r5, r3
 8007a94:	d081      	beq.n	800799a <_dtoa_r+0x432>
 8007a96:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <_dtoa_r+0x5f4>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	4659      	mov	r1, fp
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	4b2e      	ldr	r3, [pc, #184]	; (8007b5c <_dtoa_r+0x5f4>)
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	468b      	mov	fp, r1
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	2200      	movs	r2, #0
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	e7c6      	b.n	8007a46 <_dtoa_r+0x4de>
 8007ab8:	4650      	mov	r0, sl
 8007aba:	4659      	mov	r1, fp
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac2:	9d01      	ldr	r5, [sp, #4]
 8007ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	468b      	mov	fp, r1
 8007aca:	4649      	mov	r1, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	f7f9 f843 	bl	8000b58 <__aeabi_d2iz>
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	f7f8 fd26 	bl	8000524 <__aeabi_i2d>
 8007ad8:	3630      	adds	r6, #48	; 0x30
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fbd1 	bl	8000288 <__aeabi_dsub>
 8007ae6:	f805 6b01 	strb.w	r6, [r5], #1
 8007aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aec:	429d      	cmp	r5, r3
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	d124      	bne.n	8007b42 <_dtoa_r+0x5da>
 8007af8:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <_dtoa_r+0x600>)
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	f7f8 fbc5 	bl	800028c <__adddf3>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4640      	mov	r0, r8
 8007b08:	4649      	mov	r1, r9
 8007b0a:	f7f9 f805 	bl	8000b18 <__aeabi_dcmpgt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d174      	bne.n	8007bfc <_dtoa_r+0x694>
 8007b12:	4652      	mov	r2, sl
 8007b14:	465b      	mov	r3, fp
 8007b16:	4914      	ldr	r1, [pc, #80]	; (8007b68 <_dtoa_r+0x600>)
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f7f8 fbb5 	bl	8000288 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 ffd9 	bl	8000adc <__aeabi_dcmplt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f43f af35 	beq.w	800799a <_dtoa_r+0x432>
 8007b30:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b32:	1e6b      	subs	r3, r5, #1
 8007b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b3a:	2b30      	cmp	r3, #48	; 0x30
 8007b3c:	d0f8      	beq.n	8007b30 <_dtoa_r+0x5c8>
 8007b3e:	9700      	str	r7, [sp, #0]
 8007b40:	e04a      	b.n	8007bd8 <_dtoa_r+0x670>
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <_dtoa_r+0x5f4>)
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4689      	mov	r9, r1
 8007b4c:	e7bd      	b.n	8007aca <_dtoa_r+0x562>
 8007b4e:	bf00      	nop
 8007b50:	0800ee28 	.word	0x0800ee28
 8007b54:	0800ee00 	.word	0x0800ee00
 8007b58:	3ff00000 	.word	0x3ff00000
 8007b5c:	40240000 	.word	0x40240000
 8007b60:	401c0000 	.word	0x401c0000
 8007b64:	40140000 	.word	0x40140000
 8007b68:	3fe00000 	.word	0x3fe00000
 8007b6c:	9d01      	ldr	r5, [sp, #4]
 8007b6e:	4656      	mov	r6, sl
 8007b70:	465f      	mov	r7, fp
 8007b72:	4642      	mov	r2, r8
 8007b74:	464b      	mov	r3, r9
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 fe67 	bl	800084c <__aeabi_ddiv>
 8007b7e:	f7f8 ffeb 	bl	8000b58 <__aeabi_d2iz>
 8007b82:	4682      	mov	sl, r0
 8007b84:	f7f8 fcce 	bl	8000524 <__aeabi_i2d>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f7f8 fd34 	bl	80005f8 <__aeabi_dmul>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b9c:	f7f8 fb74 	bl	8000288 <__aeabi_dsub>
 8007ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ba4:	9e01      	ldr	r6, [sp, #4]
 8007ba6:	9f03      	ldr	r7, [sp, #12]
 8007ba8:	1bae      	subs	r6, r5, r6
 8007baa:	42b7      	cmp	r7, r6
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	d135      	bne.n	8007c1e <_dtoa_r+0x6b6>
 8007bb2:	f7f8 fb6b 	bl	800028c <__adddf3>
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	464b      	mov	r3, r9
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	f7f8 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc2:	b9d0      	cbnz	r0, 8007bfa <_dtoa_r+0x692>
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd0:	b110      	cbz	r0, 8007bd8 <_dtoa_r+0x670>
 8007bd2:	f01a 0f01 	tst.w	sl, #1
 8007bd6:	d110      	bne.n	8007bfa <_dtoa_r+0x692>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	ee18 1a10 	vmov	r1, s16
 8007bde:	f000 fde0 	bl	80087a2 <_Bfree>
 8007be2:	2300      	movs	r3, #0
 8007be4:	9800      	ldr	r0, [sp, #0]
 8007be6:	702b      	strb	r3, [r5, #0]
 8007be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bea:	3001      	adds	r0, #1
 8007bec:	6018      	str	r0, [r3, #0]
 8007bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f43f acf2 	beq.w	80075da <_dtoa_r+0x72>
 8007bf6:	601d      	str	r5, [r3, #0]
 8007bf8:	e4ef      	b.n	80075da <_dtoa_r+0x72>
 8007bfa:	9f00      	ldr	r7, [sp, #0]
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	461d      	mov	r5, r3
 8007c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c04:	2a39      	cmp	r2, #57	; 0x39
 8007c06:	d106      	bne.n	8007c16 <_dtoa_r+0x6ae>
 8007c08:	9a01      	ldr	r2, [sp, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d1f7      	bne.n	8007bfe <_dtoa_r+0x696>
 8007c0e:	9901      	ldr	r1, [sp, #4]
 8007c10:	2230      	movs	r2, #48	; 0x30
 8007c12:	3701      	adds	r7, #1
 8007c14:	700a      	strb	r2, [r1, #0]
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	3201      	adds	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e78f      	b.n	8007b3e <_dtoa_r+0x5d6>
 8007c1e:	4ba6      	ldr	r3, [pc, #664]	; (8007eb8 <_dtoa_r+0x950>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	f7f8 fce9 	bl	80005f8 <__aeabi_dmul>
 8007c26:	2200      	movs	r2, #0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	f7f8 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d09d      	beq.n	8007b72 <_dtoa_r+0x60a>
 8007c36:	e7cf      	b.n	8007bd8 <_dtoa_r+0x670>
 8007c38:	9a08      	ldr	r2, [sp, #32]
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	f000 80d7 	beq.w	8007dee <_dtoa_r+0x886>
 8007c40:	9a06      	ldr	r2, [sp, #24]
 8007c42:	2a01      	cmp	r2, #1
 8007c44:	f300 80ba 	bgt.w	8007dbc <_dtoa_r+0x854>
 8007c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	f000 80b2 	beq.w	8007db4 <_dtoa_r+0x84c>
 8007c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c54:	9e07      	ldr	r6, [sp, #28]
 8007c56:	9d04      	ldr	r5, [sp, #16]
 8007c58:	9a04      	ldr	r2, [sp, #16]
 8007c5a:	441a      	add	r2, r3
 8007c5c:	9204      	str	r2, [sp, #16]
 8007c5e:	9a05      	ldr	r2, [sp, #20]
 8007c60:	2101      	movs	r1, #1
 8007c62:	441a      	add	r2, r3
 8007c64:	4620      	mov	r0, r4
 8007c66:	9205      	str	r2, [sp, #20]
 8007c68:	f000 fe3a 	bl	80088e0 <__i2b>
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	dd0c      	ble.n	8007c8c <_dtoa_r+0x724>
 8007c72:	9b05      	ldr	r3, [sp, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dd09      	ble.n	8007c8c <_dtoa_r+0x724>
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	9a04      	ldr	r2, [sp, #16]
 8007c7c:	bfa8      	it	ge
 8007c7e:	462b      	movge	r3, r5
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	9204      	str	r2, [sp, #16]
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	1aed      	subs	r5, r5, r3
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	9b07      	ldr	r3, [sp, #28]
 8007c8e:	b31b      	cbz	r3, 8007cd8 <_dtoa_r+0x770>
 8007c90:	9b08      	ldr	r3, [sp, #32]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 80af 	beq.w	8007df6 <_dtoa_r+0x88e>
 8007c98:	2e00      	cmp	r6, #0
 8007c9a:	dd13      	ble.n	8007cc4 <_dtoa_r+0x75c>
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fedd 	bl	8008a60 <__pow5mult>
 8007ca6:	ee18 2a10 	vmov	r2, s16
 8007caa:	4601      	mov	r1, r0
 8007cac:	4607      	mov	r7, r0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fe2c 	bl	800890c <__multiply>
 8007cb4:	ee18 1a10 	vmov	r1, s16
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 fd71 	bl	80087a2 <_Bfree>
 8007cc0:	ee08 8a10 	vmov	s16, r8
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	1b9a      	subs	r2, r3, r6
 8007cc8:	d006      	beq.n	8007cd8 <_dtoa_r+0x770>
 8007cca:	ee18 1a10 	vmov	r1, s16
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 fec6 	bl	8008a60 <__pow5mult>
 8007cd4:	ee08 0a10 	vmov	s16, r0
 8007cd8:	2101      	movs	r1, #1
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fe00 	bl	80088e0 <__i2b>
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	f340 8088 	ble.w	8007dfa <_dtoa_r+0x892>
 8007cea:	461a      	mov	r2, r3
 8007cec:	4601      	mov	r1, r0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 feb6 	bl	8008a60 <__pow5mult>
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	f340 8081 	ble.w	8007e00 <_dtoa_r+0x898>
 8007cfe:	f04f 0800 	mov.w	r8, #0
 8007d02:	6933      	ldr	r3, [r6, #16]
 8007d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d08:	6918      	ldr	r0, [r3, #16]
 8007d0a:	f000 fd99 	bl	8008840 <__hi0bits>
 8007d0e:	f1c0 0020 	rsb	r0, r0, #32
 8007d12:	9b05      	ldr	r3, [sp, #20]
 8007d14:	4418      	add	r0, r3
 8007d16:	f010 001f 	ands.w	r0, r0, #31
 8007d1a:	f000 8092 	beq.w	8007e42 <_dtoa_r+0x8da>
 8007d1e:	f1c0 0320 	rsb	r3, r0, #32
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	f340 808a 	ble.w	8007e3c <_dtoa_r+0x8d4>
 8007d28:	f1c0 001c 	rsb	r0, r0, #28
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	4403      	add	r3, r0
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	9b05      	ldr	r3, [sp, #20]
 8007d34:	4403      	add	r3, r0
 8007d36:	4405      	add	r5, r0
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	9b04      	ldr	r3, [sp, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd07      	ble.n	8007d50 <_dtoa_r+0x7e8>
 8007d40:	ee18 1a10 	vmov	r1, s16
 8007d44:	461a      	mov	r2, r3
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 feca 	bl	8008ae0 <__lshift>
 8007d4c:	ee08 0a10 	vmov	s16, r0
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dd05      	ble.n	8007d62 <_dtoa_r+0x7fa>
 8007d56:	4631      	mov	r1, r6
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fec0 	bl	8008ae0 <__lshift>
 8007d60:	4606      	mov	r6, r0
 8007d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d06e      	beq.n	8007e46 <_dtoa_r+0x8de>
 8007d68:	ee18 0a10 	vmov	r0, s16
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	f000 ff27 	bl	8008bc0 <__mcmp>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	da67      	bge.n	8007e46 <_dtoa_r+0x8de>
 8007d76:	9b00      	ldr	r3, [sp, #0]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	ee18 1a10 	vmov	r1, s16
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	220a      	movs	r2, #10
 8007d82:	2300      	movs	r3, #0
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 fd15 	bl	80087b4 <__multadd>
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	ee08 0a10 	vmov	s16, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 81b0 	beq.w	80080f6 <_dtoa_r+0xb8e>
 8007d96:	2300      	movs	r3, #0
 8007d98:	4639      	mov	r1, r7
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 fd09 	bl	80087b4 <__multadd>
 8007da2:	9b02      	ldr	r3, [sp, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	4607      	mov	r7, r0
 8007da8:	f300 808e 	bgt.w	8007ec8 <_dtoa_r+0x960>
 8007dac:	9b06      	ldr	r3, [sp, #24]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	dc51      	bgt.n	8007e56 <_dtoa_r+0x8ee>
 8007db2:	e089      	b.n	8007ec8 <_dtoa_r+0x960>
 8007db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dba:	e74b      	b.n	8007c54 <_dtoa_r+0x6ec>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1e5e      	subs	r6, r3, #1
 8007dc0:	9b07      	ldr	r3, [sp, #28]
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	bfbf      	itttt	lt
 8007dc6:	9b07      	ldrlt	r3, [sp, #28]
 8007dc8:	9607      	strlt	r6, [sp, #28]
 8007dca:	1af2      	sublt	r2, r6, r3
 8007dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dce:	bfb6      	itet	lt
 8007dd0:	189b      	addlt	r3, r3, r2
 8007dd2:	1b9e      	subge	r6, r3, r6
 8007dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	bfb8      	it	lt
 8007dda:	2600      	movlt	r6, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfb7      	itett	lt
 8007de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007de8:	1a9d      	sublt	r5, r3, r2
 8007dea:	2300      	movlt	r3, #0
 8007dec:	e734      	b.n	8007c58 <_dtoa_r+0x6f0>
 8007dee:	9e07      	ldr	r6, [sp, #28]
 8007df0:	9d04      	ldr	r5, [sp, #16]
 8007df2:	9f08      	ldr	r7, [sp, #32]
 8007df4:	e73b      	b.n	8007c6e <_dtoa_r+0x706>
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	e767      	b.n	8007cca <_dtoa_r+0x762>
 8007dfa:	9b06      	ldr	r3, [sp, #24]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	dc18      	bgt.n	8007e32 <_dtoa_r+0x8ca>
 8007e00:	f1ba 0f00 	cmp.w	sl, #0
 8007e04:	d115      	bne.n	8007e32 <_dtoa_r+0x8ca>
 8007e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e0a:	b993      	cbnz	r3, 8007e32 <_dtoa_r+0x8ca>
 8007e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e10:	0d1b      	lsrs	r3, r3, #20
 8007e12:	051b      	lsls	r3, r3, #20
 8007e14:	b183      	cbz	r3, 8007e38 <_dtoa_r+0x8d0>
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	9b05      	ldr	r3, [sp, #20]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	f04f 0801 	mov.w	r8, #1
 8007e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f47f af6a 	bne.w	8007d02 <_dtoa_r+0x79a>
 8007e2e:	2001      	movs	r0, #1
 8007e30:	e76f      	b.n	8007d12 <_dtoa_r+0x7aa>
 8007e32:	f04f 0800 	mov.w	r8, #0
 8007e36:	e7f6      	b.n	8007e26 <_dtoa_r+0x8be>
 8007e38:	4698      	mov	r8, r3
 8007e3a:	e7f4      	b.n	8007e26 <_dtoa_r+0x8be>
 8007e3c:	f43f af7d 	beq.w	8007d3a <_dtoa_r+0x7d2>
 8007e40:	4618      	mov	r0, r3
 8007e42:	301c      	adds	r0, #28
 8007e44:	e772      	b.n	8007d2c <_dtoa_r+0x7c4>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc37      	bgt.n	8007ebc <_dtoa_r+0x954>
 8007e4c:	9b06      	ldr	r3, [sp, #24]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	dd34      	ble.n	8007ebc <_dtoa_r+0x954>
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	9302      	str	r3, [sp, #8]
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	b96b      	cbnz	r3, 8007e76 <_dtoa_r+0x90e>
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 fca8 	bl	80087b4 <__multadd>
 8007e64:	4601      	mov	r1, r0
 8007e66:	4606      	mov	r6, r0
 8007e68:	ee18 0a10 	vmov	r0, s16
 8007e6c:	f000 fea8 	bl	8008bc0 <__mcmp>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f73f adba 	bgt.w	80079ea <_dtoa_r+0x482>
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	9d01      	ldr	r5, [sp, #4]
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	4631      	mov	r1, r6
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fc8c 	bl	80087a2 <_Bfree>
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	f43f aea4 	beq.w	8007bd8 <_dtoa_r+0x670>
 8007e90:	f1b8 0f00 	cmp.w	r8, #0
 8007e94:	d005      	beq.n	8007ea2 <_dtoa_r+0x93a>
 8007e96:	45b8      	cmp	r8, r7
 8007e98:	d003      	beq.n	8007ea2 <_dtoa_r+0x93a>
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fc80 	bl	80087a2 <_Bfree>
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fc7c 	bl	80087a2 <_Bfree>
 8007eaa:	e695      	b.n	8007bd8 <_dtoa_r+0x670>
 8007eac:	2600      	movs	r6, #0
 8007eae:	4637      	mov	r7, r6
 8007eb0:	e7e1      	b.n	8007e76 <_dtoa_r+0x90e>
 8007eb2:	9700      	str	r7, [sp, #0]
 8007eb4:	4637      	mov	r7, r6
 8007eb6:	e598      	b.n	80079ea <_dtoa_r+0x482>
 8007eb8:	40240000 	.word	0x40240000
 8007ebc:	9b08      	ldr	r3, [sp, #32]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80c9 	beq.w	8008056 <_dtoa_r+0xaee>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	9302      	str	r3, [sp, #8]
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	dd05      	ble.n	8007ed8 <_dtoa_r+0x970>
 8007ecc:	4639      	mov	r1, r7
 8007ece:	462a      	mov	r2, r5
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fe05 	bl	8008ae0 <__lshift>
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	f1b8 0f00 	cmp.w	r8, #0
 8007edc:	d05a      	beq.n	8007f94 <_dtoa_r+0xa2c>
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fc39 	bl	8008758 <_Balloc>
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b920      	cbnz	r0, 8007ef4 <_dtoa_r+0x98c>
 8007eea:	4b87      	ldr	r3, [pc, #540]	; (8008108 <_dtoa_r+0xba0>)
 8007eec:	4602      	mov	r2, r0
 8007eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ef2:	e477      	b.n	80077e4 <_dtoa_r+0x27c>
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	3202      	adds	r2, #2
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	f107 010c 	add.w	r1, r7, #12
 8007efe:	300c      	adds	r0, #12
 8007f00:	f7fd fe5c 	bl	8005bbc <memcpy>
 8007f04:	2201      	movs	r2, #1
 8007f06:	4629      	mov	r1, r5
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fde9 	bl	8008ae0 <__lshift>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	f103 0901 	add.w	r9, r3, #1
 8007f14:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	f00a 0301 	and.w	r3, sl, #1
 8007f20:	46b8      	mov	r8, r7
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	4607      	mov	r7, r0
 8007f26:	4631      	mov	r1, r6
 8007f28:	ee18 0a10 	vmov	r0, s16
 8007f2c:	f7ff fa8e 	bl	800744c <quorem>
 8007f30:	4641      	mov	r1, r8
 8007f32:	9002      	str	r0, [sp, #8]
 8007f34:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f38:	ee18 0a10 	vmov	r0, s16
 8007f3c:	f000 fe40 	bl	8008bc0 <__mcmp>
 8007f40:	463a      	mov	r2, r7
 8007f42:	9003      	str	r0, [sp, #12]
 8007f44:	4631      	mov	r1, r6
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 fe56 	bl	8008bf8 <__mdiff>
 8007f4c:	68c2      	ldr	r2, [r0, #12]
 8007f4e:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007f52:	4605      	mov	r5, r0
 8007f54:	bb02      	cbnz	r2, 8007f98 <_dtoa_r+0xa30>
 8007f56:	4601      	mov	r1, r0
 8007f58:	ee18 0a10 	vmov	r0, s16
 8007f5c:	f000 fe30 	bl	8008bc0 <__mcmp>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4629      	mov	r1, r5
 8007f64:	4620      	mov	r0, r4
 8007f66:	9207      	str	r2, [sp, #28]
 8007f68:	f000 fc1b 	bl	80087a2 <_Bfree>
 8007f6c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f70:	ea43 0102 	orr.w	r1, r3, r2
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	464d      	mov	r5, r9
 8007f7a:	d10f      	bne.n	8007f9c <_dtoa_r+0xa34>
 8007f7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f80:	d02a      	beq.n	8007fd8 <_dtoa_r+0xa70>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd02      	ble.n	8007f8e <_dtoa_r+0xa26>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f8e:	f88b a000 	strb.w	sl, [fp]
 8007f92:	e776      	b.n	8007e82 <_dtoa_r+0x91a>
 8007f94:	4638      	mov	r0, r7
 8007f96:	e7ba      	b.n	8007f0e <_dtoa_r+0x9a6>
 8007f98:	2201      	movs	r2, #1
 8007f9a:	e7e2      	b.n	8007f62 <_dtoa_r+0x9fa>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	db04      	blt.n	8007fac <_dtoa_r+0xa44>
 8007fa2:	9906      	ldr	r1, [sp, #24]
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	9904      	ldr	r1, [sp, #16]
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	d122      	bne.n	8007ff2 <_dtoa_r+0xa8a>
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	ddee      	ble.n	8007f8e <_dtoa_r+0xa26>
 8007fb0:	ee18 1a10 	vmov	r1, s16
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fd92 	bl	8008ae0 <__lshift>
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	ee08 0a10 	vmov	s16, r0
 8007fc2:	f000 fdfd 	bl	8008bc0 <__mcmp>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dc03      	bgt.n	8007fd2 <_dtoa_r+0xa6a>
 8007fca:	d1e0      	bne.n	8007f8e <_dtoa_r+0xa26>
 8007fcc:	f01a 0f01 	tst.w	sl, #1
 8007fd0:	d0dd      	beq.n	8007f8e <_dtoa_r+0xa26>
 8007fd2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fd6:	d1d7      	bne.n	8007f88 <_dtoa_r+0xa20>
 8007fd8:	2339      	movs	r3, #57	; 0x39
 8007fda:	f88b 3000 	strb.w	r3, [fp]
 8007fde:	462b      	mov	r3, r5
 8007fe0:	461d      	mov	r5, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fe8:	2a39      	cmp	r2, #57	; 0x39
 8007fea:	d071      	beq.n	80080d0 <_dtoa_r+0xb68>
 8007fec:	3201      	adds	r2, #1
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e747      	b.n	8007e82 <_dtoa_r+0x91a>
 8007ff2:	2a00      	cmp	r2, #0
 8007ff4:	dd07      	ble.n	8008006 <_dtoa_r+0xa9e>
 8007ff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ffa:	d0ed      	beq.n	8007fd8 <_dtoa_r+0xa70>
 8007ffc:	f10a 0301 	add.w	r3, sl, #1
 8008000:	f88b 3000 	strb.w	r3, [fp]
 8008004:	e73d      	b.n	8007e82 <_dtoa_r+0x91a>
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	f809 ac01 	strb.w	sl, [r9, #-1]
 800800c:	4599      	cmp	r9, r3
 800800e:	d047      	beq.n	80080a0 <_dtoa_r+0xb38>
 8008010:	ee18 1a10 	vmov	r1, s16
 8008014:	2300      	movs	r3, #0
 8008016:	220a      	movs	r2, #10
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fbcb 	bl	80087b4 <__multadd>
 800801e:	45b8      	cmp	r8, r7
 8008020:	ee08 0a10 	vmov	s16, r0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	f04f 020a 	mov.w	r2, #10
 800802c:	4641      	mov	r1, r8
 800802e:	4620      	mov	r0, r4
 8008030:	d106      	bne.n	8008040 <_dtoa_r+0xad8>
 8008032:	f000 fbbf 	bl	80087b4 <__multadd>
 8008036:	4680      	mov	r8, r0
 8008038:	4607      	mov	r7, r0
 800803a:	f109 0901 	add.w	r9, r9, #1
 800803e:	e772      	b.n	8007f26 <_dtoa_r+0x9be>
 8008040:	f000 fbb8 	bl	80087b4 <__multadd>
 8008044:	4639      	mov	r1, r7
 8008046:	4680      	mov	r8, r0
 8008048:	2300      	movs	r3, #0
 800804a:	220a      	movs	r2, #10
 800804c:	4620      	mov	r0, r4
 800804e:	f000 fbb1 	bl	80087b4 <__multadd>
 8008052:	4607      	mov	r7, r0
 8008054:	e7f1      	b.n	800803a <_dtoa_r+0xad2>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	9d01      	ldr	r5, [sp, #4]
 800805c:	ee18 0a10 	vmov	r0, s16
 8008060:	4631      	mov	r1, r6
 8008062:	f7ff f9f3 	bl	800744c <quorem>
 8008066:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	f805 ab01 	strb.w	sl, [r5], #1
 8008070:	1aea      	subs	r2, r5, r3
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	4293      	cmp	r3, r2
 8008076:	dd09      	ble.n	800808c <_dtoa_r+0xb24>
 8008078:	ee18 1a10 	vmov	r1, s16
 800807c:	2300      	movs	r3, #0
 800807e:	220a      	movs	r2, #10
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fb97 	bl	80087b4 <__multadd>
 8008086:	ee08 0a10 	vmov	s16, r0
 800808a:	e7e7      	b.n	800805c <_dtoa_r+0xaf4>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	bfc8      	it	gt
 8008092:	461d      	movgt	r5, r3
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	bfd8      	it	le
 8008098:	2501      	movle	r5, #1
 800809a:	441d      	add	r5, r3
 800809c:	f04f 0800 	mov.w	r8, #0
 80080a0:	ee18 1a10 	vmov	r1, s16
 80080a4:	2201      	movs	r2, #1
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fd1a 	bl	8008ae0 <__lshift>
 80080ac:	4631      	mov	r1, r6
 80080ae:	ee08 0a10 	vmov	s16, r0
 80080b2:	f000 fd85 	bl	8008bc0 <__mcmp>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	dc91      	bgt.n	8007fde <_dtoa_r+0xa76>
 80080ba:	d102      	bne.n	80080c2 <_dtoa_r+0xb5a>
 80080bc:	f01a 0f01 	tst.w	sl, #1
 80080c0:	d18d      	bne.n	8007fde <_dtoa_r+0xa76>
 80080c2:	462b      	mov	r3, r5
 80080c4:	461d      	mov	r5, r3
 80080c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ca:	2a30      	cmp	r2, #48	; 0x30
 80080cc:	d0fa      	beq.n	80080c4 <_dtoa_r+0xb5c>
 80080ce:	e6d8      	b.n	8007e82 <_dtoa_r+0x91a>
 80080d0:	9a01      	ldr	r2, [sp, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d184      	bne.n	8007fe0 <_dtoa_r+0xa78>
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2331      	movs	r3, #49	; 0x31
 80080de:	7013      	strb	r3, [r2, #0]
 80080e0:	e6cf      	b.n	8007e82 <_dtoa_r+0x91a>
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <_dtoa_r+0xba4>)
 80080e4:	f7ff ba97 	b.w	8007616 <_dtoa_r+0xae>
 80080e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f47f aa7b 	bne.w	80075e6 <_dtoa_r+0x7e>
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <_dtoa_r+0xba8>)
 80080f2:	f7ff ba90 	b.w	8007616 <_dtoa_r+0xae>
 80080f6:	9b02      	ldr	r3, [sp, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dcae      	bgt.n	800805a <_dtoa_r+0xaf2>
 80080fc:	9b06      	ldr	r3, [sp, #24]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	f73f aea9 	bgt.w	8007e56 <_dtoa_r+0x8ee>
 8008104:	e7a9      	b.n	800805a <_dtoa_r+0xaf2>
 8008106:	bf00      	nop
 8008108:	0800ed35 	.word	0x0800ed35
 800810c:	0800ed06 	.word	0x0800ed06
 8008110:	0800ed2c 	.word	0x0800ed2c

08008114 <std>:
 8008114:	2300      	movs	r3, #0
 8008116:	b510      	push	{r4, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	e9c0 3300 	strd	r3, r3, [r0]
 800811e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008122:	6083      	str	r3, [r0, #8]
 8008124:	8181      	strh	r1, [r0, #12]
 8008126:	6643      	str	r3, [r0, #100]	; 0x64
 8008128:	81c2      	strh	r2, [r0, #14]
 800812a:	6183      	str	r3, [r0, #24]
 800812c:	4619      	mov	r1, r3
 800812e:	2208      	movs	r2, #8
 8008130:	305c      	adds	r0, #92	; 0x5c
 8008132:	f7fd fd51 	bl	8005bd8 <memset>
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <std+0x40>)
 8008138:	6223      	str	r3, [r4, #32]
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <std+0x44>)
 800813c:	6263      	str	r3, [r4, #36]	; 0x24
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <std+0x48>)
 8008140:	62a3      	str	r3, [r4, #40]	; 0x28
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <std+0x4c>)
 8008144:	61e4      	str	r4, [r4, #28]
 8008146:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008148:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f000 bae4 	b.w	800871c <__retarget_lock_init_recursive>
 8008154:	08008e35 	.word	0x08008e35
 8008158:	08008e57 	.word	0x08008e57
 800815c:	08008e8f 	.word	0x08008e8f
 8008160:	08008eb3 	.word	0x08008eb3

08008164 <_cleanup_r>:
 8008164:	4901      	ldr	r1, [pc, #4]	; (800816c <_cleanup_r+0x8>)
 8008166:	f000 bab5 	b.w	80086d4 <_fwalk_reent>
 800816a:	bf00      	nop
 800816c:	080091f9 	.word	0x080091f9

08008170 <__sfp_lock_acquire>:
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <__sfp_lock_acquire+0x8>)
 8008172:	f000 bad5 	b.w	8008720 <__retarget_lock_acquire_recursive>
 8008176:	bf00      	nop
 8008178:	200015ae 	.word	0x200015ae

0800817c <__sfp_lock_release>:
 800817c:	4801      	ldr	r0, [pc, #4]	; (8008184 <__sfp_lock_release+0x8>)
 800817e:	f000 bad0 	b.w	8008722 <__retarget_lock_release_recursive>
 8008182:	bf00      	nop
 8008184:	200015ae 	.word	0x200015ae

08008188 <__sinit_lock_acquire>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__sinit_lock_acquire+0x8>)
 800818a:	f000 bac9 	b.w	8008720 <__retarget_lock_acquire_recursive>
 800818e:	bf00      	nop
 8008190:	200015af 	.word	0x200015af

08008194 <__sinit_lock_release>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__sinit_lock_release+0x8>)
 8008196:	f000 bac4 	b.w	8008722 <__retarget_lock_release_recursive>
 800819a:	bf00      	nop
 800819c:	200015af 	.word	0x200015af

080081a0 <__sinit>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4604      	mov	r4, r0
 80081a4:	f7ff fff0 	bl	8008188 <__sinit_lock_acquire>
 80081a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80081aa:	b11a      	cbz	r2, 80081b4 <__sinit+0x14>
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b0:	f7ff bff0 	b.w	8008194 <__sinit_lock_release>
 80081b4:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <__sinit+0x4c>)
 80081b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80081b8:	2303      	movs	r3, #3
 80081ba:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80081be:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80081c2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80081c6:	6860      	ldr	r0, [r4, #4]
 80081c8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80081cc:	2104      	movs	r1, #4
 80081ce:	f7ff ffa1 	bl	8008114 <std>
 80081d2:	68a0      	ldr	r0, [r4, #8]
 80081d4:	2201      	movs	r2, #1
 80081d6:	2109      	movs	r1, #9
 80081d8:	f7ff ff9c 	bl	8008114 <std>
 80081dc:	68e0      	ldr	r0, [r4, #12]
 80081de:	2202      	movs	r2, #2
 80081e0:	2112      	movs	r1, #18
 80081e2:	f7ff ff97 	bl	8008114 <std>
 80081e6:	2301      	movs	r3, #1
 80081e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80081ea:	e7df      	b.n	80081ac <__sinit+0xc>
 80081ec:	08008165 	.word	0x08008165

080081f0 <__libc_fini_array>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <__libc_fini_array+0x20>)
 80081f4:	4c07      	ldr	r4, [pc, #28]	; (8008214 <__libc_fini_array+0x24>)
 80081f6:	1b64      	subs	r4, r4, r5
 80081f8:	10a4      	asrs	r4, r4, #2
 80081fa:	b91c      	cbnz	r4, 8008204 <__libc_fini_array+0x14>
 80081fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008200:	f002 b858 	b.w	800a2b4 <_fini>
 8008204:	3c01      	subs	r4, #1
 8008206:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800820a:	4798      	blx	r3
 800820c:	e7f5      	b.n	80081fa <__libc_fini_array+0xa>
 800820e:	bf00      	nop
 8008210:	0800f074 	.word	0x0800f074
 8008214:	0800f078 	.word	0x0800f078

08008218 <_malloc_trim_r>:
 8008218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	4606      	mov	r6, r0
 800821e:	2008      	movs	r0, #8
 8008220:	460c      	mov	r4, r1
 8008222:	f7ff f8f5 	bl	8007410 <sysconf>
 8008226:	4f23      	ldr	r7, [pc, #140]	; (80082b4 <_malloc_trim_r+0x9c>)
 8008228:	4680      	mov	r8, r0
 800822a:	4630      	mov	r0, r6
 800822c:	f7fd fcdc 	bl	8005be8 <__malloc_lock>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	685d      	ldr	r5, [r3, #4]
 8008234:	f025 0503 	bic.w	r5, r5, #3
 8008238:	1b2c      	subs	r4, r5, r4
 800823a:	3c11      	subs	r4, #17
 800823c:	4444      	add	r4, r8
 800823e:	fbb4 f4f8 	udiv	r4, r4, r8
 8008242:	3c01      	subs	r4, #1
 8008244:	fb08 f404 	mul.w	r4, r8, r4
 8008248:	45a0      	cmp	r8, r4
 800824a:	dd05      	ble.n	8008258 <_malloc_trim_r+0x40>
 800824c:	4630      	mov	r0, r6
 800824e:	f7fd fcd1 	bl	8005bf4 <__malloc_unlock>
 8008252:	2000      	movs	r0, #0
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	2100      	movs	r1, #0
 800825a:	4630      	mov	r0, r6
 800825c:	f7fd fec2 	bl	8005fe4 <_sbrk_r>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	442b      	add	r3, r5
 8008264:	4298      	cmp	r0, r3
 8008266:	d1f1      	bne.n	800824c <_malloc_trim_r+0x34>
 8008268:	4261      	negs	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f7fd feba 	bl	8005fe4 <_sbrk_r>
 8008270:	3001      	adds	r0, #1
 8008272:	d110      	bne.n	8008296 <_malloc_trim_r+0x7e>
 8008274:	2100      	movs	r1, #0
 8008276:	4630      	mov	r0, r6
 8008278:	f7fd feb4 	bl	8005fe4 <_sbrk_r>
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	1a83      	subs	r3, r0, r2
 8008280:	2b0f      	cmp	r3, #15
 8008282:	dde3      	ble.n	800824c <_malloc_trim_r+0x34>
 8008284:	490c      	ldr	r1, [pc, #48]	; (80082b8 <_malloc_trim_r+0xa0>)
 8008286:	6809      	ldr	r1, [r1, #0]
 8008288:	1a40      	subs	r0, r0, r1
 800828a:	490c      	ldr	r1, [pc, #48]	; (80082bc <_malloc_trim_r+0xa4>)
 800828c:	f043 0301 	orr.w	r3, r3, #1
 8008290:	6008      	str	r0, [r1, #0]
 8008292:	6053      	str	r3, [r2, #4]
 8008294:	e7da      	b.n	800824c <_malloc_trim_r+0x34>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4a08      	ldr	r2, [pc, #32]	; (80082bc <_malloc_trim_r+0xa4>)
 800829a:	1b2d      	subs	r5, r5, r4
 800829c:	f045 0501 	orr.w	r5, r5, #1
 80082a0:	605d      	str	r5, [r3, #4]
 80082a2:	6813      	ldr	r3, [r2, #0]
 80082a4:	4630      	mov	r0, r6
 80082a6:	1b1b      	subs	r3, r3, r4
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	f7fd fca3 	bl	8005bf4 <__malloc_unlock>
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7d0      	b.n	8008254 <_malloc_trim_r+0x3c>
 80082b2:	bf00      	nop
 80082b4:	20000b68 	.word	0x20000b68
 80082b8:	20000f70 	.word	0x20000f70
 80082bc:	20001578 	.word	0x20001578

080082c0 <_free_r>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	4605      	mov	r5, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	2900      	cmp	r1, #0
 80082c8:	f000 80b1 	beq.w	800842e <_free_r+0x16e>
 80082cc:	f7fd fc8c 	bl	8005be8 <__malloc_lock>
 80082d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80082d4:	4856      	ldr	r0, [pc, #344]	; (8008430 <_free_r+0x170>)
 80082d6:	f022 0401 	bic.w	r4, r2, #1
 80082da:	f1a7 0308 	sub.w	r3, r7, #8
 80082de:	eb03 0c04 	add.w	ip, r3, r4
 80082e2:	6881      	ldr	r1, [r0, #8]
 80082e4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80082e8:	4561      	cmp	r1, ip
 80082ea:	f026 0603 	bic.w	r6, r6, #3
 80082ee:	f002 0201 	and.w	r2, r2, #1
 80082f2:	d11b      	bne.n	800832c <_free_r+0x6c>
 80082f4:	4434      	add	r4, r6
 80082f6:	b93a      	cbnz	r2, 8008308 <_free_r+0x48>
 80082f8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	4414      	add	r4, r2
 8008300:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008304:	60ca      	str	r2, [r1, #12]
 8008306:	6091      	str	r1, [r2, #8]
 8008308:	f044 0201 	orr.w	r2, r4, #1
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	6083      	str	r3, [r0, #8]
 8008310:	4b48      	ldr	r3, [pc, #288]	; (8008434 <_free_r+0x174>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	42a3      	cmp	r3, r4
 8008316:	d804      	bhi.n	8008322 <_free_r+0x62>
 8008318:	4b47      	ldr	r3, [pc, #284]	; (8008438 <_free_r+0x178>)
 800831a:	4628      	mov	r0, r5
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	f7ff ff7b 	bl	8008218 <_malloc_trim_r>
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008328:	f7fd bc64 	b.w	8005bf4 <__malloc_unlock>
 800832c:	f8cc 6004 	str.w	r6, [ip, #4]
 8008330:	2a00      	cmp	r2, #0
 8008332:	d138      	bne.n	80083a6 <_free_r+0xe6>
 8008334:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008338:	1a5b      	subs	r3, r3, r1
 800833a:	440c      	add	r4, r1
 800833c:	6899      	ldr	r1, [r3, #8]
 800833e:	f100 0708 	add.w	r7, r0, #8
 8008342:	42b9      	cmp	r1, r7
 8008344:	d031      	beq.n	80083aa <_free_r+0xea>
 8008346:	68df      	ldr	r7, [r3, #12]
 8008348:	60cf      	str	r7, [r1, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	eb0c 0106 	add.w	r1, ip, r6
 8008350:	6849      	ldr	r1, [r1, #4]
 8008352:	07c9      	lsls	r1, r1, #31
 8008354:	d40b      	bmi.n	800836e <_free_r+0xae>
 8008356:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800835a:	4434      	add	r4, r6
 800835c:	bb3a      	cbnz	r2, 80083ae <_free_r+0xee>
 800835e:	4e37      	ldr	r6, [pc, #220]	; (800843c <_free_r+0x17c>)
 8008360:	42b1      	cmp	r1, r6
 8008362:	d124      	bne.n	80083ae <_free_r+0xee>
 8008364:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008368:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800836c:	2201      	movs	r2, #1
 800836e:	f044 0101 	orr.w	r1, r4, #1
 8008372:	6059      	str	r1, [r3, #4]
 8008374:	511c      	str	r4, [r3, r4]
 8008376:	2a00      	cmp	r2, #0
 8008378:	d1d3      	bne.n	8008322 <_free_r+0x62>
 800837a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800837e:	d21b      	bcs.n	80083b8 <_free_r+0xf8>
 8008380:	0961      	lsrs	r1, r4, #5
 8008382:	08e2      	lsrs	r2, r4, #3
 8008384:	2401      	movs	r4, #1
 8008386:	408c      	lsls	r4, r1
 8008388:	6841      	ldr	r1, [r0, #4]
 800838a:	3201      	adds	r2, #1
 800838c:	430c      	orrs	r4, r1
 800838e:	6044      	str	r4, [r0, #4]
 8008390:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008394:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008398:	3908      	subs	r1, #8
 800839a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800839e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80083a2:	60e3      	str	r3, [r4, #12]
 80083a4:	e7bd      	b.n	8008322 <_free_r+0x62>
 80083a6:	2200      	movs	r2, #0
 80083a8:	e7d0      	b.n	800834c <_free_r+0x8c>
 80083aa:	2201      	movs	r2, #1
 80083ac:	e7ce      	b.n	800834c <_free_r+0x8c>
 80083ae:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80083b2:	60ce      	str	r6, [r1, #12]
 80083b4:	60b1      	str	r1, [r6, #8]
 80083b6:	e7da      	b.n	800836e <_free_r+0xae>
 80083b8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80083bc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80083c0:	d214      	bcs.n	80083ec <_free_r+0x12c>
 80083c2:	09a2      	lsrs	r2, r4, #6
 80083c4:	3238      	adds	r2, #56	; 0x38
 80083c6:	1c51      	adds	r1, r2, #1
 80083c8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80083cc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80083d0:	428e      	cmp	r6, r1
 80083d2:	d125      	bne.n	8008420 <_free_r+0x160>
 80083d4:	2401      	movs	r4, #1
 80083d6:	1092      	asrs	r2, r2, #2
 80083d8:	fa04 f202 	lsl.w	r2, r4, r2
 80083dc:	6844      	ldr	r4, [r0, #4]
 80083de:	4322      	orrs	r2, r4
 80083e0:	6042      	str	r2, [r0, #4]
 80083e2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80083e6:	60b3      	str	r3, [r6, #8]
 80083e8:	60cb      	str	r3, [r1, #12]
 80083ea:	e79a      	b.n	8008322 <_free_r+0x62>
 80083ec:	2a14      	cmp	r2, #20
 80083ee:	d801      	bhi.n	80083f4 <_free_r+0x134>
 80083f0:	325b      	adds	r2, #91	; 0x5b
 80083f2:	e7e8      	b.n	80083c6 <_free_r+0x106>
 80083f4:	2a54      	cmp	r2, #84	; 0x54
 80083f6:	d802      	bhi.n	80083fe <_free_r+0x13e>
 80083f8:	0b22      	lsrs	r2, r4, #12
 80083fa:	326e      	adds	r2, #110	; 0x6e
 80083fc:	e7e3      	b.n	80083c6 <_free_r+0x106>
 80083fe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008402:	d802      	bhi.n	800840a <_free_r+0x14a>
 8008404:	0be2      	lsrs	r2, r4, #15
 8008406:	3277      	adds	r2, #119	; 0x77
 8008408:	e7dd      	b.n	80083c6 <_free_r+0x106>
 800840a:	f240 5154 	movw	r1, #1364	; 0x554
 800840e:	428a      	cmp	r2, r1
 8008410:	bf9a      	itte	ls
 8008412:	0ca2      	lsrls	r2, r4, #18
 8008414:	327c      	addls	r2, #124	; 0x7c
 8008416:	227e      	movhi	r2, #126	; 0x7e
 8008418:	e7d5      	b.n	80083c6 <_free_r+0x106>
 800841a:	6889      	ldr	r1, [r1, #8]
 800841c:	428e      	cmp	r6, r1
 800841e:	d004      	beq.n	800842a <_free_r+0x16a>
 8008420:	684a      	ldr	r2, [r1, #4]
 8008422:	f022 0203 	bic.w	r2, r2, #3
 8008426:	42a2      	cmp	r2, r4
 8008428:	d8f7      	bhi.n	800841a <_free_r+0x15a>
 800842a:	68ce      	ldr	r6, [r1, #12]
 800842c:	e7d9      	b.n	80083e2 <_free_r+0x122>
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	20000b68 	.word	0x20000b68
 8008434:	20000f74 	.word	0x20000f74
 8008438:	200015a8 	.word	0x200015a8
 800843c:	20000b70 	.word	0x20000b70

08008440 <__sfvwrite_r>:
 8008440:	6893      	ldr	r3, [r2, #8]
 8008442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	4606      	mov	r6, r0
 8008448:	460c      	mov	r4, r1
 800844a:	4690      	mov	r8, r2
 800844c:	b91b      	cbnz	r3, 8008456 <__sfvwrite_r+0x16>
 800844e:	2000      	movs	r0, #0
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	898b      	ldrh	r3, [r1, #12]
 8008458:	0718      	lsls	r0, r3, #28
 800845a:	d550      	bpl.n	80084fe <__sfvwrite_r+0xbe>
 800845c:	690b      	ldr	r3, [r1, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d04d      	beq.n	80084fe <__sfvwrite_r+0xbe>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f8d8 7000 	ldr.w	r7, [r8]
 8008468:	f013 0902 	ands.w	r9, r3, #2
 800846c:	d16c      	bne.n	8008548 <__sfvwrite_r+0x108>
 800846e:	f013 0301 	ands.w	r3, r3, #1
 8008472:	f000 809c 	beq.w	80085ae <__sfvwrite_r+0x16e>
 8008476:	4648      	mov	r0, r9
 8008478:	46ca      	mov	sl, r9
 800847a:	46cb      	mov	fp, r9
 800847c:	f1bb 0f00 	cmp.w	fp, #0
 8008480:	f000 8103 	beq.w	800868a <__sfvwrite_r+0x24a>
 8008484:	b950      	cbnz	r0, 800849c <__sfvwrite_r+0x5c>
 8008486:	465a      	mov	r2, fp
 8008488:	210a      	movs	r1, #10
 800848a:	4650      	mov	r0, sl
 800848c:	f7f7 fea8 	bl	80001e0 <memchr>
 8008490:	2800      	cmp	r0, #0
 8008492:	f000 80ff 	beq.w	8008694 <__sfvwrite_r+0x254>
 8008496:	3001      	adds	r0, #1
 8008498:	eba0 090a 	sub.w	r9, r0, sl
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	6921      	ldr	r1, [r4, #16]
 80084a0:	6963      	ldr	r3, [r4, #20]
 80084a2:	45d9      	cmp	r9, fp
 80084a4:	464a      	mov	r2, r9
 80084a6:	bf28      	it	cs
 80084a8:	465a      	movcs	r2, fp
 80084aa:	4288      	cmp	r0, r1
 80084ac:	f240 80f5 	bls.w	800869a <__sfvwrite_r+0x25a>
 80084b0:	68a5      	ldr	r5, [r4, #8]
 80084b2:	441d      	add	r5, r3
 80084b4:	42aa      	cmp	r2, r5
 80084b6:	f340 80f0 	ble.w	800869a <__sfvwrite_r+0x25a>
 80084ba:	4651      	mov	r1, sl
 80084bc:	462a      	mov	r2, r5
 80084be:	f000 f931 	bl	8008724 <memmove>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	442b      	add	r3, r5
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	4621      	mov	r1, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 ff7a 	bl	80093c4 <_fflush_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d167      	bne.n	80085a4 <__sfvwrite_r+0x164>
 80084d4:	ebb9 0905 	subs.w	r9, r9, r5
 80084d8:	f040 80f7 	bne.w	80086ca <__sfvwrite_r+0x28a>
 80084dc:	4621      	mov	r1, r4
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 ff70 	bl	80093c4 <_fflush_r>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d15d      	bne.n	80085a4 <__sfvwrite_r+0x164>
 80084e8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80084ec:	44aa      	add	sl, r5
 80084ee:	ebab 0b05 	sub.w	fp, fp, r5
 80084f2:	1b55      	subs	r5, r2, r5
 80084f4:	f8c8 5008 	str.w	r5, [r8, #8]
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	d1bf      	bne.n	800847c <__sfvwrite_r+0x3c>
 80084fc:	e7a7      	b.n	800844e <__sfvwrite_r+0xe>
 80084fe:	4621      	mov	r1, r4
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fd7b 	bl	8008ffc <__swsetup_r>
 8008506:	2800      	cmp	r0, #0
 8008508:	d0ab      	beq.n	8008462 <__sfvwrite_r+0x22>
 800850a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850e:	e79f      	b.n	8008450 <__sfvwrite_r+0x10>
 8008510:	e9d7 b900 	ldrd	fp, r9, [r7]
 8008514:	3708      	adds	r7, #8
 8008516:	f1b9 0f00 	cmp.w	r9, #0
 800851a:	d0f9      	beq.n	8008510 <__sfvwrite_r+0xd0>
 800851c:	45d1      	cmp	r9, sl
 800851e:	464b      	mov	r3, r9
 8008520:	69e1      	ldr	r1, [r4, #28]
 8008522:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008524:	bf28      	it	cs
 8008526:	4653      	movcs	r3, sl
 8008528:	465a      	mov	r2, fp
 800852a:	4630      	mov	r0, r6
 800852c:	47a8      	blx	r5
 800852e:	2800      	cmp	r0, #0
 8008530:	dd38      	ble.n	80085a4 <__sfvwrite_r+0x164>
 8008532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008536:	4483      	add	fp, r0
 8008538:	eba9 0900 	sub.w	r9, r9, r0
 800853c:	1a18      	subs	r0, r3, r0
 800853e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008542:	2800      	cmp	r0, #0
 8008544:	d1e7      	bne.n	8008516 <__sfvwrite_r+0xd6>
 8008546:	e782      	b.n	800844e <__sfvwrite_r+0xe>
 8008548:	f04f 0b00 	mov.w	fp, #0
 800854c:	f8df a180 	ldr.w	sl, [pc, #384]	; 80086d0 <__sfvwrite_r+0x290>
 8008550:	46d9      	mov	r9, fp
 8008552:	e7e0      	b.n	8008516 <__sfvwrite_r+0xd6>
 8008554:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8008558:	3708      	adds	r7, #8
 800855a:	f1ba 0f00 	cmp.w	sl, #0
 800855e:	d0f9      	beq.n	8008554 <__sfvwrite_r+0x114>
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	6820      	ldr	r0, [r4, #0]
 8008564:	68a2      	ldr	r2, [r4, #8]
 8008566:	0599      	lsls	r1, r3, #22
 8008568:	d563      	bpl.n	8008632 <__sfvwrite_r+0x1f2>
 800856a:	4552      	cmp	r2, sl
 800856c:	d836      	bhi.n	80085dc <__sfvwrite_r+0x19c>
 800856e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008572:	d033      	beq.n	80085dc <__sfvwrite_r+0x19c>
 8008574:	6921      	ldr	r1, [r4, #16]
 8008576:	6965      	ldr	r5, [r4, #20]
 8008578:	eba0 0b01 	sub.w	fp, r0, r1
 800857c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008584:	f10b 0201 	add.w	r2, fp, #1
 8008588:	106d      	asrs	r5, r5, #1
 800858a:	4452      	add	r2, sl
 800858c:	4295      	cmp	r5, r2
 800858e:	bf38      	it	cc
 8008590:	4615      	movcc	r5, r2
 8008592:	055b      	lsls	r3, r3, #21
 8008594:	d53d      	bpl.n	8008612 <__sfvwrite_r+0x1d2>
 8008596:	4629      	mov	r1, r5
 8008598:	4630      	mov	r0, r6
 800859a:	f7fd f8d3 	bl	8005744 <_malloc_r>
 800859e:	b948      	cbnz	r0, 80085b4 <__sfvwrite_r+0x174>
 80085a0:	230c      	movs	r3, #12
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085aa:	81a3      	strh	r3, [r4, #12]
 80085ac:	e7ad      	b.n	800850a <__sfvwrite_r+0xca>
 80085ae:	4699      	mov	r9, r3
 80085b0:	469a      	mov	sl, r3
 80085b2:	e7d2      	b.n	800855a <__sfvwrite_r+0x11a>
 80085b4:	465a      	mov	r2, fp
 80085b6:	6921      	ldr	r1, [r4, #16]
 80085b8:	9001      	str	r0, [sp, #4]
 80085ba:	f7fd faff 	bl	8005bbc <memcpy>
 80085be:	89a2      	ldrh	r2, [r4, #12]
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80085c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085ca:	81a2      	strh	r2, [r4, #12]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	6165      	str	r5, [r4, #20]
 80085d0:	445b      	add	r3, fp
 80085d2:	eba5 050b 	sub.w	r5, r5, fp
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	4652      	mov	r2, sl
 80085da:	60a5      	str	r5, [r4, #8]
 80085dc:	4552      	cmp	r2, sl
 80085de:	bf28      	it	cs
 80085e0:	4652      	movcs	r2, sl
 80085e2:	6820      	ldr	r0, [r4, #0]
 80085e4:	9201      	str	r2, [sp, #4]
 80085e6:	4649      	mov	r1, r9
 80085e8:	f000 f89c 	bl	8008724 <memmove>
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	9a01      	ldr	r2, [sp, #4]
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	60a3      	str	r3, [r4, #8]
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	441a      	add	r2, r3
 80085f8:	4655      	mov	r5, sl
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008600:	44a9      	add	r9, r5
 8008602:	ebaa 0a05 	sub.w	sl, sl, r5
 8008606:	1b45      	subs	r5, r0, r5
 8008608:	f8c8 5008 	str.w	r5, [r8, #8]
 800860c:	2d00      	cmp	r5, #0
 800860e:	d1a4      	bne.n	800855a <__sfvwrite_r+0x11a>
 8008610:	e71d      	b.n	800844e <__sfvwrite_r+0xe>
 8008612:	462a      	mov	r2, r5
 8008614:	4630      	mov	r0, r6
 8008616:	f7fd fb41 	bl	8005c9c <_realloc_r>
 800861a:	4603      	mov	r3, r0
 800861c:	2800      	cmp	r0, #0
 800861e:	d1d5      	bne.n	80085cc <__sfvwrite_r+0x18c>
 8008620:	6921      	ldr	r1, [r4, #16]
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff fe4c 	bl	80082c0 <_free_r>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	e7b6      	b.n	80085a0 <__sfvwrite_r+0x160>
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	4283      	cmp	r3, r0
 8008636:	d302      	bcc.n	800863e <__sfvwrite_r+0x1fe>
 8008638:	6961      	ldr	r1, [r4, #20]
 800863a:	4551      	cmp	r1, sl
 800863c:	d915      	bls.n	800866a <__sfvwrite_r+0x22a>
 800863e:	4552      	cmp	r2, sl
 8008640:	bf28      	it	cs
 8008642:	4652      	movcs	r2, sl
 8008644:	4649      	mov	r1, r9
 8008646:	4615      	mov	r5, r2
 8008648:	f000 f86c 	bl	8008724 <memmove>
 800864c:	68a3      	ldr	r3, [r4, #8]
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	1b5b      	subs	r3, r3, r5
 8008652:	442a      	add	r2, r5
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1cf      	bne.n	80085fc <__sfvwrite_r+0x1bc>
 800865c:	4621      	mov	r1, r4
 800865e:	4630      	mov	r0, r6
 8008660:	f000 feb0 	bl	80093c4 <_fflush_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	d0c9      	beq.n	80085fc <__sfvwrite_r+0x1bc>
 8008668:	e79c      	b.n	80085a4 <__sfvwrite_r+0x164>
 800866a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800866e:	459a      	cmp	sl, r3
 8008670:	bf38      	it	cc
 8008672:	4653      	movcc	r3, sl
 8008674:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008676:	fb93 f3f1 	sdiv	r3, r3, r1
 800867a:	464a      	mov	r2, r9
 800867c:	434b      	muls	r3, r1
 800867e:	4630      	mov	r0, r6
 8008680:	69e1      	ldr	r1, [r4, #28]
 8008682:	47a8      	blx	r5
 8008684:	1e05      	subs	r5, r0, #0
 8008686:	dcb9      	bgt.n	80085fc <__sfvwrite_r+0x1bc>
 8008688:	e78c      	b.n	80085a4 <__sfvwrite_r+0x164>
 800868a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800868e:	2000      	movs	r0, #0
 8008690:	3708      	adds	r7, #8
 8008692:	e6f3      	b.n	800847c <__sfvwrite_r+0x3c>
 8008694:	f10b 0901 	add.w	r9, fp, #1
 8008698:	e700      	b.n	800849c <__sfvwrite_r+0x5c>
 800869a:	4293      	cmp	r3, r2
 800869c:	dc08      	bgt.n	80086b0 <__sfvwrite_r+0x270>
 800869e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80086a0:	69e1      	ldr	r1, [r4, #28]
 80086a2:	4652      	mov	r2, sl
 80086a4:	4630      	mov	r0, r6
 80086a6:	47a8      	blx	r5
 80086a8:	1e05      	subs	r5, r0, #0
 80086aa:	f73f af13 	bgt.w	80084d4 <__sfvwrite_r+0x94>
 80086ae:	e779      	b.n	80085a4 <__sfvwrite_r+0x164>
 80086b0:	4651      	mov	r1, sl
 80086b2:	9201      	str	r2, [sp, #4]
 80086b4:	f000 f836 	bl	8008724 <memmove>
 80086b8:	9a01      	ldr	r2, [sp, #4]
 80086ba:	68a3      	ldr	r3, [r4, #8]
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	60a3      	str	r3, [r4, #8]
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	4413      	add	r3, r2
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	4615      	mov	r5, r2
 80086c8:	e704      	b.n	80084d4 <__sfvwrite_r+0x94>
 80086ca:	2001      	movs	r0, #1
 80086cc:	e70c      	b.n	80084e8 <__sfvwrite_r+0xa8>
 80086ce:	bf00      	nop
 80086d0:	7ffffc00 	.word	0x7ffffc00

080086d4 <_fwalk_reent>:
 80086d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	4606      	mov	r6, r0
 80086da:	4688      	mov	r8, r1
 80086dc:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80086e0:	2700      	movs	r7, #0
 80086e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086e6:	f1b9 0901 	subs.w	r9, r9, #1
 80086ea:	d505      	bpl.n	80086f8 <_fwalk_reent+0x24>
 80086ec:	6824      	ldr	r4, [r4, #0]
 80086ee:	2c00      	cmp	r4, #0
 80086f0:	d1f7      	bne.n	80086e2 <_fwalk_reent+0xe>
 80086f2:	4638      	mov	r0, r7
 80086f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f8:	89ab      	ldrh	r3, [r5, #12]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d907      	bls.n	800870e <_fwalk_reent+0x3a>
 80086fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008702:	3301      	adds	r3, #1
 8008704:	d003      	beq.n	800870e <_fwalk_reent+0x3a>
 8008706:	4629      	mov	r1, r5
 8008708:	4630      	mov	r0, r6
 800870a:	47c0      	blx	r8
 800870c:	4307      	orrs	r7, r0
 800870e:	3568      	adds	r5, #104	; 0x68
 8008710:	e7e9      	b.n	80086e6 <_fwalk_reent+0x12>
	...

08008714 <_localeconv_r>:
 8008714:	4800      	ldr	r0, [pc, #0]	; (8008718 <_localeconv_r+0x4>)
 8008716:	4770      	bx	lr
 8008718:	2000106c 	.word	0x2000106c

0800871c <__retarget_lock_init_recursive>:
 800871c:	4770      	bx	lr

0800871e <__retarget_lock_close_recursive>:
 800871e:	4770      	bx	lr

08008720 <__retarget_lock_acquire_recursive>:
 8008720:	4770      	bx	lr

08008722 <__retarget_lock_release_recursive>:
 8008722:	4770      	bx	lr

08008724 <memmove>:
 8008724:	4288      	cmp	r0, r1
 8008726:	b510      	push	{r4, lr}
 8008728:	eb01 0402 	add.w	r4, r1, r2
 800872c:	d902      	bls.n	8008734 <memmove+0x10>
 800872e:	4284      	cmp	r4, r0
 8008730:	4623      	mov	r3, r4
 8008732:	d807      	bhi.n	8008744 <memmove+0x20>
 8008734:	1e43      	subs	r3, r0, #1
 8008736:	42a1      	cmp	r1, r4
 8008738:	d008      	beq.n	800874c <memmove+0x28>
 800873a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008742:	e7f8      	b.n	8008736 <memmove+0x12>
 8008744:	4402      	add	r2, r0
 8008746:	4601      	mov	r1, r0
 8008748:	428a      	cmp	r2, r1
 800874a:	d100      	bne.n	800874e <memmove+0x2a>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008756:	e7f7      	b.n	8008748 <memmove+0x24>

08008758 <_Balloc>:
 8008758:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	4605      	mov	r5, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b17b      	cbz	r3, 8008782 <_Balloc+0x2a>
 8008762:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008764:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008768:	b9a0      	cbnz	r0, 8008794 <_Balloc+0x3c>
 800876a:	2101      	movs	r1, #1
 800876c:	fa01 f604 	lsl.w	r6, r1, r4
 8008770:	1d72      	adds	r2, r6, #5
 8008772:	0092      	lsls	r2, r2, #2
 8008774:	4628      	mov	r0, r5
 8008776:	f000 fcf9 	bl	800916c <_calloc_r>
 800877a:	b148      	cbz	r0, 8008790 <_Balloc+0x38>
 800877c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008780:	e00b      	b.n	800879a <_Balloc+0x42>
 8008782:	2221      	movs	r2, #33	; 0x21
 8008784:	2104      	movs	r1, #4
 8008786:	f000 fcf1 	bl	800916c <_calloc_r>
 800878a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800878c:	2800      	cmp	r0, #0
 800878e:	d1e8      	bne.n	8008762 <_Balloc+0xa>
 8008790:	2000      	movs	r0, #0
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	6802      	ldr	r2, [r0, #0]
 8008796:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800879a:	2300      	movs	r3, #0
 800879c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087a0:	e7f7      	b.n	8008792 <_Balloc+0x3a>

080087a2 <_Bfree>:
 80087a2:	b131      	cbz	r1, 80087b2 <_Bfree+0x10>
 80087a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80087a6:	684a      	ldr	r2, [r1, #4]
 80087a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80087ac:	6008      	str	r0, [r1, #0]
 80087ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80087b2:	4770      	bx	lr

080087b4 <__multadd>:
 80087b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b8:	690d      	ldr	r5, [r1, #16]
 80087ba:	4607      	mov	r7, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	461e      	mov	r6, r3
 80087c0:	f101 0c14 	add.w	ip, r1, #20
 80087c4:	2000      	movs	r0, #0
 80087c6:	f8dc 3000 	ldr.w	r3, [ip]
 80087ca:	b299      	uxth	r1, r3
 80087cc:	fb02 6101 	mla	r1, r2, r1, r6
 80087d0:	0c1e      	lsrs	r6, r3, #16
 80087d2:	0c0b      	lsrs	r3, r1, #16
 80087d4:	fb02 3306 	mla	r3, r2, r6, r3
 80087d8:	b289      	uxth	r1, r1
 80087da:	3001      	adds	r0, #1
 80087dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087e0:	4285      	cmp	r5, r0
 80087e2:	f84c 1b04 	str.w	r1, [ip], #4
 80087e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087ea:	dcec      	bgt.n	80087c6 <__multadd+0x12>
 80087ec:	b30e      	cbz	r6, 8008832 <__multadd+0x7e>
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dc19      	bgt.n	8008828 <__multadd+0x74>
 80087f4:	6861      	ldr	r1, [r4, #4]
 80087f6:	4638      	mov	r0, r7
 80087f8:	3101      	adds	r1, #1
 80087fa:	f7ff ffad 	bl	8008758 <_Balloc>
 80087fe:	4680      	mov	r8, r0
 8008800:	b928      	cbnz	r0, 800880e <__multadd+0x5a>
 8008802:	4602      	mov	r2, r0
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <__multadd+0x84>)
 8008806:	480d      	ldr	r0, [pc, #52]	; (800883c <__multadd+0x88>)
 8008808:	21b5      	movs	r1, #181	; 0xb5
 800880a:	f000 fc91 	bl	8009130 <__assert_func>
 800880e:	6922      	ldr	r2, [r4, #16]
 8008810:	3202      	adds	r2, #2
 8008812:	f104 010c 	add.w	r1, r4, #12
 8008816:	0092      	lsls	r2, r2, #2
 8008818:	300c      	adds	r0, #12
 800881a:	f7fd f9cf 	bl	8005bbc <memcpy>
 800881e:	4621      	mov	r1, r4
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ffbe 	bl	80087a2 <_Bfree>
 8008826:	4644      	mov	r4, r8
 8008828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800882c:	3501      	adds	r5, #1
 800882e:	615e      	str	r6, [r3, #20]
 8008830:	6125      	str	r5, [r4, #16]
 8008832:	4620      	mov	r0, r4
 8008834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008838:	0800ed35 	.word	0x0800ed35
 800883c:	0800eda1 	.word	0x0800eda1

08008840 <__hi0bits>:
 8008840:	0c03      	lsrs	r3, r0, #16
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	b9d3      	cbnz	r3, 800887c <__hi0bits+0x3c>
 8008846:	0400      	lsls	r0, r0, #16
 8008848:	2310      	movs	r3, #16
 800884a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800884e:	bf04      	itt	eq
 8008850:	0200      	lsleq	r0, r0, #8
 8008852:	3308      	addeq	r3, #8
 8008854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008858:	bf04      	itt	eq
 800885a:	0100      	lsleq	r0, r0, #4
 800885c:	3304      	addeq	r3, #4
 800885e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008862:	bf04      	itt	eq
 8008864:	0080      	lsleq	r0, r0, #2
 8008866:	3302      	addeq	r3, #2
 8008868:	2800      	cmp	r0, #0
 800886a:	db05      	blt.n	8008878 <__hi0bits+0x38>
 800886c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008870:	f103 0301 	add.w	r3, r3, #1
 8008874:	bf08      	it	eq
 8008876:	2320      	moveq	r3, #32
 8008878:	4618      	mov	r0, r3
 800887a:	4770      	bx	lr
 800887c:	2300      	movs	r3, #0
 800887e:	e7e4      	b.n	800884a <__hi0bits+0xa>

08008880 <__lo0bits>:
 8008880:	6803      	ldr	r3, [r0, #0]
 8008882:	f013 0207 	ands.w	r2, r3, #7
 8008886:	4601      	mov	r1, r0
 8008888:	d00b      	beq.n	80088a2 <__lo0bits+0x22>
 800888a:	07da      	lsls	r2, r3, #31
 800888c:	d423      	bmi.n	80088d6 <__lo0bits+0x56>
 800888e:	0798      	lsls	r0, r3, #30
 8008890:	bf49      	itett	mi
 8008892:	085b      	lsrmi	r3, r3, #1
 8008894:	089b      	lsrpl	r3, r3, #2
 8008896:	2001      	movmi	r0, #1
 8008898:	600b      	strmi	r3, [r1, #0]
 800889a:	bf5c      	itt	pl
 800889c:	600b      	strpl	r3, [r1, #0]
 800889e:	2002      	movpl	r0, #2
 80088a0:	4770      	bx	lr
 80088a2:	b298      	uxth	r0, r3
 80088a4:	b9a8      	cbnz	r0, 80088d2 <__lo0bits+0x52>
 80088a6:	0c1b      	lsrs	r3, r3, #16
 80088a8:	2010      	movs	r0, #16
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	b90a      	cbnz	r2, 80088b2 <__lo0bits+0x32>
 80088ae:	3008      	adds	r0, #8
 80088b0:	0a1b      	lsrs	r3, r3, #8
 80088b2:	071a      	lsls	r2, r3, #28
 80088b4:	bf04      	itt	eq
 80088b6:	091b      	lsreq	r3, r3, #4
 80088b8:	3004      	addeq	r0, #4
 80088ba:	079a      	lsls	r2, r3, #30
 80088bc:	bf04      	itt	eq
 80088be:	089b      	lsreq	r3, r3, #2
 80088c0:	3002      	addeq	r0, #2
 80088c2:	07da      	lsls	r2, r3, #31
 80088c4:	d403      	bmi.n	80088ce <__lo0bits+0x4e>
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	f100 0001 	add.w	r0, r0, #1
 80088cc:	d005      	beq.n	80088da <__lo0bits+0x5a>
 80088ce:	600b      	str	r3, [r1, #0]
 80088d0:	4770      	bx	lr
 80088d2:	4610      	mov	r0, r2
 80088d4:	e7e9      	b.n	80088aa <__lo0bits+0x2a>
 80088d6:	2000      	movs	r0, #0
 80088d8:	4770      	bx	lr
 80088da:	2020      	movs	r0, #32
 80088dc:	4770      	bx	lr
	...

080088e0 <__i2b>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	2101      	movs	r1, #1
 80088e6:	f7ff ff37 	bl	8008758 <_Balloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	b928      	cbnz	r0, 80088fa <__i2b+0x1a>
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <__i2b+0x24>)
 80088f0:	4805      	ldr	r0, [pc, #20]	; (8008908 <__i2b+0x28>)
 80088f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088f6:	f000 fc1b 	bl	8009130 <__assert_func>
 80088fa:	2301      	movs	r3, #1
 80088fc:	6144      	str	r4, [r0, #20]
 80088fe:	6103      	str	r3, [r0, #16]
 8008900:	bd10      	pop	{r4, pc}
 8008902:	bf00      	nop
 8008904:	0800ed35 	.word	0x0800ed35
 8008908:	0800eda1 	.word	0x0800eda1

0800890c <__multiply>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	4691      	mov	r9, r2
 8008912:	690a      	ldr	r2, [r1, #16]
 8008914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008918:	429a      	cmp	r2, r3
 800891a:	bfb8      	it	lt
 800891c:	460b      	movlt	r3, r1
 800891e:	460c      	mov	r4, r1
 8008920:	bfbc      	itt	lt
 8008922:	464c      	movlt	r4, r9
 8008924:	4699      	movlt	r9, r3
 8008926:	6927      	ldr	r7, [r4, #16]
 8008928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800892c:	68a3      	ldr	r3, [r4, #8]
 800892e:	6861      	ldr	r1, [r4, #4]
 8008930:	eb07 060a 	add.w	r6, r7, sl
 8008934:	42b3      	cmp	r3, r6
 8008936:	b085      	sub	sp, #20
 8008938:	bfb8      	it	lt
 800893a:	3101      	addlt	r1, #1
 800893c:	f7ff ff0c 	bl	8008758 <_Balloc>
 8008940:	b930      	cbnz	r0, 8008950 <__multiply+0x44>
 8008942:	4602      	mov	r2, r0
 8008944:	4b44      	ldr	r3, [pc, #272]	; (8008a58 <__multiply+0x14c>)
 8008946:	4845      	ldr	r0, [pc, #276]	; (8008a5c <__multiply+0x150>)
 8008948:	f240 115d 	movw	r1, #349	; 0x15d
 800894c:	f000 fbf0 	bl	8009130 <__assert_func>
 8008950:	f100 0514 	add.w	r5, r0, #20
 8008954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008958:	462b      	mov	r3, r5
 800895a:	2200      	movs	r2, #0
 800895c:	4543      	cmp	r3, r8
 800895e:	d321      	bcc.n	80089a4 <__multiply+0x98>
 8008960:	f104 0314 	add.w	r3, r4, #20
 8008964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008968:	f109 0314 	add.w	r3, r9, #20
 800896c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008970:	9202      	str	r2, [sp, #8]
 8008972:	1b3a      	subs	r2, r7, r4
 8008974:	3a15      	subs	r2, #21
 8008976:	f022 0203 	bic.w	r2, r2, #3
 800897a:	3204      	adds	r2, #4
 800897c:	f104 0115 	add.w	r1, r4, #21
 8008980:	428f      	cmp	r7, r1
 8008982:	bf38      	it	cc
 8008984:	2204      	movcc	r2, #4
 8008986:	9201      	str	r2, [sp, #4]
 8008988:	9a02      	ldr	r2, [sp, #8]
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d80c      	bhi.n	80089aa <__multiply+0x9e>
 8008990:	2e00      	cmp	r6, #0
 8008992:	dd03      	ble.n	800899c <__multiply+0x90>
 8008994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008998:	2b00      	cmp	r3, #0
 800899a:	d05a      	beq.n	8008a52 <__multiply+0x146>
 800899c:	6106      	str	r6, [r0, #16]
 800899e:	b005      	add	sp, #20
 80089a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a4:	f843 2b04 	str.w	r2, [r3], #4
 80089a8:	e7d8      	b.n	800895c <__multiply+0x50>
 80089aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80089ae:	f1ba 0f00 	cmp.w	sl, #0
 80089b2:	d024      	beq.n	80089fe <__multiply+0xf2>
 80089b4:	f104 0e14 	add.w	lr, r4, #20
 80089b8:	46a9      	mov	r9, r5
 80089ba:	f04f 0c00 	mov.w	ip, #0
 80089be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089c2:	f8d9 1000 	ldr.w	r1, [r9]
 80089c6:	fa1f fb82 	uxth.w	fp, r2
 80089ca:	b289      	uxth	r1, r1
 80089cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80089d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089d4:	f8d9 2000 	ldr.w	r2, [r9]
 80089d8:	4461      	add	r1, ip
 80089da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089de:	fb0a c20b 	mla	r2, sl, fp, ip
 80089e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089e6:	b289      	uxth	r1, r1
 80089e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089ec:	4577      	cmp	r7, lr
 80089ee:	f849 1b04 	str.w	r1, [r9], #4
 80089f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089f6:	d8e2      	bhi.n	80089be <__multiply+0xb2>
 80089f8:	9a01      	ldr	r2, [sp, #4]
 80089fa:	f845 c002 	str.w	ip, [r5, r2]
 80089fe:	9a03      	ldr	r2, [sp, #12]
 8008a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a04:	3304      	adds	r3, #4
 8008a06:	f1b9 0f00 	cmp.w	r9, #0
 8008a0a:	d020      	beq.n	8008a4e <__multiply+0x142>
 8008a0c:	6829      	ldr	r1, [r5, #0]
 8008a0e:	f104 0c14 	add.w	ip, r4, #20
 8008a12:	46ae      	mov	lr, r5
 8008a14:	f04f 0a00 	mov.w	sl, #0
 8008a18:	f8bc b000 	ldrh.w	fp, [ip]
 8008a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a20:	fb09 220b 	mla	r2, r9, fp, r2
 8008a24:	4492      	add	sl, r2
 8008a26:	b289      	uxth	r1, r1
 8008a28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8008a30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a34:	f8be 1000 	ldrh.w	r1, [lr]
 8008a38:	0c12      	lsrs	r2, r2, #16
 8008a3a:	fb09 1102 	mla	r1, r9, r2, r1
 8008a3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a42:	4567      	cmp	r7, ip
 8008a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a48:	d8e6      	bhi.n	8008a18 <__multiply+0x10c>
 8008a4a:	9a01      	ldr	r2, [sp, #4]
 8008a4c:	50a9      	str	r1, [r5, r2]
 8008a4e:	3504      	adds	r5, #4
 8008a50:	e79a      	b.n	8008988 <__multiply+0x7c>
 8008a52:	3e01      	subs	r6, #1
 8008a54:	e79c      	b.n	8008990 <__multiply+0x84>
 8008a56:	bf00      	nop
 8008a58:	0800ed35 	.word	0x0800ed35
 8008a5c:	0800eda1 	.word	0x0800eda1

08008a60 <__pow5mult>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	4615      	mov	r5, r2
 8008a66:	f012 0203 	ands.w	r2, r2, #3
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	d007      	beq.n	8008a80 <__pow5mult+0x20>
 8008a70:	4c1a      	ldr	r4, [pc, #104]	; (8008adc <__pow5mult+0x7c>)
 8008a72:	3a01      	subs	r2, #1
 8008a74:	2300      	movs	r3, #0
 8008a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a7a:	f7ff fe9b 	bl	80087b4 <__multadd>
 8008a7e:	4607      	mov	r7, r0
 8008a80:	10ad      	asrs	r5, r5, #2
 8008a82:	d027      	beq.n	8008ad4 <__pow5mult+0x74>
 8008a84:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008a86:	b944      	cbnz	r4, 8008a9a <__pow5mult+0x3a>
 8008a88:	f240 2171 	movw	r1, #625	; 0x271
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ff27 	bl	80088e0 <__i2b>
 8008a92:	2300      	movs	r3, #0
 8008a94:	64b0      	str	r0, [r6, #72]	; 0x48
 8008a96:	4604      	mov	r4, r0
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	07eb      	lsls	r3, r5, #31
 8008aa0:	d50a      	bpl.n	8008ab8 <__pow5mult+0x58>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ff30 	bl	800890c <__multiply>
 8008aac:	4639      	mov	r1, r7
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff fe76 	bl	80087a2 <_Bfree>
 8008ab6:	4647      	mov	r7, r8
 8008ab8:	106d      	asrs	r5, r5, #1
 8008aba:	d00b      	beq.n	8008ad4 <__pow5mult+0x74>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	b938      	cbnz	r0, 8008ad0 <__pow5mult+0x70>
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ff21 	bl	800890c <__multiply>
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	f8c0 9000 	str.w	r9, [r0]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e7e4      	b.n	8008a9e <__pow5mult+0x3e>
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	bf00      	nop
 8008adc:	0800eef0 	.word	0x0800eef0

08008ae0 <__lshift>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	6849      	ldr	r1, [r1, #4]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	4607      	mov	r7, r0
 8008af2:	4691      	mov	r9, r2
 8008af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008af8:	f108 0601 	add.w	r6, r8, #1
 8008afc:	42b3      	cmp	r3, r6
 8008afe:	db0b      	blt.n	8008b18 <__lshift+0x38>
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff fe29 	bl	8008758 <_Balloc>
 8008b06:	4605      	mov	r5, r0
 8008b08:	b948      	cbnz	r0, 8008b1e <__lshift+0x3e>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <__lshift+0xd8>)
 8008b0e:	482b      	ldr	r0, [pc, #172]	; (8008bbc <__lshift+0xdc>)
 8008b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b14:	f000 fb0c 	bl	8009130 <__assert_func>
 8008b18:	3101      	adds	r1, #1
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	e7ee      	b.n	8008afc <__lshift+0x1c>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f100 0114 	add.w	r1, r0, #20
 8008b24:	f100 0210 	add.w	r2, r0, #16
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4553      	cmp	r3, sl
 8008b2c:	db37      	blt.n	8008b9e <__lshift+0xbe>
 8008b2e:	6920      	ldr	r0, [r4, #16]
 8008b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b34:	f104 0314 	add.w	r3, r4, #20
 8008b38:	f019 091f 	ands.w	r9, r9, #31
 8008b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b44:	d02f      	beq.n	8008ba6 <__lshift+0xc6>
 8008b46:	f1c9 0e20 	rsb	lr, r9, #32
 8008b4a:	468a      	mov	sl, r1
 8008b4c:	f04f 0c00 	mov.w	ip, #0
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	fa02 f209 	lsl.w	r2, r2, r9
 8008b56:	ea42 020c 	orr.w	r2, r2, ip
 8008b5a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b62:	4298      	cmp	r0, r3
 8008b64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b68:	d8f2      	bhi.n	8008b50 <__lshift+0x70>
 8008b6a:	1b03      	subs	r3, r0, r4
 8008b6c:	3b15      	subs	r3, #21
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	3304      	adds	r3, #4
 8008b74:	f104 0215 	add.w	r2, r4, #21
 8008b78:	4290      	cmp	r0, r2
 8008b7a:	bf38      	it	cc
 8008b7c:	2304      	movcc	r3, #4
 8008b7e:	f841 c003 	str.w	ip, [r1, r3]
 8008b82:	f1bc 0f00 	cmp.w	ip, #0
 8008b86:	d001      	beq.n	8008b8c <__lshift+0xac>
 8008b88:	f108 0602 	add.w	r6, r8, #2
 8008b8c:	3e01      	subs	r6, #1
 8008b8e:	4638      	mov	r0, r7
 8008b90:	612e      	str	r6, [r5, #16]
 8008b92:	4621      	mov	r1, r4
 8008b94:	f7ff fe05 	bl	80087a2 <_Bfree>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	e7c1      	b.n	8008b2a <__lshift+0x4a>
 8008ba6:	3904      	subs	r1, #4
 8008ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb0:	4298      	cmp	r0, r3
 8008bb2:	d8f9      	bhi.n	8008ba8 <__lshift+0xc8>
 8008bb4:	e7ea      	b.n	8008b8c <__lshift+0xac>
 8008bb6:	bf00      	nop
 8008bb8:	0800ed35 	.word	0x0800ed35
 8008bbc:	0800eda1 	.word	0x0800eda1

08008bc0 <__mcmp>:
 8008bc0:	b530      	push	{r4, r5, lr}
 8008bc2:	6902      	ldr	r2, [r0, #16]
 8008bc4:	690c      	ldr	r4, [r1, #16]
 8008bc6:	1b12      	subs	r2, r2, r4
 8008bc8:	d10e      	bne.n	8008be8 <__mcmp+0x28>
 8008bca:	f100 0314 	add.w	r3, r0, #20
 8008bce:	3114      	adds	r1, #20
 8008bd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	d003      	beq.n	8008bec <__mcmp+0x2c>
 8008be4:	d305      	bcc.n	8008bf2 <__mcmp+0x32>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4610      	mov	r0, r2
 8008bea:	bd30      	pop	{r4, r5, pc}
 8008bec:	4283      	cmp	r3, r0
 8008bee:	d3f3      	bcc.n	8008bd8 <__mcmp+0x18>
 8008bf0:	e7fa      	b.n	8008be8 <__mcmp+0x28>
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf6:	e7f7      	b.n	8008be8 <__mcmp+0x28>

08008bf8 <__mdiff>:
 8008bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4606      	mov	r6, r0
 8008c00:	4611      	mov	r1, r2
 8008c02:	4620      	mov	r0, r4
 8008c04:	4690      	mov	r8, r2
 8008c06:	f7ff ffdb 	bl	8008bc0 <__mcmp>
 8008c0a:	1e05      	subs	r5, r0, #0
 8008c0c:	d110      	bne.n	8008c30 <__mdiff+0x38>
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fda1 	bl	8008758 <_Balloc>
 8008c16:	b930      	cbnz	r0, 8008c26 <__mdiff+0x2e>
 8008c18:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <__mdiff+0x10c>)
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	f240 2132 	movw	r1, #562	; 0x232
 8008c20:	4839      	ldr	r0, [pc, #228]	; (8008d08 <__mdiff+0x110>)
 8008c22:	f000 fa85 	bl	8009130 <__assert_func>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	bfa4      	itt	ge
 8008c32:	4643      	movge	r3, r8
 8008c34:	46a0      	movge	r8, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c3c:	bfa6      	itte	ge
 8008c3e:	461c      	movge	r4, r3
 8008c40:	2500      	movge	r5, #0
 8008c42:	2501      	movlt	r5, #1
 8008c44:	f7ff fd88 	bl	8008758 <_Balloc>
 8008c48:	b920      	cbnz	r0, 8008c54 <__mdiff+0x5c>
 8008c4a:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <__mdiff+0x10c>)
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c52:	e7e5      	b.n	8008c20 <__mdiff+0x28>
 8008c54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c58:	6926      	ldr	r6, [r4, #16]
 8008c5a:	60c5      	str	r5, [r0, #12]
 8008c5c:	f104 0914 	add.w	r9, r4, #20
 8008c60:	f108 0514 	add.w	r5, r8, #20
 8008c64:	f100 0e14 	add.w	lr, r0, #20
 8008c68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c70:	f108 0210 	add.w	r2, r8, #16
 8008c74:	46f2      	mov	sl, lr
 8008c76:	2100      	movs	r1, #0
 8008c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c80:	fa1f f883 	uxth.w	r8, r3
 8008c84:	fa11 f18b 	uxtah	r1, r1, fp
 8008c88:	0c1b      	lsrs	r3, r3, #16
 8008c8a:	eba1 0808 	sub.w	r8, r1, r8
 8008c8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c96:	fa1f f888 	uxth.w	r8, r8
 8008c9a:	1419      	asrs	r1, r3, #16
 8008c9c:	454e      	cmp	r6, r9
 8008c9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ca2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca6:	d8e7      	bhi.n	8008c78 <__mdiff+0x80>
 8008ca8:	1b33      	subs	r3, r6, r4
 8008caa:	3b15      	subs	r3, #21
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	3415      	adds	r4, #21
 8008cb4:	42a6      	cmp	r6, r4
 8008cb6:	bf38      	it	cc
 8008cb8:	2304      	movcc	r3, #4
 8008cba:	441d      	add	r5, r3
 8008cbc:	4473      	add	r3, lr
 8008cbe:	469e      	mov	lr, r3
 8008cc0:	462e      	mov	r6, r5
 8008cc2:	4566      	cmp	r6, ip
 8008cc4:	d30e      	bcc.n	8008ce4 <__mdiff+0xec>
 8008cc6:	f10c 0203 	add.w	r2, ip, #3
 8008cca:	1b52      	subs	r2, r2, r5
 8008ccc:	f022 0203 	bic.w	r2, r2, #3
 8008cd0:	3d03      	subs	r5, #3
 8008cd2:	45ac      	cmp	ip, r5
 8008cd4:	bf38      	it	cc
 8008cd6:	2200      	movcc	r2, #0
 8008cd8:	441a      	add	r2, r3
 8008cda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cde:	b17b      	cbz	r3, 8008d00 <__mdiff+0x108>
 8008ce0:	6107      	str	r7, [r0, #16]
 8008ce2:	e7a3      	b.n	8008c2c <__mdiff+0x34>
 8008ce4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ce8:	fa11 f288 	uxtah	r2, r1, r8
 8008cec:	1414      	asrs	r4, r2, #16
 8008cee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cf2:	b292      	uxth	r2, r2
 8008cf4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8008cfc:	1421      	asrs	r1, r4, #16
 8008cfe:	e7e0      	b.n	8008cc2 <__mdiff+0xca>
 8008d00:	3f01      	subs	r7, #1
 8008d02:	e7ea      	b.n	8008cda <__mdiff+0xe2>
 8008d04:	0800ed35 	.word	0x0800ed35
 8008d08:	0800eda1 	.word	0x0800eda1

08008d0c <__d2b>:
 8008d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	4689      	mov	r9, r1
 8008d12:	2101      	movs	r1, #1
 8008d14:	ec57 6b10 	vmov	r6, r7, d0
 8008d18:	4690      	mov	r8, r2
 8008d1a:	f7ff fd1d 	bl	8008758 <_Balloc>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b930      	cbnz	r0, 8008d30 <__d2b+0x24>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <__d2b+0xb0>)
 8008d26:	4826      	ldr	r0, [pc, #152]	; (8008dc0 <__d2b+0xb4>)
 8008d28:	f240 310a 	movw	r1, #778	; 0x30a
 8008d2c:	f000 fa00 	bl	8009130 <__assert_func>
 8008d30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d38:	bb35      	cbnz	r5, 8008d88 <__d2b+0x7c>
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	d028      	beq.n	8008d92 <__d2b+0x86>
 8008d40:	4668      	mov	r0, sp
 8008d42:	9600      	str	r6, [sp, #0]
 8008d44:	f7ff fd9c 	bl	8008880 <__lo0bits>
 8008d48:	9900      	ldr	r1, [sp, #0]
 8008d4a:	b300      	cbz	r0, 8008d8e <__d2b+0x82>
 8008d4c:	9a01      	ldr	r2, [sp, #4]
 8008d4e:	f1c0 0320 	rsb	r3, r0, #32
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	430b      	orrs	r3, r1
 8008d58:	40c2      	lsrs	r2, r0
 8008d5a:	6163      	str	r3, [r4, #20]
 8008d5c:	9201      	str	r2, [sp, #4]
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	61a3      	str	r3, [r4, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf14      	ite	ne
 8008d66:	2202      	movne	r2, #2
 8008d68:	2201      	moveq	r2, #1
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	b1d5      	cbz	r5, 8008da4 <__d2b+0x98>
 8008d6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d72:	4405      	add	r5, r0
 8008d74:	f8c9 5000 	str.w	r5, [r9]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d7c:	f8c8 0000 	str.w	r0, [r8]
 8008d80:	4620      	mov	r0, r4
 8008d82:	b003      	add	sp, #12
 8008d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8c:	e7d5      	b.n	8008d3a <__d2b+0x2e>
 8008d8e:	6161      	str	r1, [r4, #20]
 8008d90:	e7e5      	b.n	8008d5e <__d2b+0x52>
 8008d92:	a801      	add	r0, sp, #4
 8008d94:	f7ff fd74 	bl	8008880 <__lo0bits>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	6163      	str	r3, [r4, #20]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	6122      	str	r2, [r4, #16]
 8008da0:	3020      	adds	r0, #32
 8008da2:	e7e3      	b.n	8008d6c <__d2b+0x60>
 8008da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dac:	f8c9 0000 	str.w	r0, [r9]
 8008db0:	6918      	ldr	r0, [r3, #16]
 8008db2:	f7ff fd45 	bl	8008840 <__hi0bits>
 8008db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dba:	e7df      	b.n	8008d7c <__d2b+0x70>
 8008dbc:	0800ed35 	.word	0x0800ed35
 8008dc0:	0800eda1 	.word	0x0800eda1

08008dc4 <frexp>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	ec55 4b10 	vmov	r4, r5, d0
 8008dcc:	6001      	str	r1, [r0, #0]
 8008dce:	4916      	ldr	r1, [pc, #88]	; (8008e28 <frexp+0x64>)
 8008dd0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008dd4:	428a      	cmp	r2, r1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	462b      	mov	r3, r5
 8008dda:	dc22      	bgt.n	8008e22 <frexp+0x5e>
 8008ddc:	ee10 1a10 	vmov	r1, s0
 8008de0:	4311      	orrs	r1, r2
 8008de2:	d01e      	beq.n	8008e22 <frexp+0x5e>
 8008de4:	4911      	ldr	r1, [pc, #68]	; (8008e2c <frexp+0x68>)
 8008de6:	4029      	ands	r1, r5
 8008de8:	b969      	cbnz	r1, 8008e06 <frexp+0x42>
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <frexp+0x6c>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	ee10 0a10 	vmov	r0, s0
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	460b      	mov	r3, r1
 8008dfa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008dfe:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008e02:	4604      	mov	r4, r0
 8008e04:	6031      	str	r1, [r6, #0]
 8008e06:	6831      	ldr	r1, [r6, #0]
 8008e08:	1512      	asrs	r2, r2, #20
 8008e0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e0e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8008e12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e16:	440a      	add	r2, r1
 8008e18:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8008e1c:	6032      	str	r2, [r6, #0]
 8008e1e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008e22:	ec45 4b10 	vmov	d0, r4, r5
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	7fefffff 	.word	0x7fefffff
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	43500000 	.word	0x43500000

08008e34 <__sread>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	f000 fb90 	bl	8009560 <_read_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	bfab      	itete	ge
 8008e44:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8008e46:	89a3      	ldrhlt	r3, [r4, #12]
 8008e48:	181b      	addge	r3, r3, r0
 8008e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e4e:	bfac      	ite	ge
 8008e50:	6523      	strge	r3, [r4, #80]	; 0x50
 8008e52:	81a3      	strhlt	r3, [r4, #12]
 8008e54:	bd10      	pop	{r4, pc}

08008e56 <__swrite>:
 8008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	898b      	ldrh	r3, [r1, #12]
 8008e5e:	05db      	lsls	r3, r3, #23
 8008e60:	4605      	mov	r5, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	4616      	mov	r6, r2
 8008e66:	d505      	bpl.n	8008e74 <__swrite+0x1e>
 8008e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f000 fae6 	bl	8009440 <_lseek_r>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8a:	f000 b8a5 	b.w	8008fd8 <_write_r>

08008e8e <__sseek>:
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	460c      	mov	r4, r1
 8008e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e96:	f000 fad3 	bl	8009440 <_lseek_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	bf15      	itete	ne
 8008ea0:	6520      	strne	r0, [r4, #80]	; 0x50
 8008ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eaa:	81a3      	strheq	r3, [r4, #12]
 8008eac:	bf18      	it	ne
 8008eae:	81a3      	strhne	r3, [r4, #12]
 8008eb0:	bd10      	pop	{r4, pc}

08008eb2 <__sclose>:
 8008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb6:	f000 b98f 	b.w	80091d8 <_close_r>

08008eba <strncpy>:
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	3901      	subs	r1, #1
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	b132      	cbz	r2, 8008ed0 <strncpy+0x16>
 8008ec2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ec6:	f803 4b01 	strb.w	r4, [r3], #1
 8008eca:	3a01      	subs	r2, #1
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	d1f7      	bne.n	8008ec0 <strncpy+0x6>
 8008ed0:	441a      	add	r2, r3
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d100      	bne.n	8008eda <strncpy+0x20>
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	f803 1b01 	strb.w	r1, [r3], #1
 8008ede:	e7f9      	b.n	8008ed4 <strncpy+0x1a>

08008ee0 <__ssprint_r>:
 8008ee0:	6893      	ldr	r3, [r2, #8]
 8008ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	4617      	mov	r7, r2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d061      	beq.n	8008fb4 <__ssprint_r+0xd4>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8d2 a000 	ldr.w	sl, [r2]
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	469b      	mov	fp, r3
 8008efa:	f1bb 0f00 	cmp.w	fp, #0
 8008efe:	d02b      	beq.n	8008f58 <__ssprint_r+0x78>
 8008f00:	68a6      	ldr	r6, [r4, #8]
 8008f02:	455e      	cmp	r6, fp
 8008f04:	d844      	bhi.n	8008f90 <__ssprint_r+0xb0>
 8008f06:	89a2      	ldrh	r2, [r4, #12]
 8008f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f0c:	d03e      	beq.n	8008f8c <__ssprint_r+0xac>
 8008f0e:	6820      	ldr	r0, [r4, #0]
 8008f10:	6921      	ldr	r1, [r4, #16]
 8008f12:	6965      	ldr	r5, [r4, #20]
 8008f14:	eba0 0901 	sub.w	r9, r0, r1
 8008f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f20:	f109 0001 	add.w	r0, r9, #1
 8008f24:	106d      	asrs	r5, r5, #1
 8008f26:	4458      	add	r0, fp
 8008f28:	4285      	cmp	r5, r0
 8008f2a:	bf38      	it	cc
 8008f2c:	4605      	movcc	r5, r0
 8008f2e:	0553      	lsls	r3, r2, #21
 8008f30:	d545      	bpl.n	8008fbe <__ssprint_r+0xde>
 8008f32:	4629      	mov	r1, r5
 8008f34:	4640      	mov	r0, r8
 8008f36:	f7fc fc05 	bl	8005744 <_malloc_r>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	b9a0      	cbnz	r0, 8008f68 <__ssprint_r+0x88>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	f8c8 3000 	str.w	r3, [r8]
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f56:	e02f      	b.n	8008fb8 <__ssprint_r+0xd8>
 8008f58:	f8da 3000 	ldr.w	r3, [sl]
 8008f5c:	f8da b004 	ldr.w	fp, [sl, #4]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	f10a 0a08 	add.w	sl, sl, #8
 8008f66:	e7c8      	b.n	8008efa <__ssprint_r+0x1a>
 8008f68:	464a      	mov	r2, r9
 8008f6a:	6921      	ldr	r1, [r4, #16]
 8008f6c:	f7fc fe26 	bl	8005bbc <memcpy>
 8008f70:	89a2      	ldrh	r2, [r4, #12]
 8008f72:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f7a:	81a2      	strh	r2, [r4, #12]
 8008f7c:	6126      	str	r6, [r4, #16]
 8008f7e:	6165      	str	r5, [r4, #20]
 8008f80:	444e      	add	r6, r9
 8008f82:	eba5 0509 	sub.w	r5, r5, r9
 8008f86:	6026      	str	r6, [r4, #0]
 8008f88:	60a5      	str	r5, [r4, #8]
 8008f8a:	465e      	mov	r6, fp
 8008f8c:	455e      	cmp	r6, fp
 8008f8e:	d900      	bls.n	8008f92 <__ssprint_r+0xb2>
 8008f90:	465e      	mov	r6, fp
 8008f92:	4632      	mov	r2, r6
 8008f94:	9901      	ldr	r1, [sp, #4]
 8008f96:	6820      	ldr	r0, [r4, #0]
 8008f98:	f7ff fbc4 	bl	8008724 <memmove>
 8008f9c:	68a2      	ldr	r2, [r4, #8]
 8008f9e:	1b92      	subs	r2, r2, r6
 8008fa0:	60a2      	str	r2, [r4, #8]
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	4432      	add	r2, r6
 8008fa6:	6022      	str	r2, [r4, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	eba2 030b 	sub.w	r3, r2, fp
 8008fae:	60bb      	str	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1d1      	bne.n	8008f58 <__ssprint_r+0x78>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	b003      	add	sp, #12
 8008fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f7fc fe6b 	bl	8005c9c <_realloc_r>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d1d7      	bne.n	8008f7c <__ssprint_r+0x9c>
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff f976 	bl	80082c0 <_free_r>
 8008fd4:	e7b3      	b.n	8008f3e <__ssprint_r+0x5e>
	...

08008fd8 <_write_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d07      	ldr	r5, [pc, #28]	; (8008ff8 <_write_r+0x20>)
 8008fdc:	4604      	mov	r4, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f001 f954 	bl	800a294 <_write>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_write_r+0x1e>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_write_r+0x1e>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	200015b0 	.word	0x200015b0

08008ffc <__swsetup_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <__swsetup_r+0xac>)
 8009000:	4605      	mov	r5, r0
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	460c      	mov	r4, r1
 8009006:	b118      	cbz	r0, 8009010 <__swsetup_r+0x14>
 8009008:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800900a:	b90b      	cbnz	r3, 8009010 <__swsetup_r+0x14>
 800900c:	f7ff f8c8 	bl	80081a0 <__sinit>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009016:	0718      	lsls	r0, r3, #28
 8009018:	d422      	bmi.n	8009060 <__swsetup_r+0x64>
 800901a:	06d9      	lsls	r1, r3, #27
 800901c:	d407      	bmi.n	800902e <__swsetup_r+0x32>
 800901e:	2309      	movs	r3, #9
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800902c:	e034      	b.n	8009098 <__swsetup_r+0x9c>
 800902e:	0758      	lsls	r0, r3, #29
 8009030:	d512      	bpl.n	8009058 <__swsetup_r+0x5c>
 8009032:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009034:	b141      	cbz	r1, 8009048 <__swsetup_r+0x4c>
 8009036:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800903a:	4299      	cmp	r1, r3
 800903c:	d002      	beq.n	8009044 <__swsetup_r+0x48>
 800903e:	4628      	mov	r0, r5
 8009040:	f7ff f93e 	bl	80082c0 <_free_r>
 8009044:	2300      	movs	r3, #0
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	2300      	movs	r3, #0
 8009052:	6063      	str	r3, [r4, #4]
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f043 0308 	orr.w	r3, r3, #8
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	b94b      	cbnz	r3, 8009078 <__swsetup_r+0x7c>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800906a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800906e:	d003      	beq.n	8009078 <__swsetup_r+0x7c>
 8009070:	4621      	mov	r1, r4
 8009072:	4628      	mov	r0, r5
 8009074:	f000 fa22 	bl	80094bc <__smakebuf_r>
 8009078:	89a0      	ldrh	r0, [r4, #12]
 800907a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800907e:	f010 0301 	ands.w	r3, r0, #1
 8009082:	d00a      	beq.n	800909a <__swsetup_r+0x9e>
 8009084:	2300      	movs	r3, #0
 8009086:	60a3      	str	r3, [r4, #8]
 8009088:	6963      	ldr	r3, [r4, #20]
 800908a:	425b      	negs	r3, r3
 800908c:	61a3      	str	r3, [r4, #24]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	b943      	cbnz	r3, 80090a4 <__swsetup_r+0xa8>
 8009092:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009096:	d1c4      	bne.n	8009022 <__swsetup_r+0x26>
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	0781      	lsls	r1, r0, #30
 800909c:	bf58      	it	pl
 800909e:	6963      	ldrpl	r3, [r4, #20]
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	e7f4      	b.n	800908e <__swsetup_r+0x92>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7f7      	b.n	8009098 <__swsetup_r+0x9c>
 80090a8:	20000738 	.word	0x20000738

080090ac <__register_exitproc>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	f8df a078 	ldr.w	sl, [pc, #120]	; 800912c <__register_exitproc+0x80>
 80090b4:	4606      	mov	r6, r0
 80090b6:	f8da 0000 	ldr.w	r0, [sl]
 80090ba:	4698      	mov	r8, r3
 80090bc:	460f      	mov	r7, r1
 80090be:	4691      	mov	r9, r2
 80090c0:	f7ff fb2e 	bl	8008720 <__retarget_lock_acquire_recursive>
 80090c4:	4b18      	ldr	r3, [pc, #96]	; (8009128 <__register_exitproc+0x7c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80090cc:	b91c      	cbnz	r4, 80090d6 <__register_exitproc+0x2a>
 80090ce:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80090d2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80090d6:	6865      	ldr	r5, [r4, #4]
 80090d8:	f8da 0000 	ldr.w	r0, [sl]
 80090dc:	2d1f      	cmp	r5, #31
 80090de:	dd05      	ble.n	80090ec <__register_exitproc+0x40>
 80090e0:	f7ff fb1f 	bl	8008722 <__retarget_lock_release_recursive>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	b19e      	cbz	r6, 8009116 <__register_exitproc+0x6a>
 80090ee:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80090f2:	2201      	movs	r2, #1
 80090f4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80090f8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80090fc:	40aa      	lsls	r2, r5
 80090fe:	4313      	orrs	r3, r2
 8009100:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009104:	2e02      	cmp	r6, #2
 8009106:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800910a:	bf02      	ittt	eq
 800910c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009110:	4313      	orreq	r3, r2
 8009112:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8009116:	1c6b      	adds	r3, r5, #1
 8009118:	3502      	adds	r5, #2
 800911a:	6063      	str	r3, [r4, #4]
 800911c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009120:	f7ff faff 	bl	8008722 <__retarget_lock_release_recursive>
 8009124:	2000      	movs	r0, #0
 8009126:	e7df      	b.n	80090e8 <__register_exitproc+0x3c>
 8009128:	0800ecd0 	.word	0x0800ecd0
 800912c:	20000f78 	.word	0x20000f78

08009130 <__assert_func>:
 8009130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009132:	4614      	mov	r4, r2
 8009134:	461a      	mov	r2, r3
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <__assert_func+0x2c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4605      	mov	r5, r0
 800913c:	68d8      	ldr	r0, [r3, #12]
 800913e:	b14c      	cbz	r4, 8009154 <__assert_func+0x24>
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <__assert_func+0x30>)
 8009142:	9100      	str	r1, [sp, #0]
 8009144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009148:	4906      	ldr	r1, [pc, #24]	; (8009164 <__assert_func+0x34>)
 800914a:	462b      	mov	r3, r5
 800914c:	f000 f960 	bl	8009410 <fiprintf>
 8009150:	f000 ff2d 	bl	8009fae <abort>
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <__assert_func+0x38>)
 8009156:	461c      	mov	r4, r3
 8009158:	e7f3      	b.n	8009142 <__assert_func+0x12>
 800915a:	bf00      	nop
 800915c:	20000738 	.word	0x20000738
 8009160:	0800eefc 	.word	0x0800eefc
 8009164:	0800ef09 	.word	0x0800ef09
 8009168:	0800ef37 	.word	0x0800ef37

0800916c <_calloc_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	fba1 1502 	umull	r1, r5, r1, r2
 8009172:	b92d      	cbnz	r5, 8009180 <_calloc_r+0x14>
 8009174:	f7fc fae6 	bl	8005744 <_malloc_r>
 8009178:	4604      	mov	r4, r0
 800917a:	b938      	cbnz	r0, 800918c <_calloc_r+0x20>
 800917c:	4620      	mov	r0, r4
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	f7fc fab6 	bl	80056f0 <__errno>
 8009184:	230c      	movs	r3, #12
 8009186:	6003      	str	r3, [r0, #0]
 8009188:	2400      	movs	r4, #0
 800918a:	e7f7      	b.n	800917c <_calloc_r+0x10>
 800918c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009190:	f022 0203 	bic.w	r2, r2, #3
 8009194:	3a04      	subs	r2, #4
 8009196:	2a24      	cmp	r2, #36	; 0x24
 8009198:	d819      	bhi.n	80091ce <_calloc_r+0x62>
 800919a:	2a13      	cmp	r2, #19
 800919c:	d915      	bls.n	80091ca <_calloc_r+0x5e>
 800919e:	2a1b      	cmp	r2, #27
 80091a0:	e9c0 5500 	strd	r5, r5, [r0]
 80091a4:	d806      	bhi.n	80091b4 <_calloc_r+0x48>
 80091a6:	f100 0308 	add.w	r3, r0, #8
 80091aa:	2200      	movs	r2, #0
 80091ac:	e9c3 2200 	strd	r2, r2, [r3]
 80091b0:	609a      	str	r2, [r3, #8]
 80091b2:	e7e3      	b.n	800917c <_calloc_r+0x10>
 80091b4:	2a24      	cmp	r2, #36	; 0x24
 80091b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80091ba:	bf11      	iteee	ne
 80091bc:	f100 0310 	addne.w	r3, r0, #16
 80091c0:	6105      	streq	r5, [r0, #16]
 80091c2:	f100 0318 	addeq.w	r3, r0, #24
 80091c6:	6145      	streq	r5, [r0, #20]
 80091c8:	e7ef      	b.n	80091aa <_calloc_r+0x3e>
 80091ca:	4603      	mov	r3, r0
 80091cc:	e7ed      	b.n	80091aa <_calloc_r+0x3e>
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7fc fd02 	bl	8005bd8 <memset>
 80091d4:	e7d2      	b.n	800917c <_calloc_r+0x10>
	...

080091d8 <_close_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d06      	ldr	r5, [pc, #24]	; (80091f4 <_close_r+0x1c>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	602b      	str	r3, [r5, #0]
 80091e4:	f001 f81e 	bl	800a224 <_close>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_close_r+0x1a>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_close_r+0x1a>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	200015b0 	.word	0x200015b0

080091f8 <_fclose_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4606      	mov	r6, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	b911      	cbnz	r1, 8009206 <_fclose_r+0xe>
 8009200:	2500      	movs	r5, #0
 8009202:	4628      	mov	r0, r5
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	b118      	cbz	r0, 8009210 <_fclose_r+0x18>
 8009208:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800920a:	b90b      	cbnz	r3, 8009210 <_fclose_r+0x18>
 800920c:	f7fe ffc8 	bl	80081a0 <__sinit>
 8009210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009212:	07d8      	lsls	r0, r3, #31
 8009214:	d405      	bmi.n	8009222 <_fclose_r+0x2a>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	0599      	lsls	r1, r3, #22
 800921a:	d402      	bmi.n	8009222 <_fclose_r+0x2a>
 800921c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921e:	f7ff fa7f 	bl	8008720 <__retarget_lock_acquire_recursive>
 8009222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009226:	b93b      	cbnz	r3, 8009238 <_fclose_r+0x40>
 8009228:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800922a:	f015 0501 	ands.w	r5, r5, #1
 800922e:	d1e7      	bne.n	8009200 <_fclose_r+0x8>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f7ff fa76 	bl	8008722 <__retarget_lock_release_recursive>
 8009236:	e7e4      	b.n	8009202 <_fclose_r+0xa>
 8009238:	4621      	mov	r1, r4
 800923a:	4630      	mov	r0, r6
 800923c:	f000 f834 	bl	80092a8 <__sflush_r>
 8009240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009242:	4605      	mov	r5, r0
 8009244:	b133      	cbz	r3, 8009254 <_fclose_r+0x5c>
 8009246:	69e1      	ldr	r1, [r4, #28]
 8009248:	4630      	mov	r0, r6
 800924a:	4798      	blx	r3
 800924c:	2800      	cmp	r0, #0
 800924e:	bfb8      	it	lt
 8009250:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	061a      	lsls	r2, r3, #24
 8009258:	d503      	bpl.n	8009262 <_fclose_r+0x6a>
 800925a:	6921      	ldr	r1, [r4, #16]
 800925c:	4630      	mov	r0, r6
 800925e:	f7ff f82f 	bl	80082c0 <_free_r>
 8009262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009264:	b141      	cbz	r1, 8009278 <_fclose_r+0x80>
 8009266:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800926a:	4299      	cmp	r1, r3
 800926c:	d002      	beq.n	8009274 <_fclose_r+0x7c>
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff f826 	bl	80082c0 <_free_r>
 8009274:	2300      	movs	r3, #0
 8009276:	6323      	str	r3, [r4, #48]	; 0x30
 8009278:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800927a:	b121      	cbz	r1, 8009286 <_fclose_r+0x8e>
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff f81f 	bl	80082c0 <_free_r>
 8009282:	2300      	movs	r3, #0
 8009284:	6463      	str	r3, [r4, #68]	; 0x44
 8009286:	f7fe ff73 	bl	8008170 <__sfp_lock_acquire>
 800928a:	2300      	movs	r3, #0
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009290:	07db      	lsls	r3, r3, #31
 8009292:	d402      	bmi.n	800929a <_fclose_r+0xa2>
 8009294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009296:	f7ff fa44 	bl	8008722 <__retarget_lock_release_recursive>
 800929a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929c:	f7ff fa3f 	bl	800871e <__retarget_lock_close_recursive>
 80092a0:	f7fe ff6c 	bl	800817c <__sfp_lock_release>
 80092a4:	e7ad      	b.n	8009202 <_fclose_r+0xa>
	...

080092a8 <__sflush_r>:
 80092a8:	898b      	ldrh	r3, [r1, #12]
 80092aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b2:	4605      	mov	r5, r0
 80092b4:	0718      	lsls	r0, r3, #28
 80092b6:	460c      	mov	r4, r1
 80092b8:	d45f      	bmi.n	800937a <__sflush_r+0xd2>
 80092ba:	684b      	ldr	r3, [r1, #4]
 80092bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	818a      	strh	r2, [r1, #12]
 80092c4:	dc05      	bgt.n	80092d2 <__sflush_r+0x2a>
 80092c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc02      	bgt.n	80092d2 <__sflush_r+0x2a>
 80092cc:	2000      	movs	r0, #0
 80092ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092d4:	2e00      	cmp	r6, #0
 80092d6:	d0f9      	beq.n	80092cc <__sflush_r+0x24>
 80092d8:	2300      	movs	r3, #0
 80092da:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092de:	682f      	ldr	r7, [r5, #0]
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	d036      	beq.n	8009352 <__sflush_r+0xaa>
 80092e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	075a      	lsls	r2, r3, #29
 80092ea:	d505      	bpl.n	80092f8 <__sflush_r+0x50>
 80092ec:	6863      	ldr	r3, [r4, #4]
 80092ee:	1ac0      	subs	r0, r0, r3
 80092f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092f2:	b10b      	cbz	r3, 80092f8 <__sflush_r+0x50>
 80092f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092f6:	1ac0      	subs	r0, r0, r3
 80092f8:	2300      	movs	r3, #0
 80092fa:	4602      	mov	r2, r0
 80092fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092fe:	69e1      	ldr	r1, [r4, #28]
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	d106      	bne.n	8009318 <__sflush_r+0x70>
 800930a:	6829      	ldr	r1, [r5, #0]
 800930c:	291d      	cmp	r1, #29
 800930e:	d830      	bhi.n	8009372 <__sflush_r+0xca>
 8009310:	4a2b      	ldr	r2, [pc, #172]	; (80093c0 <__sflush_r+0x118>)
 8009312:	40ca      	lsrs	r2, r1
 8009314:	07d6      	lsls	r6, r2, #31
 8009316:	d52c      	bpl.n	8009372 <__sflush_r+0xca>
 8009318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800931c:	b21b      	sxth	r3, r3
 800931e:	2200      	movs	r2, #0
 8009320:	6062      	str	r2, [r4, #4]
 8009322:	04d9      	lsls	r1, r3, #19
 8009324:	6922      	ldr	r2, [r4, #16]
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	6022      	str	r2, [r4, #0]
 800932a:	d504      	bpl.n	8009336 <__sflush_r+0x8e>
 800932c:	1c42      	adds	r2, r0, #1
 800932e:	d101      	bne.n	8009334 <__sflush_r+0x8c>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b903      	cbnz	r3, 8009336 <__sflush_r+0x8e>
 8009334:	6520      	str	r0, [r4, #80]	; 0x50
 8009336:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009338:	602f      	str	r7, [r5, #0]
 800933a:	2900      	cmp	r1, #0
 800933c:	d0c6      	beq.n	80092cc <__sflush_r+0x24>
 800933e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009342:	4299      	cmp	r1, r3
 8009344:	d002      	beq.n	800934c <__sflush_r+0xa4>
 8009346:	4628      	mov	r0, r5
 8009348:	f7fe ffba 	bl	80082c0 <_free_r>
 800934c:	2000      	movs	r0, #0
 800934e:	6320      	str	r0, [r4, #48]	; 0x30
 8009350:	e7bd      	b.n	80092ce <__sflush_r+0x26>
 8009352:	69e1      	ldr	r1, [r4, #28]
 8009354:	2301      	movs	r3, #1
 8009356:	4628      	mov	r0, r5
 8009358:	47b0      	blx	r6
 800935a:	1c41      	adds	r1, r0, #1
 800935c:	d1c3      	bne.n	80092e6 <__sflush_r+0x3e>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0c0      	beq.n	80092e6 <__sflush_r+0x3e>
 8009364:	2b1d      	cmp	r3, #29
 8009366:	d001      	beq.n	800936c <__sflush_r+0xc4>
 8009368:	2b16      	cmp	r3, #22
 800936a:	d101      	bne.n	8009370 <__sflush_r+0xc8>
 800936c:	602f      	str	r7, [r5, #0]
 800936e:	e7ad      	b.n	80092cc <__sflush_r+0x24>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	e7a9      	b.n	80092ce <__sflush_r+0x26>
 800937a:	690f      	ldr	r7, [r1, #16]
 800937c:	2f00      	cmp	r7, #0
 800937e:	d0a5      	beq.n	80092cc <__sflush_r+0x24>
 8009380:	079b      	lsls	r3, r3, #30
 8009382:	680e      	ldr	r6, [r1, #0]
 8009384:	bf08      	it	eq
 8009386:	694b      	ldreq	r3, [r1, #20]
 8009388:	600f      	str	r7, [r1, #0]
 800938a:	bf18      	it	ne
 800938c:	2300      	movne	r3, #0
 800938e:	eba6 0807 	sub.w	r8, r6, r7
 8009392:	608b      	str	r3, [r1, #8]
 8009394:	f1b8 0f00 	cmp.w	r8, #0
 8009398:	dd98      	ble.n	80092cc <__sflush_r+0x24>
 800939a:	69e1      	ldr	r1, [r4, #28]
 800939c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800939e:	4643      	mov	r3, r8
 80093a0:	463a      	mov	r2, r7
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b0      	blx	r6
 80093a6:	2800      	cmp	r0, #0
 80093a8:	dc06      	bgt.n	80093b8 <__sflush_r+0x110>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b0:	81a3      	strh	r3, [r4, #12]
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b6:	e78a      	b.n	80092ce <__sflush_r+0x26>
 80093b8:	4407      	add	r7, r0
 80093ba:	eba8 0800 	sub.w	r8, r8, r0
 80093be:	e7e9      	b.n	8009394 <__sflush_r+0xec>
 80093c0:	20400001 	.word	0x20400001

080093c4 <_fflush_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	460c      	mov	r4, r1
 80093c8:	4605      	mov	r5, r0
 80093ca:	b118      	cbz	r0, 80093d4 <_fflush_r+0x10>
 80093cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093ce:	b90b      	cbnz	r3, 80093d4 <_fflush_r+0x10>
 80093d0:	f7fe fee6 	bl	80081a0 <__sinit>
 80093d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d8:	b1bb      	cbz	r3, 800940a <_fflush_r+0x46>
 80093da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093dc:	07d0      	lsls	r0, r2, #31
 80093de:	d404      	bmi.n	80093ea <_fflush_r+0x26>
 80093e0:	0599      	lsls	r1, r3, #22
 80093e2:	d402      	bmi.n	80093ea <_fflush_r+0x26>
 80093e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093e6:	f7ff f99b 	bl	8008720 <__retarget_lock_acquire_recursive>
 80093ea:	4628      	mov	r0, r5
 80093ec:	4621      	mov	r1, r4
 80093ee:	f7ff ff5b 	bl	80092a8 <__sflush_r>
 80093f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f4:	07da      	lsls	r2, r3, #31
 80093f6:	4605      	mov	r5, r0
 80093f8:	d405      	bmi.n	8009406 <_fflush_r+0x42>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	059b      	lsls	r3, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_fflush_r+0x42>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f7ff f98e 	bl	8008722 <__retarget_lock_release_recursive>
 8009406:	4628      	mov	r0, r5
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	461d      	mov	r5, r3
 800940c:	e7fb      	b.n	8009406 <_fflush_r+0x42>
	...

08009410 <fiprintf>:
 8009410:	b40e      	push	{r1, r2, r3}
 8009412:	b503      	push	{r0, r1, lr}
 8009414:	4601      	mov	r1, r0
 8009416:	ab03      	add	r3, sp, #12
 8009418:	4805      	ldr	r0, [pc, #20]	; (8009430 <fiprintf+0x20>)
 800941a:	f853 2b04 	ldr.w	r2, [r3], #4
 800941e:	6800      	ldr	r0, [r0, #0]
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f000 f8e1 	bl	80095e8 <_vfiprintf_r>
 8009426:	b002      	add	sp, #8
 8009428:	f85d eb04 	ldr.w	lr, [sp], #4
 800942c:	b003      	add	sp, #12
 800942e:	4770      	bx	lr
 8009430:	20000738 	.word	0x20000738

08009434 <__locale_mb_cur_max>:
 8009434:	4b01      	ldr	r3, [pc, #4]	; (800943c <__locale_mb_cur_max+0x8>)
 8009436:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800943a:	4770      	bx	lr
 800943c:	20000f7c 	.word	0x20000f7c

08009440 <_lseek_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d07      	ldr	r5, [pc, #28]	; (8009460 <_lseek_r+0x20>)
 8009444:	4604      	mov	r4, r0
 8009446:	4608      	mov	r0, r1
 8009448:	4611      	mov	r1, r2
 800944a:	2200      	movs	r2, #0
 800944c:	602a      	str	r2, [r5, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f000 ff10 	bl	800a274 <_lseek>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_lseek_r+0x1e>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_lseek_r+0x1e>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	200015b0 	.word	0x200015b0

08009464 <__swhatbuf_r>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946c:	2900      	cmp	r1, #0
 800946e:	b096      	sub	sp, #88	; 0x58
 8009470:	4614      	mov	r4, r2
 8009472:	461d      	mov	r5, r3
 8009474:	da0a      	bge.n	800948c <__swhatbuf_r+0x28>
 8009476:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800947a:	2300      	movs	r3, #0
 800947c:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	d116      	bne.n	80094b2 <__swhatbuf_r+0x4e>
 8009484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	e015      	b.n	80094b8 <__swhatbuf_r+0x54>
 800948c:	466a      	mov	r2, sp
 800948e:	f000 fe01 	bl	800a094 <_fstat_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	dbef      	blt.n	8009476 <__swhatbuf_r+0x12>
 8009496:	9a01      	ldr	r2, [sp, #4]
 8009498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800949c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094a0:	425a      	negs	r2, r3
 80094a2:	415a      	adcs	r2, r3
 80094a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	e002      	b.n	80094b8 <__swhatbuf_r+0x54>
 80094b2:	2240      	movs	r2, #64	; 0x40
 80094b4:	6022      	str	r2, [r4, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	b016      	add	sp, #88	; 0x58
 80094ba:	bd70      	pop	{r4, r5, r6, pc}

080094bc <__smakebuf_r>:
 80094bc:	898b      	ldrh	r3, [r1, #12]
 80094be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c0:	079d      	lsls	r5, r3, #30
 80094c2:	4606      	mov	r6, r0
 80094c4:	460c      	mov	r4, r1
 80094c6:	d507      	bpl.n	80094d8 <__smakebuf_r+0x1c>
 80094c8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	2301      	movs	r3, #1
 80094d2:	6163      	str	r3, [r4, #20]
 80094d4:	b002      	add	sp, #8
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	ab01      	add	r3, sp, #4
 80094da:	466a      	mov	r2, sp
 80094dc:	f7ff ffc2 	bl	8009464 <__swhatbuf_r>
 80094e0:	9900      	ldr	r1, [sp, #0]
 80094e2:	4605      	mov	r5, r0
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7fc f92d 	bl	8005744 <_malloc_r>
 80094ea:	b948      	cbnz	r0, 8009500 <__smakebuf_r+0x44>
 80094ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f0:	059a      	lsls	r2, r3, #22
 80094f2:	d4ef      	bmi.n	80094d4 <__smakebuf_r+0x18>
 80094f4:	f023 0303 	bic.w	r3, r3, #3
 80094f8:	f043 0302 	orr.w	r3, r3, #2
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	e7e3      	b.n	80094c8 <__smakebuf_r+0xc>
 8009500:	4b0d      	ldr	r3, [pc, #52]	; (8009538 <__smakebuf_r+0x7c>)
 8009502:	63f3      	str	r3, [r6, #60]	; 0x3c
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	6163      	str	r3, [r4, #20]
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	6120      	str	r0, [r4, #16]
 8009516:	b15b      	cbz	r3, 8009530 <__smakebuf_r+0x74>
 8009518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800951c:	4630      	mov	r0, r6
 800951e:	f000 fdcb 	bl	800a0b8 <_isatty_r>
 8009522:	b128      	cbz	r0, 8009530 <__smakebuf_r+0x74>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	89a0      	ldrh	r0, [r4, #12]
 8009532:	4305      	orrs	r5, r0
 8009534:	81a5      	strh	r5, [r4, #12]
 8009536:	e7cd      	b.n	80094d4 <__smakebuf_r+0x18>
 8009538:	08008165 	.word	0x08008165

0800953c <__ascii_mbtowc>:
 800953c:	b082      	sub	sp, #8
 800953e:	b901      	cbnz	r1, 8009542 <__ascii_mbtowc+0x6>
 8009540:	a901      	add	r1, sp, #4
 8009542:	b142      	cbz	r2, 8009556 <__ascii_mbtowc+0x1a>
 8009544:	b14b      	cbz	r3, 800955a <__ascii_mbtowc+0x1e>
 8009546:	7813      	ldrb	r3, [r2, #0]
 8009548:	600b      	str	r3, [r1, #0]
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	1e10      	subs	r0, r2, #0
 800954e:	bf18      	it	ne
 8009550:	2001      	movne	r0, #1
 8009552:	b002      	add	sp, #8
 8009554:	4770      	bx	lr
 8009556:	4610      	mov	r0, r2
 8009558:	e7fb      	b.n	8009552 <__ascii_mbtowc+0x16>
 800955a:	f06f 0001 	mvn.w	r0, #1
 800955e:	e7f8      	b.n	8009552 <__ascii_mbtowc+0x16>

08009560 <_read_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_read_r+0x20>)
 8009564:	4604      	mov	r4, r0
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	2200      	movs	r2, #0
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f000 fe88 	bl	800a284 <_read>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_read_r+0x1e>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_read_r+0x1e>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	200015b0 	.word	0x200015b0

08009584 <__sprint_r>:
 8009584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	6893      	ldr	r3, [r2, #8]
 800958a:	4680      	mov	r8, r0
 800958c:	460f      	mov	r7, r1
 800958e:	4614      	mov	r4, r2
 8009590:	b91b      	cbnz	r3, 800959a <__sprint_r+0x16>
 8009592:	6053      	str	r3, [r2, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800959c:	049d      	lsls	r5, r3, #18
 800959e:	d520      	bpl.n	80095e2 <__sprint_r+0x5e>
 80095a0:	6815      	ldr	r5, [r2, #0]
 80095a2:	3508      	adds	r5, #8
 80095a4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80095a8:	f04f 0900 	mov.w	r9, #0
 80095ac:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80095b0:	45ca      	cmp	sl, r9
 80095b2:	dc0b      	bgt.n	80095cc <__sprint_r+0x48>
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	f026 0003 	bic.w	r0, r6, #3
 80095ba:	1a18      	subs	r0, r3, r0
 80095bc:	60a0      	str	r0, [r4, #8]
 80095be:	3508      	adds	r5, #8
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1ef      	bne.n	80095a4 <__sprint_r+0x20>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80095ca:	e7e4      	b.n	8009596 <__sprint_r+0x12>
 80095cc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80095d0:	463a      	mov	r2, r7
 80095d2:	4640      	mov	r0, r8
 80095d4:	f000 fd33 	bl	800a03e <_fputwc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d0f3      	beq.n	80095c4 <__sprint_r+0x40>
 80095dc:	f109 0901 	add.w	r9, r9, #1
 80095e0:	e7e6      	b.n	80095b0 <__sprint_r+0x2c>
 80095e2:	f7fe ff2d 	bl	8008440 <__sfvwrite_r>
 80095e6:	e7ed      	b.n	80095c4 <__sprint_r+0x40>

080095e8 <_vfiprintf_r>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	ed2d 8b02 	vpush	{d8}
 80095f0:	b0b9      	sub	sp, #228	; 0xe4
 80095f2:	460f      	mov	r7, r1
 80095f4:	9201      	str	r2, [sp, #4]
 80095f6:	461d      	mov	r5, r3
 80095f8:	461c      	mov	r4, r3
 80095fa:	4681      	mov	r9, r0
 80095fc:	b118      	cbz	r0, 8009606 <_vfiprintf_r+0x1e>
 80095fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009600:	b90b      	cbnz	r3, 8009606 <_vfiprintf_r+0x1e>
 8009602:	f7fe fdcd 	bl	80081a0 <__sinit>
 8009606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009608:	07d8      	lsls	r0, r3, #31
 800960a:	d405      	bmi.n	8009618 <_vfiprintf_r+0x30>
 800960c:	89bb      	ldrh	r3, [r7, #12]
 800960e:	0599      	lsls	r1, r3, #22
 8009610:	d402      	bmi.n	8009618 <_vfiprintf_r+0x30>
 8009612:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009614:	f7ff f884 	bl	8008720 <__retarget_lock_acquire_recursive>
 8009618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800961c:	049a      	lsls	r2, r3, #18
 800961e:	d406      	bmi.n	800962e <_vfiprintf_r+0x46>
 8009620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009624:	81bb      	strh	r3, [r7, #12]
 8009626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800962c:	667b      	str	r3, [r7, #100]	; 0x64
 800962e:	89bb      	ldrh	r3, [r7, #12]
 8009630:	071e      	lsls	r6, r3, #28
 8009632:	d501      	bpl.n	8009638 <_vfiprintf_r+0x50>
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	b9bb      	cbnz	r3, 8009668 <_vfiprintf_r+0x80>
 8009638:	4639      	mov	r1, r7
 800963a:	4648      	mov	r0, r9
 800963c:	f7ff fcde 	bl	8008ffc <__swsetup_r>
 8009640:	b190      	cbz	r0, 8009668 <_vfiprintf_r+0x80>
 8009642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009644:	07d8      	lsls	r0, r3, #31
 8009646:	d508      	bpl.n	800965a <_vfiprintf_r+0x72>
 8009648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	9802      	ldr	r0, [sp, #8]
 8009650:	b039      	add	sp, #228	; 0xe4
 8009652:	ecbd 8b02 	vpop	{d8}
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	89bb      	ldrh	r3, [r7, #12]
 800965c:	0599      	lsls	r1, r3, #22
 800965e:	d4f3      	bmi.n	8009648 <_vfiprintf_r+0x60>
 8009660:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009662:	f7ff f85e 	bl	8008722 <__retarget_lock_release_recursive>
 8009666:	e7ef      	b.n	8009648 <_vfiprintf_r+0x60>
 8009668:	89bb      	ldrh	r3, [r7, #12]
 800966a:	f003 021a 	and.w	r2, r3, #26
 800966e:	2a0a      	cmp	r2, #10
 8009670:	d116      	bne.n	80096a0 <_vfiprintf_r+0xb8>
 8009672:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009676:	2a00      	cmp	r2, #0
 8009678:	db12      	blt.n	80096a0 <_vfiprintf_r+0xb8>
 800967a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800967c:	07d2      	lsls	r2, r2, #31
 800967e:	d404      	bmi.n	800968a <_vfiprintf_r+0xa2>
 8009680:	059e      	lsls	r6, r3, #22
 8009682:	d402      	bmi.n	800968a <_vfiprintf_r+0xa2>
 8009684:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009686:	f7ff f84c 	bl	8008722 <__retarget_lock_release_recursive>
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	462b      	mov	r3, r5
 800968e:	4639      	mov	r1, r7
 8009690:	4648      	mov	r0, r9
 8009692:	b039      	add	sp, #228	; 0xe4
 8009694:	ecbd 8b02 	vpop	{d8}
 8009698:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	f000 bc3a 	b.w	8009f14 <__sbprintf>
 80096a0:	2300      	movs	r3, #0
 80096a2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80096a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80096aa:	ae0f      	add	r6, sp, #60	; 0x3c
 80096ac:	ee08 3a10 	vmov	s16, r3
 80096b0:	960c      	str	r6, [sp, #48]	; 0x30
 80096b2:	9307      	str	r3, [sp, #28]
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	461d      	mov	r5, r3
 80096ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096be:	b10a      	cbz	r2, 80096c4 <_vfiprintf_r+0xdc>
 80096c0:	2a25      	cmp	r2, #37	; 0x25
 80096c2:	d1f9      	bne.n	80096b8 <_vfiprintf_r+0xd0>
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	ebb5 0803 	subs.w	r8, r5, r3
 80096ca:	d00d      	beq.n	80096e8 <_vfiprintf_r+0x100>
 80096cc:	e9c6 3800 	strd	r3, r8, [r6]
 80096d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d2:	4443      	add	r3, r8
 80096d4:	930e      	str	r3, [sp, #56]	; 0x38
 80096d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d8:	3301      	adds	r3, #1
 80096da:	2b07      	cmp	r3, #7
 80096dc:	930d      	str	r3, [sp, #52]	; 0x34
 80096de:	dc75      	bgt.n	80097cc <_vfiprintf_r+0x1e4>
 80096e0:	3608      	adds	r6, #8
 80096e2:	9b02      	ldr	r3, [sp, #8]
 80096e4:	4443      	add	r3, r8
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	782b      	ldrb	r3, [r5, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 83d6 	beq.w	8009e9c <_vfiprintf_r+0x8b4>
 80096f0:	2300      	movs	r3, #0
 80096f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80096f6:	1c6a      	adds	r2, r5, #1
 80096f8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80096fc:	9100      	str	r1, [sp, #0]
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	469a      	mov	sl, r3
 8009702:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009706:	9201      	str	r2, [sp, #4]
 8009708:	f1a3 0220 	sub.w	r2, r3, #32
 800970c:	2a5a      	cmp	r2, #90	; 0x5a
 800970e:	f200 831f 	bhi.w	8009d50 <_vfiprintf_r+0x768>
 8009712:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009716:	009b      	.short	0x009b
 8009718:	031d031d 	.word	0x031d031d
 800971c:	031d00a3 	.word	0x031d00a3
 8009720:	031d031d 	.word	0x031d031d
 8009724:	031d0082 	.word	0x031d0082
 8009728:	00a6031d 	.word	0x00a6031d
 800972c:	031d00b0 	.word	0x031d00b0
 8009730:	00b200ad 	.word	0x00b200ad
 8009734:	00cd031d 	.word	0x00cd031d
 8009738:	00d000d0 	.word	0x00d000d0
 800973c:	00d000d0 	.word	0x00d000d0
 8009740:	00d000d0 	.word	0x00d000d0
 8009744:	00d000d0 	.word	0x00d000d0
 8009748:	031d00d0 	.word	0x031d00d0
 800974c:	031d031d 	.word	0x031d031d
 8009750:	031d031d 	.word	0x031d031d
 8009754:	031d031d 	.word	0x031d031d
 8009758:	031d031d 	.word	0x031d031d
 800975c:	010800fa 	.word	0x010800fa
 8009760:	031d031d 	.word	0x031d031d
 8009764:	031d031d 	.word	0x031d031d
 8009768:	031d031d 	.word	0x031d031d
 800976c:	031d031d 	.word	0x031d031d
 8009770:	031d031d 	.word	0x031d031d
 8009774:	031d0158 	.word	0x031d0158
 8009778:	031d031d 	.word	0x031d031d
 800977c:	031d01a1 	.word	0x031d01a1
 8009780:	031d027e 	.word	0x031d027e
 8009784:	029e031d 	.word	0x029e031d
 8009788:	031d031d 	.word	0x031d031d
 800978c:	031d031d 	.word	0x031d031d
 8009790:	031d031d 	.word	0x031d031d
 8009794:	031d031d 	.word	0x031d031d
 8009798:	031d031d 	.word	0x031d031d
 800979c:	010a00fa 	.word	0x010a00fa
 80097a0:	031d031d 	.word	0x031d031d
 80097a4:	00e0031d 	.word	0x00e0031d
 80097a8:	00f4010a 	.word	0x00f4010a
 80097ac:	00ed031d 	.word	0x00ed031d
 80097b0:	0136031d 	.word	0x0136031d
 80097b4:	018f015a 	.word	0x018f015a
 80097b8:	031d00f4 	.word	0x031d00f4
 80097bc:	009901a1 	.word	0x009901a1
 80097c0:	031d0280 	.word	0x031d0280
 80097c4:	0065031d 	.word	0x0065031d
 80097c8:	0099031d 	.word	0x0099031d
 80097cc:	aa0c      	add	r2, sp, #48	; 0x30
 80097ce:	4639      	mov	r1, r7
 80097d0:	4648      	mov	r0, r9
 80097d2:	f7ff fed7 	bl	8009584 <__sprint_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f040 833f 	bne.w	8009e5a <_vfiprintf_r+0x872>
 80097dc:	ae0f      	add	r6, sp, #60	; 0x3c
 80097de:	e780      	b.n	80096e2 <_vfiprintf_r+0xfa>
 80097e0:	4a9c      	ldr	r2, [pc, #624]	; (8009a54 <_vfiprintf_r+0x46c>)
 80097e2:	9205      	str	r2, [sp, #20]
 80097e4:	f01a 0220 	ands.w	r2, sl, #32
 80097e8:	f000 8235 	beq.w	8009c56 <_vfiprintf_r+0x66e>
 80097ec:	3407      	adds	r4, #7
 80097ee:	f024 0207 	bic.w	r2, r4, #7
 80097f2:	4693      	mov	fp, r2
 80097f4:	6855      	ldr	r5, [r2, #4]
 80097f6:	f85b 4b08 	ldr.w	r4, [fp], #8
 80097fa:	f01a 0f01 	tst.w	sl, #1
 80097fe:	d009      	beq.n	8009814 <_vfiprintf_r+0x22c>
 8009800:	ea54 0205 	orrs.w	r2, r4, r5
 8009804:	bf1f      	itttt	ne
 8009806:	2230      	movne	r2, #48	; 0x30
 8009808:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800980c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8009810:	f04a 0a02 	orrne.w	sl, sl, #2
 8009814:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009818:	e11a      	b.n	8009a50 <_vfiprintf_r+0x468>
 800981a:	4648      	mov	r0, r9
 800981c:	f7fe ff7a 	bl	8008714 <_localeconv_r>
 8009820:	6843      	ldr	r3, [r0, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	ee08 3a10 	vmov	s16, r3
 8009828:	f7f6 fcd2 	bl	80001d0 <strlen>
 800982c:	9007      	str	r0, [sp, #28]
 800982e:	4648      	mov	r0, r9
 8009830:	f7fe ff70 	bl	8008714 <_localeconv_r>
 8009834:	6883      	ldr	r3, [r0, #8]
 8009836:	9306      	str	r3, [sp, #24]
 8009838:	9b07      	ldr	r3, [sp, #28]
 800983a:	b12b      	cbz	r3, 8009848 <_vfiprintf_r+0x260>
 800983c:	9b06      	ldr	r3, [sp, #24]
 800983e:	b11b      	cbz	r3, 8009848 <_vfiprintf_r+0x260>
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b10b      	cbz	r3, 8009848 <_vfiprintf_r+0x260>
 8009844:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8009848:	9a01      	ldr	r2, [sp, #4]
 800984a:	e75a      	b.n	8009702 <_vfiprintf_r+0x11a>
 800984c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f9      	bne.n	8009848 <_vfiprintf_r+0x260>
 8009854:	2320      	movs	r3, #32
 8009856:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800985a:	e7f5      	b.n	8009848 <_vfiprintf_r+0x260>
 800985c:	f04a 0a01 	orr.w	sl, sl, #1
 8009860:	e7f2      	b.n	8009848 <_vfiprintf_r+0x260>
 8009862:	f854 3b04 	ldr.w	r3, [r4], #4
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	daed      	bge.n	8009848 <_vfiprintf_r+0x260>
 800986c:	425b      	negs	r3, r3
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	f04a 0a04 	orr.w	sl, sl, #4
 8009874:	e7e8      	b.n	8009848 <_vfiprintf_r+0x260>
 8009876:	232b      	movs	r3, #43	; 0x2b
 8009878:	e7ed      	b.n	8009856 <_vfiprintf_r+0x26e>
 800987a:	9a01      	ldr	r2, [sp, #4]
 800987c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009880:	2b2a      	cmp	r3, #42	; 0x2a
 8009882:	d112      	bne.n	80098aa <_vfiprintf_r+0x2c2>
 8009884:	f854 0b04 	ldr.w	r0, [r4], #4
 8009888:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800988c:	e9cd 3200 	strd	r3, r2, [sp]
 8009890:	e7da      	b.n	8009848 <_vfiprintf_r+0x260>
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	200a      	movs	r0, #10
 8009896:	fb00 1303 	mla	r3, r0, r3, r1
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80098a0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098a4:	2909      	cmp	r1, #9
 80098a6:	d9f4      	bls.n	8009892 <_vfiprintf_r+0x2aa>
 80098a8:	e72d      	b.n	8009706 <_vfiprintf_r+0x11e>
 80098aa:	2100      	movs	r1, #0
 80098ac:	9100      	str	r1, [sp, #0]
 80098ae:	e7f7      	b.n	80098a0 <_vfiprintf_r+0x2b8>
 80098b0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80098b4:	e7c8      	b.n	8009848 <_vfiprintf_r+0x260>
 80098b6:	2100      	movs	r1, #0
 80098b8:	9a01      	ldr	r2, [sp, #4]
 80098ba:	9103      	str	r1, [sp, #12]
 80098bc:	9903      	ldr	r1, [sp, #12]
 80098be:	3b30      	subs	r3, #48	; 0x30
 80098c0:	200a      	movs	r0, #10
 80098c2:	fb00 3301 	mla	r3, r0, r1, r3
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80098cc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098d0:	2909      	cmp	r1, #9
 80098d2:	d9f3      	bls.n	80098bc <_vfiprintf_r+0x2d4>
 80098d4:	e717      	b.n	8009706 <_vfiprintf_r+0x11e>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b68      	cmp	r3, #104	; 0x68
 80098dc:	bf01      	itttt	eq
 80098de:	9b01      	ldreq	r3, [sp, #4]
 80098e0:	3301      	addeq	r3, #1
 80098e2:	9301      	streq	r3, [sp, #4]
 80098e4:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80098e8:	bf18      	it	ne
 80098ea:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80098ee:	e7ab      	b.n	8009848 <_vfiprintf_r+0x260>
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b6c      	cmp	r3, #108	; 0x6c
 80098f6:	d105      	bne.n	8009904 <_vfiprintf_r+0x31c>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	3301      	adds	r3, #1
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f04a 0a20 	orr.w	sl, sl, #32
 8009902:	e7a1      	b.n	8009848 <_vfiprintf_r+0x260>
 8009904:	f04a 0a10 	orr.w	sl, sl, #16
 8009908:	e79e      	b.n	8009848 <_vfiprintf_r+0x260>
 800990a:	46a3      	mov	fp, r4
 800990c:	2100      	movs	r1, #0
 800990e:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009912:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009916:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800991a:	2301      	movs	r3, #1
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	460d      	mov	r5, r1
 8009920:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009924:	e0ad      	b.n	8009a82 <_vfiprintf_r+0x49a>
 8009926:	f04a 0a10 	orr.w	sl, sl, #16
 800992a:	f01a 0f20 	tst.w	sl, #32
 800992e:	d011      	beq.n	8009954 <_vfiprintf_r+0x36c>
 8009930:	3407      	adds	r4, #7
 8009932:	f024 0307 	bic.w	r3, r4, #7
 8009936:	469b      	mov	fp, r3
 8009938:	685d      	ldr	r5, [r3, #4]
 800993a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800993e:	2d00      	cmp	r5, #0
 8009940:	da06      	bge.n	8009950 <_vfiprintf_r+0x368>
 8009942:	4264      	negs	r4, r4
 8009944:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009948:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800994c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009950:	2301      	movs	r3, #1
 8009952:	e04a      	b.n	80099ea <_vfiprintf_r+0x402>
 8009954:	46a3      	mov	fp, r4
 8009956:	f01a 0f10 	tst.w	sl, #16
 800995a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800995e:	d002      	beq.n	8009966 <_vfiprintf_r+0x37e>
 8009960:	462c      	mov	r4, r5
 8009962:	17ed      	asrs	r5, r5, #31
 8009964:	e7eb      	b.n	800993e <_vfiprintf_r+0x356>
 8009966:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800996a:	d003      	beq.n	8009974 <_vfiprintf_r+0x38c>
 800996c:	b22c      	sxth	r4, r5
 800996e:	f345 35c0 	sbfx	r5, r5, #15, #1
 8009972:	e7e4      	b.n	800993e <_vfiprintf_r+0x356>
 8009974:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009978:	d0f2      	beq.n	8009960 <_vfiprintf_r+0x378>
 800997a:	b26c      	sxtb	r4, r5
 800997c:	f345 15c0 	sbfx	r5, r5, #7, #1
 8009980:	e7dd      	b.n	800993e <_vfiprintf_r+0x356>
 8009982:	f01a 0f20 	tst.w	sl, #32
 8009986:	f104 0b04 	add.w	fp, r4, #4
 800998a:	d007      	beq.n	800999c <_vfiprintf_r+0x3b4>
 800998c:	9a02      	ldr	r2, [sp, #8]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	9902      	ldr	r1, [sp, #8]
 8009992:	17d2      	asrs	r2, r2, #31
 8009994:	e9c3 1200 	strd	r1, r2, [r3]
 8009998:	465c      	mov	r4, fp
 800999a:	e68c      	b.n	80096b6 <_vfiprintf_r+0xce>
 800999c:	f01a 0f10 	tst.w	sl, #16
 80099a0:	d003      	beq.n	80099aa <_vfiprintf_r+0x3c2>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	9a02      	ldr	r2, [sp, #8]
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	e7f6      	b.n	8009998 <_vfiprintf_r+0x3b0>
 80099aa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80099ae:	d003      	beq.n	80099b8 <_vfiprintf_r+0x3d0>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	9a02      	ldr	r2, [sp, #8]
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	e7ef      	b.n	8009998 <_vfiprintf_r+0x3b0>
 80099b8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80099bc:	d0f1      	beq.n	80099a2 <_vfiprintf_r+0x3ba>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	9a02      	ldr	r2, [sp, #8]
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e7e8      	b.n	8009998 <_vfiprintf_r+0x3b0>
 80099c6:	f04a 0a10 	orr.w	sl, sl, #16
 80099ca:	f01a 0320 	ands.w	r3, sl, #32
 80099ce:	d01f      	beq.n	8009a10 <_vfiprintf_r+0x428>
 80099d0:	3407      	adds	r4, #7
 80099d2:	f024 0307 	bic.w	r3, r4, #7
 80099d6:	469b      	mov	fp, r3
 80099d8:	685d      	ldr	r5, [r3, #4]
 80099da:	f85b 4b08 	ldr.w	r4, [fp], #8
 80099de:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	3201      	adds	r2, #1
 80099ee:	f000 8262 	beq.w	8009eb6 <_vfiprintf_r+0x8ce>
 80099f2:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80099f6:	9204      	str	r2, [sp, #16]
 80099f8:	ea54 0205 	orrs.w	r2, r4, r5
 80099fc:	f040 8261 	bne.w	8009ec2 <_vfiprintf_r+0x8da>
 8009a00:	9a00      	ldr	r2, [sp, #0]
 8009a02:	2a00      	cmp	r2, #0
 8009a04:	f000 8199 	beq.w	8009d3a <_vfiprintf_r+0x752>
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	f040 825d 	bne.w	8009ec8 <_vfiprintf_r+0x8e0>
 8009a0e:	e139      	b.n	8009c84 <_vfiprintf_r+0x69c>
 8009a10:	46a3      	mov	fp, r4
 8009a12:	f01a 0510 	ands.w	r5, sl, #16
 8009a16:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009a1a:	d001      	beq.n	8009a20 <_vfiprintf_r+0x438>
 8009a1c:	461d      	mov	r5, r3
 8009a1e:	e7de      	b.n	80099de <_vfiprintf_r+0x3f6>
 8009a20:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8009a24:	d001      	beq.n	8009a2a <_vfiprintf_r+0x442>
 8009a26:	b2a4      	uxth	r4, r4
 8009a28:	e7d9      	b.n	80099de <_vfiprintf_r+0x3f6>
 8009a2a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009a2e:	d0d6      	beq.n	80099de <_vfiprintf_r+0x3f6>
 8009a30:	b2e4      	uxtb	r4, r4
 8009a32:	e7f3      	b.n	8009a1c <_vfiprintf_r+0x434>
 8009a34:	2330      	movs	r3, #48	; 0x30
 8009a36:	46a3      	mov	fp, r4
 8009a38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009a3c:	2378      	movs	r3, #120	; 0x78
 8009a3e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8009a42:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <_vfiprintf_r+0x46c>)
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	f04a 0a02 	orr.w	sl, sl, #2
 8009a50:	2302      	movs	r3, #2
 8009a52:	e7c7      	b.n	80099e4 <_vfiprintf_r+0x3fc>
 8009a54:	0800ece4 	.word	0x0800ece4
 8009a58:	9b00      	ldr	r3, [sp, #0]
 8009a5a:	46a3      	mov	fp, r4
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	1c5c      	adds	r4, r3, #1
 8009a60:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009a64:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009a68:	f000 80ce 	beq.w	8009c08 <_vfiprintf_r+0x620>
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7f6 fbb5 	bl	80001e0 <memchr>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f000 8174 	beq.w	8009d64 <_vfiprintf_r+0x77c>
 8009a7c:	eba0 0308 	sub.w	r3, r0, r8
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	42ab      	cmp	r3, r5
 8009a86:	bfb8      	it	lt
 8009a88:	462b      	movlt	r3, r5
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009a90:	b113      	cbz	r3, 8009a98 <_vfiprintf_r+0x4b0>
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	3301      	adds	r3, #1
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	f01a 0302 	ands.w	r3, sl, #2
 8009a9c:	9308      	str	r3, [sp, #32]
 8009a9e:	bf1e      	ittt	ne
 8009aa0:	9b04      	ldrne	r3, [sp, #16]
 8009aa2:	3302      	addne	r3, #2
 8009aa4:	9304      	strne	r3, [sp, #16]
 8009aa6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	d11f      	bne.n	8009aee <_vfiprintf_r+0x506>
 8009aae:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009ab2:	1a9c      	subs	r4, r3, r2
 8009ab4:	2c00      	cmp	r4, #0
 8009ab6:	dd1a      	ble.n	8009aee <_vfiprintf_r+0x506>
 8009ab8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009abc:	48aa      	ldr	r0, [pc, #680]	; (8009d68 <_vfiprintf_r+0x780>)
 8009abe:	6030      	str	r0, [r6, #0]
 8009ac0:	2c10      	cmp	r4, #16
 8009ac2:	f103 0301 	add.w	r3, r3, #1
 8009ac6:	f106 0108 	add.w	r1, r6, #8
 8009aca:	f300 8153 	bgt.w	8009d74 <_vfiprintf_r+0x78c>
 8009ace:	6074      	str	r4, [r6, #4]
 8009ad0:	2b07      	cmp	r3, #7
 8009ad2:	4414      	add	r4, r2
 8009ad4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009ad8:	f340 815e 	ble.w	8009d98 <_vfiprintf_r+0x7b0>
 8009adc:	aa0c      	add	r2, sp, #48	; 0x30
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4648      	mov	r0, r9
 8009ae2:	f7ff fd4f 	bl	8009584 <__sprint_r>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f040 81b7 	bne.w	8009e5a <_vfiprintf_r+0x872>
 8009aec:	ae0f      	add	r6, sp, #60	; 0x3c
 8009aee:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009af2:	b173      	cbz	r3, 8009b12 <_vfiprintf_r+0x52a>
 8009af4:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009afa:	6032      	str	r2, [r6, #0]
 8009afc:	2201      	movs	r2, #1
 8009afe:	6072      	str	r2, [r6, #4]
 8009b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b02:	3301      	adds	r3, #1
 8009b04:	3201      	adds	r2, #1
 8009b06:	2b07      	cmp	r3, #7
 8009b08:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009b0c:	f300 8146 	bgt.w	8009d9c <_vfiprintf_r+0x7b4>
 8009b10:	3608      	adds	r6, #8
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	b16b      	cbz	r3, 8009b32 <_vfiprintf_r+0x54a>
 8009b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1a:	6032      	str	r2, [r6, #0]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	6072      	str	r2, [r6, #4]
 8009b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b22:	3301      	adds	r3, #1
 8009b24:	3202      	adds	r2, #2
 8009b26:	2b07      	cmp	r3, #7
 8009b28:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009b2c:	f300 813f 	bgt.w	8009dae <_vfiprintf_r+0x7c6>
 8009b30:	3608      	adds	r6, #8
 8009b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d11f      	bne.n	8009b78 <_vfiprintf_r+0x590>
 8009b38:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009b3c:	1a9c      	subs	r4, r3, r2
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	dd1a      	ble.n	8009b78 <_vfiprintf_r+0x590>
 8009b42:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009b46:	4889      	ldr	r0, [pc, #548]	; (8009d6c <_vfiprintf_r+0x784>)
 8009b48:	6030      	str	r0, [r6, #0]
 8009b4a:	2c10      	cmp	r4, #16
 8009b4c:	f103 0301 	add.w	r3, r3, #1
 8009b50:	f106 0108 	add.w	r1, r6, #8
 8009b54:	f300 8134 	bgt.w	8009dc0 <_vfiprintf_r+0x7d8>
 8009b58:	6074      	str	r4, [r6, #4]
 8009b5a:	2b07      	cmp	r3, #7
 8009b5c:	4414      	add	r4, r2
 8009b5e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009b62:	f340 813f 	ble.w	8009de4 <_vfiprintf_r+0x7fc>
 8009b66:	aa0c      	add	r2, sp, #48	; 0x30
 8009b68:	4639      	mov	r1, r7
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f7ff fd0a 	bl	8009584 <__sprint_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	f040 8172 	bne.w	8009e5a <_vfiprintf_r+0x872>
 8009b76:	ae0f      	add	r6, sp, #60	; 0x3c
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	1aec      	subs	r4, r5, r3
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	dd1a      	ble.n	8009bb6 <_vfiprintf_r+0x5ce>
 8009b80:	4d7a      	ldr	r5, [pc, #488]	; (8009d6c <_vfiprintf_r+0x784>)
 8009b82:	6035      	str	r5, [r6, #0]
 8009b84:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8009b88:	2c10      	cmp	r4, #16
 8009b8a:	f103 0301 	add.w	r3, r3, #1
 8009b8e:	f106 0208 	add.w	r2, r6, #8
 8009b92:	f300 8129 	bgt.w	8009de8 <_vfiprintf_r+0x800>
 8009b96:	6074      	str	r4, [r6, #4]
 8009b98:	2b07      	cmp	r3, #7
 8009b9a:	440c      	add	r4, r1
 8009b9c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009ba0:	f340 8133 	ble.w	8009e0a <_vfiprintf_r+0x822>
 8009ba4:	aa0c      	add	r2, sp, #48	; 0x30
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	4648      	mov	r0, r9
 8009baa:	f7ff fceb 	bl	8009584 <__sprint_r>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	f040 8153 	bne.w	8009e5a <_vfiprintf_r+0x872>
 8009bb4:	ae0f      	add	r6, sp, #60	; 0x3c
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009bba:	6073      	str	r3, [r6, #4]
 8009bbc:	4418      	add	r0, r3
 8009bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc0:	f8c6 8000 	str.w	r8, [r6]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	2b07      	cmp	r3, #7
 8009bc8:	900e      	str	r0, [sp, #56]	; 0x38
 8009bca:	930d      	str	r3, [sp, #52]	; 0x34
 8009bcc:	f300 811f 	bgt.w	8009e0e <_vfiprintf_r+0x826>
 8009bd0:	f106 0308 	add.w	r3, r6, #8
 8009bd4:	f01a 0f04 	tst.w	sl, #4
 8009bd8:	f040 8121 	bne.w	8009e1e <_vfiprintf_r+0x836>
 8009bdc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009be0:	9904      	ldr	r1, [sp, #16]
 8009be2:	428a      	cmp	r2, r1
 8009be4:	bfac      	ite	ge
 8009be6:	189b      	addge	r3, r3, r2
 8009be8:	185b      	addlt	r3, r3, r1
 8009bea:	9302      	str	r3, [sp, #8]
 8009bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bee:	b13b      	cbz	r3, 8009c00 <_vfiprintf_r+0x618>
 8009bf0:	aa0c      	add	r2, sp, #48	; 0x30
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f7ff fcc5 	bl	8009584 <__sprint_r>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f040 812d 	bne.w	8009e5a <_vfiprintf_r+0x872>
 8009c00:	2300      	movs	r3, #0
 8009c02:	930d      	str	r3, [sp, #52]	; 0x34
 8009c04:	ae0f      	add	r6, sp, #60	; 0x3c
 8009c06:	e6c7      	b.n	8009998 <_vfiprintf_r+0x3b0>
 8009c08:	4640      	mov	r0, r8
 8009c0a:	f7f6 fae1 	bl	80001d0 <strlen>
 8009c0e:	9000      	str	r0, [sp, #0]
 8009c10:	e737      	b.n	8009a82 <_vfiprintf_r+0x49a>
 8009c12:	f04a 0a10 	orr.w	sl, sl, #16
 8009c16:	f01a 0320 	ands.w	r3, sl, #32
 8009c1a:	d008      	beq.n	8009c2e <_vfiprintf_r+0x646>
 8009c1c:	3407      	adds	r4, #7
 8009c1e:	f024 0307 	bic.w	r3, r4, #7
 8009c22:	469b      	mov	fp, r3
 8009c24:	685d      	ldr	r5, [r3, #4]
 8009c26:	f85b 4b08 	ldr.w	r4, [fp], #8
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e6da      	b.n	80099e4 <_vfiprintf_r+0x3fc>
 8009c2e:	46a3      	mov	fp, r4
 8009c30:	f01a 0510 	ands.w	r5, sl, #16
 8009c34:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009c38:	d001      	beq.n	8009c3e <_vfiprintf_r+0x656>
 8009c3a:	461d      	mov	r5, r3
 8009c3c:	e7f5      	b.n	8009c2a <_vfiprintf_r+0x642>
 8009c3e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8009c42:	d001      	beq.n	8009c48 <_vfiprintf_r+0x660>
 8009c44:	b2a4      	uxth	r4, r4
 8009c46:	e7f0      	b.n	8009c2a <_vfiprintf_r+0x642>
 8009c48:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009c4c:	d0ed      	beq.n	8009c2a <_vfiprintf_r+0x642>
 8009c4e:	b2e4      	uxtb	r4, r4
 8009c50:	e7f3      	b.n	8009c3a <_vfiprintf_r+0x652>
 8009c52:	4a47      	ldr	r2, [pc, #284]	; (8009d70 <_vfiprintf_r+0x788>)
 8009c54:	e5c5      	b.n	80097e2 <_vfiprintf_r+0x1fa>
 8009c56:	46a3      	mov	fp, r4
 8009c58:	f01a 0510 	ands.w	r5, sl, #16
 8009c5c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009c60:	d001      	beq.n	8009c66 <_vfiprintf_r+0x67e>
 8009c62:	4615      	mov	r5, r2
 8009c64:	e5c9      	b.n	80097fa <_vfiprintf_r+0x212>
 8009c66:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8009c6a:	d001      	beq.n	8009c70 <_vfiprintf_r+0x688>
 8009c6c:	b2a4      	uxth	r4, r4
 8009c6e:	e5c4      	b.n	80097fa <_vfiprintf_r+0x212>
 8009c70:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009c74:	f43f adc1 	beq.w	80097fa <_vfiprintf_r+0x212>
 8009c78:	b2e4      	uxtb	r4, r4
 8009c7a:	e7f2      	b.n	8009c62 <_vfiprintf_r+0x67a>
 8009c7c:	2c0a      	cmp	r4, #10
 8009c7e:	f175 0300 	sbcs.w	r3, r5, #0
 8009c82:	d205      	bcs.n	8009c90 <_vfiprintf_r+0x6a8>
 8009c84:	3430      	adds	r4, #48	; 0x30
 8009c86:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8009c8a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8009c8e:	e137      	b.n	8009f00 <_vfiprintf_r+0x918>
 8009c90:	ab38      	add	r3, sp, #224	; 0xe0
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c9a:	f04f 0a00 	mov.w	sl, #0
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009ca8:	4620      	mov	r0, r4
 8009caa:	2300      	movs	r3, #0
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 ffcb 	bl	8000c48 <__aeabi_uldivmod>
 8009cb2:	9b08      	ldr	r3, [sp, #32]
 8009cb4:	3230      	adds	r2, #48	; 0x30
 8009cb6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbc:	f10a 0a01 	add.w	sl, sl, #1
 8009cc0:	b1db      	cbz	r3, 8009cfa <_vfiprintf_r+0x712>
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	4553      	cmp	r3, sl
 8009cc8:	d117      	bne.n	8009cfa <_vfiprintf_r+0x712>
 8009cca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009cce:	d014      	beq.n	8009cfa <_vfiprintf_r+0x712>
 8009cd0:	2c0a      	cmp	r4, #10
 8009cd2:	f175 0300 	sbcs.w	r3, r5, #0
 8009cd6:	d310      	bcc.n	8009cfa <_vfiprintf_r+0x712>
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	eba8 0803 	sub.w	r8, r8, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	ee18 1a10 	vmov	r1, s16
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	f7ff f8e8 	bl	8008eba <strncpy>
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	b1a3      	cbz	r3, 8009d1a <_vfiprintf_r+0x732>
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	9306      	str	r3, [sp, #24]
 8009cf6:	f04f 0a00 	mov.w	sl, #0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	220a      	movs	r2, #10
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7f6 ffa1 	bl	8000c48 <__aeabi_uldivmod>
 8009d06:	2c0a      	cmp	r4, #10
 8009d08:	f175 0300 	sbcs.w	r3, r5, #0
 8009d0c:	f0c0 80f8 	bcc.w	8009f00 <_vfiprintf_r+0x918>
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	f8cd 8020 	str.w	r8, [sp, #32]
 8009d18:	e7c2      	b.n	8009ca0 <_vfiprintf_r+0x6b8>
 8009d1a:	469a      	mov	sl, r3
 8009d1c:	e7ed      	b.n	8009cfa <_vfiprintf_r+0x712>
 8009d1e:	f004 030f 	and.w	r3, r4, #15
 8009d22:	9a05      	ldr	r2, [sp, #20]
 8009d24:	0924      	lsrs	r4, r4, #4
 8009d26:	5cd3      	ldrb	r3, [r2, r3]
 8009d28:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009d2c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8009d30:	092d      	lsrs	r5, r5, #4
 8009d32:	ea54 0305 	orrs.w	r3, r4, r5
 8009d36:	d1f2      	bne.n	8009d1e <_vfiprintf_r+0x736>
 8009d38:	e0e2      	b.n	8009f00 <_vfiprintf_r+0x918>
 8009d3a:	b933      	cbnz	r3, 8009d4a <_vfiprintf_r+0x762>
 8009d3c:	f01a 0f01 	tst.w	sl, #1
 8009d40:	d003      	beq.n	8009d4a <_vfiprintf_r+0x762>
 8009d42:	2330      	movs	r3, #48	; 0x30
 8009d44:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8009d48:	e79f      	b.n	8009c8a <_vfiprintf_r+0x6a2>
 8009d4a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009d4e:	e0d7      	b.n	8009f00 <_vfiprintf_r+0x918>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 80a3 	beq.w	8009e9c <_vfiprintf_r+0x8b4>
 8009d56:	2100      	movs	r1, #0
 8009d58:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009d5c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009d60:	46a3      	mov	fp, r4
 8009d62:	e5da      	b.n	800991a <_vfiprintf_r+0x332>
 8009d64:	4605      	mov	r5, r0
 8009d66:	e68c      	b.n	8009a82 <_vfiprintf_r+0x49a>
 8009d68:	0800ef42 	.word	0x0800ef42
 8009d6c:	0800ef52 	.word	0x0800ef52
 8009d70:	0800ecf5 	.word	0x0800ecf5
 8009d74:	2010      	movs	r0, #16
 8009d76:	4402      	add	r2, r0
 8009d78:	2b07      	cmp	r3, #7
 8009d7a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009d7e:	6070      	str	r0, [r6, #4]
 8009d80:	dd07      	ble.n	8009d92 <_vfiprintf_r+0x7aa>
 8009d82:	aa0c      	add	r2, sp, #48	; 0x30
 8009d84:	4639      	mov	r1, r7
 8009d86:	4648      	mov	r0, r9
 8009d88:	f7ff fbfc 	bl	8009584 <__sprint_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d164      	bne.n	8009e5a <_vfiprintf_r+0x872>
 8009d90:	a90f      	add	r1, sp, #60	; 0x3c
 8009d92:	3c10      	subs	r4, #16
 8009d94:	460e      	mov	r6, r1
 8009d96:	e68f      	b.n	8009ab8 <_vfiprintf_r+0x4d0>
 8009d98:	460e      	mov	r6, r1
 8009d9a:	e6a8      	b.n	8009aee <_vfiprintf_r+0x506>
 8009d9c:	aa0c      	add	r2, sp, #48	; 0x30
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4648      	mov	r0, r9
 8009da2:	f7ff fbef 	bl	8009584 <__sprint_r>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d157      	bne.n	8009e5a <_vfiprintf_r+0x872>
 8009daa:	ae0f      	add	r6, sp, #60	; 0x3c
 8009dac:	e6b1      	b.n	8009b12 <_vfiprintf_r+0x52a>
 8009dae:	aa0c      	add	r2, sp, #48	; 0x30
 8009db0:	4639      	mov	r1, r7
 8009db2:	4648      	mov	r0, r9
 8009db4:	f7ff fbe6 	bl	8009584 <__sprint_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d14e      	bne.n	8009e5a <_vfiprintf_r+0x872>
 8009dbc:	ae0f      	add	r6, sp, #60	; 0x3c
 8009dbe:	e6b8      	b.n	8009b32 <_vfiprintf_r+0x54a>
 8009dc0:	2010      	movs	r0, #16
 8009dc2:	4402      	add	r2, r0
 8009dc4:	2b07      	cmp	r3, #7
 8009dc6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009dca:	6070      	str	r0, [r6, #4]
 8009dcc:	dd07      	ble.n	8009dde <_vfiprintf_r+0x7f6>
 8009dce:	aa0c      	add	r2, sp, #48	; 0x30
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	4648      	mov	r0, r9
 8009dd4:	f7ff fbd6 	bl	8009584 <__sprint_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d13e      	bne.n	8009e5a <_vfiprintf_r+0x872>
 8009ddc:	a90f      	add	r1, sp, #60	; 0x3c
 8009dde:	3c10      	subs	r4, #16
 8009de0:	460e      	mov	r6, r1
 8009de2:	e6ae      	b.n	8009b42 <_vfiprintf_r+0x55a>
 8009de4:	460e      	mov	r6, r1
 8009de6:	e6c7      	b.n	8009b78 <_vfiprintf_r+0x590>
 8009de8:	2010      	movs	r0, #16
 8009dea:	4401      	add	r1, r0
 8009dec:	2b07      	cmp	r3, #7
 8009dee:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009df2:	6070      	str	r0, [r6, #4]
 8009df4:	dd06      	ble.n	8009e04 <_vfiprintf_r+0x81c>
 8009df6:	aa0c      	add	r2, sp, #48	; 0x30
 8009df8:	4639      	mov	r1, r7
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f7ff fbc2 	bl	8009584 <__sprint_r>
 8009e00:	bb58      	cbnz	r0, 8009e5a <_vfiprintf_r+0x872>
 8009e02:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e04:	3c10      	subs	r4, #16
 8009e06:	4616      	mov	r6, r2
 8009e08:	e6bb      	b.n	8009b82 <_vfiprintf_r+0x59a>
 8009e0a:	4616      	mov	r6, r2
 8009e0c:	e6d3      	b.n	8009bb6 <_vfiprintf_r+0x5ce>
 8009e0e:	aa0c      	add	r2, sp, #48	; 0x30
 8009e10:	4639      	mov	r1, r7
 8009e12:	4648      	mov	r0, r9
 8009e14:	f7ff fbb6 	bl	8009584 <__sprint_r>
 8009e18:	b9f8      	cbnz	r0, 8009e5a <_vfiprintf_r+0x872>
 8009e1a:	ab0f      	add	r3, sp, #60	; 0x3c
 8009e1c:	e6da      	b.n	8009bd4 <_vfiprintf_r+0x5ec>
 8009e1e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009e22:	1a54      	subs	r4, r2, r1
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	f77f aed9 	ble.w	8009bdc <_vfiprintf_r+0x5f4>
 8009e2a:	4d39      	ldr	r5, [pc, #228]	; (8009f10 <_vfiprintf_r+0x928>)
 8009e2c:	2610      	movs	r6, #16
 8009e2e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009e32:	2c10      	cmp	r4, #16
 8009e34:	f102 0201 	add.w	r2, r2, #1
 8009e38:	601d      	str	r5, [r3, #0]
 8009e3a:	dc1d      	bgt.n	8009e78 <_vfiprintf_r+0x890>
 8009e3c:	605c      	str	r4, [r3, #4]
 8009e3e:	2a07      	cmp	r2, #7
 8009e40:	440c      	add	r4, r1
 8009e42:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8009e46:	f77f aec9 	ble.w	8009bdc <_vfiprintf_r+0x5f4>
 8009e4a:	aa0c      	add	r2, sp, #48	; 0x30
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	4648      	mov	r0, r9
 8009e50:	f7ff fb98 	bl	8009584 <__sprint_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f aec1 	beq.w	8009bdc <_vfiprintf_r+0x5f4>
 8009e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e5c:	07d9      	lsls	r1, r3, #31
 8009e5e:	d405      	bmi.n	8009e6c <_vfiprintf_r+0x884>
 8009e60:	89bb      	ldrh	r3, [r7, #12]
 8009e62:	059a      	lsls	r2, r3, #22
 8009e64:	d402      	bmi.n	8009e6c <_vfiprintf_r+0x884>
 8009e66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009e68:	f7fe fc5b 	bl	8008722 <__retarget_lock_release_recursive>
 8009e6c:	89bb      	ldrh	r3, [r7, #12]
 8009e6e:	065b      	lsls	r3, r3, #25
 8009e70:	f57f abed 	bpl.w	800964e <_vfiprintf_r+0x66>
 8009e74:	f7ff bbe8 	b.w	8009648 <_vfiprintf_r+0x60>
 8009e78:	3110      	adds	r1, #16
 8009e7a:	2a07      	cmp	r2, #7
 8009e7c:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8009e80:	605e      	str	r6, [r3, #4]
 8009e82:	dc02      	bgt.n	8009e8a <_vfiprintf_r+0x8a2>
 8009e84:	3308      	adds	r3, #8
 8009e86:	3c10      	subs	r4, #16
 8009e88:	e7d1      	b.n	8009e2e <_vfiprintf_r+0x846>
 8009e8a:	aa0c      	add	r2, sp, #48	; 0x30
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4648      	mov	r0, r9
 8009e90:	f7ff fb78 	bl	8009584 <__sprint_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d1e0      	bne.n	8009e5a <_vfiprintf_r+0x872>
 8009e98:	ab0f      	add	r3, sp, #60	; 0x3c
 8009e9a:	e7f4      	b.n	8009e86 <_vfiprintf_r+0x89e>
 8009e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e9e:	b913      	cbnz	r3, 8009ea6 <_vfiprintf_r+0x8be>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea4:	e7d9      	b.n	8009e5a <_vfiprintf_r+0x872>
 8009ea6:	aa0c      	add	r2, sp, #48	; 0x30
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4648      	mov	r0, r9
 8009eac:	f7ff fb6a 	bl	8009584 <__sprint_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0f5      	beq.n	8009ea0 <_vfiprintf_r+0x8b8>
 8009eb4:	e7d1      	b.n	8009e5a <_vfiprintf_r+0x872>
 8009eb6:	ea54 0205 	orrs.w	r2, r4, r5
 8009eba:	f8cd a010 	str.w	sl, [sp, #16]
 8009ebe:	f43f ada3 	beq.w	8009a08 <_vfiprintf_r+0x420>
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	f43f aeda 	beq.w	8009c7c <_vfiprintf_r+0x694>
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009ece:	f43f af26 	beq.w	8009d1e <_vfiprintf_r+0x736>
 8009ed2:	f004 0307 	and.w	r3, r4, #7
 8009ed6:	08e4      	lsrs	r4, r4, #3
 8009ed8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8009edc:	08ed      	lsrs	r5, r5, #3
 8009ede:	3330      	adds	r3, #48	; 0x30
 8009ee0:	ea54 0105 	orrs.w	r1, r4, r5
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009eea:	d1f2      	bne.n	8009ed2 <_vfiprintf_r+0x8ea>
 8009eec:	9904      	ldr	r1, [sp, #16]
 8009eee:	07c8      	lsls	r0, r1, #31
 8009ef0:	d506      	bpl.n	8009f00 <_vfiprintf_r+0x918>
 8009ef2:	2b30      	cmp	r3, #48	; 0x30
 8009ef4:	d004      	beq.n	8009f00 <_vfiprintf_r+0x918>
 8009ef6:	2330      	movs	r3, #48	; 0x30
 8009ef8:	f808 3c01 	strb.w	r3, [r8, #-1]
 8009efc:	f1a2 0802 	sub.w	r8, r2, #2
 8009f00:	ab38      	add	r3, sp, #224	; 0xe0
 8009f02:	eba3 0308 	sub.w	r3, r3, r8
 8009f06:	9d00      	ldr	r5, [sp, #0]
 8009f08:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	e5b8      	b.n	8009a82 <_vfiprintf_r+0x49a>
 8009f10:	0800ef42 	.word	0x0800ef42

08009f14 <__sbprintf>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	8989      	ldrh	r1, [r1, #12]
 8009f1a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8009f1e:	f021 0102 	bic.w	r1, r1, #2
 8009f22:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009f26:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009f28:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f2a:	89e1      	ldrh	r1, [r4, #14]
 8009f2c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009f30:	69e1      	ldr	r1, [r4, #28]
 8009f32:	9109      	str	r1, [sp, #36]	; 0x24
 8009f34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f36:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f38:	a91c      	add	r1, sp, #112	; 0x70
 8009f3a:	9102      	str	r1, [sp, #8]
 8009f3c:	9106      	str	r1, [sp, #24]
 8009f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f42:	4606      	mov	r6, r0
 8009f44:	9104      	str	r1, [sp, #16]
 8009f46:	9107      	str	r1, [sp, #28]
 8009f48:	a818      	add	r0, sp, #96	; 0x60
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	e9cd 3200 	strd	r3, r2, [sp]
 8009f50:	9108      	str	r1, [sp, #32]
 8009f52:	f7fe fbe3 	bl	800871c <__retarget_lock_init_recursive>
 8009f56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f5a:	a902      	add	r1, sp, #8
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff fb43 	bl	80095e8 <_vfiprintf_r>
 8009f62:	1e05      	subs	r5, r0, #0
 8009f64:	db07      	blt.n	8009f76 <__sbprintf+0x62>
 8009f66:	a902      	add	r1, sp, #8
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff fa2b 	bl	80093c4 <_fflush_r>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	bf18      	it	ne
 8009f72:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8009f76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8009f7a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009f7c:	065b      	lsls	r3, r3, #25
 8009f7e:	bf42      	ittt	mi
 8009f80:	89a3      	ldrhmi	r3, [r4, #12]
 8009f82:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009f86:	81a3      	strhmi	r3, [r4, #12]
 8009f88:	f7fe fbc9 	bl	800871e <__retarget_lock_close_recursive>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009f92:	bd70      	pop	{r4, r5, r6, pc}

08009f94 <__ascii_wctomb>:
 8009f94:	b149      	cbz	r1, 8009faa <__ascii_wctomb+0x16>
 8009f96:	2aff      	cmp	r2, #255	; 0xff
 8009f98:	bf85      	ittet	hi
 8009f9a:	238a      	movhi	r3, #138	; 0x8a
 8009f9c:	6003      	strhi	r3, [r0, #0]
 8009f9e:	700a      	strbls	r2, [r1, #0]
 8009fa0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fa4:	bf98      	it	ls
 8009fa6:	2001      	movls	r0, #1
 8009fa8:	4770      	bx	lr
 8009faa:	4608      	mov	r0, r1
 8009fac:	4770      	bx	lr

08009fae <abort>:
 8009fae:	b508      	push	{r3, lr}
 8009fb0:	2006      	movs	r0, #6
 8009fb2:	f000 f8bb 	bl	800a12c <raise>
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	f000 f974 	bl	800a2a4 <_exit>

08009fbc <__fputwc>:
 8009fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	460e      	mov	r6, r1
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	f7ff fa35 	bl	8009434 <__locale_mb_cur_max>
 8009fca:	2801      	cmp	r0, #1
 8009fcc:	d11c      	bne.n	800a008 <__fputwc+0x4c>
 8009fce:	1e73      	subs	r3, r6, #1
 8009fd0:	2bfe      	cmp	r3, #254	; 0xfe
 8009fd2:	d819      	bhi.n	800a008 <__fputwc+0x4c>
 8009fd4:	f88d 6004 	strb.w	r6, [sp, #4]
 8009fd8:	4604      	mov	r4, r0
 8009fda:	2700      	movs	r7, #0
 8009fdc:	f10d 0904 	add.w	r9, sp, #4
 8009fe0:	42a7      	cmp	r7, r4
 8009fe2:	d020      	beq.n	800a026 <__fputwc+0x6a>
 8009fe4:	68ab      	ldr	r3, [r5, #8]
 8009fe6:	f817 1009 	ldrb.w	r1, [r7, r9]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	60ab      	str	r3, [r5, #8]
 8009ff0:	da04      	bge.n	8009ffc <__fputwc+0x40>
 8009ff2:	69aa      	ldr	r2, [r5, #24]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	db1a      	blt.n	800a02e <__fputwc+0x72>
 8009ff8:	290a      	cmp	r1, #10
 8009ffa:	d018      	beq.n	800a02e <__fputwc+0x72>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	7019      	strb	r1, [r3, #0]
 800a004:	3701      	adds	r7, #1
 800a006:	e7eb      	b.n	8009fe0 <__fputwc+0x24>
 800a008:	a901      	add	r1, sp, #4
 800a00a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800a00e:	4632      	mov	r2, r6
 800a010:	4640      	mov	r0, r8
 800a012:	f000 f8f1 	bl	800a1f8 <_wcrtomb_r>
 800a016:	1c41      	adds	r1, r0, #1
 800a018:	4604      	mov	r4, r0
 800a01a:	d1de      	bne.n	8009fda <__fputwc+0x1e>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	81ab      	strh	r3, [r5, #12]
 800a024:	4606      	mov	r6, r0
 800a026:	4630      	mov	r0, r6
 800a028:	b003      	add	sp, #12
 800a02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a02e:	462a      	mov	r2, r5
 800a030:	4640      	mov	r0, r8
 800a032:	f000 f897 	bl	800a164 <__swbuf_r>
 800a036:	1c42      	adds	r2, r0, #1
 800a038:	d1e4      	bne.n	800a004 <__fputwc+0x48>
 800a03a:	4606      	mov	r6, r0
 800a03c:	e7f3      	b.n	800a026 <__fputwc+0x6a>

0800a03e <_fputwc_r>:
 800a03e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a042:	4614      	mov	r4, r2
 800a044:	07da      	lsls	r2, r3, #31
 800a046:	4605      	mov	r5, r0
 800a048:	d407      	bmi.n	800a05a <_fputwc_r+0x1c>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	059b      	lsls	r3, r3, #22
 800a04e:	d404      	bmi.n	800a05a <_fputwc_r+0x1c>
 800a050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a052:	9101      	str	r1, [sp, #4]
 800a054:	f7fe fb64 	bl	8008720 <__retarget_lock_acquire_recursive>
 800a058:	9901      	ldr	r1, [sp, #4]
 800a05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05e:	0498      	lsls	r0, r3, #18
 800a060:	d406      	bmi.n	800a070 <_fputwc_r+0x32>
 800a062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a06a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a06e:	6663      	str	r3, [r4, #100]	; 0x64
 800a070:	4622      	mov	r2, r4
 800a072:	4628      	mov	r0, r5
 800a074:	f7ff ffa2 	bl	8009fbc <__fputwc>
 800a078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a07a:	07da      	lsls	r2, r3, #31
 800a07c:	4605      	mov	r5, r0
 800a07e:	d405      	bmi.n	800a08c <_fputwc_r+0x4e>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	059b      	lsls	r3, r3, #22
 800a084:	d402      	bmi.n	800a08c <_fputwc_r+0x4e>
 800a086:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a088:	f7fe fb4b 	bl	8008722 <__retarget_lock_release_recursive>
 800a08c:	4628      	mov	r0, r5
 800a08e:	b003      	add	sp, #12
 800a090:	bd30      	pop	{r4, r5, pc}
	...

0800a094 <_fstat_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_fstat_r+0x20>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	f000 f8c7 	bl	800a234 <_fstat>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d102      	bne.n	800a0b0 <_fstat_r+0x1c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b103      	cbz	r3, 800a0b0 <_fstat_r+0x1c>
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200015b0 	.word	0x200015b0

0800a0b8 <_isatty_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	; (800a0d4 <_isatty_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f000 f8c6 	bl	800a254 <_isatty>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_isatty_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_isatty_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	200015b0 	.word	0x200015b0

0800a0d8 <_raise_r>:
 800a0d8:	291f      	cmp	r1, #31
 800a0da:	b538      	push	{r3, r4, r5, lr}
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	d904      	bls.n	800a0ec <_raise_r+0x14>
 800a0e2:	2316      	movs	r3, #22
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a0f0:	b112      	cbz	r2, 800a0f8 <_raise_r+0x20>
 800a0f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f6:	b94b      	cbnz	r3, 800a10c <_raise_r+0x34>
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 f831 	bl	800a160 <_getpid_r>
 800a0fe:	462a      	mov	r2, r5
 800a100:	4601      	mov	r1, r0
 800a102:	4620      	mov	r0, r4
 800a104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a108:	f000 b818 	b.w	800a13c <_kill_r>
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d00a      	beq.n	800a126 <_raise_r+0x4e>
 800a110:	1c59      	adds	r1, r3, #1
 800a112:	d103      	bne.n	800a11c <_raise_r+0x44>
 800a114:	2316      	movs	r3, #22
 800a116:	6003      	str	r3, [r0, #0]
 800a118:	2001      	movs	r0, #1
 800a11a:	e7e6      	b.n	800a0ea <_raise_r+0x12>
 800a11c:	2400      	movs	r4, #0
 800a11e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a122:	4628      	mov	r0, r5
 800a124:	4798      	blx	r3
 800a126:	2000      	movs	r0, #0
 800a128:	e7df      	b.n	800a0ea <_raise_r+0x12>
	...

0800a12c <raise>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <raise+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f7ff bfd1 	b.w	800a0d8 <_raise_r>
 800a136:	bf00      	nop
 800a138:	20000738 	.word	0x20000738

0800a13c <_kill_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	; (800a15c <_kill_r+0x20>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	f000 f88b 	bl	800a264 <_kill>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d102      	bne.n	800a158 <_kill_r+0x1c>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b103      	cbz	r3, 800a158 <_kill_r+0x1c>
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	200015b0 	.word	0x200015b0

0800a160 <_getpid_r>:
 800a160:	f000 b870 	b.w	800a244 <_getpid>

0800a164 <__swbuf_r>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	460e      	mov	r6, r1
 800a168:	4614      	mov	r4, r2
 800a16a:	4605      	mov	r5, r0
 800a16c:	b118      	cbz	r0, 800a176 <__swbuf_r+0x12>
 800a16e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a170:	b90b      	cbnz	r3, 800a176 <__swbuf_r+0x12>
 800a172:	f7fe f815 	bl	80081a0 <__sinit>
 800a176:	69a3      	ldr	r3, [r4, #24]
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	0719      	lsls	r1, r3, #28
 800a17e:	d529      	bpl.n	800a1d4 <__swbuf_r+0x70>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	b33b      	cbz	r3, 800a1d4 <__swbuf_r+0x70>
 800a184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a188:	b2f6      	uxtb	r6, r6
 800a18a:	049a      	lsls	r2, r3, #18
 800a18c:	4637      	mov	r7, r6
 800a18e:	d52a      	bpl.n	800a1e6 <__swbuf_r+0x82>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	6920      	ldr	r0, [r4, #16]
 800a194:	1a18      	subs	r0, r3, r0
 800a196:	6963      	ldr	r3, [r4, #20]
 800a198:	4283      	cmp	r3, r0
 800a19a:	dc04      	bgt.n	800a1a6 <__swbuf_r+0x42>
 800a19c:	4621      	mov	r1, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7ff f910 	bl	80093c4 <_fflush_r>
 800a1a4:	b9e0      	cbnz	r0, 800a1e0 <__swbuf_r+0x7c>
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	60a3      	str	r3, [r4, #8]
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	701e      	strb	r6, [r3, #0]
 800a1b4:	6962      	ldr	r2, [r4, #20]
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d004      	beq.n	800a1c6 <__swbuf_r+0x62>
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	07db      	lsls	r3, r3, #31
 800a1c0:	d506      	bpl.n	800a1d0 <__swbuf_r+0x6c>
 800a1c2:	2e0a      	cmp	r6, #10
 800a1c4:	d104      	bne.n	800a1d0 <__swbuf_r+0x6c>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f7ff f8fb 	bl	80093c4 <_fflush_r>
 800a1ce:	b938      	cbnz	r0, 800a1e0 <__swbuf_r+0x7c>
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7fe ff10 	bl	8008ffc <__swsetup_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d0d1      	beq.n	800a184 <__swbuf_r+0x20>
 800a1e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1e4:	e7f4      	b.n	800a1d0 <__swbuf_r+0x6c>
 800a1e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1f2:	6663      	str	r3, [r4, #100]	; 0x64
 800a1f4:	e7cc      	b.n	800a190 <__swbuf_r+0x2c>
	...

0800a1f8 <_wcrtomb_r>:
 800a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1fa:	4c09      	ldr	r4, [pc, #36]	; (800a220 <_wcrtomb_r+0x28>)
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800a202:	4605      	mov	r5, r0
 800a204:	461e      	mov	r6, r3
 800a206:	b909      	cbnz	r1, 800a20c <_wcrtomb_r+0x14>
 800a208:	460a      	mov	r2, r1
 800a20a:	a901      	add	r1, sp, #4
 800a20c:	47b8      	blx	r7
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	bf01      	itttt	eq
 800a212:	2300      	moveq	r3, #0
 800a214:	6033      	streq	r3, [r6, #0]
 800a216:	238a      	moveq	r3, #138	; 0x8a
 800a218:	602b      	streq	r3, [r5, #0]
 800a21a:	b005      	add	sp, #20
 800a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000f7c 	.word	0x20000f7c

0800a224 <_close>:
 800a224:	4b02      	ldr	r3, [pc, #8]	; (800a230 <_close+0xc>)
 800a226:	2258      	movs	r2, #88	; 0x58
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a22e:	4770      	bx	lr
 800a230:	200015b0 	.word	0x200015b0

0800a234 <_fstat>:
 800a234:	4b02      	ldr	r3, [pc, #8]	; (800a240 <_fstat+0xc>)
 800a236:	2258      	movs	r2, #88	; 0x58
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a23e:	4770      	bx	lr
 800a240:	200015b0 	.word	0x200015b0

0800a244 <_getpid>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <_getpid+0xc>)
 800a246:	2258      	movs	r2, #88	; 0x58
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a24e:	4770      	bx	lr
 800a250:	200015b0 	.word	0x200015b0

0800a254 <_isatty>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <_isatty+0xc>)
 800a256:	2258      	movs	r2, #88	; 0x58
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	2000      	movs	r0, #0
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	200015b0 	.word	0x200015b0

0800a264 <_kill>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <_kill+0xc>)
 800a266:	2258      	movs	r2, #88	; 0x58
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26e:	4770      	bx	lr
 800a270:	200015b0 	.word	0x200015b0

0800a274 <_lseek>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <_lseek+0xc>)
 800a276:	2258      	movs	r2, #88	; 0x58
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a27e:	4770      	bx	lr
 800a280:	200015b0 	.word	0x200015b0

0800a284 <_read>:
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <_read+0xc>)
 800a286:	2258      	movs	r2, #88	; 0x58
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a28e:	4770      	bx	lr
 800a290:	200015b0 	.word	0x200015b0

0800a294 <_write>:
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <_write+0xc>)
 800a296:	2258      	movs	r2, #88	; 0x58
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a29e:	4770      	bx	lr
 800a2a0:	200015b0 	.word	0x200015b0

0800a2a4 <_exit>:
 800a2a4:	e7fe      	b.n	800a2a4 <_exit>
	...

0800a2a8 <_init>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_fini>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr
